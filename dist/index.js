(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
	typeof define === 'function' && define.amd ? define(['exports'], factory) :
	(global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.presenter = {}));
})(this, (function (exports) { 'use strict';

	var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

	var lodash_keyby = {exports: {}};

	/**
	 * lodash (Custom Build) <https://lodash.com/>
	 * Build: `lodash modularize exports="npm" -o ./`
	 * Copyright jQuery Foundation and other contributors <https://jquery.org/>
	 * Released under MIT license <https://lodash.com/license>
	 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
	 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
	 */

	(function (module, exports) {
		/** Used as the size to enable large array optimizations. */
		var LARGE_ARRAY_SIZE = 200;

		/** Used as the `TypeError` message for "Functions" methods. */
		var FUNC_ERROR_TEXT = 'Expected a function';

		/** Used to stand-in for `undefined` hash values. */
		var HASH_UNDEFINED = '__lodash_hash_undefined__';

		/** Used to compose bitmasks for comparison styles. */
		var UNORDERED_COMPARE_FLAG = 1,
		    PARTIAL_COMPARE_FLAG = 2;

		/** Used as references for various `Number` constants. */
		var INFINITY = 1 / 0,
		    MAX_SAFE_INTEGER = 9007199254740991;

		/** `Object#toString` result references. */
		var argsTag = '[object Arguments]',
		    arrayTag = '[object Array]',
		    boolTag = '[object Boolean]',
		    dateTag = '[object Date]',
		    errorTag = '[object Error]',
		    funcTag = '[object Function]',
		    genTag = '[object GeneratorFunction]',
		    mapTag = '[object Map]',
		    numberTag = '[object Number]',
		    objectTag = '[object Object]',
		    promiseTag = '[object Promise]',
		    regexpTag = '[object RegExp]',
		    setTag = '[object Set]',
		    stringTag = '[object String]',
		    symbolTag = '[object Symbol]',
		    weakMapTag = '[object WeakMap]';

		var arrayBufferTag = '[object ArrayBuffer]',
		    dataViewTag = '[object DataView]',
		    float32Tag = '[object Float32Array]',
		    float64Tag = '[object Float64Array]',
		    int8Tag = '[object Int8Array]',
		    int16Tag = '[object Int16Array]',
		    int32Tag = '[object Int32Array]',
		    uint8Tag = '[object Uint8Array]',
		    uint8ClampedTag = '[object Uint8ClampedArray]',
		    uint16Tag = '[object Uint16Array]',
		    uint32Tag = '[object Uint32Array]';

		/** Used to match property names within property paths. */
		var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
		    reIsPlainProp = /^\w*$/,
		    reLeadingDot = /^\./,
		    rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

		/**
		 * Used to match `RegExp`
		 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
		 */
		var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

		/** Used to match backslashes in property paths. */
		var reEscapeChar = /\\(\\)?/g;

		/** Used to detect host constructors (Safari). */
		var reIsHostCtor = /^\[object .+?Constructor\]$/;

		/** Used to detect unsigned integer values. */
		var reIsUint = /^(?:0|[1-9]\d*)$/;

		/** Used to identify `toStringTag` values of typed arrays. */
		var typedArrayTags = {};
		typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
		typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
		typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
		typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
		typedArrayTags[uint32Tag] = true;
		typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
		typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
		typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
		typedArrayTags[errorTag] = typedArrayTags[funcTag] =
		typedArrayTags[mapTag] = typedArrayTags[numberTag] =
		typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
		typedArrayTags[setTag] = typedArrayTags[stringTag] =
		typedArrayTags[weakMapTag] = false;

		/** Detect free variable `global` from Node.js. */
		var freeGlobal = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;

		/** Detect free variable `self`. */
		var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

		/** Used as a reference to the global object. */
		var root = freeGlobal || freeSelf || Function('return this')();

		/** Detect free variable `exports`. */
		var freeExports = exports && !exports.nodeType && exports;

		/** Detect free variable `module`. */
		var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;

		/** Detect the popular CommonJS extension `module.exports`. */
		var moduleExports = freeModule && freeModule.exports === freeExports;

		/** Detect free variable `process` from Node.js. */
		var freeProcess = moduleExports && freeGlobal.process;

		/** Used to access faster Node.js helpers. */
		var nodeUtil = (function() {
		  try {
		    return freeProcess && freeProcess.binding('util');
		  } catch (e) {}
		}());

		/* Node.js helper references. */
		var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

		/**
		 * A specialized version of `baseAggregator` for arrays.
		 *
		 * @private
		 * @param {Array} [array] The array to iterate over.
		 * @param {Function} setter The function to set `accumulator` values.
		 * @param {Function} iteratee The iteratee to transform keys.
		 * @param {Object} accumulator The initial aggregated object.
		 * @returns {Function} Returns `accumulator`.
		 */
		function arrayAggregator(array, setter, iteratee, accumulator) {
		  var index = -1,
		      length = array ? array.length : 0;

		  while (++index < length) {
		    var value = array[index];
		    setter(accumulator, value, iteratee(value), array);
		  }
		  return accumulator;
		}

		/**
		 * A specialized version of `_.some` for arrays without support for iteratee
		 * shorthands.
		 *
		 * @private
		 * @param {Array} [array] The array to iterate over.
		 * @param {Function} predicate The function invoked per iteration.
		 * @returns {boolean} Returns `true` if any element passes the predicate check,
		 *  else `false`.
		 */
		function arraySome(array, predicate) {
		  var index = -1,
		      length = array ? array.length : 0;

		  while (++index < length) {
		    if (predicate(array[index], index, array)) {
		      return true;
		    }
		  }
		  return false;
		}

		/**
		 * The base implementation of `_.property` without support for deep paths.
		 *
		 * @private
		 * @param {string} key The key of the property to get.
		 * @returns {Function} Returns the new accessor function.
		 */
		function baseProperty(key) {
		  return function(object) {
		    return object == null ? undefined : object[key];
		  };
		}

		/**
		 * The base implementation of `_.times` without support for iteratee shorthands
		 * or max array length checks.
		 *
		 * @private
		 * @param {number} n The number of times to invoke `iteratee`.
		 * @param {Function} iteratee The function invoked per iteration.
		 * @returns {Array} Returns the array of results.
		 */
		function baseTimes(n, iteratee) {
		  var index = -1,
		      result = Array(n);

		  while (++index < n) {
		    result[index] = iteratee(index);
		  }
		  return result;
		}

		/**
		 * The base implementation of `_.unary` without support for storing metadata.
		 *
		 * @private
		 * @param {Function} func The function to cap arguments for.
		 * @returns {Function} Returns the new capped function.
		 */
		function baseUnary(func) {
		  return function(value) {
		    return func(value);
		  };
		}

		/**
		 * Gets the value at `key` of `object`.
		 *
		 * @private
		 * @param {Object} [object] The object to query.
		 * @param {string} key The key of the property to get.
		 * @returns {*} Returns the property value.
		 */
		function getValue(object, key) {
		  return object == null ? undefined : object[key];
		}

		/**
		 * Checks if `value` is a host object in IE < 9.
		 *
		 * @private
		 * @param {*} value The value to check.
		 * @returns {boolean} Returns `true` if `value` is a host object, else `false`.
		 */
		function isHostObject(value) {
		  // Many host objects are `Object` objects that can coerce to strings
		  // despite having improperly defined `toString` methods.
		  var result = false;
		  if (value != null && typeof value.toString != 'function') {
		    try {
		      result = !!(value + '');
		    } catch (e) {}
		  }
		  return result;
		}

		/**
		 * Converts `map` to its key-value pairs.
		 *
		 * @private
		 * @param {Object} map The map to convert.
		 * @returns {Array} Returns the key-value pairs.
		 */
		function mapToArray(map) {
		  var index = -1,
		      result = Array(map.size);

		  map.forEach(function(value, key) {
		    result[++index] = [key, value];
		  });
		  return result;
		}

		/**
		 * Creates a unary function that invokes `func` with its argument transformed.
		 *
		 * @private
		 * @param {Function} func The function to wrap.
		 * @param {Function} transform The argument transform.
		 * @returns {Function} Returns the new function.
		 */
		function overArg(func, transform) {
		  return function(arg) {
		    return func(transform(arg));
		  };
		}

		/**
		 * Converts `set` to an array of its values.
		 *
		 * @private
		 * @param {Object} set The set to convert.
		 * @returns {Array} Returns the values.
		 */
		function setToArray(set) {
		  var index = -1,
		      result = Array(set.size);

		  set.forEach(function(value) {
		    result[++index] = value;
		  });
		  return result;
		}

		/** Used for built-in method references. */
		var arrayProto = Array.prototype,
		    funcProto = Function.prototype,
		    objectProto = Object.prototype;

		/** Used to detect overreaching core-js shims. */
		var coreJsData = root['__core-js_shared__'];

		/** Used to detect methods masquerading as native. */
		var maskSrcKey = (function() {
		  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
		  return uid ? ('Symbol(src)_1.' + uid) : '';
		}());

		/** Used to resolve the decompiled source of functions. */
		var funcToString = funcProto.toString;

		/** Used to check objects for own properties. */
		var hasOwnProperty = objectProto.hasOwnProperty;

		/**
		 * Used to resolve the
		 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
		 * of values.
		 */
		var objectToString = objectProto.toString;

		/** Used to detect if a method is native. */
		var reIsNative = RegExp('^' +
		  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
		  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
		);

		/** Built-in value references. */
		var Symbol = root.Symbol,
		    Uint8Array = root.Uint8Array,
		    propertyIsEnumerable = objectProto.propertyIsEnumerable,
		    splice = arrayProto.splice;

		/* Built-in method references for those with the same name as other `lodash` methods. */
		var nativeKeys = overArg(Object.keys, Object);

		/* Built-in method references that are verified to be native. */
		var DataView = getNative(root, 'DataView'),
		    Map = getNative(root, 'Map'),
		    Promise = getNative(root, 'Promise'),
		    Set = getNative(root, 'Set'),
		    WeakMap = getNative(root, 'WeakMap'),
		    nativeCreate = getNative(Object, 'create');

		/** Used to detect maps, sets, and weakmaps. */
		var dataViewCtorString = toSource(DataView),
		    mapCtorString = toSource(Map),
		    promiseCtorString = toSource(Promise),
		    setCtorString = toSource(Set),
		    weakMapCtorString = toSource(WeakMap);

		/** Used to convert symbols to primitives and strings. */
		var symbolProto = Symbol ? Symbol.prototype : undefined,
		    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined,
		    symbolToString = symbolProto ? symbolProto.toString : undefined;

		/**
		 * Creates a hash object.
		 *
		 * @private
		 * @constructor
		 * @param {Array} [entries] The key-value pairs to cache.
		 */
		function Hash(entries) {
		  var index = -1,
		      length = entries ? entries.length : 0;

		  this.clear();
		  while (++index < length) {
		    var entry = entries[index];
		    this.set(entry[0], entry[1]);
		  }
		}

		/**
		 * Removes all key-value entries from the hash.
		 *
		 * @private
		 * @name clear
		 * @memberOf Hash
		 */
		function hashClear() {
		  this.__data__ = nativeCreate ? nativeCreate(null) : {};
		}

		/**
		 * Removes `key` and its value from the hash.
		 *
		 * @private
		 * @name delete
		 * @memberOf Hash
		 * @param {Object} hash The hash to modify.
		 * @param {string} key The key of the value to remove.
		 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
		 */
		function hashDelete(key) {
		  return this.has(key) && delete this.__data__[key];
		}

		/**
		 * Gets the hash value for `key`.
		 *
		 * @private
		 * @name get
		 * @memberOf Hash
		 * @param {string} key The key of the value to get.
		 * @returns {*} Returns the entry value.
		 */
		function hashGet(key) {
		  var data = this.__data__;
		  if (nativeCreate) {
		    var result = data[key];
		    return result === HASH_UNDEFINED ? undefined : result;
		  }
		  return hasOwnProperty.call(data, key) ? data[key] : undefined;
		}

		/**
		 * Checks if a hash value for `key` exists.
		 *
		 * @private
		 * @name has
		 * @memberOf Hash
		 * @param {string} key The key of the entry to check.
		 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
		 */
		function hashHas(key) {
		  var data = this.__data__;
		  return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);
		}

		/**
		 * Sets the hash `key` to `value`.
		 *
		 * @private
		 * @name set
		 * @memberOf Hash
		 * @param {string} key The key of the value to set.
		 * @param {*} value The value to set.
		 * @returns {Object} Returns the hash instance.
		 */
		function hashSet(key, value) {
		  var data = this.__data__;
		  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
		  return this;
		}

		// Add methods to `Hash`.
		Hash.prototype.clear = hashClear;
		Hash.prototype['delete'] = hashDelete;
		Hash.prototype.get = hashGet;
		Hash.prototype.has = hashHas;
		Hash.prototype.set = hashSet;

		/**
		 * Creates an list cache object.
		 *
		 * @private
		 * @constructor
		 * @param {Array} [entries] The key-value pairs to cache.
		 */
		function ListCache(entries) {
		  var index = -1,
		      length = entries ? entries.length : 0;

		  this.clear();
		  while (++index < length) {
		    var entry = entries[index];
		    this.set(entry[0], entry[1]);
		  }
		}

		/**
		 * Removes all key-value entries from the list cache.
		 *
		 * @private
		 * @name clear
		 * @memberOf ListCache
		 */
		function listCacheClear() {
		  this.__data__ = [];
		}

		/**
		 * Removes `key` and its value from the list cache.
		 *
		 * @private
		 * @name delete
		 * @memberOf ListCache
		 * @param {string} key The key of the value to remove.
		 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
		 */
		function listCacheDelete(key) {
		  var data = this.__data__,
		      index = assocIndexOf(data, key);

		  if (index < 0) {
		    return false;
		  }
		  var lastIndex = data.length - 1;
		  if (index == lastIndex) {
		    data.pop();
		  } else {
		    splice.call(data, index, 1);
		  }
		  return true;
		}

		/**
		 * Gets the list cache value for `key`.
		 *
		 * @private
		 * @name get
		 * @memberOf ListCache
		 * @param {string} key The key of the value to get.
		 * @returns {*} Returns the entry value.
		 */
		function listCacheGet(key) {
		  var data = this.__data__,
		      index = assocIndexOf(data, key);

		  return index < 0 ? undefined : data[index][1];
		}

		/**
		 * Checks if a list cache value for `key` exists.
		 *
		 * @private
		 * @name has
		 * @memberOf ListCache
		 * @param {string} key The key of the entry to check.
		 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
		 */
		function listCacheHas(key) {
		  return assocIndexOf(this.__data__, key) > -1;
		}

		/**
		 * Sets the list cache `key` to `value`.
		 *
		 * @private
		 * @name set
		 * @memberOf ListCache
		 * @param {string} key The key of the value to set.
		 * @param {*} value The value to set.
		 * @returns {Object} Returns the list cache instance.
		 */
		function listCacheSet(key, value) {
		  var data = this.__data__,
		      index = assocIndexOf(data, key);

		  if (index < 0) {
		    data.push([key, value]);
		  } else {
		    data[index][1] = value;
		  }
		  return this;
		}

		// Add methods to `ListCache`.
		ListCache.prototype.clear = listCacheClear;
		ListCache.prototype['delete'] = listCacheDelete;
		ListCache.prototype.get = listCacheGet;
		ListCache.prototype.has = listCacheHas;
		ListCache.prototype.set = listCacheSet;

		/**
		 * Creates a map cache object to store key-value pairs.
		 *
		 * @private
		 * @constructor
		 * @param {Array} [entries] The key-value pairs to cache.
		 */
		function MapCache(entries) {
		  var index = -1,
		      length = entries ? entries.length : 0;

		  this.clear();
		  while (++index < length) {
		    var entry = entries[index];
		    this.set(entry[0], entry[1]);
		  }
		}

		/**
		 * Removes all key-value entries from the map.
		 *
		 * @private
		 * @name clear
		 * @memberOf MapCache
		 */
		function mapCacheClear() {
		  this.__data__ = {
		    'hash': new Hash,
		    'map': new (Map || ListCache),
		    'string': new Hash
		  };
		}

		/**
		 * Removes `key` and its value from the map.
		 *
		 * @private
		 * @name delete
		 * @memberOf MapCache
		 * @param {string} key The key of the value to remove.
		 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
		 */
		function mapCacheDelete(key) {
		  return getMapData(this, key)['delete'](key);
		}

		/**
		 * Gets the map value for `key`.
		 *
		 * @private
		 * @name get
		 * @memberOf MapCache
		 * @param {string} key The key of the value to get.
		 * @returns {*} Returns the entry value.
		 */
		function mapCacheGet(key) {
		  return getMapData(this, key).get(key);
		}

		/**
		 * Checks if a map value for `key` exists.
		 *
		 * @private
		 * @name has
		 * @memberOf MapCache
		 * @param {string} key The key of the entry to check.
		 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
		 */
		function mapCacheHas(key) {
		  return getMapData(this, key).has(key);
		}

		/**
		 * Sets the map `key` to `value`.
		 *
		 * @private
		 * @name set
		 * @memberOf MapCache
		 * @param {string} key The key of the value to set.
		 * @param {*} value The value to set.
		 * @returns {Object} Returns the map cache instance.
		 */
		function mapCacheSet(key, value) {
		  getMapData(this, key).set(key, value);
		  return this;
		}

		// Add methods to `MapCache`.
		MapCache.prototype.clear = mapCacheClear;
		MapCache.prototype['delete'] = mapCacheDelete;
		MapCache.prototype.get = mapCacheGet;
		MapCache.prototype.has = mapCacheHas;
		MapCache.prototype.set = mapCacheSet;

		/**
		 *
		 * Creates an array cache object to store unique values.
		 *
		 * @private
		 * @constructor
		 * @param {Array} [values] The values to cache.
		 */
		function SetCache(values) {
		  var index = -1,
		      length = values ? values.length : 0;

		  this.__data__ = new MapCache;
		  while (++index < length) {
		    this.add(values[index]);
		  }
		}

		/**
		 * Adds `value` to the array cache.
		 *
		 * @private
		 * @name add
		 * @memberOf SetCache
		 * @alias push
		 * @param {*} value The value to cache.
		 * @returns {Object} Returns the cache instance.
		 */
		function setCacheAdd(value) {
		  this.__data__.set(value, HASH_UNDEFINED);
		  return this;
		}

		/**
		 * Checks if `value` is in the array cache.
		 *
		 * @private
		 * @name has
		 * @memberOf SetCache
		 * @param {*} value The value to search for.
		 * @returns {number} Returns `true` if `value` is found, else `false`.
		 */
		function setCacheHas(value) {
		  return this.__data__.has(value);
		}

		// Add methods to `SetCache`.
		SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
		SetCache.prototype.has = setCacheHas;

		/**
		 * Creates a stack cache object to store key-value pairs.
		 *
		 * @private
		 * @constructor
		 * @param {Array} [entries] The key-value pairs to cache.
		 */
		function Stack(entries) {
		  this.__data__ = new ListCache(entries);
		}

		/**
		 * Removes all key-value entries from the stack.
		 *
		 * @private
		 * @name clear
		 * @memberOf Stack
		 */
		function stackClear() {
		  this.__data__ = new ListCache;
		}

		/**
		 * Removes `key` and its value from the stack.
		 *
		 * @private
		 * @name delete
		 * @memberOf Stack
		 * @param {string} key The key of the value to remove.
		 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
		 */
		function stackDelete(key) {
		  return this.__data__['delete'](key);
		}

		/**
		 * Gets the stack value for `key`.
		 *
		 * @private
		 * @name get
		 * @memberOf Stack
		 * @param {string} key The key of the value to get.
		 * @returns {*} Returns the entry value.
		 */
		function stackGet(key) {
		  return this.__data__.get(key);
		}

		/**
		 * Checks if a stack value for `key` exists.
		 *
		 * @private
		 * @name has
		 * @memberOf Stack
		 * @param {string} key The key of the entry to check.
		 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
		 */
		function stackHas(key) {
		  return this.__data__.has(key);
		}

		/**
		 * Sets the stack `key` to `value`.
		 *
		 * @private
		 * @name set
		 * @memberOf Stack
		 * @param {string} key The key of the value to set.
		 * @param {*} value The value to set.
		 * @returns {Object} Returns the stack cache instance.
		 */
		function stackSet(key, value) {
		  var cache = this.__data__;
		  if (cache instanceof ListCache) {
		    var pairs = cache.__data__;
		    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
		      pairs.push([key, value]);
		      return this;
		    }
		    cache = this.__data__ = new MapCache(pairs);
		  }
		  cache.set(key, value);
		  return this;
		}

		// Add methods to `Stack`.
		Stack.prototype.clear = stackClear;
		Stack.prototype['delete'] = stackDelete;
		Stack.prototype.get = stackGet;
		Stack.prototype.has = stackHas;
		Stack.prototype.set = stackSet;

		/**
		 * Creates an array of the enumerable property names of the array-like `value`.
		 *
		 * @private
		 * @param {*} value The value to query.
		 * @param {boolean} inherited Specify returning inherited property names.
		 * @returns {Array} Returns the array of property names.
		 */
		function arrayLikeKeys(value, inherited) {
		  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.
		  // Safari 9 makes `arguments.length` enumerable in strict mode.
		  var result = (isArray(value) || isArguments(value))
		    ? baseTimes(value.length, String)
		    : [];

		  var length = result.length,
		      skipIndexes = !!length;

		  for (var key in value) {
		    if ((inherited || hasOwnProperty.call(value, key)) &&
		        !(skipIndexes && (key == 'length' || isIndex(key, length)))) {
		      result.push(key);
		    }
		  }
		  return result;
		}

		/**
		 * Gets the index at which the `key` is found in `array` of key-value pairs.
		 *
		 * @private
		 * @param {Array} array The array to inspect.
		 * @param {*} key The key to search for.
		 * @returns {number} Returns the index of the matched value, else `-1`.
		 */
		function assocIndexOf(array, key) {
		  var length = array.length;
		  while (length--) {
		    if (eq(array[length][0], key)) {
		      return length;
		    }
		  }
		  return -1;
		}

		/**
		 * Aggregates elements of `collection` on `accumulator` with keys transformed
		 * by `iteratee` and values set by `setter`.
		 *
		 * @private
		 * @param {Array|Object} collection The collection to iterate over.
		 * @param {Function} setter The function to set `accumulator` values.
		 * @param {Function} iteratee The iteratee to transform keys.
		 * @param {Object} accumulator The initial aggregated object.
		 * @returns {Function} Returns `accumulator`.
		 */
		function baseAggregator(collection, setter, iteratee, accumulator) {
		  baseEach(collection, function(value, key, collection) {
		    setter(accumulator, value, iteratee(value), collection);
		  });
		  return accumulator;
		}

		/**
		 * The base implementation of `_.forEach` without support for iteratee shorthands.
		 *
		 * @private
		 * @param {Array|Object} collection The collection to iterate over.
		 * @param {Function} iteratee The function invoked per iteration.
		 * @returns {Array|Object} Returns `collection`.
		 */
		var baseEach = createBaseEach(baseForOwn);

		/**
		 * The base implementation of `baseForOwn` which iterates over `object`
		 * properties returned by `keysFunc` and invokes `iteratee` for each property.
		 * Iteratee functions may exit iteration early by explicitly returning `false`.
		 *
		 * @private
		 * @param {Object} object The object to iterate over.
		 * @param {Function} iteratee The function invoked per iteration.
		 * @param {Function} keysFunc The function to get the keys of `object`.
		 * @returns {Object} Returns `object`.
		 */
		var baseFor = createBaseFor();

		/**
		 * The base implementation of `_.forOwn` without support for iteratee shorthands.
		 *
		 * @private
		 * @param {Object} object The object to iterate over.
		 * @param {Function} iteratee The function invoked per iteration.
		 * @returns {Object} Returns `object`.
		 */
		function baseForOwn(object, iteratee) {
		  return object && baseFor(object, iteratee, keys);
		}

		/**
		 * The base implementation of `_.get` without support for default values.
		 *
		 * @private
		 * @param {Object} object The object to query.
		 * @param {Array|string} path The path of the property to get.
		 * @returns {*} Returns the resolved value.
		 */
		function baseGet(object, path) {
		  path = isKey(path, object) ? [path] : castPath(path);

		  var index = 0,
		      length = path.length;

		  while (object != null && index < length) {
		    object = object[toKey(path[index++])];
		  }
		  return (index && index == length) ? object : undefined;
		}

		/**
		 * The base implementation of `getTag`.
		 *
		 * @private
		 * @param {*} value The value to query.
		 * @returns {string} Returns the `toStringTag`.
		 */
		function baseGetTag(value) {
		  return objectToString.call(value);
		}

		/**
		 * The base implementation of `_.hasIn` without support for deep paths.
		 *
		 * @private
		 * @param {Object} [object] The object to query.
		 * @param {Array|string} key The key to check.
		 * @returns {boolean} Returns `true` if `key` exists, else `false`.
		 */
		function baseHasIn(object, key) {
		  return object != null && key in Object(object);
		}

		/**
		 * The base implementation of `_.isEqual` which supports partial comparisons
		 * and tracks traversed objects.
		 *
		 * @private
		 * @param {*} value The value to compare.
		 * @param {*} other The other value to compare.
		 * @param {Function} [customizer] The function to customize comparisons.
		 * @param {boolean} [bitmask] The bitmask of comparison flags.
		 *  The bitmask may be composed of the following flags:
		 *     1 - Unordered comparison
		 *     2 - Partial comparison
		 * @param {Object} [stack] Tracks traversed `value` and `other` objects.
		 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
		 */
		function baseIsEqual(value, other, customizer, bitmask, stack) {
		  if (value === other) {
		    return true;
		  }
		  if (value == null || other == null || (!isObject(value) && !isObjectLike(other))) {
		    return value !== value && other !== other;
		  }
		  return baseIsEqualDeep(value, other, baseIsEqual, customizer, bitmask, stack);
		}

		/**
		 * A specialized version of `baseIsEqual` for arrays and objects which performs
		 * deep comparisons and tracks traversed objects enabling objects with circular
		 * references to be compared.
		 *
		 * @private
		 * @param {Object} object The object to compare.
		 * @param {Object} other The other object to compare.
		 * @param {Function} equalFunc The function to determine equivalents of values.
		 * @param {Function} [customizer] The function to customize comparisons.
		 * @param {number} [bitmask] The bitmask of comparison flags. See `baseIsEqual`
		 *  for more details.
		 * @param {Object} [stack] Tracks traversed `object` and `other` objects.
		 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
		 */
		function baseIsEqualDeep(object, other, equalFunc, customizer, bitmask, stack) {
		  var objIsArr = isArray(object),
		      othIsArr = isArray(other),
		      objTag = arrayTag,
		      othTag = arrayTag;

		  if (!objIsArr) {
		    objTag = getTag(object);
		    objTag = objTag == argsTag ? objectTag : objTag;
		  }
		  if (!othIsArr) {
		    othTag = getTag(other);
		    othTag = othTag == argsTag ? objectTag : othTag;
		  }
		  var objIsObj = objTag == objectTag && !isHostObject(object),
		      othIsObj = othTag == objectTag && !isHostObject(other),
		      isSameTag = objTag == othTag;

		  if (isSameTag && !objIsObj) {
		    stack || (stack = new Stack);
		    return (objIsArr || isTypedArray(object))
		      ? equalArrays(object, other, equalFunc, customizer, bitmask, stack)
		      : equalByTag(object, other, objTag, equalFunc, customizer, bitmask, stack);
		  }
		  if (!(bitmask & PARTIAL_COMPARE_FLAG)) {
		    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
		        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

		    if (objIsWrapped || othIsWrapped) {
		      var objUnwrapped = objIsWrapped ? object.value() : object,
		          othUnwrapped = othIsWrapped ? other.value() : other;

		      stack || (stack = new Stack);
		      return equalFunc(objUnwrapped, othUnwrapped, customizer, bitmask, stack);
		    }
		  }
		  if (!isSameTag) {
		    return false;
		  }
		  stack || (stack = new Stack);
		  return equalObjects(object, other, equalFunc, customizer, bitmask, stack);
		}

		/**
		 * The base implementation of `_.isMatch` without support for iteratee shorthands.
		 *
		 * @private
		 * @param {Object} object The object to inspect.
		 * @param {Object} source The object of property values to match.
		 * @param {Array} matchData The property names, values, and compare flags to match.
		 * @param {Function} [customizer] The function to customize comparisons.
		 * @returns {boolean} Returns `true` if `object` is a match, else `false`.
		 */
		function baseIsMatch(object, source, matchData, customizer) {
		  var index = matchData.length,
		      length = index,
		      noCustomizer = !customizer;

		  if (object == null) {
		    return !length;
		  }
		  object = Object(object);
		  while (index--) {
		    var data = matchData[index];
		    if ((noCustomizer && data[2])
		          ? data[1] !== object[data[0]]
		          : !(data[0] in object)
		        ) {
		      return false;
		    }
		  }
		  while (++index < length) {
		    data = matchData[index];
		    var key = data[0],
		        objValue = object[key],
		        srcValue = data[1];

		    if (noCustomizer && data[2]) {
		      if (objValue === undefined && !(key in object)) {
		        return false;
		      }
		    } else {
		      var stack = new Stack;
		      if (customizer) {
		        var result = customizer(objValue, srcValue, key, object, source, stack);
		      }
		      if (!(result === undefined
		            ? baseIsEqual(srcValue, objValue, customizer, UNORDERED_COMPARE_FLAG | PARTIAL_COMPARE_FLAG, stack)
		            : result
		          )) {
		        return false;
		      }
		    }
		  }
		  return true;
		}

		/**
		 * The base implementation of `_.isNative` without bad shim checks.
		 *
		 * @private
		 * @param {*} value The value to check.
		 * @returns {boolean} Returns `true` if `value` is a native function,
		 *  else `false`.
		 */
		function baseIsNative(value) {
		  if (!isObject(value) || isMasked(value)) {
		    return false;
		  }
		  var pattern = (isFunction(value) || isHostObject(value)) ? reIsNative : reIsHostCtor;
		  return pattern.test(toSource(value));
		}

		/**
		 * The base implementation of `_.isTypedArray` without Node.js optimizations.
		 *
		 * @private
		 * @param {*} value The value to check.
		 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
		 */
		function baseIsTypedArray(value) {
		  return isObjectLike(value) &&
		    isLength(value.length) && !!typedArrayTags[objectToString.call(value)];
		}

		/**
		 * The base implementation of `_.iteratee`.
		 *
		 * @private
		 * @param {*} [value=_.identity] The value to convert to an iteratee.
		 * @returns {Function} Returns the iteratee.
		 */
		function baseIteratee(value) {
		  // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
		  // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
		  if (typeof value == 'function') {
		    return value;
		  }
		  if (value == null) {
		    return identity;
		  }
		  if (typeof value == 'object') {
		    return isArray(value)
		      ? baseMatchesProperty(value[0], value[1])
		      : baseMatches(value);
		  }
		  return property(value);
		}

		/**
		 * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
		 *
		 * @private
		 * @param {Object} object The object to query.
		 * @returns {Array} Returns the array of property names.
		 */
		function baseKeys(object) {
		  if (!isPrototype(object)) {
		    return nativeKeys(object);
		  }
		  var result = [];
		  for (var key in Object(object)) {
		    if (hasOwnProperty.call(object, key) && key != 'constructor') {
		      result.push(key);
		    }
		  }
		  return result;
		}

		/**
		 * The base implementation of `_.matches` which doesn't clone `source`.
		 *
		 * @private
		 * @param {Object} source The object of property values to match.
		 * @returns {Function} Returns the new spec function.
		 */
		function baseMatches(source) {
		  var matchData = getMatchData(source);
		  if (matchData.length == 1 && matchData[0][2]) {
		    return matchesStrictComparable(matchData[0][0], matchData[0][1]);
		  }
		  return function(object) {
		    return object === source || baseIsMatch(object, source, matchData);
		  };
		}

		/**
		 * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
		 *
		 * @private
		 * @param {string} path The path of the property to get.
		 * @param {*} srcValue The value to match.
		 * @returns {Function} Returns the new spec function.
		 */
		function baseMatchesProperty(path, srcValue) {
		  if (isKey(path) && isStrictComparable(srcValue)) {
		    return matchesStrictComparable(toKey(path), srcValue);
		  }
		  return function(object) {
		    var objValue = get(object, path);
		    return (objValue === undefined && objValue === srcValue)
		      ? hasIn(object, path)
		      : baseIsEqual(srcValue, objValue, undefined, UNORDERED_COMPARE_FLAG | PARTIAL_COMPARE_FLAG);
		  };
		}

		/**
		 * A specialized version of `baseProperty` which supports deep paths.
		 *
		 * @private
		 * @param {Array|string} path The path of the property to get.
		 * @returns {Function} Returns the new accessor function.
		 */
		function basePropertyDeep(path) {
		  return function(object) {
		    return baseGet(object, path);
		  };
		}

		/**
		 * The base implementation of `_.toString` which doesn't convert nullish
		 * values to empty strings.
		 *
		 * @private
		 * @param {*} value The value to process.
		 * @returns {string} Returns the string.
		 */
		function baseToString(value) {
		  // Exit early for strings to avoid a performance hit in some environments.
		  if (typeof value == 'string') {
		    return value;
		  }
		  if (isSymbol(value)) {
		    return symbolToString ? symbolToString.call(value) : '';
		  }
		  var result = (value + '');
		  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
		}

		/**
		 * Casts `value` to a path array if it's not one.
		 *
		 * @private
		 * @param {*} value The value to inspect.
		 * @returns {Array} Returns the cast property path array.
		 */
		function castPath(value) {
		  return isArray(value) ? value : stringToPath(value);
		}

		/**
		 * Creates a function like `_.groupBy`.
		 *
		 * @private
		 * @param {Function} setter The function to set accumulator values.
		 * @param {Function} [initializer] The accumulator object initializer.
		 * @returns {Function} Returns the new aggregator function.
		 */
		function createAggregator(setter, initializer) {
		  return function(collection, iteratee) {
		    var func = isArray(collection) ? arrayAggregator : baseAggregator,
		        accumulator = initializer ? initializer() : {};

		    return func(collection, setter, baseIteratee(iteratee), accumulator);
		  };
		}

		/**
		 * Creates a `baseEach` or `baseEachRight` function.
		 *
		 * @private
		 * @param {Function} eachFunc The function to iterate over a collection.
		 * @param {boolean} [fromRight] Specify iterating from right to left.
		 * @returns {Function} Returns the new base function.
		 */
		function createBaseEach(eachFunc, fromRight) {
		  return function(collection, iteratee) {
		    if (collection == null) {
		      return collection;
		    }
		    if (!isArrayLike(collection)) {
		      return eachFunc(collection, iteratee);
		    }
		    var length = collection.length,
		        index = fromRight ? length : -1,
		        iterable = Object(collection);

		    while ((fromRight ? index-- : ++index < length)) {
		      if (iteratee(iterable[index], index, iterable) === false) {
		        break;
		      }
		    }
		    return collection;
		  };
		}

		/**
		 * Creates a base function for methods like `_.forIn` and `_.forOwn`.
		 *
		 * @private
		 * @param {boolean} [fromRight] Specify iterating from right to left.
		 * @returns {Function} Returns the new base function.
		 */
		function createBaseFor(fromRight) {
		  return function(object, iteratee, keysFunc) {
		    var index = -1,
		        iterable = Object(object),
		        props = keysFunc(object),
		        length = props.length;

		    while (length--) {
		      var key = props[fromRight ? length : ++index];
		      if (iteratee(iterable[key], key, iterable) === false) {
		        break;
		      }
		    }
		    return object;
		  };
		}

		/**
		 * A specialized version of `baseIsEqualDeep` for arrays with support for
		 * partial deep comparisons.
		 *
		 * @private
		 * @param {Array} array The array to compare.
		 * @param {Array} other The other array to compare.
		 * @param {Function} equalFunc The function to determine equivalents of values.
		 * @param {Function} customizer The function to customize comparisons.
		 * @param {number} bitmask The bitmask of comparison flags. See `baseIsEqual`
		 *  for more details.
		 * @param {Object} stack Tracks traversed `array` and `other` objects.
		 * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
		 */
		function equalArrays(array, other, equalFunc, customizer, bitmask, stack) {
		  var isPartial = bitmask & PARTIAL_COMPARE_FLAG,
		      arrLength = array.length,
		      othLength = other.length;

		  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
		    return false;
		  }
		  // Assume cyclic values are equal.
		  var stacked = stack.get(array);
		  if (stacked && stack.get(other)) {
		    return stacked == other;
		  }
		  var index = -1,
		      result = true,
		      seen = (bitmask & UNORDERED_COMPARE_FLAG) ? new SetCache : undefined;

		  stack.set(array, other);
		  stack.set(other, array);

		  // Ignore non-index properties.
		  while (++index < arrLength) {
		    var arrValue = array[index],
		        othValue = other[index];

		    if (customizer) {
		      var compared = isPartial
		        ? customizer(othValue, arrValue, index, other, array, stack)
		        : customizer(arrValue, othValue, index, array, other, stack);
		    }
		    if (compared !== undefined) {
		      if (compared) {
		        continue;
		      }
		      result = false;
		      break;
		    }
		    // Recursively compare arrays (susceptible to call stack limits).
		    if (seen) {
		      if (!arraySome(other, function(othValue, othIndex) {
		            if (!seen.has(othIndex) &&
		                (arrValue === othValue || equalFunc(arrValue, othValue, customizer, bitmask, stack))) {
		              return seen.add(othIndex);
		            }
		          })) {
		        result = false;
		        break;
		      }
		    } else if (!(
		          arrValue === othValue ||
		            equalFunc(arrValue, othValue, customizer, bitmask, stack)
		        )) {
		      result = false;
		      break;
		    }
		  }
		  stack['delete'](array);
		  stack['delete'](other);
		  return result;
		}

		/**
		 * A specialized version of `baseIsEqualDeep` for comparing objects of
		 * the same `toStringTag`.
		 *
		 * **Note:** This function only supports comparing values with tags of
		 * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
		 *
		 * @private
		 * @param {Object} object The object to compare.
		 * @param {Object} other The other object to compare.
		 * @param {string} tag The `toStringTag` of the objects to compare.
		 * @param {Function} equalFunc The function to determine equivalents of values.
		 * @param {Function} customizer The function to customize comparisons.
		 * @param {number} bitmask The bitmask of comparison flags. See `baseIsEqual`
		 *  for more details.
		 * @param {Object} stack Tracks traversed `object` and `other` objects.
		 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
		 */
		function equalByTag(object, other, tag, equalFunc, customizer, bitmask, stack) {
		  switch (tag) {
		    case dataViewTag:
		      if ((object.byteLength != other.byteLength) ||
		          (object.byteOffset != other.byteOffset)) {
		        return false;
		      }
		      object = object.buffer;
		      other = other.buffer;

		    case arrayBufferTag:
		      if ((object.byteLength != other.byteLength) ||
		          !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
		        return false;
		      }
		      return true;

		    case boolTag:
		    case dateTag:
		    case numberTag:
		      // Coerce booleans to `1` or `0` and dates to milliseconds.
		      // Invalid dates are coerced to `NaN`.
		      return eq(+object, +other);

		    case errorTag:
		      return object.name == other.name && object.message == other.message;

		    case regexpTag:
		    case stringTag:
		      // Coerce regexes to strings and treat strings, primitives and objects,
		      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
		      // for more details.
		      return object == (other + '');

		    case mapTag:
		      var convert = mapToArray;

		    case setTag:
		      var isPartial = bitmask & PARTIAL_COMPARE_FLAG;
		      convert || (convert = setToArray);

		      if (object.size != other.size && !isPartial) {
		        return false;
		      }
		      // Assume cyclic values are equal.
		      var stacked = stack.get(object);
		      if (stacked) {
		        return stacked == other;
		      }
		      bitmask |= UNORDERED_COMPARE_FLAG;

		      // Recursively compare objects (susceptible to call stack limits).
		      stack.set(object, other);
		      var result = equalArrays(convert(object), convert(other), equalFunc, customizer, bitmask, stack);
		      stack['delete'](object);
		      return result;

		    case symbolTag:
		      if (symbolValueOf) {
		        return symbolValueOf.call(object) == symbolValueOf.call(other);
		      }
		  }
		  return false;
		}

		/**
		 * A specialized version of `baseIsEqualDeep` for objects with support for
		 * partial deep comparisons.
		 *
		 * @private
		 * @param {Object} object The object to compare.
		 * @param {Object} other The other object to compare.
		 * @param {Function} equalFunc The function to determine equivalents of values.
		 * @param {Function} customizer The function to customize comparisons.
		 * @param {number} bitmask The bitmask of comparison flags. See `baseIsEqual`
		 *  for more details.
		 * @param {Object} stack Tracks traversed `object` and `other` objects.
		 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
		 */
		function equalObjects(object, other, equalFunc, customizer, bitmask, stack) {
		  var isPartial = bitmask & PARTIAL_COMPARE_FLAG,
		      objProps = keys(object),
		      objLength = objProps.length,
		      othProps = keys(other),
		      othLength = othProps.length;

		  if (objLength != othLength && !isPartial) {
		    return false;
		  }
		  var index = objLength;
		  while (index--) {
		    var key = objProps[index];
		    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
		      return false;
		    }
		  }
		  // Assume cyclic values are equal.
		  var stacked = stack.get(object);
		  if (stacked && stack.get(other)) {
		    return stacked == other;
		  }
		  var result = true;
		  stack.set(object, other);
		  stack.set(other, object);

		  var skipCtor = isPartial;
		  while (++index < objLength) {
		    key = objProps[index];
		    var objValue = object[key],
		        othValue = other[key];

		    if (customizer) {
		      var compared = isPartial
		        ? customizer(othValue, objValue, key, other, object, stack)
		        : customizer(objValue, othValue, key, object, other, stack);
		    }
		    // Recursively compare objects (susceptible to call stack limits).
		    if (!(compared === undefined
		          ? (objValue === othValue || equalFunc(objValue, othValue, customizer, bitmask, stack))
		          : compared
		        )) {
		      result = false;
		      break;
		    }
		    skipCtor || (skipCtor = key == 'constructor');
		  }
		  if (result && !skipCtor) {
		    var objCtor = object.constructor,
		        othCtor = other.constructor;

		    // Non `Object` object instances with different constructors are not equal.
		    if (objCtor != othCtor &&
		        ('constructor' in object && 'constructor' in other) &&
		        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
		          typeof othCtor == 'function' && othCtor instanceof othCtor)) {
		      result = false;
		    }
		  }
		  stack['delete'](object);
		  stack['delete'](other);
		  return result;
		}

		/**
		 * Gets the data for `map`.
		 *
		 * @private
		 * @param {Object} map The map to query.
		 * @param {string} key The reference key.
		 * @returns {*} Returns the map data.
		 */
		function getMapData(map, key) {
		  var data = map.__data__;
		  return isKeyable(key)
		    ? data[typeof key == 'string' ? 'string' : 'hash']
		    : data.map;
		}

		/**
		 * Gets the property names, values, and compare flags of `object`.
		 *
		 * @private
		 * @param {Object} object The object to query.
		 * @returns {Array} Returns the match data of `object`.
		 */
		function getMatchData(object) {
		  var result = keys(object),
		      length = result.length;

		  while (length--) {
		    var key = result[length],
		        value = object[key];

		    result[length] = [key, value, isStrictComparable(value)];
		  }
		  return result;
		}

		/**
		 * Gets the native function at `key` of `object`.
		 *
		 * @private
		 * @param {Object} object The object to query.
		 * @param {string} key The key of the method to get.
		 * @returns {*} Returns the function if it's native, else `undefined`.
		 */
		function getNative(object, key) {
		  var value = getValue(object, key);
		  return baseIsNative(value) ? value : undefined;
		}

		/**
		 * Gets the `toStringTag` of `value`.
		 *
		 * @private
		 * @param {*} value The value to query.
		 * @returns {string} Returns the `toStringTag`.
		 */
		var getTag = baseGetTag;

		// Fallback for data views, maps, sets, and weak maps in IE 11,
		// for data views in Edge < 14, and promises in Node.js.
		if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
		    (Map && getTag(new Map) != mapTag) ||
		    (Promise && getTag(Promise.resolve()) != promiseTag) ||
		    (Set && getTag(new Set) != setTag) ||
		    (WeakMap && getTag(new WeakMap) != weakMapTag)) {
		  getTag = function(value) {
		    var result = objectToString.call(value),
		        Ctor = result == objectTag ? value.constructor : undefined,
		        ctorString = Ctor ? toSource(Ctor) : undefined;

		    if (ctorString) {
		      switch (ctorString) {
		        case dataViewCtorString: return dataViewTag;
		        case mapCtorString: return mapTag;
		        case promiseCtorString: return promiseTag;
		        case setCtorString: return setTag;
		        case weakMapCtorString: return weakMapTag;
		      }
		    }
		    return result;
		  };
		}

		/**
		 * Checks if `path` exists on `object`.
		 *
		 * @private
		 * @param {Object} object The object to query.
		 * @param {Array|string} path The path to check.
		 * @param {Function} hasFunc The function to check properties.
		 * @returns {boolean} Returns `true` if `path` exists, else `false`.
		 */
		function hasPath(object, path, hasFunc) {
		  path = isKey(path, object) ? [path] : castPath(path);

		  var result,
		      index = -1,
		      length = path.length;

		  while (++index < length) {
		    var key = toKey(path[index]);
		    if (!(result = object != null && hasFunc(object, key))) {
		      break;
		    }
		    object = object[key];
		  }
		  if (result) {
		    return result;
		  }
		  var length = object ? object.length : 0;
		  return !!length && isLength(length) && isIndex(key, length) &&
		    (isArray(object) || isArguments(object));
		}

		/**
		 * Checks if `value` is a valid array-like index.
		 *
		 * @private
		 * @param {*} value The value to check.
		 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
		 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
		 */
		function isIndex(value, length) {
		  length = length == null ? MAX_SAFE_INTEGER : length;
		  return !!length &&
		    (typeof value == 'number' || reIsUint.test(value)) &&
		    (value > -1 && value % 1 == 0 && value < length);
		}

		/**
		 * Checks if `value` is a property name and not a property path.
		 *
		 * @private
		 * @param {*} value The value to check.
		 * @param {Object} [object] The object to query keys on.
		 * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
		 */
		function isKey(value, object) {
		  if (isArray(value)) {
		    return false;
		  }
		  var type = typeof value;
		  if (type == 'number' || type == 'symbol' || type == 'boolean' ||
		      value == null || isSymbol(value)) {
		    return true;
		  }
		  return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
		    (object != null && value in Object(object));
		}

		/**
		 * Checks if `value` is suitable for use as unique object key.
		 *
		 * @private
		 * @param {*} value The value to check.
		 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
		 */
		function isKeyable(value) {
		  var type = typeof value;
		  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
		    ? (value !== '__proto__')
		    : (value === null);
		}

		/**
		 * Checks if `func` has its source masked.
		 *
		 * @private
		 * @param {Function} func The function to check.
		 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
		 */
		function isMasked(func) {
		  return !!maskSrcKey && (maskSrcKey in func);
		}

		/**
		 * Checks if `value` is likely a prototype object.
		 *
		 * @private
		 * @param {*} value The value to check.
		 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
		 */
		function isPrototype(value) {
		  var Ctor = value && value.constructor,
		      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

		  return value === proto;
		}

		/**
		 * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
		 *
		 * @private
		 * @param {*} value The value to check.
		 * @returns {boolean} Returns `true` if `value` if suitable for strict
		 *  equality comparisons, else `false`.
		 */
		function isStrictComparable(value) {
		  return value === value && !isObject(value);
		}

		/**
		 * A specialized version of `matchesProperty` for source values suitable
		 * for strict equality comparisons, i.e. `===`.
		 *
		 * @private
		 * @param {string} key The key of the property to get.
		 * @param {*} srcValue The value to match.
		 * @returns {Function} Returns the new spec function.
		 */
		function matchesStrictComparable(key, srcValue) {
		  return function(object) {
		    if (object == null) {
		      return false;
		    }
		    return object[key] === srcValue &&
		      (srcValue !== undefined || (key in Object(object)));
		  };
		}

		/**
		 * Converts `string` to a property path array.
		 *
		 * @private
		 * @param {string} string The string to convert.
		 * @returns {Array} Returns the property path array.
		 */
		var stringToPath = memoize(function(string) {
		  string = toString(string);

		  var result = [];
		  if (reLeadingDot.test(string)) {
		    result.push('');
		  }
		  string.replace(rePropName, function(match, number, quote, string) {
		    result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));
		  });
		  return result;
		});

		/**
		 * Converts `value` to a string key if it's not a string or symbol.
		 *
		 * @private
		 * @param {*} value The value to inspect.
		 * @returns {string|symbol} Returns the key.
		 */
		function toKey(value) {
		  if (typeof value == 'string' || isSymbol(value)) {
		    return value;
		  }
		  var result = (value + '');
		  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
		}

		/**
		 * Converts `func` to its source code.
		 *
		 * @private
		 * @param {Function} func The function to process.
		 * @returns {string} Returns the source code.
		 */
		function toSource(func) {
		  if (func != null) {
		    try {
		      return funcToString.call(func);
		    } catch (e) {}
		    try {
		      return (func + '');
		    } catch (e) {}
		  }
		  return '';
		}

		/**
		 * Creates an object composed of keys generated from the results of running
		 * each element of `collection` thru `iteratee`. The corresponding value of
		 * each key is the last element responsible for generating the key. The
		 * iteratee is invoked with one argument: (value).
		 *
		 * @static
		 * @memberOf _
		 * @since 4.0.0
		 * @category Collection
		 * @param {Array|Object} collection The collection to iterate over.
		 * @param {Function} [iteratee=_.identity]
		 *  The iteratee to transform keys.
		 * @returns {Object} Returns the composed aggregate object.
		 * @example
		 *
		 * var array = [
		 *   { 'dir': 'left', 'code': 97 },
		 *   { 'dir': 'right', 'code': 100 }
		 * ];
		 *
		 * _.keyBy(array, function(o) {
		 *   return String.fromCharCode(o.code);
		 * });
		 * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
		 *
		 * _.keyBy(array, 'dir');
		 * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
		 */
		var keyBy = createAggregator(function(result, value, key) {
		  result[key] = value;
		});

		/**
		 * Creates a function that memoizes the result of `func`. If `resolver` is
		 * provided, it determines the cache key for storing the result based on the
		 * arguments provided to the memoized function. By default, the first argument
		 * provided to the memoized function is used as the map cache key. The `func`
		 * is invoked with the `this` binding of the memoized function.
		 *
		 * **Note:** The cache is exposed as the `cache` property on the memoized
		 * function. Its creation may be customized by replacing the `_.memoize.Cache`
		 * constructor with one whose instances implement the
		 * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
		 * method interface of `delete`, `get`, `has`, and `set`.
		 *
		 * @static
		 * @memberOf _
		 * @since 0.1.0
		 * @category Function
		 * @param {Function} func The function to have its output memoized.
		 * @param {Function} [resolver] The function to resolve the cache key.
		 * @returns {Function} Returns the new memoized function.
		 * @example
		 *
		 * var object = { 'a': 1, 'b': 2 };
		 * var other = { 'c': 3, 'd': 4 };
		 *
		 * var values = _.memoize(_.values);
		 * values(object);
		 * // => [1, 2]
		 *
		 * values(other);
		 * // => [3, 4]
		 *
		 * object.a = 2;
		 * values(object);
		 * // => [1, 2]
		 *
		 * // Modify the result cache.
		 * values.cache.set(object, ['a', 'b']);
		 * values(object);
		 * // => ['a', 'b']
		 *
		 * // Replace `_.memoize.Cache`.
		 * _.memoize.Cache = WeakMap;
		 */
		function memoize(func, resolver) {
		  if (typeof func != 'function' || (resolver && typeof resolver != 'function')) {
		    throw new TypeError(FUNC_ERROR_TEXT);
		  }
		  var memoized = function() {
		    var args = arguments,
		        key = resolver ? resolver.apply(this, args) : args[0],
		        cache = memoized.cache;

		    if (cache.has(key)) {
		      return cache.get(key);
		    }
		    var result = func.apply(this, args);
		    memoized.cache = cache.set(key, result);
		    return result;
		  };
		  memoized.cache = new (memoize.Cache || MapCache);
		  return memoized;
		}

		// Assign cache to `_.memoize`.
		memoize.Cache = MapCache;

		/**
		 * Performs a
		 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
		 * comparison between two values to determine if they are equivalent.
		 *
		 * @static
		 * @memberOf _
		 * @since 4.0.0
		 * @category Lang
		 * @param {*} value The value to compare.
		 * @param {*} other The other value to compare.
		 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
		 * @example
		 *
		 * var object = { 'a': 1 };
		 * var other = { 'a': 1 };
		 *
		 * _.eq(object, object);
		 * // => true
		 *
		 * _.eq(object, other);
		 * // => false
		 *
		 * _.eq('a', 'a');
		 * // => true
		 *
		 * _.eq('a', Object('a'));
		 * // => false
		 *
		 * _.eq(NaN, NaN);
		 * // => true
		 */
		function eq(value, other) {
		  return value === other || (value !== value && other !== other);
		}

		/**
		 * Checks if `value` is likely an `arguments` object.
		 *
		 * @static
		 * @memberOf _
		 * @since 0.1.0
		 * @category Lang
		 * @param {*} value The value to check.
		 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
		 *  else `false`.
		 * @example
		 *
		 * _.isArguments(function() { return arguments; }());
		 * // => true
		 *
		 * _.isArguments([1, 2, 3]);
		 * // => false
		 */
		function isArguments(value) {
		  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.
		  return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&
		    (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);
		}

		/**
		 * Checks if `value` is classified as an `Array` object.
		 *
		 * @static
		 * @memberOf _
		 * @since 0.1.0
		 * @category Lang
		 * @param {*} value The value to check.
		 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
		 * @example
		 *
		 * _.isArray([1, 2, 3]);
		 * // => true
		 *
		 * _.isArray(document.body.children);
		 * // => false
		 *
		 * _.isArray('abc');
		 * // => false
		 *
		 * _.isArray(_.noop);
		 * // => false
		 */
		var isArray = Array.isArray;

		/**
		 * Checks if `value` is array-like. A value is considered array-like if it's
		 * not a function and has a `value.length` that's an integer greater than or
		 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
		 *
		 * @static
		 * @memberOf _
		 * @since 4.0.0
		 * @category Lang
		 * @param {*} value The value to check.
		 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
		 * @example
		 *
		 * _.isArrayLike([1, 2, 3]);
		 * // => true
		 *
		 * _.isArrayLike(document.body.children);
		 * // => true
		 *
		 * _.isArrayLike('abc');
		 * // => true
		 *
		 * _.isArrayLike(_.noop);
		 * // => false
		 */
		function isArrayLike(value) {
		  return value != null && isLength(value.length) && !isFunction(value);
		}

		/**
		 * This method is like `_.isArrayLike` except that it also checks if `value`
		 * is an object.
		 *
		 * @static
		 * @memberOf _
		 * @since 4.0.0
		 * @category Lang
		 * @param {*} value The value to check.
		 * @returns {boolean} Returns `true` if `value` is an array-like object,
		 *  else `false`.
		 * @example
		 *
		 * _.isArrayLikeObject([1, 2, 3]);
		 * // => true
		 *
		 * _.isArrayLikeObject(document.body.children);
		 * // => true
		 *
		 * _.isArrayLikeObject('abc');
		 * // => false
		 *
		 * _.isArrayLikeObject(_.noop);
		 * // => false
		 */
		function isArrayLikeObject(value) {
		  return isObjectLike(value) && isArrayLike(value);
		}

		/**
		 * Checks if `value` is classified as a `Function` object.
		 *
		 * @static
		 * @memberOf _
		 * @since 0.1.0
		 * @category Lang
		 * @param {*} value The value to check.
		 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
		 * @example
		 *
		 * _.isFunction(_);
		 * // => true
		 *
		 * _.isFunction(/abc/);
		 * // => false
		 */
		function isFunction(value) {
		  // The use of `Object#toString` avoids issues with the `typeof` operator
		  // in Safari 8-9 which returns 'object' for typed array and other constructors.
		  var tag = isObject(value) ? objectToString.call(value) : '';
		  return tag == funcTag || tag == genTag;
		}

		/**
		 * Checks if `value` is a valid array-like length.
		 *
		 * **Note:** This method is loosely based on
		 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
		 *
		 * @static
		 * @memberOf _
		 * @since 4.0.0
		 * @category Lang
		 * @param {*} value The value to check.
		 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
		 * @example
		 *
		 * _.isLength(3);
		 * // => true
		 *
		 * _.isLength(Number.MIN_VALUE);
		 * // => false
		 *
		 * _.isLength(Infinity);
		 * // => false
		 *
		 * _.isLength('3');
		 * // => false
		 */
		function isLength(value) {
		  return typeof value == 'number' &&
		    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
		}

		/**
		 * Checks if `value` is the
		 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
		 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
		 *
		 * @static
		 * @memberOf _
		 * @since 0.1.0
		 * @category Lang
		 * @param {*} value The value to check.
		 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
		 * @example
		 *
		 * _.isObject({});
		 * // => true
		 *
		 * _.isObject([1, 2, 3]);
		 * // => true
		 *
		 * _.isObject(_.noop);
		 * // => true
		 *
		 * _.isObject(null);
		 * // => false
		 */
		function isObject(value) {
		  var type = typeof value;
		  return !!value && (type == 'object' || type == 'function');
		}

		/**
		 * Checks if `value` is object-like. A value is object-like if it's not `null`
		 * and has a `typeof` result of "object".
		 *
		 * @static
		 * @memberOf _
		 * @since 4.0.0
		 * @category Lang
		 * @param {*} value The value to check.
		 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
		 * @example
		 *
		 * _.isObjectLike({});
		 * // => true
		 *
		 * _.isObjectLike([1, 2, 3]);
		 * // => true
		 *
		 * _.isObjectLike(_.noop);
		 * // => false
		 *
		 * _.isObjectLike(null);
		 * // => false
		 */
		function isObjectLike(value) {
		  return !!value && typeof value == 'object';
		}

		/**
		 * Checks if `value` is classified as a `Symbol` primitive or object.
		 *
		 * @static
		 * @memberOf _
		 * @since 4.0.0
		 * @category Lang
		 * @param {*} value The value to check.
		 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
		 * @example
		 *
		 * _.isSymbol(Symbol.iterator);
		 * // => true
		 *
		 * _.isSymbol('abc');
		 * // => false
		 */
		function isSymbol(value) {
		  return typeof value == 'symbol' ||
		    (isObjectLike(value) && objectToString.call(value) == symbolTag);
		}

		/**
		 * Checks if `value` is classified as a typed array.
		 *
		 * @static
		 * @memberOf _
		 * @since 3.0.0
		 * @category Lang
		 * @param {*} value The value to check.
		 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
		 * @example
		 *
		 * _.isTypedArray(new Uint8Array);
		 * // => true
		 *
		 * _.isTypedArray([]);
		 * // => false
		 */
		var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

		/**
		 * Converts `value` to a string. An empty string is returned for `null`
		 * and `undefined` values. The sign of `-0` is preserved.
		 *
		 * @static
		 * @memberOf _
		 * @since 4.0.0
		 * @category Lang
		 * @param {*} value The value to process.
		 * @returns {string} Returns the string.
		 * @example
		 *
		 * _.toString(null);
		 * // => ''
		 *
		 * _.toString(-0);
		 * // => '-0'
		 *
		 * _.toString([1, 2, 3]);
		 * // => '1,2,3'
		 */
		function toString(value) {
		  return value == null ? '' : baseToString(value);
		}

		/**
		 * Gets the value at `path` of `object`. If the resolved value is
		 * `undefined`, the `defaultValue` is returned in its place.
		 *
		 * @static
		 * @memberOf _
		 * @since 3.7.0
		 * @category Object
		 * @param {Object} object The object to query.
		 * @param {Array|string} path The path of the property to get.
		 * @param {*} [defaultValue] The value returned for `undefined` resolved values.
		 * @returns {*} Returns the resolved value.
		 * @example
		 *
		 * var object = { 'a': [{ 'b': { 'c': 3 } }] };
		 *
		 * _.get(object, 'a[0].b.c');
		 * // => 3
		 *
		 * _.get(object, ['a', '0', 'b', 'c']);
		 * // => 3
		 *
		 * _.get(object, 'a.b.c', 'default');
		 * // => 'default'
		 */
		function get(object, path, defaultValue) {
		  var result = object == null ? undefined : baseGet(object, path);
		  return result === undefined ? defaultValue : result;
		}

		/**
		 * Checks if `path` is a direct or inherited property of `object`.
		 *
		 * @static
		 * @memberOf _
		 * @since 4.0.0
		 * @category Object
		 * @param {Object} object The object to query.
		 * @param {Array|string} path The path to check.
		 * @returns {boolean} Returns `true` if `path` exists, else `false`.
		 * @example
		 *
		 * var object = _.create({ 'a': _.create({ 'b': 2 }) });
		 *
		 * _.hasIn(object, 'a');
		 * // => true
		 *
		 * _.hasIn(object, 'a.b');
		 * // => true
		 *
		 * _.hasIn(object, ['a', 'b']);
		 * // => true
		 *
		 * _.hasIn(object, 'b');
		 * // => false
		 */
		function hasIn(object, path) {
		  return object != null && hasPath(object, path, baseHasIn);
		}

		/**
		 * Creates an array of the own enumerable property names of `object`.
		 *
		 * **Note:** Non-object values are coerced to objects. See the
		 * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
		 * for more details.
		 *
		 * @static
		 * @since 0.1.0
		 * @memberOf _
		 * @category Object
		 * @param {Object} object The object to query.
		 * @returns {Array} Returns the array of property names.
		 * @example
		 *
		 * function Foo() {
		 *   this.a = 1;
		 *   this.b = 2;
		 * }
		 *
		 * Foo.prototype.c = 3;
		 *
		 * _.keys(new Foo);
		 * // => ['a', 'b'] (iteration order is not guaranteed)
		 *
		 * _.keys('hi');
		 * // => ['0', '1']
		 */
		function keys(object) {
		  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
		}

		/**
		 * This method returns the first argument it receives.
		 *
		 * @static
		 * @since 0.1.0
		 * @memberOf _
		 * @category Util
		 * @param {*} value Any value.
		 * @returns {*} Returns `value`.
		 * @example
		 *
		 * var object = { 'a': 1 };
		 *
		 * console.log(_.identity(object) === object);
		 * // => true
		 */
		function identity(value) {
		  return value;
		}

		/**
		 * Creates a function that returns the value at `path` of a given object.
		 *
		 * @static
		 * @memberOf _
		 * @since 2.4.0
		 * @category Util
		 * @param {Array|string} path The path of the property to get.
		 * @returns {Function} Returns the new accessor function.
		 * @example
		 *
		 * var objects = [
		 *   { 'a': { 'b': 2 } },
		 *   { 'a': { 'b': 1 } }
		 * ];
		 *
		 * _.map(objects, _.property('a.b'));
		 * // => [2, 1]
		 *
		 * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
		 * // => [1, 2]
		 */
		function property(path) {
		  return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
		}

		module.exports = keyBy;
	} (lodash_keyby, lodash_keyby.exports));

	var keyBy = lodash_keyby.exports;

	/**
	 * lodash (Custom Build) <https://lodash.com/>
	 * Build: `lodash modularize exports="npm" -o ./`
	 * Copyright jQuery Foundation and other contributors <https://jquery.org/>
	 * Released under MIT license <https://lodash.com/license>
	 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
	 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
	 */

	/** Used as references for various `Number` constants. */
	var INFINITY = 1 / 0,
	    MAX_SAFE_INTEGER = 9007199254740991,
	    MAX_INTEGER = 1.7976931348623157e+308,
	    NAN = 0 / 0;

	/** `Object#toString` result references. */
	var funcTag = '[object Function]',
	    genTag = '[object GeneratorFunction]',
	    symbolTag = '[object Symbol]';

	/** Used to match leading and trailing whitespace. */
	var reTrim = /^\s+|\s+$/g;

	/** Used to detect bad signed hexadecimal string values. */
	var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

	/** Used to detect binary string values. */
	var reIsBinary = /^0b[01]+$/i;

	/** Used to detect octal string values. */
	var reIsOctal = /^0o[0-7]+$/i;

	/** Used to detect unsigned integer values. */
	var reIsUint = /^(?:0|[1-9]\d*)$/;

	/** Built-in method references without a dependency on `root`. */
	var freeParseInt = parseInt;

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/**
	 * Used to resolve the
	 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var objectToString = objectProto.toString;

	/* Built-in method references for those with the same name as other `lodash` methods. */
	var nativeCeil = Math.ceil,
	    nativeMax = Math.max;

	/**
	 * The base implementation of `_.range` and `_.rangeRight` which doesn't
	 * coerce arguments.
	 *
	 * @private
	 * @param {number} start The start of the range.
	 * @param {number} end The end of the range.
	 * @param {number} step The value to increment or decrement by.
	 * @param {boolean} [fromRight] Specify iterating from right to left.
	 * @returns {Array} Returns the range of numbers.
	 */
	function baseRange(start, end, step, fromRight) {
	  var index = -1,
	      length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),
	      result = Array(length);

	  while (length--) {
	    result[fromRight ? length : ++index] = start;
	    start += step;
	  }
	  return result;
	}

	/**
	 * Creates a `_.range` or `_.rangeRight` function.
	 *
	 * @private
	 * @param {boolean} [fromRight] Specify iterating from right to left.
	 * @returns {Function} Returns the new range function.
	 */
	function createRange(fromRight) {
	  return function(start, end, step) {
	    if (step && typeof step != 'number' && isIterateeCall(start, end, step)) {
	      end = step = undefined;
	    }
	    // Ensure the sign of `-0` is preserved.
	    start = toFinite(start);
	    if (end === undefined) {
	      end = start;
	      start = 0;
	    } else {
	      end = toFinite(end);
	    }
	    step = step === undefined ? (start < end ? 1 : -1) : toFinite(step);
	    return baseRange(start, end, step, fromRight);
	  };
	}

	/**
	 * Checks if `value` is a valid array-like index.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
	 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
	 */
	function isIndex(value, length) {
	  length = length == null ? MAX_SAFE_INTEGER : length;
	  return !!length &&
	    (typeof value == 'number' || reIsUint.test(value)) &&
	    (value > -1 && value % 1 == 0 && value < length);
	}

	/**
	 * Checks if the given arguments are from an iteratee call.
	 *
	 * @private
	 * @param {*} value The potential iteratee value argument.
	 * @param {*} index The potential iteratee index or key argument.
	 * @param {*} object The potential iteratee object argument.
	 * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
	 *  else `false`.
	 */
	function isIterateeCall(value, index, object) {
	  if (!isObject(object)) {
	    return false;
	  }
	  var type = typeof index;
	  if (type == 'number'
	        ? (isArrayLike(object) && isIndex(index, object.length))
	        : (type == 'string' && index in object)
	      ) {
	    return eq(object[index], value);
	  }
	  return false;
	}

	/**
	 * Performs a
	 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	 * comparison between two values to determine if they are equivalent.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to compare.
	 * @param {*} other The other value to compare.
	 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	 * @example
	 *
	 * var object = { 'a': 1 };
	 * var other = { 'a': 1 };
	 *
	 * _.eq(object, object);
	 * // => true
	 *
	 * _.eq(object, other);
	 * // => false
	 *
	 * _.eq('a', 'a');
	 * // => true
	 *
	 * _.eq('a', Object('a'));
	 * // => false
	 *
	 * _.eq(NaN, NaN);
	 * // => true
	 */
	function eq(value, other) {
	  return value === other || (value !== value && other !== other);
	}

	/**
	 * Checks if `value` is array-like. A value is considered array-like if it's
	 * not a function and has a `value.length` that's an integer greater than or
	 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
	 * @example
	 *
	 * _.isArrayLike([1, 2, 3]);
	 * // => true
	 *
	 * _.isArrayLike(document.body.children);
	 * // => true
	 *
	 * _.isArrayLike('abc');
	 * // => true
	 *
	 * _.isArrayLike(_.noop);
	 * // => false
	 */
	function isArrayLike(value) {
	  return value != null && isLength(value.length) && !isFunction(value);
	}

	/**
	 * Checks if `value` is classified as a `Function` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
	 * @example
	 *
	 * _.isFunction(_);
	 * // => true
	 *
	 * _.isFunction(/abc/);
	 * // => false
	 */
	function isFunction(value) {
	  // The use of `Object#toString` avoids issues with the `typeof` operator
	  // in Safari 8-9 which returns 'object' for typed array and other constructors.
	  var tag = isObject(value) ? objectToString.call(value) : '';
	  return tag == funcTag || tag == genTag;
	}

	/**
	 * Checks if `value` is a valid array-like length.
	 *
	 * **Note:** This method is loosely based on
	 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
	 * @example
	 *
	 * _.isLength(3);
	 * // => true
	 *
	 * _.isLength(Number.MIN_VALUE);
	 * // => false
	 *
	 * _.isLength(Infinity);
	 * // => false
	 *
	 * _.isLength('3');
	 * // => false
	 */
	function isLength(value) {
	  return typeof value == 'number' &&
	    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
	}

	/**
	 * Checks if `value` is the
	 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
	 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
	 * @example
	 *
	 * _.isObject({});
	 * // => true
	 *
	 * _.isObject([1, 2, 3]);
	 * // => true
	 *
	 * _.isObject(_.noop);
	 * // => true
	 *
	 * _.isObject(null);
	 * // => false
	 */
	function isObject(value) {
	  var type = typeof value;
	  return !!value && (type == 'object' || type == 'function');
	}

	/**
	 * Checks if `value` is object-like. A value is object-like if it's not `null`
	 * and has a `typeof` result of "object".
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
	 * @example
	 *
	 * _.isObjectLike({});
	 * // => true
	 *
	 * _.isObjectLike([1, 2, 3]);
	 * // => true
	 *
	 * _.isObjectLike(_.noop);
	 * // => false
	 *
	 * _.isObjectLike(null);
	 * // => false
	 */
	function isObjectLike(value) {
	  return !!value && typeof value == 'object';
	}

	/**
	 * Checks if `value` is classified as a `Symbol` primitive or object.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
	 * @example
	 *
	 * _.isSymbol(Symbol.iterator);
	 * // => true
	 *
	 * _.isSymbol('abc');
	 * // => false
	 */
	function isSymbol(value) {
	  return typeof value == 'symbol' ||
	    (isObjectLike(value) && objectToString.call(value) == symbolTag);
	}

	/**
	 * Converts `value` to a finite number.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.12.0
	 * @category Lang
	 * @param {*} value The value to convert.
	 * @returns {number} Returns the converted number.
	 * @example
	 *
	 * _.toFinite(3.2);
	 * // => 3.2
	 *
	 * _.toFinite(Number.MIN_VALUE);
	 * // => 5e-324
	 *
	 * _.toFinite(Infinity);
	 * // => 1.7976931348623157e+308
	 *
	 * _.toFinite('3.2');
	 * // => 3.2
	 */
	function toFinite(value) {
	  if (!value) {
	    return value === 0 ? value : 0;
	  }
	  value = toNumber(value);
	  if (value === INFINITY || value === -INFINITY) {
	    var sign = (value < 0 ? -1 : 1);
	    return sign * MAX_INTEGER;
	  }
	  return value === value ? value : 0;
	}

	/**
	 * Converts `value` to a number.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to process.
	 * @returns {number} Returns the number.
	 * @example
	 *
	 * _.toNumber(3.2);
	 * // => 3.2
	 *
	 * _.toNumber(Number.MIN_VALUE);
	 * // => 5e-324
	 *
	 * _.toNumber(Infinity);
	 * // => Infinity
	 *
	 * _.toNumber('3.2');
	 * // => 3.2
	 */
	function toNumber(value) {
	  if (typeof value == 'number') {
	    return value;
	  }
	  if (isSymbol(value)) {
	    return NAN;
	  }
	  if (isObject(value)) {
	    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
	    value = isObject(other) ? (other + '') : other;
	  }
	  if (typeof value != 'string') {
	    return value === 0 ? value : +value;
	  }
	  value = value.replace(reTrim, '');
	  var isBinary = reIsBinary.test(value);
	  return (isBinary || reIsOctal.test(value))
	    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
	    : (reIsBadHex.test(value) ? NAN : +value);
	}

	/**
	 * Creates an array of numbers (positive and/or negative) progressing from
	 * `start` up to, but not including, `end`. A step of `-1` is used if a negative
	 * `start` is specified without an `end` or `step`. If `end` is not specified,
	 * it's set to `start` with `start` then set to `0`.
	 *
	 * **Note:** JavaScript follows the IEEE-754 standard for resolving
	 * floating-point values which can produce unexpected results.
	 *
	 * @static
	 * @since 0.1.0
	 * @memberOf _
	 * @category Util
	 * @param {number} [start=0] The start of the range.
	 * @param {number} end The end of the range.
	 * @param {number} [step=1] The value to increment or decrement by.
	 * @returns {Array} Returns the range of numbers.
	 * @see _.inRange, _.rangeRight
	 * @example
	 *
	 * _.range(4);
	 * // => [0, 1, 2, 3]
	 *
	 * _.range(-4);
	 * // => [0, -1, -2, -3]
	 *
	 * _.range(1, 5);
	 * // => [1, 2, 3, 4]
	 *
	 * _.range(0, 20, 5);
	 * // => [0, 5, 10, 15]
	 *
	 * _.range(0, -4, -1);
	 * // => [0, -1, -2, -3]
	 *
	 * _.range(1, 4, 0);
	 * // => [1, 1, 1]
	 *
	 * _.range(0);
	 * // => []
	 */
	var range = createRange();

	var lodash_range = range;

	function focus() {
	    this.focus();
	}
	/**Prevent default wrapper
	 * @param {UIEvent} e
	 */
	function preventDefault(e) {
	    // avoid opening context menu on right click
	    e.preventDefault();
	}

	function navigation({ max = 0, previousKeys = ['ArrowUp', 'ArrowLeft', 'KeyH', 'KeyK', 'KeyW', 'KeyA'], nextKeys = [
	    'ArrowDown',
	    'ArrowRight',
	    'KeyJ',
	    'KeyL',
	    'KeyS',
	    'KeyD',
	    // 'Space',
	], stopPropagation = false, } = {}) {
	    const keys = {
	        previous: keyBy(previousKeys),
	        next: keyBy(nextKeys),
	    };
	    const listeners = {
	        previous: undefined,
	        next: undefined,
	        page: undefined,
	    };
	    const nav = {
	        current: 0,
	        max,
	        previousPage(event) {
	            const last = nav.current;
	            if (last > 0) {
	                if (stopPropagation && event)
	                    event.stopPropagation();
	                nav.current--;
	                if (listeners.previous)
	                    listeners.previous(nav.current, last, nav);
	                if (listeners.page)
	                    listeners.page(nav.current, last, nav);
	            }
	            return nav;
	        },
	        nextPage(event) {
	            const last = nav.current;
	            if (last < max - 1) {
	                if (stopPropagation && event)
	                    event.stopPropagation();
	                nav.current++;
	                if (listeners.next)
	                    listeners.next(nav.current, last, nav);
	                if (listeners.page)
	                    listeners.page(nav.current, last, nav);
	            }
	            return nav;
	        },
	        collect(offset = 1) {
	            const bounded = Math.max(Math.min(offset + nav.current, max - 1), 0);
	            return lodash_range(nav.current + 1, bounded + 1, Math.sign(offset));
	        },
	        page(goto) {
	            if (goto !== nav.current) {
	                const last = nav.current;
	                nav.current = Math.max(Math.min(goto, max - 1), 0);
	                if (listeners.page)
	                    listeners.page(nav.current, last, nav);
	            }
	            return nav;
	        },
	        bind: (el) => {
	            el.addEventListener('pointerup', nav.events.onClick);
	            el.addEventListener('keydown', nav.events.onKeyDown);
	            el.addEventListener('contextmenu', preventDefault);
	            el.addEventListener('mouseenter', focus);
	            // $div.addEventListener('mouseleave', blur)
	            el.focus();
	            return nav;
	        },
	        on(type, listener) {
	            listeners[type] = listener;
	            return nav;
	        },
	        first() {
	            if (listeners.page)
	                listeners.page(0, 0, nav);
	        },
	        events: {
	            onClick(event) {
	                if (event.button === 2)
	                    nav.previousPage(event);
	                else if (event.button === 0)
	                    nav.nextPage(event);
	            },
	            onKeyDown(event) {
	                if (event.code in keys.previous)
	                    nav.previousPage(event);
	                else if (event.code in keys.next)
	                    nav.nextPage(event);
	            },
	        },
	    };
	    return nav;
	}

	function renderHtml(string) {
	  const template = document.createElement("template");
	  template.innerHTML = string;
	  return document.importNode(template.content, true);
	}

	function renderSvg(string) {
	  const g = document.createElementNS("http://www.w3.org/2000/svg", "g");
	  g.innerHTML = string;
	  return g;
	}

	const html = Object.assign(hypertext(renderHtml, fragment => {
	  if (fragment.firstChild === null) return null;
	  if (fragment.firstChild === fragment.lastChild) return fragment.removeChild(fragment.firstChild);
	  const span = document.createElement("span");
	  span.appendChild(fragment);
	  return span;
	}), {fragment: hypertext(renderHtml, fragment => fragment)});

	const svg = Object.assign(hypertext(renderSvg, g => {
	  if (g.firstChild === null) return null;
	  if (g.firstChild === g.lastChild) return g.removeChild(g.firstChild);
	  return g;
	}), {fragment: hypertext(renderSvg, g => {
	  const fragment = document.createDocumentFragment();
	  while (g.firstChild) fragment.appendChild(g.firstChild);
	  return fragment;
	})});

	const
	CODE_TAB = 9,
	CODE_LF = 10,
	CODE_FF = 12,
	CODE_CR = 13,
	CODE_SPACE = 32,
	CODE_UPPER_A = 65,
	CODE_UPPER_Z = 90,
	CODE_LOWER_A = 97,
	CODE_LOWER_Z = 122,
	CODE_LT = 60,
	CODE_GT = 62,
	CODE_SLASH = 47,
	CODE_DASH = 45,
	CODE_BANG = 33,
	CODE_EQ = 61,
	CODE_DQUOTE = 34,
	CODE_SQUOTE = 39,
	CODE_QUESTION = 63,
	STATE_DATA = 1,
	STATE_TAG_OPEN = 2,
	STATE_END_TAG_OPEN = 3,
	STATE_TAG_NAME = 4,
	STATE_BOGUS_COMMENT = 5,
	STATE_BEFORE_ATTRIBUTE_NAME = 6,
	STATE_AFTER_ATTRIBUTE_NAME = 7,
	STATE_ATTRIBUTE_NAME = 8,
	STATE_BEFORE_ATTRIBUTE_VALUE = 9,
	STATE_ATTRIBUTE_VALUE_DOUBLE_QUOTED = 10,
	STATE_ATTRIBUTE_VALUE_SINGLE_QUOTED = 11,
	STATE_ATTRIBUTE_VALUE_UNQUOTED = 12,
	STATE_AFTER_ATTRIBUTE_VALUE_QUOTED = 13,
	STATE_SELF_CLOSING_START_TAG = 14,
	STATE_COMMENT_START = 15,
	STATE_COMMENT_START_DASH = 16,
	STATE_COMMENT = 17,
	STATE_COMMENT_LESS_THAN_SIGN = 18,
	STATE_COMMENT_LESS_THAN_SIGN_BANG = 19,
	STATE_COMMENT_LESS_THAN_SIGN_BANG_DASH = 20,
	STATE_COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH = 21,
	STATE_COMMENT_END_DASH = 22,
	STATE_COMMENT_END = 23,
	STATE_COMMENT_END_BANG = 24,
	STATE_MARKUP_DECLARATION_OPEN = 25,
	STATE_RAWTEXT = 26,
	STATE_RAWTEXT_LESS_THAN_SIGN = 27,
	STATE_RAWTEXT_END_TAG_OPEN = 28,
	STATE_RAWTEXT_END_TAG_NAME = 29,
	SHOW_COMMENT = 128,
	SHOW_ELEMENT = 1,
	TYPE_COMMENT = 8,
	TYPE_ELEMENT = 1,
	NS_SVG = "http://www.w3.org/2000/svg",
	NS_XLINK = "http://www.w3.org/1999/xlink",
	NS_XML = "http://www.w3.org/XML/1998/namespace",
	NS_XMLNS = "http://www.w3.org/2000/xmlns/";

	const svgAdjustAttributes = new Map([
	  "attributeName",
	  "attributeType",
	  "baseFrequency",
	  "baseProfile",
	  "calcMode",
	  "clipPathUnits",
	  "diffuseConstant",
	  "edgeMode",
	  "filterUnits",
	  "glyphRef",
	  "gradientTransform",
	  "gradientUnits",
	  "kernelMatrix",
	  "kernelUnitLength",
	  "keyPoints",
	  "keySplines",
	  "keyTimes",
	  "lengthAdjust",
	  "limitingConeAngle",
	  "markerHeight",
	  "markerUnits",
	  "markerWidth",
	  "maskContentUnits",
	  "maskUnits",
	  "numOctaves",
	  "pathLength",
	  "patternContentUnits",
	  "patternTransform",
	  "patternUnits",
	  "pointsAtX",
	  "pointsAtY",
	  "pointsAtZ",
	  "preserveAlpha",
	  "preserveAspectRatio",
	  "primitiveUnits",
	  "refX",
	  "refY",
	  "repeatCount",
	  "repeatDur",
	  "requiredExtensions",
	  "requiredFeatures",
	  "specularConstant",
	  "specularExponent",
	  "spreadMethod",
	  "startOffset",
	  "stdDeviation",
	  "stitchTiles",
	  "surfaceScale",
	  "systemLanguage",
	  "tableValues",
	  "targetX",
	  "targetY",
	  "textLength",
	  "viewBox",
	  "viewTarget",
	  "xChannelSelector",
	  "yChannelSelector",
	  "zoomAndPan"
	].map(name => [name.toLowerCase(), name]));

	const svgForeignAttributes = new Map([
	  ["xlink:actuate", NS_XLINK],
	  ["xlink:arcrole", NS_XLINK],
	  ["xlink:href", NS_XLINK],
	  ["xlink:role", NS_XLINK],
	  ["xlink:show", NS_XLINK],
	  ["xlink:title", NS_XLINK],
	  ["xlink:type", NS_XLINK],
	  ["xml:lang", NS_XML],
	  ["xml:space", NS_XML],
	  ["xmlns", NS_XMLNS],
	  ["xmlns:xlink", NS_XMLNS]
	]);

	function hypertext(render, postprocess) {
	  return function({raw: strings}) {
	    let state = STATE_DATA;
	    let string = "";
	    let tagNameStart; // either an open tag or an end tag
	    let tagName; // only open; beware nesting! used only for rawtext
	    let attributeNameStart;
	    let attributeNameEnd;
	    let nodeFilter = 0;

	    for (let j = 0, m = arguments.length; j < m; ++j) {
	      const input = strings[j];

	      if (j > 0) {
	        const value = arguments[j];
	        switch (state) {
	          case STATE_RAWTEXT: {
	            if (value != null) {
	              const text = `${value}`;
	              if (isEscapableRawText(tagName)) {
	                string += text.replace(/[<]/g, entity);
	              } else if (new RegExp(`</${tagName}[\\s>/]`, "i").test(string.slice(-tagName.length - 2) + text)) {
	                throw new Error("unsafe raw text"); // appropriate end tag
	              } else {
	                string += text;
	              }
	            }
	            break;
	          }
	          case STATE_DATA: {
	            if (value == null) ; else if (value instanceof Node
	                || (typeof value !== "string" && value[Symbol.iterator])
	                || (/(?:^|>)$/.test(strings[j - 1]) && /^(?:<|$)/.test(input))) {
	              string += "<!--::" + j + "-->";
	              nodeFilter |= SHOW_COMMENT;
	            } else {
	              string += `${value}`.replace(/[<&]/g, entity);
	            }
	            break;
	          }
	          case STATE_BEFORE_ATTRIBUTE_VALUE: {
	            state = STATE_ATTRIBUTE_VALUE_UNQUOTED;
	            let text;
	            if (/^[\s>]/.test(input)) {
	              if (value == null || value === false) {
	                string = string.slice(0, attributeNameStart - strings[j - 1].length);
	                break;
	              }
	              if (value === true || (text = `${value}`) === "") {
	                string += "''";
	                break;
	              }
	              const name = strings[j - 1].slice(attributeNameStart, attributeNameEnd);
	              if ((name === "style" && isObjectLiteral(value)) || typeof value === "function") {
	                string += "::" + j;
	                nodeFilter |= SHOW_ELEMENT;
	                break;
	              }
	            }
	            if (text === undefined) text = `${value}`;
	            if (text === "") throw new Error("unsafe unquoted empty string");
	            string += text.replace(/^['"]|[\s>&]/g, entity);
	            break;
	          }
	          case STATE_ATTRIBUTE_VALUE_UNQUOTED: {
	            string += `${value}`.replace(/[\s>&]/g, entity);
	            break;
	          }
	          case STATE_ATTRIBUTE_VALUE_SINGLE_QUOTED: {
	            string += `${value}`.replace(/['&]/g, entity);
	            break;
	          }
	          case STATE_ATTRIBUTE_VALUE_DOUBLE_QUOTED: {
	            string += `${value}`.replace(/["&]/g, entity);
	            break;
	          }
	          case STATE_BEFORE_ATTRIBUTE_NAME: {
	            if (isObjectLiteral(value)) {
	              string += "::" + j + "=''";
	              nodeFilter |= SHOW_ELEMENT;
	              break;
	            }
	            throw new Error("invalid binding");
	          }
	          case STATE_COMMENT: break;
	          default: throw new Error("invalid binding");
	        }
	      }

	      for (let i = 0, n = input.length; i < n; ++i) {
	        const code = input.charCodeAt(i);

	        switch (state) {
	          case STATE_DATA: {
	            if (code === CODE_LT) {
	              state = STATE_TAG_OPEN;
	            }
	            break;
	          }
	          case STATE_TAG_OPEN: {
	            if (code === CODE_BANG) {
	              state = STATE_MARKUP_DECLARATION_OPEN;
	            } else if (code === CODE_SLASH) {
	              state = STATE_END_TAG_OPEN;
	            } else if (isAsciiAlphaCode(code)) {
	              tagNameStart = i, tagName = undefined;
	              state = STATE_TAG_NAME, --i;
	            } else if (code === CODE_QUESTION) {
	              state = STATE_BOGUS_COMMENT, --i;
	            } else {
	              state = STATE_DATA, --i;
	            }
	            break;
	          }
	          case STATE_END_TAG_OPEN: {
	            if (isAsciiAlphaCode(code)) {
	              state = STATE_TAG_NAME, --i;
	            } else if (code === CODE_GT) {
	              state = STATE_DATA;
	            } else {
	              state = STATE_BOGUS_COMMENT, --i;
	            }
	            break;
	          }
	          case STATE_TAG_NAME: {
	            if (isSpaceCode(code)) {
	              state = STATE_BEFORE_ATTRIBUTE_NAME;
	              tagName = lower(input, tagNameStart, i);
	            } else if (code === CODE_SLASH) {
	              state = STATE_SELF_CLOSING_START_TAG;
	            } else if (code === CODE_GT) {
	              tagName = lower(input, tagNameStart, i);
	              state = isRawText(tagName) ? STATE_RAWTEXT : STATE_DATA;
	            }
	            break;
	          }
	          case STATE_BEFORE_ATTRIBUTE_NAME: {
	            if (isSpaceCode(code)) ; else if (code === CODE_SLASH || code === CODE_GT) {
	              state = STATE_AFTER_ATTRIBUTE_NAME, --i;
	            } else if (code === CODE_EQ) {
	              state = STATE_ATTRIBUTE_NAME;
	              attributeNameStart = i + 1, attributeNameEnd = undefined;
	            } else {
	              state = STATE_ATTRIBUTE_NAME, --i;
	              attributeNameStart = i + 1, attributeNameEnd = undefined;
	            }
	            break;
	          }
	          case STATE_ATTRIBUTE_NAME: {
	            if (isSpaceCode(code) || code === CODE_SLASH || code === CODE_GT) {
	              state = STATE_AFTER_ATTRIBUTE_NAME, --i;
	              attributeNameEnd = i;
	            } else if (code === CODE_EQ) {
	              state = STATE_BEFORE_ATTRIBUTE_VALUE;
	              attributeNameEnd = i;
	            }
	            break;
	          }
	          case STATE_AFTER_ATTRIBUTE_NAME: {
	            if (isSpaceCode(code)) ; else if (code === CODE_SLASH) {
	              state = STATE_SELF_CLOSING_START_TAG;
	            } else if (code === CODE_EQ) {
	              state = STATE_BEFORE_ATTRIBUTE_VALUE;
	            } else if (code === CODE_GT) {
	              state = isRawText(tagName) ? STATE_RAWTEXT : STATE_DATA;
	            } else {
	              state = STATE_ATTRIBUTE_NAME, --i;
	              attributeNameStart = i + 1, attributeNameEnd = undefined;
	            }
	            break;
	          }
	          case STATE_BEFORE_ATTRIBUTE_VALUE: {
	            if (isSpaceCode(code)) ; else if (code === CODE_DQUOTE) {
	              state = STATE_ATTRIBUTE_VALUE_DOUBLE_QUOTED;
	            } else if (code === CODE_SQUOTE) {
	              state = STATE_ATTRIBUTE_VALUE_SINGLE_QUOTED;
	            } else if (code === CODE_GT) {
	              state = isRawText(tagName) ? STATE_RAWTEXT : STATE_DATA;
	            } else {
	              state = STATE_ATTRIBUTE_VALUE_UNQUOTED, --i;
	            }
	            break;
	          }
	          case STATE_ATTRIBUTE_VALUE_DOUBLE_QUOTED: {
	            if (code === CODE_DQUOTE) {
	              state = STATE_AFTER_ATTRIBUTE_VALUE_QUOTED;
	            }
	            break;
	          }
	          case STATE_ATTRIBUTE_VALUE_SINGLE_QUOTED: {
	            if (code === CODE_SQUOTE) {
	              state = STATE_AFTER_ATTRIBUTE_VALUE_QUOTED;
	            }
	            break;
	          }
	          case STATE_ATTRIBUTE_VALUE_UNQUOTED: {
	            if (isSpaceCode(code)) {
	              state = STATE_BEFORE_ATTRIBUTE_NAME;
	            } else if (code === CODE_GT) {
	              state = isRawText(tagName) ? STATE_RAWTEXT : STATE_DATA;
	            }
	            break;
	          }
	          case STATE_AFTER_ATTRIBUTE_VALUE_QUOTED: {
	            if (isSpaceCode(code)) {
	              state = STATE_BEFORE_ATTRIBUTE_NAME;
	            } else if (code === CODE_SLASH) {
	              state = STATE_SELF_CLOSING_START_TAG;
	            } else if (code === CODE_GT) {
	              state = isRawText(tagName) ? STATE_RAWTEXT : STATE_DATA;
	            } else {
	              state = STATE_BEFORE_ATTRIBUTE_NAME, --i;
	            }
	            break;
	          }
	          case STATE_SELF_CLOSING_START_TAG: {
	            if (code === CODE_GT) {
	              state = STATE_DATA;
	            } else {
	              state = STATE_BEFORE_ATTRIBUTE_NAME, --i;
	            }
	            break;
	          }
	          case STATE_BOGUS_COMMENT: {
	            if (code === CODE_GT) {
	              state = STATE_DATA;
	            }
	            break;
	          }
	          case STATE_COMMENT_START: {
	            if (code === CODE_DASH) {
	              state = STATE_COMMENT_START_DASH;
	            } else if (code === CODE_GT) {
	              state = STATE_DATA;
	            } else {
	              state = STATE_COMMENT, --i;
	            }
	            break;
	          }
	          case STATE_COMMENT_START_DASH: {
	            if (code === CODE_DASH) {
	              state = STATE_COMMENT_END;
	            } else if (code === CODE_GT) {
	              state = STATE_DATA;
	            } else {
	              state = STATE_COMMENT, --i;
	            }
	            break;
	          }
	          case STATE_COMMENT: {
	            if (code === CODE_LT) {
	              state = STATE_COMMENT_LESS_THAN_SIGN;
	            } else if (code === CODE_DASH) {
	              state = STATE_COMMENT_END_DASH;
	            }
	            break;
	          }
	          case STATE_COMMENT_LESS_THAN_SIGN: {
	            if (code === CODE_BANG) {
	              state = STATE_COMMENT_LESS_THAN_SIGN_BANG;
	            } else if (code !== CODE_LT) {
	              state = STATE_COMMENT, --i;
	            }
	            break;
	          }
	          case STATE_COMMENT_LESS_THAN_SIGN_BANG: {
	            if (code === CODE_DASH) {
	              state = STATE_COMMENT_LESS_THAN_SIGN_BANG_DASH;
	            } else {
	              state = STATE_COMMENT, --i;
	            }
	            break;
	          }
	          case STATE_COMMENT_LESS_THAN_SIGN_BANG_DASH: {
	            if (code === CODE_DASH) {
	              state = STATE_COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH;
	            } else {
	              state = STATE_COMMENT_END, --i;
	            }
	            break;
	          }
	          case STATE_COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH: {
	            state = STATE_COMMENT_END, --i;
	            break;
	          }
	          case STATE_COMMENT_END_DASH: {
	            if (code === CODE_DASH) {
	              state = STATE_COMMENT_END;
	            } else {
	              state = STATE_COMMENT, --i;
	            }
	            break;
	          }
	          case STATE_COMMENT_END: {
	            if (code === CODE_GT) {
	              state = STATE_DATA;
	            } else if (code === CODE_BANG) {
	              state = STATE_COMMENT_END_BANG;
	            } else if (code !== CODE_DASH) {
	              state = STATE_COMMENT, --i;
	            }
	            break;
	          }
	          case STATE_COMMENT_END_BANG: {
	            if (code === CODE_DASH) {
	              state = STATE_COMMENT_END_DASH;
	            } else if (code === CODE_GT) {
	              state = STATE_DATA;
	            } else {
	              state = STATE_COMMENT, --i;
	            }
	            break;
	          }
	          case STATE_MARKUP_DECLARATION_OPEN: {
	            if (code === CODE_DASH && input.charCodeAt(i + 1) === CODE_DASH) {
	              state = STATE_COMMENT_START, ++i;
	            } else { // Note: CDATA and DOCTYPE unsupported!
	              state = STATE_BOGUS_COMMENT, --i;
	            }
	            break;
	          }
	          case STATE_RAWTEXT: {
	            if (code === CODE_LT) {
	              state = STATE_RAWTEXT_LESS_THAN_SIGN;
	            }
	            break;
	          }
	          case STATE_RAWTEXT_LESS_THAN_SIGN: {
	            if (code === CODE_SLASH) {
	              state = STATE_RAWTEXT_END_TAG_OPEN;
	            } else {
	              state = STATE_RAWTEXT, --i;
	            }
	            break;
	          }
	          case STATE_RAWTEXT_END_TAG_OPEN: {
	            if (isAsciiAlphaCode(code)) {
	              tagNameStart = i;
	              state = STATE_RAWTEXT_END_TAG_NAME, --i;
	            } else {
	              state = STATE_RAWTEXT, --i;
	            }
	            break;
	          }
	          case STATE_RAWTEXT_END_TAG_NAME: {
	            if (isSpaceCode(code) && tagName === lower(input, tagNameStart, i)) {
	              state = STATE_BEFORE_ATTRIBUTE_NAME;
	            } else if (code === CODE_SLASH && tagName === lower(input, tagNameStart, i)) {
	              state = STATE_SELF_CLOSING_START_TAG;
	            } else if (code === CODE_GT && tagName === lower(input, tagNameStart, i)) {
	              state = STATE_DATA;
	            } else if (!isAsciiAlphaCode(code)) {
	              state = STATE_RAWTEXT, --i;
	            }
	            break;
	          }
	          default: {
	            state = undefined;
	            break;
	          }
	        }
	      }

	      string += input;
	    }

	    const root = render(string);

	    const walker = document.createTreeWalker(root, nodeFilter, null, false);
	    const removeNodes = [];
	    while (walker.nextNode()) {
	      const node = walker.currentNode;
	      switch (node.nodeType) {
	        case TYPE_ELEMENT: {
	          const attributes = node.attributes;
	          for (let i = 0, n = attributes.length; i < n; ++i) {
	            const {name, value: currentValue} = attributes[i];
	            if (/^::/.test(name)) {
	              const value = arguments[+name.slice(2)];
	              removeAttribute(node, name), --i, --n;
	              for (const key in value) {
	                const subvalue = value[key];
	                if (subvalue == null || subvalue === false) ; else if (typeof subvalue === "function") {
	                  node[key] = subvalue;
	                } else if (key === "style" && isObjectLiteral(subvalue)) {
	                  setStyles(node[key], subvalue);
	                } else {
	                  setAttribute(node, key, subvalue === true ? "" : subvalue);
	                }
	              }
	            } else if (/^::/.test(currentValue)) {
	              const value = arguments[+currentValue.slice(2)];
	              removeAttribute(node, name), --i, --n;
	              if (typeof value === "function") {
	                node[name] = value;
	              } else { // style
	                setStyles(node[name], value);
	              }
	            }
	          }
	          break;
	        }
	        case TYPE_COMMENT: {
	          if (/^::/.test(node.data)) {
	            const parent = node.parentNode;
	            const value = arguments[+node.data.slice(2)];
	            if (value instanceof Node) {
	              parent.insertBefore(value, node);
	            } else if (typeof value !== "string" && value[Symbol.iterator]) {
	              if (value instanceof NodeList || value instanceof HTMLCollection) {
	                for (let i = value.length - 1, r = node; i >= 0; --i) {
	                  r = parent.insertBefore(value[i], r);
	                }
	              } else {
	                for (const subvalue of value) {
	                  if (subvalue == null) continue;
	                  parent.insertBefore(subvalue instanceof Node ? subvalue : document.createTextNode(subvalue), node);
	                }
	              }
	            } else {
	              parent.insertBefore(document.createTextNode(value), node);
	            }
	            removeNodes.push(node);
	          }
	          break;
	        }
	      }
	    }

	    for (const node of removeNodes) {
	      node.parentNode.removeChild(node);
	    }

	    return postprocess(root);
	  };
	}

	function entity(character) {
	  return `&#${character.charCodeAt(0).toString()};`;
	}

	function isAsciiAlphaCode(code) {
	  return (CODE_UPPER_A <= code && code <= CODE_UPPER_Z)
	      || (CODE_LOWER_A <= code && code <= CODE_LOWER_Z);
	}

	function isSpaceCode(code) {
	  return code === CODE_TAB
	      || code === CODE_LF
	      || code === CODE_FF
	      || code === CODE_SPACE
	      || code === CODE_CR; // normalize newlines
	}

	function isObjectLiteral(value) {
	  return value && value.toString === Object.prototype.toString;
	}

	function isRawText(tagName) {
	  return tagName === "script" || tagName === "style" || isEscapableRawText(tagName);
	}

	function isEscapableRawText(tagName) {
	  return tagName === "textarea" || tagName === "title";
	}

	function lower(input, start, end) {
	  return input.slice(start, end).toLowerCase();
	}

	function setAttribute(node, name, value) {
	  if (node.namespaceURI === NS_SVG) {
	    name = name.toLowerCase();
	    name = svgAdjustAttributes.get(name) || name;
	    if (svgForeignAttributes.has(name)) {
	      node.setAttributeNS(svgForeignAttributes.get(name), name, value);
	      return;
	    }
	  }
	  node.setAttribute(name, value);
	}

	function removeAttribute(node, name) {
	  if (node.namespaceURI === NS_SVG) {
	    name = name.toLowerCase();
	    name = svgAdjustAttributes.get(name) || name;
	    if (svgForeignAttributes.has(name)) {
	      node.removeAttributeNS(svgForeignAttributes.get(name), name);
	      return;
	    }
	  }
	  node.removeAttribute(name);
	}

	// We can’t use Object.assign because custom properties…
	function setStyles(style, values) {
	  for (const name in values) {
	    const value = values[name];
	    if (name.startsWith("--")) style.setProperty(name, value);
	    else style[name] = value;
	  }
	}

	const defaultFooter = ({ page, nav }) => {
	    const $number = html `<span>${page}</span>`;
	    const $range = html `<input
    type="range"
    value=${page}
    step="1"
    min="1"
    max=${nav.max}
  />`;
	    const $form = html `<form class="footer-form">
    ${$range} ${$number}/${nav.max}
  </form>`;
	    $form.addEventListener('pointerup', (e) => e.stopPropagation());
	    $form.addEventListener('change', (e) => {
	        e.stopPropagation();
	        nav.page($range.valueAsNumber - 1);
	        $range.valueAsNumber = page;
	        $number.innerHTML = '' + page;
	    });
	    $range.addEventListener('input', () => {
	        $number.innerHTML = $range.value;
	    });
	    return $form;
	};
	function SimplePage({ template = 'full', ...props }, data) {
	    var _a;
	    const $title = html `<h2 class="page-title">
    ${create$1(props.title, data)}
  </h2>`;
	    const $content = html `<div class="page-content"></div>`;
	    const $footer = html `<div class="page-footer">
    ${create$1(template === 'title' ? props.footer : (_a = props.footer) !== null && _a !== void 0 ? _a : defaultFooter, data)}
  </div>`;
	    const $background = html `<div class="page-background"></div>`;
	    const $page = html `<div class="presenter-page"
    />${$background}
    <div class="page-container">${$title}${$content}${$footer}</div></div>`;
	    $page.classList.toggle('page-centered', template === 'title');
	    $content.classList.toggle('page-full', template === 'full');
	    const $RenderSimplePage = Object.assign($page, {
	        $title,
	        $content,
	        $footer,
	        render() {
	            const $el = create$1(props.content, data, $content);
	            const $bg = create$1(props.background, data, $background);
	            if ($el)
	                $content.append($el);
	            if ($bg)
	                $background.append($bg);
	            $RenderSimplePage.render = () => { };
	        },
	    });
	    return $RenderSimplePage;
	}
	function Presentation({ lazy = 2, Template = SimplePage, } = {}) {
	    const cache = new Map();
	    const history = new Map();
	    let steps = 0;
	    const $container = html `<div class="presenter" tabindex="0" />`;
	    return Object.assign($container, {
	        load(newState, data) {
	            //   console.log('load', cache.has(newState), data);
	            let currentPage;
	            if (cache.has(newState)) {
	                // checks in cache
	                currentPage = cache.get(newState);
	            }
	            else {
	                const props = typeof newState === 'object' ? newState : newState(data);
	                currentPage = Template(props, data);
	                cache.set(newState, currentPage);
	            }
	            if (history.size > 0)
	                // replace
	                $container.insertBefore(currentPage, $container.firstChild);
	            else
	                $container.append(currentPage); // append
	            currentPage.render();
	            // add to history
	            steps++;
	            history.set(newState, steps);
	            history.forEach((v, props) => {
	                // delete expired
	                if (v < steps - lazy) {
	                    $container.removeChild(cache.get(props));
	                    history.delete(props);
	                    cache.delete(props);
	                }
	            });
	        },
	        preload(newState, data) {
	            if (!cache.has(newState)) {
	                // checks in cache
	                const props = typeof newState === 'object' ? newState : newState(data);
	                const page = Template(props, data);
	                cache.set(newState, page);
	                $container.append(page);
	                page.render();
	            }
	            history.set(newState, steps); // update ranking in history
	        },
	    });
	}
	function create$1(res, ...rest) {
	    if (!res)
	        return null;
	    if (typeof res === 'string')
	        return res;
	    if (res instanceof Text)
	        return res;
	    if (res instanceof DocumentFragment)
	        return res;
	    if (res instanceof Element)
	        return res;
	    if (res.node && typeof res.node === 'function')
	        return res.node();
	    return create$1(res(...rest), ...rest);
	}

	function create(container, pages) {
	    const pres = Presentation({ lazy: 2 });
	    container.append(pres);
	    const nav = navigation({ max: pages.length })
	        .on('page', function (page, _prev, nav) {
	        pres.load(pages[page], { page: page + 1, nav });
	        nav
	            .collect(2)
	            .forEach((v, i) => pres.preload(pages[v], { page: page + 1, nav }));
	    })
	        .bind(pres);
	    nav.first();
	    return { pres, nav };
	}

	const stub$1 = html;

	const stub = svg;

	/**
	 * marked - a markdown parser
	 * Copyright (c) 2011-2022, Christopher Jeffrey. (MIT Licensed)
	 * https://github.com/markedjs/marked
	 */

	/**
	 * DO NOT EDIT THIS FILE
	 * The code in this file is generated from files in ./src/
	 */

	function getDefaults() {
	  return {
	    baseUrl: null,
	    breaks: false,
	    extensions: null,
	    gfm: true,
	    headerIds: true,
	    headerPrefix: '',
	    highlight: null,
	    langPrefix: 'language-',
	    mangle: true,
	    pedantic: false,
	    renderer: null,
	    sanitize: false,
	    sanitizer: null,
	    silent: false,
	    smartLists: false,
	    smartypants: false,
	    tokenizer: null,
	    walkTokens: null,
	    xhtml: false
	  };
	}

	let defaults = getDefaults();

	function changeDefaults(newDefaults) {
	  defaults = newDefaults;
	}

	/**
	 * Helpers
	 */
	const escapeTest = /[&<>"']/;
	const escapeReplace = /[&<>"']/g;
	const escapeTestNoEncode = /[<>"']|&(?!#?\w+;)/;
	const escapeReplaceNoEncode = /[<>"']|&(?!#?\w+;)/g;
	const escapeReplacements = {
	  '&': '&amp;',
	  '<': '&lt;',
	  '>': '&gt;',
	  '"': '&quot;',
	  "'": '&#39;'
	};
	const getEscapeReplacement = (ch) => escapeReplacements[ch];
	function escape$2(html, encode) {
	  if (encode) {
	    if (escapeTest.test(html)) {
	      return html.replace(escapeReplace, getEscapeReplacement);
	    }
	  } else {
	    if (escapeTestNoEncode.test(html)) {
	      return html.replace(escapeReplaceNoEncode, getEscapeReplacement);
	    }
	  }

	  return html;
	}

	const unescapeTest = /&(#(?:\d+)|(?:#x[0-9A-Fa-f]+)|(?:\w+));?/ig;

	/**
	 * @param {string} html
	 */
	function unescape(html) {
	  // explicitly match decimal, hex, and named HTML entities
	  return html.replace(unescapeTest, (_, n) => {
	    n = n.toLowerCase();
	    if (n === 'colon') return ':';
	    if (n.charAt(0) === '#') {
	      return n.charAt(1) === 'x'
	        ? String.fromCharCode(parseInt(n.substring(2), 16))
	        : String.fromCharCode(+n.substring(1));
	    }
	    return '';
	  });
	}

	const caret = /(^|[^\[])\^/g;

	/**
	 * @param {string | RegExp} regex
	 * @param {string} opt
	 */
	function edit(regex, opt) {
	  regex = typeof regex === 'string' ? regex : regex.source;
	  opt = opt || '';
	  const obj = {
	    replace: (name, val) => {
	      val = val.source || val;
	      val = val.replace(caret, '$1');
	      regex = regex.replace(name, val);
	      return obj;
	    },
	    getRegex: () => {
	      return new RegExp(regex, opt);
	    }
	  };
	  return obj;
	}

	const nonWordAndColonTest = /[^\w:]/g;
	const originIndependentUrl = /^$|^[a-z][a-z0-9+.-]*:|^[?#]/i;

	/**
	 * @param {boolean} sanitize
	 * @param {string} base
	 * @param {string} href
	 */
	function cleanUrl(sanitize, base, href) {
	  if (sanitize) {
	    let prot;
	    try {
	      prot = decodeURIComponent(unescape(href))
	        .replace(nonWordAndColonTest, '')
	        .toLowerCase();
	    } catch (e) {
	      return null;
	    }
	    if (prot.indexOf('javascript:') === 0 || prot.indexOf('vbscript:') === 0 || prot.indexOf('data:') === 0) {
	      return null;
	    }
	  }
	  if (base && !originIndependentUrl.test(href)) {
	    href = resolveUrl(base, href);
	  }
	  try {
	    href = encodeURI(href).replace(/%25/g, '%');
	  } catch (e) {
	    return null;
	  }
	  return href;
	}

	const baseUrls = {};
	const justDomain = /^[^:]+:\/*[^/]*$/;
	const protocol = /^([^:]+:)[\s\S]*$/;
	const domain = /^([^:]+:\/*[^/]*)[\s\S]*$/;

	/**
	 * @param {string} base
	 * @param {string} href
	 */
	function resolveUrl(base, href) {
	  if (!baseUrls[' ' + base]) {
	    // we can ignore everything in base after the last slash of its path component,
	    // but we might need to add _that_
	    // https://tools.ietf.org/html/rfc3986#section-3
	    if (justDomain.test(base)) {
	      baseUrls[' ' + base] = base + '/';
	    } else {
	      baseUrls[' ' + base] = rtrim(base, '/', true);
	    }
	  }
	  base = baseUrls[' ' + base];
	  const relativeBase = base.indexOf(':') === -1;

	  if (href.substring(0, 2) === '//') {
	    if (relativeBase) {
	      return href;
	    }
	    return base.replace(protocol, '$1') + href;
	  } else if (href.charAt(0) === '/') {
	    if (relativeBase) {
	      return href;
	    }
	    return base.replace(domain, '$1') + href;
	  } else {
	    return base + href;
	  }
	}

	const noopTest = { exec: function noopTest() {} };

	function merge(obj) {
	  let i = 1,
	    target,
	    key;

	  for (; i < arguments.length; i++) {
	    target = arguments[i];
	    for (key in target) {
	      if (Object.prototype.hasOwnProperty.call(target, key)) {
	        obj[key] = target[key];
	      }
	    }
	  }

	  return obj;
	}

	function splitCells(tableRow, count) {
	  // ensure that every cell-delimiting pipe has a space
	  // before it to distinguish it from an escaped pipe
	  const row = tableRow.replace(/\|/g, (match, offset, str) => {
	      let escaped = false,
	        curr = offset;
	      while (--curr >= 0 && str[curr] === '\\') escaped = !escaped;
	      if (escaped) {
	        // odd number of slashes means | is escaped
	        // so we leave it alone
	        return '|';
	      } else {
	        // add space before unescaped |
	        return ' |';
	      }
	    }),
	    cells = row.split(/ \|/);
	  let i = 0;

	  // First/last cell in a row cannot be empty if it has no leading/trailing pipe
	  if (!cells[0].trim()) { cells.shift(); }
	  if (cells.length > 0 && !cells[cells.length - 1].trim()) { cells.pop(); }

	  if (cells.length > count) {
	    cells.splice(count);
	  } else {
	    while (cells.length < count) cells.push('');
	  }

	  for (; i < cells.length; i++) {
	    // leading or trailing whitespace is ignored per the gfm spec
	    cells[i] = cells[i].trim().replace(/\\\|/g, '|');
	  }
	  return cells;
	}

	/**
	 * Remove trailing 'c's. Equivalent to str.replace(/c*$/, '').
	 * /c*$/ is vulnerable to REDOS.
	 *
	 * @param {string} str
	 * @param {string} c
	 * @param {boolean} invert Remove suffix of non-c chars instead. Default falsey.
	 */
	function rtrim(str, c, invert) {
	  const l = str.length;
	  if (l === 0) {
	    return '';
	  }

	  // Length of suffix matching the invert condition.
	  let suffLen = 0;

	  // Step left until we fail to match the invert condition.
	  while (suffLen < l) {
	    const currChar = str.charAt(l - suffLen - 1);
	    if (currChar === c && !invert) {
	      suffLen++;
	    } else if (currChar !== c && invert) {
	      suffLen++;
	    } else {
	      break;
	    }
	  }

	  return str.slice(0, l - suffLen);
	}

	function findClosingBracket(str, b) {
	  if (str.indexOf(b[1]) === -1) {
	    return -1;
	  }
	  const l = str.length;
	  let level = 0,
	    i = 0;
	  for (; i < l; i++) {
	    if (str[i] === '\\') {
	      i++;
	    } else if (str[i] === b[0]) {
	      level++;
	    } else if (str[i] === b[1]) {
	      level--;
	      if (level < 0) {
	        return i;
	      }
	    }
	  }
	  return -1;
	}

	function checkSanitizeDeprecation(opt) {
	  if (opt && opt.sanitize && !opt.silent) {
	    console.warn('marked(): sanitize and sanitizer parameters are deprecated since version 0.7.0, should not be used and will be removed in the future. Read more here: https://marked.js.org/#/USING_ADVANCED.md#options');
	  }
	}

	// copied from https://stackoverflow.com/a/5450113/806777
	/**
	 * @param {string} pattern
	 * @param {number} count
	 */
	function repeatString(pattern, count) {
	  if (count < 1) {
	    return '';
	  }
	  let result = '';
	  while (count > 1) {
	    if (count & 1) {
	      result += pattern;
	    }
	    count >>= 1;
	    pattern += pattern;
	  }
	  return result + pattern;
	}

	function outputLink(cap, link, raw, lexer) {
	  const href = link.href;
	  const title = link.title ? escape$2(link.title) : null;
	  const text = cap[1].replace(/\\([\[\]])/g, '$1');

	  if (cap[0].charAt(0) !== '!') {
	    lexer.state.inLink = true;
	    const token = {
	      type: 'link',
	      raw,
	      href,
	      title,
	      text,
	      tokens: lexer.inlineTokens(text, [])
	    };
	    lexer.state.inLink = false;
	    return token;
	  }
	  return {
	    type: 'image',
	    raw,
	    href,
	    title,
	    text: escape$2(text)
	  };
	}

	function indentCodeCompensation(raw, text) {
	  const matchIndentToCode = raw.match(/^(\s+)(?:```)/);

	  if (matchIndentToCode === null) {
	    return text;
	  }

	  const indentToCode = matchIndentToCode[1];

	  return text
	    .split('\n')
	    .map(node => {
	      const matchIndentInNode = node.match(/^\s+/);
	      if (matchIndentInNode === null) {
	        return node;
	      }

	      const [indentInNode] = matchIndentInNode;

	      if (indentInNode.length >= indentToCode.length) {
	        return node.slice(indentToCode.length);
	      }

	      return node;
	    })
	    .join('\n');
	}

	/**
	 * Tokenizer
	 */
	class Tokenizer {
	  constructor(options) {
	    this.options = options || defaults;
	  }

	  space(src) {
	    const cap = this.rules.block.newline.exec(src);
	    if (cap && cap[0].length > 0) {
	      return {
	        type: 'space',
	        raw: cap[0]
	      };
	    }
	  }

	  code(src) {
	    const cap = this.rules.block.code.exec(src);
	    if (cap) {
	      const text = cap[0].replace(/^ {1,4}/gm, '');
	      return {
	        type: 'code',
	        raw: cap[0],
	        codeBlockStyle: 'indented',
	        text: !this.options.pedantic
	          ? rtrim(text, '\n')
	          : text
	      };
	    }
	  }

	  fences(src) {
	    const cap = this.rules.block.fences.exec(src);
	    if (cap) {
	      const raw = cap[0];
	      const text = indentCodeCompensation(raw, cap[3] || '');

	      return {
	        type: 'code',
	        raw,
	        lang: cap[2] ? cap[2].trim() : cap[2],
	        text
	      };
	    }
	  }

	  heading(src) {
	    const cap = this.rules.block.heading.exec(src);
	    if (cap) {
	      let text = cap[2].trim();

	      // remove trailing #s
	      if (/#$/.test(text)) {
	        const trimmed = rtrim(text, '#');
	        if (this.options.pedantic) {
	          text = trimmed.trim();
	        } else if (!trimmed || / $/.test(trimmed)) {
	          // CommonMark requires space before trailing #s
	          text = trimmed.trim();
	        }
	      }

	      const token = {
	        type: 'heading',
	        raw: cap[0],
	        depth: cap[1].length,
	        text,
	        tokens: []
	      };
	      this.lexer.inline(token.text, token.tokens);
	      return token;
	    }
	  }

	  hr(src) {
	    const cap = this.rules.block.hr.exec(src);
	    if (cap) {
	      return {
	        type: 'hr',
	        raw: cap[0]
	      };
	    }
	  }

	  blockquote(src) {
	    const cap = this.rules.block.blockquote.exec(src);
	    if (cap) {
	      const text = cap[0].replace(/^ *>[ \t]?/gm, '');

	      return {
	        type: 'blockquote',
	        raw: cap[0],
	        tokens: this.lexer.blockTokens(text, []),
	        text
	      };
	    }
	  }

	  list(src) {
	    let cap = this.rules.block.list.exec(src);
	    if (cap) {
	      let raw, istask, ischecked, indent, i, blankLine, endsWithBlankLine,
	        line, nextLine, rawLine, itemContents, endEarly;

	      let bull = cap[1].trim();
	      const isordered = bull.length > 1;

	      const list = {
	        type: 'list',
	        raw: '',
	        ordered: isordered,
	        start: isordered ? +bull.slice(0, -1) : '',
	        loose: false,
	        items: []
	      };

	      bull = isordered ? `\\d{1,9}\\${bull.slice(-1)}` : `\\${bull}`;

	      if (this.options.pedantic) {
	        bull = isordered ? bull : '[*+-]';
	      }

	      // Get next list item
	      const itemRegex = new RegExp(`^( {0,3}${bull})((?:[\t ][^\\n]*)?(?:\\n|$))`);

	      // Check if current bullet point can start a new List Item
	      while (src) {
	        endEarly = false;
	        if (!(cap = itemRegex.exec(src))) {
	          break;
	        }

	        if (this.rules.block.hr.test(src)) { // End list if bullet was actually HR (possibly move into itemRegex?)
	          break;
	        }

	        raw = cap[0];
	        src = src.substring(raw.length);

	        line = cap[2].split('\n', 1)[0];
	        nextLine = src.split('\n', 1)[0];

	        if (this.options.pedantic) {
	          indent = 2;
	          itemContents = line.trimLeft();
	        } else {
	          indent = cap[2].search(/[^ ]/); // Find first non-space char
	          indent = indent > 4 ? 1 : indent; // Treat indented code blocks (> 4 spaces) as having only 1 indent
	          itemContents = line.slice(indent);
	          indent += cap[1].length;
	        }

	        blankLine = false;

	        if (!line && /^ *$/.test(nextLine)) { // Items begin with at most one blank line
	          raw += nextLine + '\n';
	          src = src.substring(nextLine.length + 1);
	          endEarly = true;
	        }

	        if (!endEarly) {
	          const nextBulletRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:[*+-]|\\d{1,9}[.)])((?: [^\\n]*)?(?:\\n|$))`);
	          const hrRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}((?:- *){3,}|(?:_ *){3,}|(?:\\* *){3,})(?:\\n+|$)`);
	          const fencesBeginRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:\`\`\`|~~~)`);
	          const headingBeginRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}#`);

	          // Check if following lines should be included in List Item
	          while (src) {
	            rawLine = src.split('\n', 1)[0];
	            line = rawLine;

	            // Re-align to follow commonmark nesting rules
	            if (this.options.pedantic) {
	              line = line.replace(/^ {1,4}(?=( {4})*[^ ])/g, '  ');
	            }

	            // End list item if found code fences
	            if (fencesBeginRegex.test(line)) {
	              break;
	            }

	            // End list item if found start of new heading
	            if (headingBeginRegex.test(line)) {
	              break;
	            }

	            // End list item if found start of new bullet
	            if (nextBulletRegex.test(line)) {
	              break;
	            }

	            // Horizontal rule found
	            if (hrRegex.test(src)) {
	              break;
	            }

	            if (line.search(/[^ ]/) >= indent || !line.trim()) { // Dedent if possible
	              itemContents += '\n' + line.slice(indent);
	            } else if (!blankLine) { // Until blank line, item doesn't need indentation
	              itemContents += '\n' + line;
	            } else { // Otherwise, improper indentation ends this item
	              break;
	            }

	            if (!blankLine && !line.trim()) { // Check if current line is blank
	              blankLine = true;
	            }

	            raw += rawLine + '\n';
	            src = src.substring(rawLine.length + 1);
	          }
	        }

	        if (!list.loose) {
	          // If the previous item ended with a blank line, the list is loose
	          if (endsWithBlankLine) {
	            list.loose = true;
	          } else if (/\n *\n *$/.test(raw)) {
	            endsWithBlankLine = true;
	          }
	        }

	        // Check for task list items
	        if (this.options.gfm) {
	          istask = /^\[[ xX]\] /.exec(itemContents);
	          if (istask) {
	            ischecked = istask[0] !== '[ ] ';
	            itemContents = itemContents.replace(/^\[[ xX]\] +/, '');
	          }
	        }

	        list.items.push({
	          type: 'list_item',
	          raw,
	          task: !!istask,
	          checked: ischecked,
	          loose: false,
	          text: itemContents
	        });

	        list.raw += raw;
	      }

	      // Do not consume newlines at end of final item. Alternatively, make itemRegex *start* with any newlines to simplify/speed up endsWithBlankLine logic
	      list.items[list.items.length - 1].raw = raw.trimRight();
	      list.items[list.items.length - 1].text = itemContents.trimRight();
	      list.raw = list.raw.trimRight();

	      const l = list.items.length;

	      // Item child tokens handled here at end because we needed to have the final item to trim it first
	      for (i = 0; i < l; i++) {
	        this.lexer.state.top = false;
	        list.items[i].tokens = this.lexer.blockTokens(list.items[i].text, []);
	        const spacers = list.items[i].tokens.filter(t => t.type === 'space');
	        const hasMultipleLineBreaks = spacers.every(t => {
	          const chars = t.raw.split('');
	          let lineBreaks = 0;
	          for (const char of chars) {
	            if (char === '\n') {
	              lineBreaks += 1;
	            }
	            if (lineBreaks > 1) {
	              return true;
	            }
	          }

	          return false;
	        });

	        if (!list.loose && spacers.length && hasMultipleLineBreaks) {
	          // Having a single line break doesn't mean a list is loose. A single line break is terminating the last list item
	          list.loose = true;
	          list.items[i].loose = true;
	        }
	      }

	      return list;
	    }
	  }

	  html(src) {
	    const cap = this.rules.block.html.exec(src);
	    if (cap) {
	      const token = {
	        type: 'html',
	        raw: cap[0],
	        pre: !this.options.sanitizer
	          && (cap[1] === 'pre' || cap[1] === 'script' || cap[1] === 'style'),
	        text: cap[0]
	      };
	      if (this.options.sanitize) {
	        token.type = 'paragraph';
	        token.text = this.options.sanitizer ? this.options.sanitizer(cap[0]) : escape$2(cap[0]);
	        token.tokens = [];
	        this.lexer.inline(token.text, token.tokens);
	      }
	      return token;
	    }
	  }

	  def(src) {
	    const cap = this.rules.block.def.exec(src);
	    if (cap) {
	      if (cap[3]) cap[3] = cap[3].substring(1, cap[3].length - 1);
	      const tag = cap[1].toLowerCase().replace(/\s+/g, ' ');
	      return {
	        type: 'def',
	        tag,
	        raw: cap[0],
	        href: cap[2],
	        title: cap[3]
	      };
	    }
	  }

	  table(src) {
	    const cap = this.rules.block.table.exec(src);
	    if (cap) {
	      const item = {
	        type: 'table',
	        header: splitCells(cap[1]).map(c => { return { text: c }; }),
	        align: cap[2].replace(/^ *|\| *$/g, '').split(/ *\| */),
	        rows: cap[3] && cap[3].trim() ? cap[3].replace(/\n[ \t]*$/, '').split('\n') : []
	      };

	      if (item.header.length === item.align.length) {
	        item.raw = cap[0];

	        let l = item.align.length;
	        let i, j, k, row;
	        for (i = 0; i < l; i++) {
	          if (/^ *-+: *$/.test(item.align[i])) {
	            item.align[i] = 'right';
	          } else if (/^ *:-+: *$/.test(item.align[i])) {
	            item.align[i] = 'center';
	          } else if (/^ *:-+ *$/.test(item.align[i])) {
	            item.align[i] = 'left';
	          } else {
	            item.align[i] = null;
	          }
	        }

	        l = item.rows.length;
	        for (i = 0; i < l; i++) {
	          item.rows[i] = splitCells(item.rows[i], item.header.length).map(c => { return { text: c }; });
	        }

	        // parse child tokens inside headers and cells

	        // header child tokens
	        l = item.header.length;
	        for (j = 0; j < l; j++) {
	          item.header[j].tokens = [];
	          this.lexer.inline(item.header[j].text, item.header[j].tokens);
	        }

	        // cell child tokens
	        l = item.rows.length;
	        for (j = 0; j < l; j++) {
	          row = item.rows[j];
	          for (k = 0; k < row.length; k++) {
	            row[k].tokens = [];
	            this.lexer.inline(row[k].text, row[k].tokens);
	          }
	        }

	        return item;
	      }
	    }
	  }

	  lheading(src) {
	    const cap = this.rules.block.lheading.exec(src);
	    if (cap) {
	      const token = {
	        type: 'heading',
	        raw: cap[0],
	        depth: cap[2].charAt(0) === '=' ? 1 : 2,
	        text: cap[1],
	        tokens: []
	      };
	      this.lexer.inline(token.text, token.tokens);
	      return token;
	    }
	  }

	  paragraph(src) {
	    const cap = this.rules.block.paragraph.exec(src);
	    if (cap) {
	      const token = {
	        type: 'paragraph',
	        raw: cap[0],
	        text: cap[1].charAt(cap[1].length - 1) === '\n'
	          ? cap[1].slice(0, -1)
	          : cap[1],
	        tokens: []
	      };
	      this.lexer.inline(token.text, token.tokens);
	      return token;
	    }
	  }

	  text(src) {
	    const cap = this.rules.block.text.exec(src);
	    if (cap) {
	      const token = {
	        type: 'text',
	        raw: cap[0],
	        text: cap[0],
	        tokens: []
	      };
	      this.lexer.inline(token.text, token.tokens);
	      return token;
	    }
	  }

	  escape(src) {
	    const cap = this.rules.inline.escape.exec(src);
	    if (cap) {
	      return {
	        type: 'escape',
	        raw: cap[0],
	        text: escape$2(cap[1])
	      };
	    }
	  }

	  tag(src) {
	    const cap = this.rules.inline.tag.exec(src);
	    if (cap) {
	      if (!this.lexer.state.inLink && /^<a /i.test(cap[0])) {
	        this.lexer.state.inLink = true;
	      } else if (this.lexer.state.inLink && /^<\/a>/i.test(cap[0])) {
	        this.lexer.state.inLink = false;
	      }
	      if (!this.lexer.state.inRawBlock && /^<(pre|code|kbd|script)(\s|>)/i.test(cap[0])) {
	        this.lexer.state.inRawBlock = true;
	      } else if (this.lexer.state.inRawBlock && /^<\/(pre|code|kbd|script)(\s|>)/i.test(cap[0])) {
	        this.lexer.state.inRawBlock = false;
	      }

	      return {
	        type: this.options.sanitize
	          ? 'text'
	          : 'html',
	        raw: cap[0],
	        inLink: this.lexer.state.inLink,
	        inRawBlock: this.lexer.state.inRawBlock,
	        text: this.options.sanitize
	          ? (this.options.sanitizer
	            ? this.options.sanitizer(cap[0])
	            : escape$2(cap[0]))
	          : cap[0]
	      };
	    }
	  }

	  link(src) {
	    const cap = this.rules.inline.link.exec(src);
	    if (cap) {
	      const trimmedUrl = cap[2].trim();
	      if (!this.options.pedantic && /^</.test(trimmedUrl)) {
	        // commonmark requires matching angle brackets
	        if (!(/>$/.test(trimmedUrl))) {
	          return;
	        }

	        // ending angle bracket cannot be escaped
	        const rtrimSlash = rtrim(trimmedUrl.slice(0, -1), '\\');
	        if ((trimmedUrl.length - rtrimSlash.length) % 2 === 0) {
	          return;
	        }
	      } else {
	        // find closing parenthesis
	        const lastParenIndex = findClosingBracket(cap[2], '()');
	        if (lastParenIndex > -1) {
	          const start = cap[0].indexOf('!') === 0 ? 5 : 4;
	          const linkLen = start + cap[1].length + lastParenIndex;
	          cap[2] = cap[2].substring(0, lastParenIndex);
	          cap[0] = cap[0].substring(0, linkLen).trim();
	          cap[3] = '';
	        }
	      }
	      let href = cap[2];
	      let title = '';
	      if (this.options.pedantic) {
	        // split pedantic href and title
	        const link = /^([^'"]*[^\s])\s+(['"])(.*)\2/.exec(href);

	        if (link) {
	          href = link[1];
	          title = link[3];
	        }
	      } else {
	        title = cap[3] ? cap[3].slice(1, -1) : '';
	      }

	      href = href.trim();
	      if (/^</.test(href)) {
	        if (this.options.pedantic && !(/>$/.test(trimmedUrl))) {
	          // pedantic allows starting angle bracket without ending angle bracket
	          href = href.slice(1);
	        } else {
	          href = href.slice(1, -1);
	        }
	      }
	      return outputLink(cap, {
	        href: href ? href.replace(this.rules.inline._escapes, '$1') : href,
	        title: title ? title.replace(this.rules.inline._escapes, '$1') : title
	      }, cap[0], this.lexer);
	    }
	  }

	  reflink(src, links) {
	    let cap;
	    if ((cap = this.rules.inline.reflink.exec(src))
	        || (cap = this.rules.inline.nolink.exec(src))) {
	      let link = (cap[2] || cap[1]).replace(/\s+/g, ' ');
	      link = links[link.toLowerCase()];
	      if (!link || !link.href) {
	        const text = cap[0].charAt(0);
	        return {
	          type: 'text',
	          raw: text,
	          text
	        };
	      }
	      return outputLink(cap, link, cap[0], this.lexer);
	    }
	  }

	  emStrong(src, maskedSrc, prevChar = '') {
	    let match = this.rules.inline.emStrong.lDelim.exec(src);
	    if (!match) return;

	    // _ can't be between two alphanumerics. \p{L}\p{N} includes non-english alphabet/numbers as well
	    if (match[3] && prevChar.match(/[\p{L}\p{N}]/u)) return;

	    const nextChar = match[1] || match[2] || '';

	    if (!nextChar || (nextChar && (prevChar === '' || this.rules.inline.punctuation.exec(prevChar)))) {
	      const lLength = match[0].length - 1;
	      let rDelim, rLength, delimTotal = lLength, midDelimTotal = 0;

	      const endReg = match[0][0] === '*' ? this.rules.inline.emStrong.rDelimAst : this.rules.inline.emStrong.rDelimUnd;
	      endReg.lastIndex = 0;

	      // Clip maskedSrc to same section of string as src (move to lexer?)
	      maskedSrc = maskedSrc.slice(-1 * src.length + lLength);

	      while ((match = endReg.exec(maskedSrc)) != null) {
	        rDelim = match[1] || match[2] || match[3] || match[4] || match[5] || match[6];

	        if (!rDelim) continue; // skip single * in __abc*abc__

	        rLength = rDelim.length;

	        if (match[3] || match[4]) { // found another Left Delim
	          delimTotal += rLength;
	          continue;
	        } else if (match[5] || match[6]) { // either Left or Right Delim
	          if (lLength % 3 && !((lLength + rLength) % 3)) {
	            midDelimTotal += rLength;
	            continue; // CommonMark Emphasis Rules 9-10
	          }
	        }

	        delimTotal -= rLength;

	        if (delimTotal > 0) continue; // Haven't found enough closing delimiters

	        // Remove extra characters. *a*** -> *a*
	        rLength = Math.min(rLength, rLength + delimTotal + midDelimTotal);

	        // Create `em` if smallest delimiter has odd char count. *a***
	        if (Math.min(lLength, rLength) % 2) {
	          const text = src.slice(1, lLength + match.index + rLength);
	          return {
	            type: 'em',
	            raw: src.slice(0, lLength + match.index + rLength + 1),
	            text,
	            tokens: this.lexer.inlineTokens(text, [])
	          };
	        }

	        // Create 'strong' if smallest delimiter has even char count. **a***
	        const text = src.slice(2, lLength + match.index + rLength - 1);
	        return {
	          type: 'strong',
	          raw: src.slice(0, lLength + match.index + rLength + 1),
	          text,
	          tokens: this.lexer.inlineTokens(text, [])
	        };
	      }
	    }
	  }

	  codespan(src) {
	    const cap = this.rules.inline.code.exec(src);
	    if (cap) {
	      let text = cap[2].replace(/\n/g, ' ');
	      const hasNonSpaceChars = /[^ ]/.test(text);
	      const hasSpaceCharsOnBothEnds = /^ /.test(text) && / $/.test(text);
	      if (hasNonSpaceChars && hasSpaceCharsOnBothEnds) {
	        text = text.substring(1, text.length - 1);
	      }
	      text = escape$2(text, true);
	      return {
	        type: 'codespan',
	        raw: cap[0],
	        text
	      };
	    }
	  }

	  br(src) {
	    const cap = this.rules.inline.br.exec(src);
	    if (cap) {
	      return {
	        type: 'br',
	        raw: cap[0]
	      };
	    }
	  }

	  del(src) {
	    const cap = this.rules.inline.del.exec(src);
	    if (cap) {
	      return {
	        type: 'del',
	        raw: cap[0],
	        text: cap[2],
	        tokens: this.lexer.inlineTokens(cap[2], [])
	      };
	    }
	  }

	  autolink(src, mangle) {
	    const cap = this.rules.inline.autolink.exec(src);
	    if (cap) {
	      let text, href;
	      if (cap[2] === '@') {
	        text = escape$2(this.options.mangle ? mangle(cap[1]) : cap[1]);
	        href = 'mailto:' + text;
	      } else {
	        text = escape$2(cap[1]);
	        href = text;
	      }

	      return {
	        type: 'link',
	        raw: cap[0],
	        text,
	        href,
	        tokens: [
	          {
	            type: 'text',
	            raw: text,
	            text
	          }
	        ]
	      };
	    }
	  }

	  url(src, mangle) {
	    let cap;
	    if (cap = this.rules.inline.url.exec(src)) {
	      let text, href;
	      if (cap[2] === '@') {
	        text = escape$2(this.options.mangle ? mangle(cap[0]) : cap[0]);
	        href = 'mailto:' + text;
	      } else {
	        // do extended autolink path validation
	        let prevCapZero;
	        do {
	          prevCapZero = cap[0];
	          cap[0] = this.rules.inline._backpedal.exec(cap[0])[0];
	        } while (prevCapZero !== cap[0]);
	        text = escape$2(cap[0]);
	        if (cap[1] === 'www.') {
	          href = 'http://' + text;
	        } else {
	          href = text;
	        }
	      }
	      return {
	        type: 'link',
	        raw: cap[0],
	        text,
	        href,
	        tokens: [
	          {
	            type: 'text',
	            raw: text,
	            text
	          }
	        ]
	      };
	    }
	  }

	  inlineText(src, smartypants) {
	    const cap = this.rules.inline.text.exec(src);
	    if (cap) {
	      let text;
	      if (this.lexer.state.inRawBlock) {
	        text = this.options.sanitize ? (this.options.sanitizer ? this.options.sanitizer(cap[0]) : escape$2(cap[0])) : cap[0];
	      } else {
	        text = escape$2(this.options.smartypants ? smartypants(cap[0]) : cap[0]);
	      }
	      return {
	        type: 'text',
	        raw: cap[0],
	        text
	      };
	    }
	  }
	}

	/**
	 * Block-Level Grammar
	 */
	const block = {
	  newline: /^(?: *(?:\n|$))+/,
	  code: /^( {4}[^\n]+(?:\n(?: *(?:\n|$))*)?)+/,
	  fences: /^ {0,3}(`{3,}(?=[^`\n]*\n)|~{3,})([^\n]*)\n(?:|([\s\S]*?)\n)(?: {0,3}\1[~`]* *(?=\n|$)|$)/,
	  hr: /^ {0,3}((?:-[\t ]*){3,}|(?:_[ \t]*){3,}|(?:\*[ \t]*){3,})(?:\n+|$)/,
	  heading: /^ {0,3}(#{1,6})(?=\s|$)(.*)(?:\n+|$)/,
	  blockquote: /^( {0,3}> ?(paragraph|[^\n]*)(?:\n|$))+/,
	  list: /^( {0,3}bull)([ \t][^\n]+?)?(?:\n|$)/,
	  html: '^ {0,3}(?:' // optional indentation
	    + '<(script|pre|style|textarea)[\\s>][\\s\\S]*?(?:</\\1>[^\\n]*\\n+|$)' // (1)
	    + '|comment[^\\n]*(\\n+|$)' // (2)
	    + '|<\\?[\\s\\S]*?(?:\\?>\\n*|$)' // (3)
	    + '|<![A-Z][\\s\\S]*?(?:>\\n*|$)' // (4)
	    + '|<!\\[CDATA\\[[\\s\\S]*?(?:\\]\\]>\\n*|$)' // (5)
	    + '|</?(tag)(?: +|\\n|/?>)[\\s\\S]*?(?:(?:\\n *)+\\n|$)' // (6)
	    + '|<(?!script|pre|style|textarea)([a-z][\\w-]*)(?:attribute)*? */?>(?=[ \\t]*(?:\\n|$))[\\s\\S]*?(?:(?:\\n *)+\\n|$)' // (7) open tag
	    + '|</(?!script|pre|style|textarea)[a-z][\\w-]*\\s*>(?=[ \\t]*(?:\\n|$))[\\s\\S]*?(?:(?:\\n *)+\\n|$)' // (7) closing tag
	    + ')',
	  def: /^ {0,3}\[(label)\]: *(?:\n *)?<?([^\s>]+)>?(?:(?: +(?:\n *)?| *\n *)(title))? *(?:\n+|$)/,
	  table: noopTest,
	  lheading: /^([^\n]+)\n {0,3}(=+|-+) *(?:\n+|$)/,
	  // regex template, placeholders will be replaced according to different paragraph
	  // interruption rules of commonmark and the original markdown spec:
	  _paragraph: /^([^\n]+(?:\n(?!hr|heading|lheading|blockquote|fences|list|html|table| +\n)[^\n]+)*)/,
	  text: /^[^\n]+/
	};

	block._label = /(?!\s*\])(?:\\.|[^\[\]\\])+/;
	block._title = /(?:"(?:\\"?|[^"\\])*"|'[^'\n]*(?:\n[^'\n]+)*\n?'|\([^()]*\))/;
	block.def = edit(block.def)
	  .replace('label', block._label)
	  .replace('title', block._title)
	  .getRegex();

	block.bullet = /(?:[*+-]|\d{1,9}[.)])/;
	block.listItemStart = edit(/^( *)(bull) */)
	  .replace('bull', block.bullet)
	  .getRegex();

	block.list = edit(block.list)
	  .replace(/bull/g, block.bullet)
	  .replace('hr', '\\n+(?=\\1?(?:(?:- *){3,}|(?:_ *){3,}|(?:\\* *){3,})(?:\\n+|$))')
	  .replace('def', '\\n+(?=' + block.def.source + ')')
	  .getRegex();

	block._tag = 'address|article|aside|base|basefont|blockquote|body|caption'
	  + '|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption'
	  + '|figure|footer|form|frame|frameset|h[1-6]|head|header|hr|html|iframe'
	  + '|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option'
	  + '|p|param|section|source|summary|table|tbody|td|tfoot|th|thead|title|tr'
	  + '|track|ul';
	block._comment = /<!--(?!-?>)[\s\S]*?(?:-->|$)/;
	block.html = edit(block.html, 'i')
	  .replace('comment', block._comment)
	  .replace('tag', block._tag)
	  .replace('attribute', / +[a-zA-Z:_][\w.:-]*(?: *= *"[^"\n]*"| *= *'[^'\n]*'| *= *[^\s"'=<>`]+)?/)
	  .getRegex();

	block.paragraph = edit(block._paragraph)
	  .replace('hr', block.hr)
	  .replace('heading', ' {0,3}#{1,6} ')
	  .replace('|lheading', '') // setex headings don't interrupt commonmark paragraphs
	  .replace('|table', '')
	  .replace('blockquote', ' {0,3}>')
	  .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\n]*\\n)|~{3,})[^\\n]*\\n')
	  .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt
	  .replace('html', '</?(?:tag)(?: +|\\n|/?>)|<(?:script|pre|style|textarea|!--)')
	  .replace('tag', block._tag) // pars can be interrupted by type (6) html blocks
	  .getRegex();

	block.blockquote = edit(block.blockquote)
	  .replace('paragraph', block.paragraph)
	  .getRegex();

	/**
	 * Normal Block Grammar
	 */

	block.normal = merge({}, block);

	/**
	 * GFM Block Grammar
	 */

	block.gfm = merge({}, block.normal, {
	  table: '^ *([^\\n ].*\\|.*)\\n' // Header
	    + ' {0,3}(?:\\| *)?(:?-+:? *(?:\\| *:?-+:? *)*)(?:\\| *)?' // Align
	    + '(?:\\n((?:(?! *\\n|hr|heading|blockquote|code|fences|list|html).*(?:\\n|$))*)\\n*|$)' // Cells
	});

	block.gfm.table = edit(block.gfm.table)
	  .replace('hr', block.hr)
	  .replace('heading', ' {0,3}#{1,6} ')
	  .replace('blockquote', ' {0,3}>')
	  .replace('code', ' {4}[^\\n]')
	  .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\n]*\\n)|~{3,})[^\\n]*\\n')
	  .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt
	  .replace('html', '</?(?:tag)(?: +|\\n|/?>)|<(?:script|pre|style|textarea|!--)')
	  .replace('tag', block._tag) // tables can be interrupted by type (6) html blocks
	  .getRegex();

	block.gfm.paragraph = edit(block._paragraph)
	  .replace('hr', block.hr)
	  .replace('heading', ' {0,3}#{1,6} ')
	  .replace('|lheading', '') // setex headings don't interrupt commonmark paragraphs
	  .replace('table', block.gfm.table) // interrupt paragraphs with table
	  .replace('blockquote', ' {0,3}>')
	  .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\n]*\\n)|~{3,})[^\\n]*\\n')
	  .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt
	  .replace('html', '</?(?:tag)(?: +|\\n|/?>)|<(?:script|pre|style|textarea|!--)')
	  .replace('tag', block._tag) // pars can be interrupted by type (6) html blocks
	  .getRegex();
	/**
	 * Pedantic grammar (original John Gruber's loose markdown specification)
	 */

	block.pedantic = merge({}, block.normal, {
	  html: edit(
	    '^ *(?:comment *(?:\\n|\\s*$)'
	    + '|<(tag)[\\s\\S]+?</\\1> *(?:\\n{2,}|\\s*$)' // closed tag
	    + '|<tag(?:"[^"]*"|\'[^\']*\'|\\s[^\'"/>\\s]*)*?/?> *(?:\\n{2,}|\\s*$))')
	    .replace('comment', block._comment)
	    .replace(/tag/g, '(?!(?:'
	      + 'a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub'
	      + '|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)'
	      + '\\b)\\w+(?!:|[^\\w\\s@]*@)\\b')
	    .getRegex(),
	  def: /^ *\[([^\]]+)\]: *<?([^\s>]+)>?(?: +(["(][^\n]+[")]))? *(?:\n+|$)/,
	  heading: /^(#{1,6})(.*)(?:\n+|$)/,
	  fences: noopTest, // fences not supported
	  paragraph: edit(block.normal._paragraph)
	    .replace('hr', block.hr)
	    .replace('heading', ' *#{1,6} *[^\n]')
	    .replace('lheading', block.lheading)
	    .replace('blockquote', ' {0,3}>')
	    .replace('|fences', '')
	    .replace('|list', '')
	    .replace('|html', '')
	    .getRegex()
	});

	/**
	 * Inline-Level Grammar
	 */
	const inline = {
	  escape: /^\\([!"#$%&'()*+,\-./:;<=>?@\[\]\\^_`{|}~])/,
	  autolink: /^<(scheme:[^\s\x00-\x1f<>]*|email)>/,
	  url: noopTest,
	  tag: '^comment'
	    + '|^</[a-zA-Z][\\w:-]*\\s*>' // self-closing tag
	    + '|^<[a-zA-Z][\\w-]*(?:attribute)*?\\s*/?>' // open tag
	    + '|^<\\?[\\s\\S]*?\\?>' // processing instruction, e.g. <?php ?>
	    + '|^<![a-zA-Z]+\\s[\\s\\S]*?>' // declaration, e.g. <!DOCTYPE html>
	    + '|^<!\\[CDATA\\[[\\s\\S]*?\\]\\]>', // CDATA section
	  link: /^!?\[(label)\]\(\s*(href)(?:\s+(title))?\s*\)/,
	  reflink: /^!?\[(label)\]\[(ref)\]/,
	  nolink: /^!?\[(ref)\](?:\[\])?/,
	  reflinkSearch: 'reflink|nolink(?!\\()',
	  emStrong: {
	    lDelim: /^(?:\*+(?:([punct_])|[^\s*]))|^_+(?:([punct*])|([^\s_]))/,
	    //        (1) and (2) can only be a Right Delimiter. (3) and (4) can only be Left.  (5) and (6) can be either Left or Right.
	    //          () Skip orphan inside strong  () Consume to delim (1) #***                (2) a***#, a***                   (3) #***a, ***a                 (4) ***#              (5) #***#                 (6) a***a
	    rDelimAst: /^[^_*]*?\_\_[^_*]*?\*[^_*]*?(?=\_\_)|[^*]+(?=[^*])|[punct_](\*+)(?=[\s]|$)|[^punct*_\s](\*+)(?=[punct_\s]|$)|[punct_\s](\*+)(?=[^punct*_\s])|[\s](\*+)(?=[punct_])|[punct_](\*+)(?=[punct_])|[^punct*_\s](\*+)(?=[^punct*_\s])/,
	    rDelimUnd: /^[^_*]*?\*\*[^_*]*?\_[^_*]*?(?=\*\*)|[^_]+(?=[^_])|[punct*](\_+)(?=[\s]|$)|[^punct*_\s](\_+)(?=[punct*\s]|$)|[punct*\s](\_+)(?=[^punct*_\s])|[\s](\_+)(?=[punct*])|[punct*](\_+)(?=[punct*])/ // ^- Not allowed for _
	  },
	  code: /^(`+)([^`]|[^`][\s\S]*?[^`])\1(?!`)/,
	  br: /^( {2,}|\\)\n(?!\s*$)/,
	  del: noopTest,
	  text: /^(`+|[^`])(?:(?= {2,}\n)|[\s\S]*?(?:(?=[\\<!\[`*_]|\b_|$)|[^ ](?= {2,}\n)))/,
	  punctuation: /^([\spunctuation])/
	};

	// list of punctuation marks from CommonMark spec
	// without * and _ to handle the different emphasis markers * and _
	inline._punctuation = '!"#$%&\'()+\\-.,/:;<=>?@\\[\\]`^{|}~';
	inline.punctuation = edit(inline.punctuation).replace(/punctuation/g, inline._punctuation).getRegex();

	// sequences em should skip over [title](link), `code`, <html>
	inline.blockSkip = /\[[^\]]*?\]\([^\)]*?\)|`[^`]*?`|<[^>]*?>/g;
	inline.escapedEmSt = /\\\*|\\_/g;

	inline._comment = edit(block._comment).replace('(?:-->|$)', '-->').getRegex();

	inline.emStrong.lDelim = edit(inline.emStrong.lDelim)
	  .replace(/punct/g, inline._punctuation)
	  .getRegex();

	inline.emStrong.rDelimAst = edit(inline.emStrong.rDelimAst, 'g')
	  .replace(/punct/g, inline._punctuation)
	  .getRegex();

	inline.emStrong.rDelimUnd = edit(inline.emStrong.rDelimUnd, 'g')
	  .replace(/punct/g, inline._punctuation)
	  .getRegex();

	inline._escapes = /\\([!"#$%&'()*+,\-./:;<=>?@\[\]\\^_`{|}~])/g;

	inline._scheme = /[a-zA-Z][a-zA-Z0-9+.-]{1,31}/;
	inline._email = /[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/;
	inline.autolink = edit(inline.autolink)
	  .replace('scheme', inline._scheme)
	  .replace('email', inline._email)
	  .getRegex();

	inline._attribute = /\s+[a-zA-Z:_][\w.:-]*(?:\s*=\s*"[^"]*"|\s*=\s*'[^']*'|\s*=\s*[^\s"'=<>`]+)?/;

	inline.tag = edit(inline.tag)
	  .replace('comment', inline._comment)
	  .replace('attribute', inline._attribute)
	  .getRegex();

	inline._label = /(?:\[(?:\\.|[^\[\]\\])*\]|\\.|`[^`]*`|[^\[\]\\`])*?/;
	inline._href = /<(?:\\.|[^\n<>\\])+>|[^\s\x00-\x1f]*/;
	inline._title = /"(?:\\"?|[^"\\])*"|'(?:\\'?|[^'\\])*'|\((?:\\\)?|[^)\\])*\)/;

	inline.link = edit(inline.link)
	  .replace('label', inline._label)
	  .replace('href', inline._href)
	  .replace('title', inline._title)
	  .getRegex();

	inline.reflink = edit(inline.reflink)
	  .replace('label', inline._label)
	  .replace('ref', block._label)
	  .getRegex();

	inline.nolink = edit(inline.nolink)
	  .replace('ref', block._label)
	  .getRegex();

	inline.reflinkSearch = edit(inline.reflinkSearch, 'g')
	  .replace('reflink', inline.reflink)
	  .replace('nolink', inline.nolink)
	  .getRegex();

	/**
	 * Normal Inline Grammar
	 */

	inline.normal = merge({}, inline);

	/**
	 * Pedantic Inline Grammar
	 */

	inline.pedantic = merge({}, inline.normal, {
	  strong: {
	    start: /^__|\*\*/,
	    middle: /^__(?=\S)([\s\S]*?\S)__(?!_)|^\*\*(?=\S)([\s\S]*?\S)\*\*(?!\*)/,
	    endAst: /\*\*(?!\*)/g,
	    endUnd: /__(?!_)/g
	  },
	  em: {
	    start: /^_|\*/,
	    middle: /^()\*(?=\S)([\s\S]*?\S)\*(?!\*)|^_(?=\S)([\s\S]*?\S)_(?!_)/,
	    endAst: /\*(?!\*)/g,
	    endUnd: /_(?!_)/g
	  },
	  link: edit(/^!?\[(label)\]\((.*?)\)/)
	    .replace('label', inline._label)
	    .getRegex(),
	  reflink: edit(/^!?\[(label)\]\s*\[([^\]]*)\]/)
	    .replace('label', inline._label)
	    .getRegex()
	});

	/**
	 * GFM Inline Grammar
	 */

	inline.gfm = merge({}, inline.normal, {
	  escape: edit(inline.escape).replace('])', '~|])').getRegex(),
	  _extended_email: /[A-Za-z0-9._+-]+(@)[a-zA-Z0-9-_]+(?:\.[a-zA-Z0-9-_]*[a-zA-Z0-9])+(?![-_])/,
	  url: /^((?:ftp|https?):\/\/|www\.)(?:[a-zA-Z0-9\-]+\.?)+[^\s<]*|^email/,
	  _backpedal: /(?:[^?!.,:;*_~()&]+|\([^)]*\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_~)]+(?!$))+/,
	  del: /^(~~?)(?=[^\s~])([\s\S]*?[^\s~])\1(?=[^~]|$)/,
	  text: /^([`~]+|[^`~])(?:(?= {2,}\n)|(?=[a-zA-Z0-9.!#$%&'*+\/=?_`{\|}~-]+@)|[\s\S]*?(?:(?=[\\<!\[`*~_]|\b_|https?:\/\/|ftp:\/\/|www\.|$)|[^ ](?= {2,}\n)|[^a-zA-Z0-9.!#$%&'*+\/=?_`{\|}~-](?=[a-zA-Z0-9.!#$%&'*+\/=?_`{\|}~-]+@)))/
	});

	inline.gfm.url = edit(inline.gfm.url, 'i')
	  .replace('email', inline.gfm._extended_email)
	  .getRegex();
	/**
	 * GFM + Line Breaks Inline Grammar
	 */

	inline.breaks = merge({}, inline.gfm, {
	  br: edit(inline.br).replace('{2,}', '*').getRegex(),
	  text: edit(inline.gfm.text)
	    .replace('\\b_', '\\b_| {2,}\\n')
	    .replace(/\{2,\}/g, '*')
	    .getRegex()
	});

	/**
	 * smartypants text replacement
	 * @param {string} text
	 */
	function smartypants(text) {
	  return text
	    // em-dashes
	    .replace(/---/g, '\u2014')
	    // en-dashes
	    .replace(/--/g, '\u2013')
	    // opening singles
	    .replace(/(^|[-\u2014/(\[{"\s])'/g, '$1\u2018')
	    // closing singles & apostrophes
	    .replace(/'/g, '\u2019')
	    // opening doubles
	    .replace(/(^|[-\u2014/(\[{\u2018\s])"/g, '$1\u201c')
	    // closing doubles
	    .replace(/"/g, '\u201d')
	    // ellipses
	    .replace(/\.{3}/g, '\u2026');
	}

	/**
	 * mangle email addresses
	 * @param {string} text
	 */
	function mangle(text) {
	  let out = '',
	    i,
	    ch;

	  const l = text.length;
	  for (i = 0; i < l; i++) {
	    ch = text.charCodeAt(i);
	    if (Math.random() > 0.5) {
	      ch = 'x' + ch.toString(16);
	    }
	    out += '&#' + ch + ';';
	  }

	  return out;
	}

	/**
	 * Block Lexer
	 */
	class Lexer$1 {
	  constructor(options) {
	    this.tokens = [];
	    this.tokens.links = Object.create(null);
	    this.options = options || defaults;
	    this.options.tokenizer = this.options.tokenizer || new Tokenizer();
	    this.tokenizer = this.options.tokenizer;
	    this.tokenizer.options = this.options;
	    this.tokenizer.lexer = this;
	    this.inlineQueue = [];
	    this.state = {
	      inLink: false,
	      inRawBlock: false,
	      top: true
	    };

	    const rules = {
	      block: block.normal,
	      inline: inline.normal
	    };

	    if (this.options.pedantic) {
	      rules.block = block.pedantic;
	      rules.inline = inline.pedantic;
	    } else if (this.options.gfm) {
	      rules.block = block.gfm;
	      if (this.options.breaks) {
	        rules.inline = inline.breaks;
	      } else {
	        rules.inline = inline.gfm;
	      }
	    }
	    this.tokenizer.rules = rules;
	  }

	  /**
	   * Expose Rules
	   */
	  static get rules() {
	    return {
	      block,
	      inline
	    };
	  }

	  /**
	   * Static Lex Method
	   */
	  static lex(src, options) {
	    const lexer = new Lexer$1(options);
	    return lexer.lex(src);
	  }

	  /**
	   * Static Lex Inline Method
	   */
	  static lexInline(src, options) {
	    const lexer = new Lexer$1(options);
	    return lexer.inlineTokens(src);
	  }

	  /**
	   * Preprocessing
	   */
	  lex(src) {
	    src = src
	      .replace(/\r\n|\r/g, '\n');

	    this.blockTokens(src, this.tokens);

	    let next;
	    while (next = this.inlineQueue.shift()) {
	      this.inlineTokens(next.src, next.tokens);
	    }

	    return this.tokens;
	  }

	  /**
	   * Lexing
	   */
	  blockTokens(src, tokens = []) {
	    if (this.options.pedantic) {
	      src = src.replace(/\t/g, '    ').replace(/^ +$/gm, '');
	    } else {
	      src = src.replace(/^( *)(\t+)/gm, (_, leading, tabs) => {
	        return leading + '    '.repeat(tabs.length);
	      });
	    }

	    let token, lastToken, cutSrc, lastParagraphClipped;

	    while (src) {
	      if (this.options.extensions
	        && this.options.extensions.block
	        && this.options.extensions.block.some((extTokenizer) => {
	          if (token = extTokenizer.call({ lexer: this }, src, tokens)) {
	            src = src.substring(token.raw.length);
	            tokens.push(token);
	            return true;
	          }
	          return false;
	        })) {
	        continue;
	      }

	      // newline
	      if (token = this.tokenizer.space(src)) {
	        src = src.substring(token.raw.length);
	        if (token.raw.length === 1 && tokens.length > 0) {
	          // if there's a single \n as a spacer, it's terminating the last line,
	          // so move it there so that we don't get unecessary paragraph tags
	          tokens[tokens.length - 1].raw += '\n';
	        } else {
	          tokens.push(token);
	        }
	        continue;
	      }

	      // code
	      if (token = this.tokenizer.code(src)) {
	        src = src.substring(token.raw.length);
	        lastToken = tokens[tokens.length - 1];
	        // An indented code block cannot interrupt a paragraph.
	        if (lastToken && (lastToken.type === 'paragraph' || lastToken.type === 'text')) {
	          lastToken.raw += '\n' + token.raw;
	          lastToken.text += '\n' + token.text;
	          this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;
	        } else {
	          tokens.push(token);
	        }
	        continue;
	      }

	      // fences
	      if (token = this.tokenizer.fences(src)) {
	        src = src.substring(token.raw.length);
	        tokens.push(token);
	        continue;
	      }

	      // heading
	      if (token = this.tokenizer.heading(src)) {
	        src = src.substring(token.raw.length);
	        tokens.push(token);
	        continue;
	      }

	      // hr
	      if (token = this.tokenizer.hr(src)) {
	        src = src.substring(token.raw.length);
	        tokens.push(token);
	        continue;
	      }

	      // blockquote
	      if (token = this.tokenizer.blockquote(src)) {
	        src = src.substring(token.raw.length);
	        tokens.push(token);
	        continue;
	      }

	      // list
	      if (token = this.tokenizer.list(src)) {
	        src = src.substring(token.raw.length);
	        tokens.push(token);
	        continue;
	      }

	      // html
	      if (token = this.tokenizer.html(src)) {
	        src = src.substring(token.raw.length);
	        tokens.push(token);
	        continue;
	      }

	      // def
	      if (token = this.tokenizer.def(src)) {
	        src = src.substring(token.raw.length);
	        lastToken = tokens[tokens.length - 1];
	        if (lastToken && (lastToken.type === 'paragraph' || lastToken.type === 'text')) {
	          lastToken.raw += '\n' + token.raw;
	          lastToken.text += '\n' + token.raw;
	          this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;
	        } else if (!this.tokens.links[token.tag]) {
	          this.tokens.links[token.tag] = {
	            href: token.href,
	            title: token.title
	          };
	        }
	        continue;
	      }

	      // table (gfm)
	      if (token = this.tokenizer.table(src)) {
	        src = src.substring(token.raw.length);
	        tokens.push(token);
	        continue;
	      }

	      // lheading
	      if (token = this.tokenizer.lheading(src)) {
	        src = src.substring(token.raw.length);
	        tokens.push(token);
	        continue;
	      }

	      // top-level paragraph
	      // prevent paragraph consuming extensions by clipping 'src' to extension start
	      cutSrc = src;
	      if (this.options.extensions && this.options.extensions.startBlock) {
	        let startIndex = Infinity;
	        const tempSrc = src.slice(1);
	        let tempStart;
	        this.options.extensions.startBlock.forEach(function(getStartIndex) {
	          tempStart = getStartIndex.call({ lexer: this }, tempSrc);
	          if (typeof tempStart === 'number' && tempStart >= 0) { startIndex = Math.min(startIndex, tempStart); }
	        });
	        if (startIndex < Infinity && startIndex >= 0) {
	          cutSrc = src.substring(0, startIndex + 1);
	        }
	      }
	      if (this.state.top && (token = this.tokenizer.paragraph(cutSrc))) {
	        lastToken = tokens[tokens.length - 1];
	        if (lastParagraphClipped && lastToken.type === 'paragraph') {
	          lastToken.raw += '\n' + token.raw;
	          lastToken.text += '\n' + token.text;
	          this.inlineQueue.pop();
	          this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;
	        } else {
	          tokens.push(token);
	        }
	        lastParagraphClipped = (cutSrc.length !== src.length);
	        src = src.substring(token.raw.length);
	        continue;
	      }

	      // text
	      if (token = this.tokenizer.text(src)) {
	        src = src.substring(token.raw.length);
	        lastToken = tokens[tokens.length - 1];
	        if (lastToken && lastToken.type === 'text') {
	          lastToken.raw += '\n' + token.raw;
	          lastToken.text += '\n' + token.text;
	          this.inlineQueue.pop();
	          this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;
	        } else {
	          tokens.push(token);
	        }
	        continue;
	      }

	      if (src) {
	        const errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);
	        if (this.options.silent) {
	          console.error(errMsg);
	          break;
	        } else {
	          throw new Error(errMsg);
	        }
	      }
	    }

	    this.state.top = true;
	    return tokens;
	  }

	  inline(src, tokens) {
	    this.inlineQueue.push({ src, tokens });
	  }

	  /**
	   * Lexing/Compiling
	   */
	  inlineTokens(src, tokens = []) {
	    let token, lastToken, cutSrc;

	    // String with links masked to avoid interference with em and strong
	    let maskedSrc = src;
	    let match;
	    let keepPrevChar, prevChar;

	    // Mask out reflinks
	    if (this.tokens.links) {
	      const links = Object.keys(this.tokens.links);
	      if (links.length > 0) {
	        while ((match = this.tokenizer.rules.inline.reflinkSearch.exec(maskedSrc)) != null) {
	          if (links.includes(match[0].slice(match[0].lastIndexOf('[') + 1, -1))) {
	            maskedSrc = maskedSrc.slice(0, match.index) + '[' + repeatString('a', match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.reflinkSearch.lastIndex);
	          }
	        }
	      }
	    }
	    // Mask out other blocks
	    while ((match = this.tokenizer.rules.inline.blockSkip.exec(maskedSrc)) != null) {
	      maskedSrc = maskedSrc.slice(0, match.index) + '[' + repeatString('a', match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.blockSkip.lastIndex);
	    }

	    // Mask out escaped em & strong delimiters
	    while ((match = this.tokenizer.rules.inline.escapedEmSt.exec(maskedSrc)) != null) {
	      maskedSrc = maskedSrc.slice(0, match.index) + '++' + maskedSrc.slice(this.tokenizer.rules.inline.escapedEmSt.lastIndex);
	    }

	    while (src) {
	      if (!keepPrevChar) {
	        prevChar = '';
	      }
	      keepPrevChar = false;

	      // extensions
	      if (this.options.extensions
	        && this.options.extensions.inline
	        && this.options.extensions.inline.some((extTokenizer) => {
	          if (token = extTokenizer.call({ lexer: this }, src, tokens)) {
	            src = src.substring(token.raw.length);
	            tokens.push(token);
	            return true;
	          }
	          return false;
	        })) {
	        continue;
	      }

	      // escape
	      if (token = this.tokenizer.escape(src)) {
	        src = src.substring(token.raw.length);
	        tokens.push(token);
	        continue;
	      }

	      // tag
	      if (token = this.tokenizer.tag(src)) {
	        src = src.substring(token.raw.length);
	        lastToken = tokens[tokens.length - 1];
	        if (lastToken && token.type === 'text' && lastToken.type === 'text') {
	          lastToken.raw += token.raw;
	          lastToken.text += token.text;
	        } else {
	          tokens.push(token);
	        }
	        continue;
	      }

	      // link
	      if (token = this.tokenizer.link(src)) {
	        src = src.substring(token.raw.length);
	        tokens.push(token);
	        continue;
	      }

	      // reflink, nolink
	      if (token = this.tokenizer.reflink(src, this.tokens.links)) {
	        src = src.substring(token.raw.length);
	        lastToken = tokens[tokens.length - 1];
	        if (lastToken && token.type === 'text' && lastToken.type === 'text') {
	          lastToken.raw += token.raw;
	          lastToken.text += token.text;
	        } else {
	          tokens.push(token);
	        }
	        continue;
	      }

	      // em & strong
	      if (token = this.tokenizer.emStrong(src, maskedSrc, prevChar)) {
	        src = src.substring(token.raw.length);
	        tokens.push(token);
	        continue;
	      }

	      // code
	      if (token = this.tokenizer.codespan(src)) {
	        src = src.substring(token.raw.length);
	        tokens.push(token);
	        continue;
	      }

	      // br
	      if (token = this.tokenizer.br(src)) {
	        src = src.substring(token.raw.length);
	        tokens.push(token);
	        continue;
	      }

	      // del (gfm)
	      if (token = this.tokenizer.del(src)) {
	        src = src.substring(token.raw.length);
	        tokens.push(token);
	        continue;
	      }

	      // autolink
	      if (token = this.tokenizer.autolink(src, mangle)) {
	        src = src.substring(token.raw.length);
	        tokens.push(token);
	        continue;
	      }

	      // url (gfm)
	      if (!this.state.inLink && (token = this.tokenizer.url(src, mangle))) {
	        src = src.substring(token.raw.length);
	        tokens.push(token);
	        continue;
	      }

	      // text
	      // prevent inlineText consuming extensions by clipping 'src' to extension start
	      cutSrc = src;
	      if (this.options.extensions && this.options.extensions.startInline) {
	        let startIndex = Infinity;
	        const tempSrc = src.slice(1);
	        let tempStart;
	        this.options.extensions.startInline.forEach(function(getStartIndex) {
	          tempStart = getStartIndex.call({ lexer: this }, tempSrc);
	          if (typeof tempStart === 'number' && tempStart >= 0) { startIndex = Math.min(startIndex, tempStart); }
	        });
	        if (startIndex < Infinity && startIndex >= 0) {
	          cutSrc = src.substring(0, startIndex + 1);
	        }
	      }
	      if (token = this.tokenizer.inlineText(cutSrc, smartypants)) {
	        src = src.substring(token.raw.length);
	        if (token.raw.slice(-1) !== '_') { // Track prevChar before string of ____ started
	          prevChar = token.raw.slice(-1);
	        }
	        keepPrevChar = true;
	        lastToken = tokens[tokens.length - 1];
	        if (lastToken && lastToken.type === 'text') {
	          lastToken.raw += token.raw;
	          lastToken.text += token.text;
	        } else {
	          tokens.push(token);
	        }
	        continue;
	      }

	      if (src) {
	        const errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);
	        if (this.options.silent) {
	          console.error(errMsg);
	          break;
	        } else {
	          throw new Error(errMsg);
	        }
	      }
	    }

	    return tokens;
	  }
	}

	/**
	 * Renderer
	 */
	class Renderer {
	  constructor(options) {
	    this.options = options || defaults;
	  }

	  code(code, infostring, escaped) {
	    const lang = (infostring || '').match(/\S*/)[0];
	    if (this.options.highlight) {
	      const out = this.options.highlight(code, lang);
	      if (out != null && out !== code) {
	        escaped = true;
	        code = out;
	      }
	    }

	    code = code.replace(/\n$/, '') + '\n';

	    if (!lang) {
	      return '<pre><code>'
	        + (escaped ? code : escape$2(code, true))
	        + '</code></pre>\n';
	    }

	    return '<pre><code class="'
	      + this.options.langPrefix
	      + escape$2(lang, true)
	      + '">'
	      + (escaped ? code : escape$2(code, true))
	      + '</code></pre>\n';
	  }

	  /**
	   * @param {string} quote
	   */
	  blockquote(quote) {
	    return `<blockquote>\n${quote}</blockquote>\n`;
	  }

	  html(html) {
	    return html;
	  }

	  /**
	   * @param {string} text
	   * @param {string} level
	   * @param {string} raw
	   * @param {any} slugger
	   */
	  heading(text, level, raw, slugger) {
	    if (this.options.headerIds) {
	      const id = this.options.headerPrefix + slugger.slug(raw);
	      return `<h${level} id="${id}">${text}</h${level}>\n`;
	    }

	    // ignore IDs
	    return `<h${level}>${text}</h${level}>\n`;
	  }

	  hr() {
	    return this.options.xhtml ? '<hr/>\n' : '<hr>\n';
	  }

	  list(body, ordered, start) {
	    const type = ordered ? 'ol' : 'ul',
	      startatt = (ordered && start !== 1) ? (' start="' + start + '"') : '';
	    return '<' + type + startatt + '>\n' + body + '</' + type + '>\n';
	  }

	  /**
	   * @param {string} text
	   */
	  listitem(text) {
	    return `<li>${text}</li>\n`;
	  }

	  checkbox(checked) {
	    return '<input '
	      + (checked ? 'checked="" ' : '')
	      + 'disabled="" type="checkbox"'
	      + (this.options.xhtml ? ' /' : '')
	      + '> ';
	  }

	  /**
	   * @param {string} text
	   */
	  paragraph(text) {
	    return `<p>${text}</p>\n`;
	  }

	  /**
	   * @param {string} header
	   * @param {string} body
	   */
	  table(header, body) {
	    if (body) body = `<tbody>${body}</tbody>`;

	    return '<table>\n'
	      + '<thead>\n'
	      + header
	      + '</thead>\n'
	      + body
	      + '</table>\n';
	  }

	  /**
	   * @param {string} content
	   */
	  tablerow(content) {
	    return `<tr>\n${content}</tr>\n`;
	  }

	  tablecell(content, flags) {
	    const type = flags.header ? 'th' : 'td';
	    const tag = flags.align
	      ? `<${type} align="${flags.align}">`
	      : `<${type}>`;
	    return tag + content + `</${type}>\n`;
	  }

	  /**
	   * span level renderer
	   * @param {string} text
	   */
	  strong(text) {
	    return `<strong>${text}</strong>`;
	  }

	  /**
	   * @param {string} text
	   */
	  em(text) {
	    return `<em>${text}</em>`;
	  }

	  /**
	   * @param {string} text
	   */
	  codespan(text) {
	    return `<code>${text}</code>`;
	  }

	  br() {
	    return this.options.xhtml ? '<br/>' : '<br>';
	  }

	  /**
	   * @param {string} text
	   */
	  del(text) {
	    return `<del>${text}</del>`;
	  }

	  /**
	   * @param {string} href
	   * @param {string} title
	   * @param {string} text
	   */
	  link(href, title, text) {
	    href = cleanUrl(this.options.sanitize, this.options.baseUrl, href);
	    if (href === null) {
	      return text;
	    }
	    let out = '<a href="' + escape$2(href) + '"';
	    if (title) {
	      out += ' title="' + title + '"';
	    }
	    out += '>' + text + '</a>';
	    return out;
	  }

	  /**
	   * @param {string} href
	   * @param {string} title
	   * @param {string} text
	   */
	  image(href, title, text) {
	    href = cleanUrl(this.options.sanitize, this.options.baseUrl, href);
	    if (href === null) {
	      return text;
	    }

	    let out = `<img src="${href}" alt="${text}"`;
	    if (title) {
	      out += ` title="${title}"`;
	    }
	    out += this.options.xhtml ? '/>' : '>';
	    return out;
	  }

	  text(text) {
	    return text;
	  }
	}

	/**
	 * TextRenderer
	 * returns only the textual part of the token
	 */
	class TextRenderer {
	  // no need for block level renderers
	  strong(text) {
	    return text;
	  }

	  em(text) {
	    return text;
	  }

	  codespan(text) {
	    return text;
	  }

	  del(text) {
	    return text;
	  }

	  html(text) {
	    return text;
	  }

	  text(text) {
	    return text;
	  }

	  link(href, title, text) {
	    return '' + text;
	  }

	  image(href, title, text) {
	    return '' + text;
	  }

	  br() {
	    return '';
	  }
	}

	/**
	 * Slugger generates header id
	 */
	class Slugger {
	  constructor() {
	    this.seen = {};
	  }

	  /**
	   * @param {string} value
	   */
	  serialize(value) {
	    return value
	      .toLowerCase()
	      .trim()
	      // remove html tags
	      .replace(/<[!\/a-z].*?>/ig, '')
	      // remove unwanted chars
	      .replace(/[\u2000-\u206F\u2E00-\u2E7F\\'!"#$%&()*+,./:;<=>?@[\]^`{|}~]/g, '')
	      .replace(/\s/g, '-');
	  }

	  /**
	   * Finds the next safe (unique) slug to use
	   * @param {string} originalSlug
	   * @param {boolean} isDryRun
	   */
	  getNextSafeSlug(originalSlug, isDryRun) {
	    let slug = originalSlug;
	    let occurenceAccumulator = 0;
	    if (this.seen.hasOwnProperty(slug)) {
	      occurenceAccumulator = this.seen[originalSlug];
	      do {
	        occurenceAccumulator++;
	        slug = originalSlug + '-' + occurenceAccumulator;
	      } while (this.seen.hasOwnProperty(slug));
	    }
	    if (!isDryRun) {
	      this.seen[originalSlug] = occurenceAccumulator;
	      this.seen[slug] = 0;
	    }
	    return slug;
	  }

	  /**
	   * Convert string to unique id
	   * @param {object} [options]
	   * @param {boolean} [options.dryrun] Generates the next unique slug without
	   * updating the internal accumulator.
	   */
	  slug(value, options = {}) {
	    const slug = this.serialize(value);
	    return this.getNextSafeSlug(slug, options.dryrun);
	  }
	}

	/**
	 * Parsing & Compiling
	 */
	class Parser$1 {
	  constructor(options) {
	    this.options = options || defaults;
	    this.options.renderer = this.options.renderer || new Renderer();
	    this.renderer = this.options.renderer;
	    this.renderer.options = this.options;
	    this.textRenderer = new TextRenderer();
	    this.slugger = new Slugger();
	  }

	  /**
	   * Static Parse Method
	   */
	  static parse(tokens, options) {
	    const parser = new Parser$1(options);
	    return parser.parse(tokens);
	  }

	  /**
	   * Static Parse Inline Method
	   */
	  static parseInline(tokens, options) {
	    const parser = new Parser$1(options);
	    return parser.parseInline(tokens);
	  }

	  /**
	   * Parse Loop
	   */
	  parse(tokens, top = true) {
	    let out = '',
	      i,
	      j,
	      k,
	      l2,
	      l3,
	      row,
	      cell,
	      header,
	      body,
	      token,
	      ordered,
	      start,
	      loose,
	      itemBody,
	      item,
	      checked,
	      task,
	      checkbox,
	      ret;

	    const l = tokens.length;
	    for (i = 0; i < l; i++) {
	      token = tokens[i];

	      // Run any renderer extensions
	      if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[token.type]) {
	        ret = this.options.extensions.renderers[token.type].call({ parser: this }, token);
	        if (ret !== false || !['space', 'hr', 'heading', 'code', 'table', 'blockquote', 'list', 'html', 'paragraph', 'text'].includes(token.type)) {
	          out += ret || '';
	          continue;
	        }
	      }

	      switch (token.type) {
	        case 'space': {
	          continue;
	        }
	        case 'hr': {
	          out += this.renderer.hr();
	          continue;
	        }
	        case 'heading': {
	          out += this.renderer.heading(
	            this.parseInline(token.tokens),
	            token.depth,
	            unescape(this.parseInline(token.tokens, this.textRenderer)),
	            this.slugger);
	          continue;
	        }
	        case 'code': {
	          out += this.renderer.code(token.text,
	            token.lang,
	            token.escaped);
	          continue;
	        }
	        case 'table': {
	          header = '';

	          // header
	          cell = '';
	          l2 = token.header.length;
	          for (j = 0; j < l2; j++) {
	            cell += this.renderer.tablecell(
	              this.parseInline(token.header[j].tokens),
	              { header: true, align: token.align[j] }
	            );
	          }
	          header += this.renderer.tablerow(cell);

	          body = '';
	          l2 = token.rows.length;
	          for (j = 0; j < l2; j++) {
	            row = token.rows[j];

	            cell = '';
	            l3 = row.length;
	            for (k = 0; k < l3; k++) {
	              cell += this.renderer.tablecell(
	                this.parseInline(row[k].tokens),
	                { header: false, align: token.align[k] }
	              );
	            }

	            body += this.renderer.tablerow(cell);
	          }
	          out += this.renderer.table(header, body);
	          continue;
	        }
	        case 'blockquote': {
	          body = this.parse(token.tokens);
	          out += this.renderer.blockquote(body);
	          continue;
	        }
	        case 'list': {
	          ordered = token.ordered;
	          start = token.start;
	          loose = token.loose;
	          l2 = token.items.length;

	          body = '';
	          for (j = 0; j < l2; j++) {
	            item = token.items[j];
	            checked = item.checked;
	            task = item.task;

	            itemBody = '';
	            if (item.task) {
	              checkbox = this.renderer.checkbox(checked);
	              if (loose) {
	                if (item.tokens.length > 0 && item.tokens[0].type === 'paragraph') {
	                  item.tokens[0].text = checkbox + ' ' + item.tokens[0].text;
	                  if (item.tokens[0].tokens && item.tokens[0].tokens.length > 0 && item.tokens[0].tokens[0].type === 'text') {
	                    item.tokens[0].tokens[0].text = checkbox + ' ' + item.tokens[0].tokens[0].text;
	                  }
	                } else {
	                  item.tokens.unshift({
	                    type: 'text',
	                    text: checkbox
	                  });
	                }
	              } else {
	                itemBody += checkbox;
	              }
	            }

	            itemBody += this.parse(item.tokens, loose);
	            body += this.renderer.listitem(itemBody, task, checked);
	          }

	          out += this.renderer.list(body, ordered, start);
	          continue;
	        }
	        case 'html': {
	          // TODO parse inline content if parameter markdown=1
	          out += this.renderer.html(token.text);
	          continue;
	        }
	        case 'paragraph': {
	          out += this.renderer.paragraph(this.parseInline(token.tokens));
	          continue;
	        }
	        case 'text': {
	          body = token.tokens ? this.parseInline(token.tokens) : token.text;
	          while (i + 1 < l && tokens[i + 1].type === 'text') {
	            token = tokens[++i];
	            body += '\n' + (token.tokens ? this.parseInline(token.tokens) : token.text);
	          }
	          out += top ? this.renderer.paragraph(body) : body;
	          continue;
	        }

	        default: {
	          const errMsg = 'Token with "' + token.type + '" type was not found.';
	          if (this.options.silent) {
	            console.error(errMsg);
	            return;
	          } else {
	            throw new Error(errMsg);
	          }
	        }
	      }
	    }

	    return out;
	  }

	  /**
	   * Parse Inline Tokens
	   */
	  parseInline(tokens, renderer) {
	    renderer = renderer || this.renderer;
	    let out = '',
	      i,
	      token,
	      ret;

	    const l = tokens.length;
	    for (i = 0; i < l; i++) {
	      token = tokens[i];

	      // Run any renderer extensions
	      if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[token.type]) {
	        ret = this.options.extensions.renderers[token.type].call({ parser: this }, token);
	        if (ret !== false || !['escape', 'html', 'link', 'image', 'strong', 'em', 'codespan', 'br', 'del', 'text'].includes(token.type)) {
	          out += ret || '';
	          continue;
	        }
	      }

	      switch (token.type) {
	        case 'escape': {
	          out += renderer.text(token.text);
	          break;
	        }
	        case 'html': {
	          out += renderer.html(token.text);
	          break;
	        }
	        case 'link': {
	          out += renderer.link(token.href, token.title, this.parseInline(token.tokens, renderer));
	          break;
	        }
	        case 'image': {
	          out += renderer.image(token.href, token.title, token.text);
	          break;
	        }
	        case 'strong': {
	          out += renderer.strong(this.parseInline(token.tokens, renderer));
	          break;
	        }
	        case 'em': {
	          out += renderer.em(this.parseInline(token.tokens, renderer));
	          break;
	        }
	        case 'codespan': {
	          out += renderer.codespan(token.text);
	          break;
	        }
	        case 'br': {
	          out += renderer.br();
	          break;
	        }
	        case 'del': {
	          out += renderer.del(this.parseInline(token.tokens, renderer));
	          break;
	        }
	        case 'text': {
	          out += renderer.text(token.text);
	          break;
	        }
	        default: {
	          const errMsg = 'Token with "' + token.type + '" type was not found.';
	          if (this.options.silent) {
	            console.error(errMsg);
	            return;
	          } else {
	            throw new Error(errMsg);
	          }
	        }
	      }
	    }
	    return out;
	  }
	}

	/**
	 * Marked
	 */
	function marked(src, opt, callback) {
	  // throw error in case of non string input
	  if (typeof src === 'undefined' || src === null) {
	    throw new Error('marked(): input parameter is undefined or null');
	  }
	  if (typeof src !== 'string') {
	    throw new Error('marked(): input parameter is of type '
	      + Object.prototype.toString.call(src) + ', string expected');
	  }

	  if (typeof opt === 'function') {
	    callback = opt;
	    opt = null;
	  }

	  opt = merge({}, marked.defaults, opt || {});
	  checkSanitizeDeprecation(opt);

	  if (callback) {
	    const highlight = opt.highlight;
	    let tokens;

	    try {
	      tokens = Lexer$1.lex(src, opt);
	    } catch (e) {
	      return callback(e);
	    }

	    const done = function(err) {
	      let out;

	      if (!err) {
	        try {
	          if (opt.walkTokens) {
	            marked.walkTokens(tokens, opt.walkTokens);
	          }
	          out = Parser$1.parse(tokens, opt);
	        } catch (e) {
	          err = e;
	        }
	      }

	      opt.highlight = highlight;

	      return err
	        ? callback(err)
	        : callback(null, out);
	    };

	    if (!highlight || highlight.length < 3) {
	      return done();
	    }

	    delete opt.highlight;

	    if (!tokens.length) return done();

	    let pending = 0;
	    marked.walkTokens(tokens, function(token) {
	      if (token.type === 'code') {
	        pending++;
	        setTimeout(() => {
	          highlight(token.text, token.lang, function(err, code) {
	            if (err) {
	              return done(err);
	            }
	            if (code != null && code !== token.text) {
	              token.text = code;
	              token.escaped = true;
	            }

	            pending--;
	            if (pending === 0) {
	              done();
	            }
	          });
	        }, 0);
	      }
	    });

	    if (pending === 0) {
	      done();
	    }

	    return;
	  }

	  try {
	    const tokens = Lexer$1.lex(src, opt);
	    if (opt.walkTokens) {
	      marked.walkTokens(tokens, opt.walkTokens);
	    }
	    return Parser$1.parse(tokens, opt);
	  } catch (e) {
	    e.message += '\nPlease report this to https://github.com/markedjs/marked.';
	    if (opt.silent) {
	      return '<p>An error occurred:</p><pre>'
	        + escape$2(e.message + '', true)
	        + '</pre>';
	    }
	    throw e;
	  }
	}

	/**
	 * Options
	 */

	marked.options =
	marked.setOptions = function(opt) {
	  merge(marked.defaults, opt);
	  changeDefaults(marked.defaults);
	  return marked;
	};

	marked.getDefaults = getDefaults;

	marked.defaults = defaults;

	/**
	 * Use Extension
	 */

	marked.use = function(...args) {
	  const opts = merge({}, ...args);
	  const extensions = marked.defaults.extensions || { renderers: {}, childTokens: {} };
	  let hasExtensions;

	  args.forEach((pack) => {
	    // ==-- Parse "addon" extensions --== //
	    if (pack.extensions) {
	      hasExtensions = true;
	      pack.extensions.forEach((ext) => {
	        if (!ext.name) {
	          throw new Error('extension name required');
	        }
	        if (ext.renderer) { // Renderer extensions
	          const prevRenderer = extensions.renderers ? extensions.renderers[ext.name] : null;
	          if (prevRenderer) {
	            // Replace extension with func to run new extension but fall back if false
	            extensions.renderers[ext.name] = function(...args) {
	              let ret = ext.renderer.apply(this, args);
	              if (ret === false) {
	                ret = prevRenderer.apply(this, args);
	              }
	              return ret;
	            };
	          } else {
	            extensions.renderers[ext.name] = ext.renderer;
	          }
	        }
	        if (ext.tokenizer) { // Tokenizer Extensions
	          if (!ext.level || (ext.level !== 'block' && ext.level !== 'inline')) {
	            throw new Error("extension level must be 'block' or 'inline'");
	          }
	          if (extensions[ext.level]) {
	            extensions[ext.level].unshift(ext.tokenizer);
	          } else {
	            extensions[ext.level] = [ext.tokenizer];
	          }
	          if (ext.start) { // Function to check for start of token
	            if (ext.level === 'block') {
	              if (extensions.startBlock) {
	                extensions.startBlock.push(ext.start);
	              } else {
	                extensions.startBlock = [ext.start];
	              }
	            } else if (ext.level === 'inline') {
	              if (extensions.startInline) {
	                extensions.startInline.push(ext.start);
	              } else {
	                extensions.startInline = [ext.start];
	              }
	            }
	          }
	        }
	        if (ext.childTokens) { // Child tokens to be visited by walkTokens
	          extensions.childTokens[ext.name] = ext.childTokens;
	        }
	      });
	    }

	    // ==-- Parse "overwrite" extensions --== //
	    if (pack.renderer) {
	      const renderer = marked.defaults.renderer || new Renderer();
	      for (const prop in pack.renderer) {
	        const prevRenderer = renderer[prop];
	        // Replace renderer with func to run extension, but fall back if false
	        renderer[prop] = (...args) => {
	          let ret = pack.renderer[prop].apply(renderer, args);
	          if (ret === false) {
	            ret = prevRenderer.apply(renderer, args);
	          }
	          return ret;
	        };
	      }
	      opts.renderer = renderer;
	    }
	    if (pack.tokenizer) {
	      const tokenizer = marked.defaults.tokenizer || new Tokenizer();
	      for (const prop in pack.tokenizer) {
	        const prevTokenizer = tokenizer[prop];
	        // Replace tokenizer with func to run extension, but fall back if false
	        tokenizer[prop] = (...args) => {
	          let ret = pack.tokenizer[prop].apply(tokenizer, args);
	          if (ret === false) {
	            ret = prevTokenizer.apply(tokenizer, args);
	          }
	          return ret;
	        };
	      }
	      opts.tokenizer = tokenizer;
	    }

	    // ==-- Parse WalkTokens extensions --== //
	    if (pack.walkTokens) {
	      const walkTokens = marked.defaults.walkTokens;
	      opts.walkTokens = function(token) {
	        pack.walkTokens.call(this, token);
	        if (walkTokens) {
	          walkTokens.call(this, token);
	        }
	      };
	    }

	    if (hasExtensions) {
	      opts.extensions = extensions;
	    }

	    marked.setOptions(opts);
	  });
	};

	/**
	 * Run callback for every token
	 */

	marked.walkTokens = function(tokens, callback) {
	  for (const token of tokens) {
	    callback.call(marked, token);
	    switch (token.type) {
	      case 'table': {
	        for (const cell of token.header) {
	          marked.walkTokens(cell.tokens, callback);
	        }
	        for (const row of token.rows) {
	          for (const cell of row) {
	            marked.walkTokens(cell.tokens, callback);
	          }
	        }
	        break;
	      }
	      case 'list': {
	        marked.walkTokens(token.items, callback);
	        break;
	      }
	      default: {
	        if (marked.defaults.extensions && marked.defaults.extensions.childTokens && marked.defaults.extensions.childTokens[token.type]) { // Walk any extensions
	          marked.defaults.extensions.childTokens[token.type].forEach(function(childTokens) {
	            marked.walkTokens(token[childTokens], callback);
	          });
	        } else if (token.tokens) {
	          marked.walkTokens(token.tokens, callback);
	        }
	      }
	    }
	  }
	};

	/**
	 * Parse Inline
	 * @param {string} src
	 */
	marked.parseInline = function(src, opt) {
	  // throw error in case of non string input
	  if (typeof src === 'undefined' || src === null) {
	    throw new Error('marked.parseInline(): input parameter is undefined or null');
	  }
	  if (typeof src !== 'string') {
	    throw new Error('marked.parseInline(): input parameter is of type '
	      + Object.prototype.toString.call(src) + ', string expected');
	  }

	  opt = merge({}, marked.defaults, opt || {});
	  checkSanitizeDeprecation(opt);

	  try {
	    const tokens = Lexer$1.lexInline(src, opt);
	    if (opt.walkTokens) {
	      marked.walkTokens(tokens, opt.walkTokens);
	    }
	    return Parser$1.parseInline(tokens, opt);
	  } catch (e) {
	    e.message += '\nPlease report this to https://github.com/markedjs/marked.';
	    if (opt.silent) {
	      return '<p>An error occurred:</p><pre>'
	        + escape$2(e.message + '', true)
	        + '</pre>';
	    }
	    throw e;
	  }
	};

	/**
	 * Expose
	 */
	marked.Parser = Parser$1;
	marked.parser = Parser$1.parse;
	marked.Renderer = Renderer;
	marked.TextRenderer = TextRenderer;
	marked.Lexer = Lexer$1;
	marked.lexer = Lexer$1.lex;
	marked.Tokenizer = Tokenizer;
	marked.Slugger = Slugger;
	marked.parse = marked;

	marked.options;
	marked.setOptions;
	marked.use;
	marked.walkTokens;
	marked.parseInline;
	Parser$1.parse;
	Lexer$1.lex;

	var deepFreezeEs6 = {exports: {}};

	function deepFreeze(obj) {
	    if (obj instanceof Map) {
	        obj.clear = obj.delete = obj.set = function () {
	            throw new Error('map is read-only');
	        };
	    } else if (obj instanceof Set) {
	        obj.add = obj.clear = obj.delete = function () {
	            throw new Error('set is read-only');
	        };
	    }

	    // Freeze self
	    Object.freeze(obj);

	    Object.getOwnPropertyNames(obj).forEach(function (name) {
	        var prop = obj[name];

	        // Freeze prop if it is an object
	        if (typeof prop == 'object' && !Object.isFrozen(prop)) {
	            deepFreeze(prop);
	        }
	    });

	    return obj;
	}

	deepFreezeEs6.exports = deepFreeze;
	deepFreezeEs6.exports.default = deepFreeze;

	/** @typedef {import('highlight.js').CallbackResponse} CallbackResponse */
	/** @typedef {import('highlight.js').CompiledMode} CompiledMode */
	/** @implements CallbackResponse */

	class Response {
	  /**
	   * @param {CompiledMode} mode
	   */
	  constructor(mode) {
	    // eslint-disable-next-line no-undefined
	    if (mode.data === undefined) mode.data = {};

	    this.data = mode.data;
	    this.isMatchIgnored = false;
	  }

	  ignoreMatch() {
	    this.isMatchIgnored = true;
	  }
	}

	/**
	 * @param {string} value
	 * @returns {string}
	 */
	function escapeHTML(value) {
	  return value
	    .replace(/&/g, '&amp;')
	    .replace(/</g, '&lt;')
	    .replace(/>/g, '&gt;')
	    .replace(/"/g, '&quot;')
	    .replace(/'/g, '&#x27;');
	}

	/**
	 * performs a shallow merge of multiple objects into one
	 *
	 * @template T
	 * @param {T} original
	 * @param {Record<string,any>[]} objects
	 * @returns {T} a single new object
	 */
	function inherit$1(original, ...objects) {
	  /** @type Record<string,any> */
	  const result = Object.create(null);

	  for (const key in original) {
	    result[key] = original[key];
	  }
	  objects.forEach(function(obj) {
	    for (const key in obj) {
	      result[key] = obj[key];
	    }
	  });
	  return /** @type {T} */ (result);
	}

	/**
	 * @typedef {object} Renderer
	 * @property {(text: string) => void} addText
	 * @property {(node: Node) => void} openNode
	 * @property {(node: Node) => void} closeNode
	 * @property {() => string} value
	 */

	/** @typedef {{scope?: string, language?: string, sublanguage?: boolean}} Node */
	/** @typedef {{walk: (r: Renderer) => void}} Tree */
	/** */

	const SPAN_CLOSE = '</span>';

	/**
	 * Determines if a node needs to be wrapped in <span>
	 *
	 * @param {Node} node */
	const emitsWrappingTags = (node) => {
	  // rarely we can have a sublanguage where language is undefined
	  // TODO: track down why
	  return !!node.scope || (node.sublanguage && node.language);
	};

	/**
	 *
	 * @param {string} name
	 * @param {{prefix:string}} options
	 */
	const scopeToCSSClass = (name, { prefix }) => {
	  if (name.includes(".")) {
	    const pieces = name.split(".");
	    return [
	      `${prefix}${pieces.shift()}`,
	      ...(pieces.map((x, i) => `${x}${"_".repeat(i + 1)}`))
	    ].join(" ");
	  }
	  return `${prefix}${name}`;
	};

	/** @type {Renderer} */
	class HTMLRenderer {
	  /**
	   * Creates a new HTMLRenderer
	   *
	   * @param {Tree} parseTree - the parse tree (must support `walk` API)
	   * @param {{classPrefix: string}} options
	   */
	  constructor(parseTree, options) {
	    this.buffer = "";
	    this.classPrefix = options.classPrefix;
	    parseTree.walk(this);
	  }

	  /**
	   * Adds texts to the output stream
	   *
	   * @param {string} text */
	  addText(text) {
	    this.buffer += escapeHTML(text);
	  }

	  /**
	   * Adds a node open to the output stream (if needed)
	   *
	   * @param {Node} node */
	  openNode(node) {
	    if (!emitsWrappingTags(node)) return;

	    let className = "";
	    if (node.sublanguage) {
	      className = `language-${node.language}`;
	    } else {
	      className = scopeToCSSClass(node.scope, { prefix: this.classPrefix });
	    }
	    this.span(className);
	  }

	  /**
	   * Adds a node close to the output stream (if needed)
	   *
	   * @param {Node} node */
	  closeNode(node) {
	    if (!emitsWrappingTags(node)) return;

	    this.buffer += SPAN_CLOSE;
	  }

	  /**
	   * returns the accumulated buffer
	  */
	  value() {
	    return this.buffer;
	  }

	  // helpers

	  /**
	   * Builds a span element
	   *
	   * @param {string} className */
	  span(className) {
	    this.buffer += `<span class="${className}">`;
	  }
	}

	/** @typedef {{scope?: string, language?: string, sublanguage?: boolean, children: Node[]} | string} Node */
	/** @typedef {{scope?: string, language?: string, sublanguage?: boolean, children: Node[]} } DataNode */
	/** @typedef {import('highlight.js').Emitter} Emitter */
	/**  */

	/** @returns {DataNode} */
	const newNode = (opts = {}) => {
	  /** @type DataNode */
	  const result = { children: [] };
	  Object.assign(result, opts);
	  return result;
	};

	class TokenTree {
	  constructor() {
	    /** @type DataNode */
	    this.rootNode = newNode();
	    this.stack = [this.rootNode];
	  }

	  get top() {
	    return this.stack[this.stack.length - 1];
	  }

	  get root() { return this.rootNode; }

	  /** @param {Node} node */
	  add(node) {
	    this.top.children.push(node);
	  }

	  /** @param {string} scope */
	  openNode(scope) {
	    /** @type Node */
	    const node = newNode({ scope });
	    this.add(node);
	    this.stack.push(node);
	  }

	  closeNode() {
	    if (this.stack.length > 1) {
	      return this.stack.pop();
	    }
	    // eslint-disable-next-line no-undefined
	    return undefined;
	  }

	  closeAllNodes() {
	    while (this.closeNode());
	  }

	  toJSON() {
	    return JSON.stringify(this.rootNode, null, 4);
	  }

	  /**
	   * @typedef { import("./html_renderer").Renderer } Renderer
	   * @param {Renderer} builder
	   */
	  walk(builder) {
	    // this does not
	    return this.constructor._walk(builder, this.rootNode);
	    // this works
	    // return TokenTree._walk(builder, this.rootNode);
	  }

	  /**
	   * @param {Renderer} builder
	   * @param {Node} node
	   */
	  static _walk(builder, node) {
	    if (typeof node === "string") {
	      builder.addText(node);
	    } else if (node.children) {
	      builder.openNode(node);
	      node.children.forEach((child) => this._walk(builder, child));
	      builder.closeNode(node);
	    }
	    return builder;
	  }

	  /**
	   * @param {Node} node
	   */
	  static _collapse(node) {
	    if (typeof node === "string") return;
	    if (!node.children) return;

	    if (node.children.every(el => typeof el === "string")) {
	      // node.text = node.children.join("");
	      // delete node.children;
	      node.children = [node.children.join("")];
	    } else {
	      node.children.forEach((child) => {
	        TokenTree._collapse(child);
	      });
	    }
	  }
	}

	/**
	  Currently this is all private API, but this is the minimal API necessary
	  that an Emitter must implement to fully support the parser.

	  Minimal interface:

	  - addKeyword(text, scope)
	  - addText(text)
	  - addSublanguage(emitter, subLanguageName)
	  - finalize()
	  - openNode(scope)
	  - closeNode()
	  - closeAllNodes()
	  - toHTML()

	*/

	/**
	 * @implements {Emitter}
	 */
	class TokenTreeEmitter extends TokenTree {
	  /**
	   * @param {*} options
	   */
	  constructor(options) {
	    super();
	    this.options = options;
	  }

	  /**
	   * @param {string} text
	   * @param {string} scope
	   */
	  addKeyword(text, scope) {
	    if (text === "") { return; }

	    this.openNode(scope);
	    this.addText(text);
	    this.closeNode();
	  }

	  /**
	   * @param {string} text
	   */
	  addText(text) {
	    if (text === "") { return; }

	    this.add(text);
	  }

	  /**
	   * @param {Emitter & {root: DataNode}} emitter
	   * @param {string} name
	   */
	  addSublanguage(emitter, name) {
	    /** @type DataNode */
	    const node = emitter.root;
	    node.sublanguage = true;
	    node.language = name;
	    this.add(node);
	  }

	  toHTML() {
	    const renderer = new HTMLRenderer(this, this.options);
	    return renderer.value();
	  }

	  finalize() {
	    return true;
	  }
	}

	/**
	 * @param {string} value
	 * @returns {RegExp}
	 * */

	/**
	 * @param {RegExp | string } re
	 * @returns {string}
	 */
	function source(re) {
	  if (!re) return null;
	  if (typeof re === "string") return re;

	  return re.source;
	}

	/**
	 * @param {RegExp | string } re
	 * @returns {string}
	 */
	function lookahead(re) {
	  return concat('(?=', re, ')');
	}

	/**
	 * @param {RegExp | string } re
	 * @returns {string}
	 */
	function anyNumberOfTimes(re) {
	  return concat('(?:', re, ')*');
	}

	/**
	 * @param {RegExp | string } re
	 * @returns {string}
	 */
	function optional(re) {
	  return concat('(?:', re, ')?');
	}

	/**
	 * @param {...(RegExp | string) } args
	 * @returns {string}
	 */
	function concat(...args) {
	  const joined = args.map((x) => source(x)).join("");
	  return joined;
	}

	/**
	 * @param { Array<string | RegExp | Object> } args
	 * @returns {object}
	 */
	function stripOptionsFromArgs(args) {
	  const opts = args[args.length - 1];

	  if (typeof opts === 'object' && opts.constructor === Object) {
	    args.splice(args.length - 1, 1);
	    return opts;
	  } else {
	    return {};
	  }
	}

	/** @typedef { {capture?: boolean} } RegexEitherOptions */

	/**
	 * Any of the passed expresssions may match
	 *
	 * Creates a huge this | this | that | that match
	 * @param {(RegExp | string)[] | [...(RegExp | string)[], RegexEitherOptions]} args
	 * @returns {string}
	 */
	function either(...args) {
	  /** @type { object & {capture?: boolean} }  */
	  const opts = stripOptionsFromArgs(args);
	  const joined = '('
	    + (opts.capture ? "" : "?:")
	    + args.map((x) => source(x)).join("|") + ")";
	  return joined;
	}

	/**
	 * @param {RegExp | string} re
	 * @returns {number}
	 */
	function countMatchGroups(re) {
	  return (new RegExp(re.toString() + '|')).exec('').length - 1;
	}

	/**
	 * Does lexeme start with a regular expression match at the beginning
	 * @param {RegExp} re
	 * @param {string} lexeme
	 */
	function startsWith(re, lexeme) {
	  const match = re && re.exec(lexeme);
	  return match && match.index === 0;
	}

	// BACKREF_RE matches an open parenthesis or backreference. To avoid
	// an incorrect parse, it additionally matches the following:
	// - [...] elements, where the meaning of parentheses and escapes change
	// - other escape sequences, so we do not misparse escape sequences as
	//   interesting elements
	// - non-matching or lookahead parentheses, which do not capture. These
	//   follow the '(' with a '?'.
	const BACKREF_RE = /\[(?:[^\\\]]|\\.)*\]|\(\??|\\([1-9][0-9]*)|\\./;

	// **INTERNAL** Not intended for outside usage
	// join logically computes regexps.join(separator), but fixes the
	// backreferences so they continue to match.
	// it also places each individual regular expression into it's own
	// match group, keeping track of the sequencing of those match groups
	// is currently an exercise for the caller. :-)
	/**
	 * @param {(string | RegExp)[]} regexps
	 * @param {{joinWith: string}} opts
	 * @returns {string}
	 */
	function _rewriteBackreferences(regexps, { joinWith }) {
	  let numCaptures = 0;

	  return regexps.map((regex) => {
	    numCaptures += 1;
	    const offset = numCaptures;
	    let re = source(regex);
	    let out = '';

	    while (re.length > 0) {
	      const match = BACKREF_RE.exec(re);
	      if (!match) {
	        out += re;
	        break;
	      }
	      out += re.substring(0, match.index);
	      re = re.substring(match.index + match[0].length);
	      if (match[0][0] === '\\' && match[1]) {
	        // Adjust the backreference.
	        out += '\\' + String(Number(match[1]) + offset);
	      } else {
	        out += match[0];
	        if (match[0] === '(') {
	          numCaptures++;
	        }
	      }
	    }
	    return out;
	  }).map(re => `(${re})`).join(joinWith);
	}

	/** @typedef {import('highlight.js').Mode} Mode */
	/** @typedef {import('highlight.js').ModeCallback} ModeCallback */

	// Common regexps
	const MATCH_NOTHING_RE = /\b\B/;
	const IDENT_RE = '[a-zA-Z]\\w*';
	const UNDERSCORE_IDENT_RE = '[a-zA-Z_]\\w*';
	const NUMBER_RE = '\\b\\d+(\\.\\d+)?';
	const C_NUMBER_RE = '(-?)(\\b0[xX][a-fA-F0-9]+|(\\b\\d+(\\.\\d*)?|\\.\\d+)([eE][-+]?\\d+)?)'; // 0x..., 0..., decimal, float
	const BINARY_NUMBER_RE = '\\b(0b[01]+)'; // 0b...
	const RE_STARTERS_RE = '!|!=|!==|%|%=|&|&&|&=|\\*|\\*=|\\+|\\+=|,|-|-=|/=|/|:|;|<<|<<=|<=|<|===|==|=|>>>=|>>=|>=|>>>|>>|>|\\?|\\[|\\{|\\(|\\^|\\^=|\\||\\|=|\\|\\||~';

	/**
	* @param { Partial<Mode> & {binary?: string | RegExp} } opts
	*/
	const SHEBANG = (opts = {}) => {
	  const beginShebang = /^#![ ]*\//;
	  if (opts.binary) {
	    opts.begin = concat(
	      beginShebang,
	      /.*\b/,
	      opts.binary,
	      /\b.*/);
	  }
	  return inherit$1({
	    scope: 'meta',
	    begin: beginShebang,
	    end: /$/,
	    relevance: 0,
	    /** @type {ModeCallback} */
	    "on:begin": (m, resp) => {
	      if (m.index !== 0) resp.ignoreMatch();
	    }
	  }, opts);
	};

	// Common modes
	const BACKSLASH_ESCAPE = {
	  begin: '\\\\[\\s\\S]', relevance: 0
	};
	const APOS_STRING_MODE = {
	  scope: 'string',
	  begin: '\'',
	  end: '\'',
	  illegal: '\\n',
	  contains: [BACKSLASH_ESCAPE]
	};
	const QUOTE_STRING_MODE = {
	  scope: 'string',
	  begin: '"',
	  end: '"',
	  illegal: '\\n',
	  contains: [BACKSLASH_ESCAPE]
	};
	const PHRASAL_WORDS_MODE = {
	  begin: /\b(a|an|the|are|I'm|isn't|don't|doesn't|won't|but|just|should|pretty|simply|enough|gonna|going|wtf|so|such|will|you|your|they|like|more)\b/
	};
	/**
	 * Creates a comment mode
	 *
	 * @param {string | RegExp} begin
	 * @param {string | RegExp} end
	 * @param {Mode | {}} [modeOptions]
	 * @returns {Partial<Mode>}
	 */
	const COMMENT = function(begin, end, modeOptions = {}) {
	  const mode = inherit$1(
	    {
	      scope: 'comment',
	      begin,
	      end,
	      contains: []
	    },
	    modeOptions
	  );
	  mode.contains.push({
	    scope: 'doctag',
	    // hack to avoid the space from being included. the space is necessary to
	    // match here to prevent the plain text rule below from gobbling up doctags
	    begin: '[ ]*(?=(TODO|FIXME|NOTE|BUG|OPTIMIZE|HACK|XXX):)',
	    end: /(TODO|FIXME|NOTE|BUG|OPTIMIZE|HACK|XXX):/,
	    excludeBegin: true,
	    relevance: 0
	  });
	  const ENGLISH_WORD = either(
	    // list of common 1 and 2 letter words in English
	    "I",
	    "a",
	    "is",
	    "so",
	    "us",
	    "to",
	    "at",
	    "if",
	    "in",
	    "it",
	    "on",
	    // note: this is not an exhaustive list of contractions, just popular ones
	    /[A-Za-z]+['](d|ve|re|ll|t|s|n)/, // contractions - can't we'd they're let's, etc
	    /[A-Za-z]+[-][a-z]+/, // `no-way`, etc.
	    /[A-Za-z][a-z]{2,}/ // allow capitalized words at beginning of sentences
	  );
	  // looking like plain text, more likely to be a comment
	  mode.contains.push(
	    {
	      // TODO: how to include ", (, ) without breaking grammars that use these for
	      // comment delimiters?
	      // begin: /[ ]+([()"]?([A-Za-z'-]{3,}|is|a|I|so|us|[tT][oO]|at|if|in|it|on)[.]?[()":]?([.][ ]|[ ]|\))){3}/
	      // ---

	      // this tries to find sequences of 3 english words in a row (without any
	      // "programming" type syntax) this gives us a strong signal that we've
	      // TRULY found a comment - vs perhaps scanning with the wrong language.
	      // It's possible to find something that LOOKS like the start of the
	      // comment - but then if there is no readable text - good chance it is a
	      // false match and not a comment.
	      //
	      // for a visual example please see:
	      // https://github.com/highlightjs/highlight.js/issues/2827

	      begin: concat(
	        /[ ]+/, // necessary to prevent us gobbling up doctags like /* @author Bob Mcgill */
	        '(',
	        ENGLISH_WORD,
	        /[.]?[:]?([.][ ]|[ ])/,
	        '){3}') // look for 3 words in a row
	    }
	  );
	  return mode;
	};
	const C_LINE_COMMENT_MODE = COMMENT('//', '$');
	const C_BLOCK_COMMENT_MODE = COMMENT('/\\*', '\\*/');
	const HASH_COMMENT_MODE = COMMENT('#', '$');
	const NUMBER_MODE = {
	  scope: 'number',
	  begin: NUMBER_RE,
	  relevance: 0
	};
	const C_NUMBER_MODE = {
	  scope: 'number',
	  begin: C_NUMBER_RE,
	  relevance: 0
	};
	const BINARY_NUMBER_MODE = {
	  scope: 'number',
	  begin: BINARY_NUMBER_RE,
	  relevance: 0
	};
	const REGEXP_MODE = {
	  // this outer rule makes sure we actually have a WHOLE regex and not simply
	  // an expression such as:
	  //
	  //     3 / something
	  //
	  // (which will then blow up when regex's `illegal` sees the newline)
	  begin: /(?=\/[^/\n]*\/)/,
	  contains: [{
	    scope: 'regexp',
	    begin: /\//,
	    end: /\/[gimuy]*/,
	    illegal: /\n/,
	    contains: [
	      BACKSLASH_ESCAPE,
	      {
	        begin: /\[/,
	        end: /\]/,
	        relevance: 0,
	        contains: [BACKSLASH_ESCAPE]
	      }
	    ]
	  }]
	};
	const TITLE_MODE = {
	  scope: 'title',
	  begin: IDENT_RE,
	  relevance: 0
	};
	const UNDERSCORE_TITLE_MODE = {
	  scope: 'title',
	  begin: UNDERSCORE_IDENT_RE,
	  relevance: 0
	};
	const METHOD_GUARD = {
	  // excludes method names from keyword processing
	  begin: '\\.\\s*' + UNDERSCORE_IDENT_RE,
	  relevance: 0
	};

	/**
	 * Adds end same as begin mechanics to a mode
	 *
	 * Your mode must include at least a single () match group as that first match
	 * group is what is used for comparison
	 * @param {Partial<Mode>} mode
	 */
	const END_SAME_AS_BEGIN = function(mode) {
	  return Object.assign(mode,
	    {
	      /** @type {ModeCallback} */
	      'on:begin': (m, resp) => { resp.data._beginMatch = m[1]; },
	      /** @type {ModeCallback} */
	      'on:end': (m, resp) => { if (resp.data._beginMatch !== m[1]) resp.ignoreMatch(); }
	    });
	};

	var MODES = /*#__PURE__*/Object.freeze({
	    __proto__: null,
	    MATCH_NOTHING_RE: MATCH_NOTHING_RE,
	    IDENT_RE: IDENT_RE,
	    UNDERSCORE_IDENT_RE: UNDERSCORE_IDENT_RE,
	    NUMBER_RE: NUMBER_RE,
	    C_NUMBER_RE: C_NUMBER_RE,
	    BINARY_NUMBER_RE: BINARY_NUMBER_RE,
	    RE_STARTERS_RE: RE_STARTERS_RE,
	    SHEBANG: SHEBANG,
	    BACKSLASH_ESCAPE: BACKSLASH_ESCAPE,
	    APOS_STRING_MODE: APOS_STRING_MODE,
	    QUOTE_STRING_MODE: QUOTE_STRING_MODE,
	    PHRASAL_WORDS_MODE: PHRASAL_WORDS_MODE,
	    COMMENT: COMMENT,
	    C_LINE_COMMENT_MODE: C_LINE_COMMENT_MODE,
	    C_BLOCK_COMMENT_MODE: C_BLOCK_COMMENT_MODE,
	    HASH_COMMENT_MODE: HASH_COMMENT_MODE,
	    NUMBER_MODE: NUMBER_MODE,
	    C_NUMBER_MODE: C_NUMBER_MODE,
	    BINARY_NUMBER_MODE: BINARY_NUMBER_MODE,
	    REGEXP_MODE: REGEXP_MODE,
	    TITLE_MODE: TITLE_MODE,
	    UNDERSCORE_TITLE_MODE: UNDERSCORE_TITLE_MODE,
	    METHOD_GUARD: METHOD_GUARD,
	    END_SAME_AS_BEGIN: END_SAME_AS_BEGIN
	});

	/**
	@typedef {import('highlight.js').CallbackResponse} CallbackResponse
	@typedef {import('highlight.js').CompilerExt} CompilerExt
	*/

	// Grammar extensions / plugins
	// See: https://github.com/highlightjs/highlight.js/issues/2833

	// Grammar extensions allow "syntactic sugar" to be added to the grammar modes
	// without requiring any underlying changes to the compiler internals.

	// `compileMatch` being the perfect small example of now allowing a grammar
	// author to write `match` when they desire to match a single expression rather
	// than being forced to use `begin`.  The extension then just moves `match` into
	// `begin` when it runs.  Ie, no features have been added, but we've just made
	// the experience of writing (and reading grammars) a little bit nicer.

	// ------

	// TODO: We need negative look-behind support to do this properly
	/**
	 * Skip a match if it has a preceding dot
	 *
	 * This is used for `beginKeywords` to prevent matching expressions such as
	 * `bob.keyword.do()`. The mode compiler automatically wires this up as a
	 * special _internal_ 'on:begin' callback for modes with `beginKeywords`
	 * @param {RegExpMatchArray} match
	 * @param {CallbackResponse} response
	 */
	function skipIfHasPrecedingDot(match, response) {
	  const before = match.input[match.index - 1];
	  if (before === ".") {
	    response.ignoreMatch();
	  }
	}

	/**
	 *
	 * @type {CompilerExt}
	 */
	function scopeClassName(mode, _parent) {
	  // eslint-disable-next-line no-undefined
	  if (mode.className !== undefined) {
	    mode.scope = mode.className;
	    delete mode.className;
	  }
	}

	/**
	 * `beginKeywords` syntactic sugar
	 * @type {CompilerExt}
	 */
	function beginKeywords(mode, parent) {
	  if (!parent) return;
	  if (!mode.beginKeywords) return;

	  // for languages with keywords that include non-word characters checking for
	  // a word boundary is not sufficient, so instead we check for a word boundary
	  // or whitespace - this does no harm in any case since our keyword engine
	  // doesn't allow spaces in keywords anyways and we still check for the boundary
	  // first
	  mode.begin = '\\b(' + mode.beginKeywords.split(' ').join('|') + ')(?!\\.)(?=\\b|\\s)';
	  mode.__beforeBegin = skipIfHasPrecedingDot;
	  mode.keywords = mode.keywords || mode.beginKeywords;
	  delete mode.beginKeywords;

	  // prevents double relevance, the keywords themselves provide
	  // relevance, the mode doesn't need to double it
	  // eslint-disable-next-line no-undefined
	  if (mode.relevance === undefined) mode.relevance = 0;
	}

	/**
	 * Allow `illegal` to contain an array of illegal values
	 * @type {CompilerExt}
	 */
	function compileIllegal(mode, _parent) {
	  if (!Array.isArray(mode.illegal)) return;

	  mode.illegal = either(...mode.illegal);
	}

	/**
	 * `match` to match a single expression for readability
	 * @type {CompilerExt}
	 */
	function compileMatch(mode, _parent) {
	  if (!mode.match) return;
	  if (mode.begin || mode.end) throw new Error("begin & end are not supported with match");

	  mode.begin = mode.match;
	  delete mode.match;
	}

	/**
	 * provides the default 1 relevance to all modes
	 * @type {CompilerExt}
	 */
	function compileRelevance(mode, _parent) {
	  // eslint-disable-next-line no-undefined
	  if (mode.relevance === undefined) mode.relevance = 1;
	}

	// allow beforeMatch to act as a "qualifier" for the match
	// the full match begin must be [beforeMatch][begin]
	const beforeMatchExt = (mode, parent) => {
	  if (!mode.beforeMatch) return;
	  // starts conflicts with endsParent which we need to make sure the child
	  // rule is not matched multiple times
	  if (mode.starts) throw new Error("beforeMatch cannot be used with starts");

	  const originalMode = Object.assign({}, mode);
	  Object.keys(mode).forEach((key) => { delete mode[key]; });

	  mode.keywords = originalMode.keywords;
	  mode.begin = concat(originalMode.beforeMatch, lookahead(originalMode.begin));
	  mode.starts = {
	    relevance: 0,
	    contains: [
	      Object.assign(originalMode, { endsParent: true })
	    ]
	  };
	  mode.relevance = 0;

	  delete originalMode.beforeMatch;
	};

	// keywords that should have no default relevance value
	const COMMON_KEYWORDS = [
	  'of',
	  'and',
	  'for',
	  'in',
	  'not',
	  'or',
	  'if',
	  'then',
	  'parent', // common variable name
	  'list', // common variable name
	  'value' // common variable name
	];

	const DEFAULT_KEYWORD_SCOPE = "keyword";

	/**
	 * Given raw keywords from a language definition, compile them.
	 *
	 * @param {string | Record<string,string|string[]> | Array<string>} rawKeywords
	 * @param {boolean} caseInsensitive
	 */
	function compileKeywords(rawKeywords, caseInsensitive, scopeName = DEFAULT_KEYWORD_SCOPE) {
	  /** @type KeywordDict */
	  const compiledKeywords = Object.create(null);

	  // input can be a string of keywords, an array of keywords, or a object with
	  // named keys representing scopeName (which can then point to a string or array)
	  if (typeof rawKeywords === 'string') {
	    compileList(scopeName, rawKeywords.split(" "));
	  } else if (Array.isArray(rawKeywords)) {
	    compileList(scopeName, rawKeywords);
	  } else {
	    Object.keys(rawKeywords).forEach(function(scopeName) {
	      // collapse all our objects back into the parent object
	      Object.assign(
	        compiledKeywords,
	        compileKeywords(rawKeywords[scopeName], caseInsensitive, scopeName)
	      );
	    });
	  }
	  return compiledKeywords;

	  // ---

	  /**
	   * Compiles an individual list of keywords
	   *
	   * Ex: "for if when while|5"
	   *
	   * @param {string} scopeName
	   * @param {Array<string>} keywordList
	   */
	  function compileList(scopeName, keywordList) {
	    if (caseInsensitive) {
	      keywordList = keywordList.map(x => x.toLowerCase());
	    }
	    keywordList.forEach(function(keyword) {
	      const pair = keyword.split('|');
	      compiledKeywords[pair[0]] = [scopeName, scoreForKeyword(pair[0], pair[1])];
	    });
	  }
	}

	/**
	 * Returns the proper score for a given keyword
	 *
	 * Also takes into account comment keywords, which will be scored 0 UNLESS
	 * another score has been manually assigned.
	 * @param {string} keyword
	 * @param {string} [providedScore]
	 */
	function scoreForKeyword(keyword, providedScore) {
	  // manual scores always win over common keywords
	  // so you can force a score of 1 if you really insist
	  if (providedScore) {
	    return Number(providedScore);
	  }

	  return commonKeyword(keyword) ? 0 : 1;
	}

	/**
	 * Determines if a given keyword is common or not
	 *
	 * @param {string} keyword */
	function commonKeyword(keyword) {
	  return COMMON_KEYWORDS.includes(keyword.toLowerCase());
	}

	/*

	For the reasoning behind this please see:
	https://github.com/highlightjs/highlight.js/issues/2880#issuecomment-747275419

	*/

	/**
	 * @type {Record<string, boolean>}
	 */
	const seenDeprecations = {};

	/**
	 * @param {string} message
	 */
	const error = (message) => {
	  console.error(message);
	};

	/**
	 * @param {string} message
	 * @param {any} args
	 */
	const warn = (message, ...args) => {
	  console.log(`WARN: ${message}`, ...args);
	};

	/**
	 * @param {string} version
	 * @param {string} message
	 */
	const deprecated = (version, message) => {
	  if (seenDeprecations[`${version}/${message}`]) return;

	  console.log(`Deprecated as of ${version}. ${message}`);
	  seenDeprecations[`${version}/${message}`] = true;
	};

	/* eslint-disable no-throw-literal */

	/**
	@typedef {import('highlight.js').CompiledMode} CompiledMode
	*/

	const MultiClassError = new Error();

	/**
	 * Renumbers labeled scope names to account for additional inner match
	 * groups that otherwise would break everything.
	 *
	 * Lets say we 3 match scopes:
	 *
	 *   { 1 => ..., 2 => ..., 3 => ... }
	 *
	 * So what we need is a clean match like this:
	 *
	 *   (a)(b)(c) => [ "a", "b", "c" ]
	 *
	 * But this falls apart with inner match groups:
	 *
	 * (a)(((b)))(c) => ["a", "b", "b", "b", "c" ]
	 *
	 * Our scopes are now "out of alignment" and we're repeating `b` 3 times.
	 * What needs to happen is the numbers are remapped:
	 *
	 *   { 1 => ..., 2 => ..., 5 => ... }
	 *
	 * We also need to know that the ONLY groups that should be output
	 * are 1, 2, and 5.  This function handles this behavior.
	 *
	 * @param {CompiledMode} mode
	 * @param {Array<RegExp | string>} regexes
	 * @param {{key: "beginScope"|"endScope"}} opts
	 */
	function remapScopeNames(mode, regexes, { key }) {
	  let offset = 0;
	  const scopeNames = mode[key];
	  /** @type Record<number,boolean> */
	  const emit = {};
	  /** @type Record<number,string> */
	  const positions = {};

	  for (let i = 1; i <= regexes.length; i++) {
	    positions[i + offset] = scopeNames[i];
	    emit[i + offset] = true;
	    offset += countMatchGroups(regexes[i - 1]);
	  }
	  // we use _emit to keep track of which match groups are "top-level" to avoid double
	  // output from inside match groups
	  mode[key] = positions;
	  mode[key]._emit = emit;
	  mode[key]._multi = true;
	}

	/**
	 * @param {CompiledMode} mode
	 */
	function beginMultiClass(mode) {
	  if (!Array.isArray(mode.begin)) return;

	  if (mode.skip || mode.excludeBegin || mode.returnBegin) {
	    error("skip, excludeBegin, returnBegin not compatible with beginScope: {}");
	    throw MultiClassError;
	  }

	  if (typeof mode.beginScope !== "object" || mode.beginScope === null) {
	    error("beginScope must be object");
	    throw MultiClassError;
	  }

	  remapScopeNames(mode, mode.begin, { key: "beginScope" });
	  mode.begin = _rewriteBackreferences(mode.begin, { joinWith: "" });
	}

	/**
	 * @param {CompiledMode} mode
	 */
	function endMultiClass(mode) {
	  if (!Array.isArray(mode.end)) return;

	  if (mode.skip || mode.excludeEnd || mode.returnEnd) {
	    error("skip, excludeEnd, returnEnd not compatible with endScope: {}");
	    throw MultiClassError;
	  }

	  if (typeof mode.endScope !== "object" || mode.endScope === null) {
	    error("endScope must be object");
	    throw MultiClassError;
	  }

	  remapScopeNames(mode, mode.end, { key: "endScope" });
	  mode.end = _rewriteBackreferences(mode.end, { joinWith: "" });
	}

	/**
	 * this exists only to allow `scope: {}` to be used beside `match:`
	 * Otherwise `beginScope` would necessary and that would look weird

	  {
	    match: [ /def/, /\w+/ ]
	    scope: { 1: "keyword" , 2: "title" }
	  }

	 * @param {CompiledMode} mode
	 */
	function scopeSugar(mode) {
	  if (mode.scope && typeof mode.scope === "object" && mode.scope !== null) {
	    mode.beginScope = mode.scope;
	    delete mode.scope;
	  }
	}

	/**
	 * @param {CompiledMode} mode
	 */
	function MultiClass(mode) {
	  scopeSugar(mode);

	  if (typeof mode.beginScope === "string") {
	    mode.beginScope = { _wrap: mode.beginScope };
	  }
	  if (typeof mode.endScope === "string") {
	    mode.endScope = { _wrap: mode.endScope };
	  }

	  beginMultiClass(mode);
	  endMultiClass(mode);
	}

	/**
	@typedef {import('highlight.js').Mode} Mode
	@typedef {import('highlight.js').CompiledMode} CompiledMode
	@typedef {import('highlight.js').Language} Language
	@typedef {import('highlight.js').HLJSPlugin} HLJSPlugin
	@typedef {import('highlight.js').CompiledLanguage} CompiledLanguage
	*/

	// compilation

	/**
	 * Compiles a language definition result
	 *
	 * Given the raw result of a language definition (Language), compiles this so
	 * that it is ready for highlighting code.
	 * @param {Language} language
	 * @returns {CompiledLanguage}
	 */
	function compileLanguage(language) {
	  /**
	   * Builds a regex with the case sensitivity of the current language
	   *
	   * @param {RegExp | string} value
	   * @param {boolean} [global]
	   */
	  function langRe(value, global) {
	    return new RegExp(
	      source(value),
	      'm'
	      + (language.case_insensitive ? 'i' : '')
	      + (language.unicodeRegex ? 'u' : '')
	      + (global ? 'g' : '')
	    );
	  }

	  /**
	    Stores multiple regular expressions and allows you to quickly search for
	    them all in a string simultaneously - returning the first match.  It does
	    this by creating a huge (a|b|c) regex - each individual item wrapped with ()
	    and joined by `|` - using match groups to track position.  When a match is
	    found checking which position in the array has content allows us to figure
	    out which of the original regexes / match groups triggered the match.

	    The match object itself (the result of `Regex.exec`) is returned but also
	    enhanced by merging in any meta-data that was registered with the regex.
	    This is how we keep track of which mode matched, and what type of rule
	    (`illegal`, `begin`, end, etc).
	  */
	  class MultiRegex {
	    constructor() {
	      this.matchIndexes = {};
	      // @ts-ignore
	      this.regexes = [];
	      this.matchAt = 1;
	      this.position = 0;
	    }

	    // @ts-ignore
	    addRule(re, opts) {
	      opts.position = this.position++;
	      // @ts-ignore
	      this.matchIndexes[this.matchAt] = opts;
	      this.regexes.push([opts, re]);
	      this.matchAt += countMatchGroups(re) + 1;
	    }

	    compile() {
	      if (this.regexes.length === 0) {
	        // avoids the need to check length every time exec is called
	        // @ts-ignore
	        this.exec = () => null;
	      }
	      const terminators = this.regexes.map(el => el[1]);
	      this.matcherRe = langRe(_rewriteBackreferences(terminators, { joinWith: '|' }), true);
	      this.lastIndex = 0;
	    }

	    /** @param {string} s */
	    exec(s) {
	      this.matcherRe.lastIndex = this.lastIndex;
	      const match = this.matcherRe.exec(s);
	      if (!match) { return null; }

	      // eslint-disable-next-line no-undefined
	      const i = match.findIndex((el, i) => i > 0 && el !== undefined);
	      // @ts-ignore
	      const matchData = this.matchIndexes[i];
	      // trim off any earlier non-relevant match groups (ie, the other regex
	      // match groups that make up the multi-matcher)
	      match.splice(0, i);

	      return Object.assign(match, matchData);
	    }
	  }

	  /*
	    Created to solve the key deficiently with MultiRegex - there is no way to
	    test for multiple matches at a single location.  Why would we need to do
	    that?  In the future a more dynamic engine will allow certain matches to be
	    ignored.  An example: if we matched say the 3rd regex in a large group but
	    decided to ignore it - we'd need to started testing again at the 4th
	    regex... but MultiRegex itself gives us no real way to do that.

	    So what this class creates MultiRegexs on the fly for whatever search
	    position they are needed.

	    NOTE: These additional MultiRegex objects are created dynamically.  For most
	    grammars most of the time we will never actually need anything more than the
	    first MultiRegex - so this shouldn't have too much overhead.

	    Say this is our search group, and we match regex3, but wish to ignore it.

	      regex1 | regex2 | regex3 | regex4 | regex5    ' ie, startAt = 0

	    What we need is a new MultiRegex that only includes the remaining
	    possibilities:

	      regex4 | regex5                               ' ie, startAt = 3

	    This class wraps all that complexity up in a simple API... `startAt` decides
	    where in the array of expressions to start doing the matching. It
	    auto-increments, so if a match is found at position 2, then startAt will be
	    set to 3.  If the end is reached startAt will return to 0.

	    MOST of the time the parser will be setting startAt manually to 0.
	  */
	  class ResumableMultiRegex {
	    constructor() {
	      // @ts-ignore
	      this.rules = [];
	      // @ts-ignore
	      this.multiRegexes = [];
	      this.count = 0;

	      this.lastIndex = 0;
	      this.regexIndex = 0;
	    }

	    // @ts-ignore
	    getMatcher(index) {
	      if (this.multiRegexes[index]) return this.multiRegexes[index];

	      const matcher = new MultiRegex();
	      this.rules.slice(index).forEach(([re, opts]) => matcher.addRule(re, opts));
	      matcher.compile();
	      this.multiRegexes[index] = matcher;
	      return matcher;
	    }

	    resumingScanAtSamePosition() {
	      return this.regexIndex !== 0;
	    }

	    considerAll() {
	      this.regexIndex = 0;
	    }

	    // @ts-ignore
	    addRule(re, opts) {
	      this.rules.push([re, opts]);
	      if (opts.type === "begin") this.count++;
	    }

	    /** @param {string} s */
	    exec(s) {
	      const m = this.getMatcher(this.regexIndex);
	      m.lastIndex = this.lastIndex;
	      let result = m.exec(s);

	      // The following is because we have no easy way to say "resume scanning at the
	      // existing position but also skip the current rule ONLY". What happens is
	      // all prior rules are also skipped which can result in matching the wrong
	      // thing. Example of matching "booger":

	      // our matcher is [string, "booger", number]
	      //
	      // ....booger....

	      // if "booger" is ignored then we'd really need a regex to scan from the
	      // SAME position for only: [string, number] but ignoring "booger" (if it
	      // was the first match), a simple resume would scan ahead who knows how
	      // far looking only for "number", ignoring potential string matches (or
	      // future "booger" matches that might be valid.)

	      // So what we do: We execute two matchers, one resuming at the same
	      // position, but the second full matcher starting at the position after:

	      //     /--- resume first regex match here (for [number])
	      //     |/---- full match here for [string, "booger", number]
	      //     vv
	      // ....booger....

	      // Which ever results in a match first is then used. So this 3-4 step
	      // process essentially allows us to say "match at this position, excluding
	      // a prior rule that was ignored".
	      //
	      // 1. Match "booger" first, ignore. Also proves that [string] does non match.
	      // 2. Resume matching for [number]
	      // 3. Match at index + 1 for [string, "booger", number]
	      // 4. If #2 and #3 result in matches, which came first?
	      if (this.resumingScanAtSamePosition()) {
	        if (result && result.index === this.lastIndex) ; else { // use the second matcher result
	          const m2 = this.getMatcher(0);
	          m2.lastIndex = this.lastIndex + 1;
	          result = m2.exec(s);
	        }
	      }

	      if (result) {
	        this.regexIndex += result.position + 1;
	        if (this.regexIndex === this.count) {
	          // wrap-around to considering all matches again
	          this.considerAll();
	        }
	      }

	      return result;
	    }
	  }

	  /**
	   * Given a mode, builds a huge ResumableMultiRegex that can be used to walk
	   * the content and find matches.
	   *
	   * @param {CompiledMode} mode
	   * @returns {ResumableMultiRegex}
	   */
	  function buildModeRegex(mode) {
	    const mm = new ResumableMultiRegex();

	    mode.contains.forEach(term => mm.addRule(term.begin, { rule: term, type: "begin" }));

	    if (mode.terminatorEnd) {
	      mm.addRule(mode.terminatorEnd, { type: "end" });
	    }
	    if (mode.illegal) {
	      mm.addRule(mode.illegal, { type: "illegal" });
	    }

	    return mm;
	  }

	  /** skip vs abort vs ignore
	   *
	   * @skip   - The mode is still entered and exited normally (and contains rules apply),
	   *           but all content is held and added to the parent buffer rather than being
	   *           output when the mode ends.  Mostly used with `sublanguage` to build up
	   *           a single large buffer than can be parsed by sublanguage.
	   *
	   *             - The mode begin ands ends normally.
	   *             - Content matched is added to the parent mode buffer.
	   *             - The parser cursor is moved forward normally.
	   *
	   * @abort  - A hack placeholder until we have ignore.  Aborts the mode (as if it
	   *           never matched) but DOES NOT continue to match subsequent `contains`
	   *           modes.  Abort is bad/suboptimal because it can result in modes
	   *           farther down not getting applied because an earlier rule eats the
	   *           content but then aborts.
	   *
	   *             - The mode does not begin.
	   *             - Content matched by `begin` is added to the mode buffer.
	   *             - The parser cursor is moved forward accordingly.
	   *
	   * @ignore - Ignores the mode (as if it never matched) and continues to match any
	   *           subsequent `contains` modes.  Ignore isn't technically possible with
	   *           the current parser implementation.
	   *
	   *             - The mode does not begin.
	   *             - Content matched by `begin` is ignored.
	   *             - The parser cursor is not moved forward.
	   */

	  /**
	   * Compiles an individual mode
	   *
	   * This can raise an error if the mode contains certain detectable known logic
	   * issues.
	   * @param {Mode} mode
	   * @param {CompiledMode | null} [parent]
	   * @returns {CompiledMode | never}
	   */
	  function compileMode(mode, parent) {
	    const cmode = /** @type CompiledMode */ (mode);
	    if (mode.isCompiled) return cmode;

	    [
	      scopeClassName,
	      // do this early so compiler extensions generally don't have to worry about
	      // the distinction between match/begin
	      compileMatch,
	      MultiClass,
	      beforeMatchExt
	    ].forEach(ext => ext(mode, parent));

	    language.compilerExtensions.forEach(ext => ext(mode, parent));

	    // __beforeBegin is considered private API, internal use only
	    mode.__beforeBegin = null;

	    [
	      beginKeywords,
	      // do this later so compiler extensions that come earlier have access to the
	      // raw array if they wanted to perhaps manipulate it, etc.
	      compileIllegal,
	      // default to 1 relevance if not specified
	      compileRelevance
	    ].forEach(ext => ext(mode, parent));

	    mode.isCompiled = true;

	    let keywordPattern = null;
	    if (typeof mode.keywords === "object" && mode.keywords.$pattern) {
	      // we need a copy because keywords might be compiled multiple times
	      // so we can't go deleting $pattern from the original on the first
	      // pass
	      mode.keywords = Object.assign({}, mode.keywords);
	      keywordPattern = mode.keywords.$pattern;
	      delete mode.keywords.$pattern;
	    }
	    keywordPattern = keywordPattern || /\w+/;

	    if (mode.keywords) {
	      mode.keywords = compileKeywords(mode.keywords, language.case_insensitive);
	    }

	    cmode.keywordPatternRe = langRe(keywordPattern, true);

	    if (parent) {
	      if (!mode.begin) mode.begin = /\B|\b/;
	      cmode.beginRe = langRe(cmode.begin);
	      if (!mode.end && !mode.endsWithParent) mode.end = /\B|\b/;
	      if (mode.end) cmode.endRe = langRe(cmode.end);
	      cmode.terminatorEnd = source(cmode.end) || '';
	      if (mode.endsWithParent && parent.terminatorEnd) {
	        cmode.terminatorEnd += (mode.end ? '|' : '') + parent.terminatorEnd;
	      }
	    }
	    if (mode.illegal) cmode.illegalRe = langRe(/** @type {RegExp | string} */ (mode.illegal));
	    if (!mode.contains) mode.contains = [];

	    mode.contains = [].concat(...mode.contains.map(function(c) {
	      return expandOrCloneMode(c === 'self' ? mode : c);
	    }));
	    mode.contains.forEach(function(c) { compileMode(/** @type Mode */ (c), cmode); });

	    if (mode.starts) {
	      compileMode(mode.starts, parent);
	    }

	    cmode.matcher = buildModeRegex(cmode);
	    return cmode;
	  }

	  if (!language.compilerExtensions) language.compilerExtensions = [];

	  // self is not valid at the top-level
	  if (language.contains && language.contains.includes('self')) {
	    throw new Error("ERR: contains `self` is not supported at the top-level of a language.  See documentation.");
	  }

	  // we need a null object, which inherit will guarantee
	  language.classNameAliases = inherit$1(language.classNameAliases || {});

	  return compileMode(/** @type Mode */ (language));
	}

	/**
	 * Determines if a mode has a dependency on it's parent or not
	 *
	 * If a mode does have a parent dependency then often we need to clone it if
	 * it's used in multiple places so that each copy points to the correct parent,
	 * where-as modes without a parent can often safely be re-used at the bottom of
	 * a mode chain.
	 *
	 * @param {Mode | null} mode
	 * @returns {boolean} - is there a dependency on the parent?
	 * */
	function dependencyOnParent(mode) {
	  if (!mode) return false;

	  return mode.endsWithParent || dependencyOnParent(mode.starts);
	}

	/**
	 * Expands a mode or clones it if necessary
	 *
	 * This is necessary for modes with parental dependenceis (see notes on
	 * `dependencyOnParent`) and for nodes that have `variants` - which must then be
	 * exploded into their own individual modes at compile time.
	 *
	 * @param {Mode} mode
	 * @returns {Mode | Mode[]}
	 * */
	function expandOrCloneMode(mode) {
	  if (mode.variants && !mode.cachedVariants) {
	    mode.cachedVariants = mode.variants.map(function(variant) {
	      return inherit$1(mode, { variants: null }, variant);
	    });
	  }

	  // EXPAND
	  // if we have variants then essentially "replace" the mode with the variants
	  // this happens in compileMode, where this function is called from
	  if (mode.cachedVariants) {
	    return mode.cachedVariants;
	  }

	  // CLONE
	  // if we have dependencies on parents then we need a unique
	  // instance of ourselves, so we can be reused with many
	  // different parents without issue
	  if (dependencyOnParent(mode)) {
	    return inherit$1(mode, { starts: mode.starts ? inherit$1(mode.starts) : null });
	  }

	  if (Object.isFrozen(mode)) {
	    return inherit$1(mode);
	  }

	  // no special dependency issues, just return ourselves
	  return mode;
	}

	var version = "11.6.0";

	class HTMLInjectionError extends Error {
	  constructor(reason, html) {
	    super(reason);
	    this.name = "HTMLInjectionError";
	    this.html = html;
	  }
	}

	/*
	Syntax highlighting with language autodetection.
	https://highlightjs.org/
	*/

	/**
	@typedef {import('highlight.js').Mode} Mode
	@typedef {import('highlight.js').CompiledMode} CompiledMode
	@typedef {import('highlight.js').CompiledScope} CompiledScope
	@typedef {import('highlight.js').Language} Language
	@typedef {import('highlight.js').HLJSApi} HLJSApi
	@typedef {import('highlight.js').HLJSPlugin} HLJSPlugin
	@typedef {import('highlight.js').PluginEvent} PluginEvent
	@typedef {import('highlight.js').HLJSOptions} HLJSOptions
	@typedef {import('highlight.js').LanguageFn} LanguageFn
	@typedef {import('highlight.js').HighlightedHTMLElement} HighlightedHTMLElement
	@typedef {import('highlight.js').BeforeHighlightContext} BeforeHighlightContext
	@typedef {import('highlight.js/private').MatchType} MatchType
	@typedef {import('highlight.js/private').KeywordData} KeywordData
	@typedef {import('highlight.js/private').EnhancedMatch} EnhancedMatch
	@typedef {import('highlight.js/private').AnnotatedError} AnnotatedError
	@typedef {import('highlight.js').AutoHighlightResult} AutoHighlightResult
	@typedef {import('highlight.js').HighlightOptions} HighlightOptions
	@typedef {import('highlight.js').HighlightResult} HighlightResult
	*/


	const escape$1 = escapeHTML;
	const inherit = inherit$1;
	const NO_MATCH = Symbol("nomatch");
	const MAX_KEYWORD_HITS = 7;

	/**
	 * @param {any} hljs - object that is extended (legacy)
	 * @returns {HLJSApi}
	 */
	const HLJS = function(hljs) {
	  // Global internal variables used within the highlight.js library.
	  /** @type {Record<string, Language>} */
	  const languages = Object.create(null);
	  /** @type {Record<string, string>} */
	  const aliases = Object.create(null);
	  /** @type {HLJSPlugin[]} */
	  const plugins = [];

	  // safe/production mode - swallows more errors, tries to keep running
	  // even if a single syntax or parse hits a fatal error
	  let SAFE_MODE = true;
	  const LANGUAGE_NOT_FOUND = "Could not find the language '{}', did you forget to load/include a language module?";
	  /** @type {Language} */
	  const PLAINTEXT_LANGUAGE = { disableAutodetect: true, name: 'Plain text', contains: [] };

	  // Global options used when within external APIs. This is modified when
	  // calling the `hljs.configure` function.
	  /** @type HLJSOptions */
	  let options = {
	    ignoreUnescapedHTML: false,
	    throwUnescapedHTML: false,
	    noHighlightRe: /^(no-?highlight)$/i,
	    languageDetectRe: /\blang(?:uage)?-([\w-]+)\b/i,
	    classPrefix: 'hljs-',
	    cssSelector: 'pre code',
	    languages: null,
	    // beta configuration options, subject to change, welcome to discuss
	    // https://github.com/highlightjs/highlight.js/issues/1086
	    __emitter: TokenTreeEmitter
	  };

	  /* Utility functions */

	  /**
	   * Tests a language name to see if highlighting should be skipped
	   * @param {string} languageName
	   */
	  function shouldNotHighlight(languageName) {
	    return options.noHighlightRe.test(languageName);
	  }

	  /**
	   * @param {HighlightedHTMLElement} block - the HTML element to determine language for
	   */
	  function blockLanguage(block) {
	    let classes = block.className + ' ';

	    classes += block.parentNode ? block.parentNode.className : '';

	    // language-* takes precedence over non-prefixed class names.
	    const match = options.languageDetectRe.exec(classes);
	    if (match) {
	      const language = getLanguage(match[1]);
	      if (!language) {
	        warn(LANGUAGE_NOT_FOUND.replace("{}", match[1]));
	        warn("Falling back to no-highlight mode for this block.", block);
	      }
	      return language ? match[1] : 'no-highlight';
	    }

	    return classes
	      .split(/\s+/)
	      .find((_class) => shouldNotHighlight(_class) || getLanguage(_class));
	  }

	  /**
	   * Core highlighting function.
	   *
	   * OLD API
	   * highlight(lang, code, ignoreIllegals, continuation)
	   *
	   * NEW API
	   * highlight(code, {lang, ignoreIllegals})
	   *
	   * @param {string} codeOrLanguageName - the language to use for highlighting
	   * @param {string | HighlightOptions} optionsOrCode - the code to highlight
	   * @param {boolean} [ignoreIllegals] - whether to ignore illegal matches, default is to bail
	   *
	   * @returns {HighlightResult} Result - an object that represents the result
	   * @property {string} language - the language name
	   * @property {number} relevance - the relevance score
	   * @property {string} value - the highlighted HTML code
	   * @property {string} code - the original raw code
	   * @property {CompiledMode} top - top of the current mode stack
	   * @property {boolean} illegal - indicates whether any illegal matches were found
	  */
	  function highlight(codeOrLanguageName, optionsOrCode, ignoreIllegals) {
	    let code = "";
	    let languageName = "";
	    if (typeof optionsOrCode === "object") {
	      code = codeOrLanguageName;
	      ignoreIllegals = optionsOrCode.ignoreIllegals;
	      languageName = optionsOrCode.language;
	    } else {
	      // old API
	      deprecated("10.7.0", "highlight(lang, code, ...args) has been deprecated.");
	      deprecated("10.7.0", "Please use highlight(code, options) instead.\nhttps://github.com/highlightjs/highlight.js/issues/2277");
	      languageName = codeOrLanguageName;
	      code = optionsOrCode;
	    }

	    // https://github.com/highlightjs/highlight.js/issues/3149
	    // eslint-disable-next-line no-undefined
	    if (ignoreIllegals === undefined) { ignoreIllegals = true; }

	    /** @type {BeforeHighlightContext} */
	    const context = {
	      code,
	      language: languageName
	    };
	    // the plugin can change the desired language or the code to be highlighted
	    // just be changing the object it was passed
	    fire("before:highlight", context);

	    // a before plugin can usurp the result completely by providing it's own
	    // in which case we don't even need to call highlight
	    const result = context.result
	      ? context.result
	      : _highlight(context.language, context.code, ignoreIllegals);

	    result.code = context.code;
	    // the plugin can change anything in result to suite it
	    fire("after:highlight", result);

	    return result;
	  }

	  /**
	   * private highlight that's used internally and does not fire callbacks
	   *
	   * @param {string} languageName - the language to use for highlighting
	   * @param {string} codeToHighlight - the code to highlight
	   * @param {boolean?} [ignoreIllegals] - whether to ignore illegal matches, default is to bail
	   * @param {CompiledMode?} [continuation] - current continuation mode, if any
	   * @returns {HighlightResult} - result of the highlight operation
	  */
	  function _highlight(languageName, codeToHighlight, ignoreIllegals, continuation) {
	    const keywordHits = Object.create(null);

	    /**
	     * Return keyword data if a match is a keyword
	     * @param {CompiledMode} mode - current mode
	     * @param {string} matchText - the textual match
	     * @returns {KeywordData | false}
	     */
	    function keywordData(mode, matchText) {
	      return mode.keywords[matchText];
	    }

	    function processKeywords() {
	      if (!top.keywords) {
	        emitter.addText(modeBuffer);
	        return;
	      }

	      let lastIndex = 0;
	      top.keywordPatternRe.lastIndex = 0;
	      let match = top.keywordPatternRe.exec(modeBuffer);
	      let buf = "";

	      while (match) {
	        buf += modeBuffer.substring(lastIndex, match.index);
	        const word = language.case_insensitive ? match[0].toLowerCase() : match[0];
	        const data = keywordData(top, word);
	        if (data) {
	          const [kind, keywordRelevance] = data;
	          emitter.addText(buf);
	          buf = "";

	          keywordHits[word] = (keywordHits[word] || 0) + 1;
	          if (keywordHits[word] <= MAX_KEYWORD_HITS) relevance += keywordRelevance;
	          if (kind.startsWith("_")) {
	            // _ implied for relevance only, do not highlight
	            // by applying a class name
	            buf += match[0];
	          } else {
	            const cssClass = language.classNameAliases[kind] || kind;
	            emitter.addKeyword(match[0], cssClass);
	          }
	        } else {
	          buf += match[0];
	        }
	        lastIndex = top.keywordPatternRe.lastIndex;
	        match = top.keywordPatternRe.exec(modeBuffer);
	      }
	      buf += modeBuffer.substring(lastIndex);
	      emitter.addText(buf);
	    }

	    function processSubLanguage() {
	      if (modeBuffer === "") return;
	      /** @type HighlightResult */
	      let result = null;

	      if (typeof top.subLanguage === 'string') {
	        if (!languages[top.subLanguage]) {
	          emitter.addText(modeBuffer);
	          return;
	        }
	        result = _highlight(top.subLanguage, modeBuffer, true, continuations[top.subLanguage]);
	        continuations[top.subLanguage] = /** @type {CompiledMode} */ (result._top);
	      } else {
	        result = highlightAuto(modeBuffer, top.subLanguage.length ? top.subLanguage : null);
	      }

	      // Counting embedded language score towards the host language may be disabled
	      // with zeroing the containing mode relevance. Use case in point is Markdown that
	      // allows XML everywhere and makes every XML snippet to have a much larger Markdown
	      // score.
	      if (top.relevance > 0) {
	        relevance += result.relevance;
	      }
	      emitter.addSublanguage(result._emitter, result.language);
	    }

	    function processBuffer() {
	      if (top.subLanguage != null) {
	        processSubLanguage();
	      } else {
	        processKeywords();
	      }
	      modeBuffer = '';
	    }

	    /**
	     * @param {CompiledScope} scope
	     * @param {RegExpMatchArray} match
	     */
	    function emitMultiClass(scope, match) {
	      let i = 1;
	      const max = match.length - 1;
	      while (i <= max) {
	        if (!scope._emit[i]) { i++; continue; }
	        const klass = language.classNameAliases[scope[i]] || scope[i];
	        const text = match[i];
	        if (klass) {
	          emitter.addKeyword(text, klass);
	        } else {
	          modeBuffer = text;
	          processKeywords();
	          modeBuffer = "";
	        }
	        i++;
	      }
	    }

	    /**
	     * @param {CompiledMode} mode - new mode to start
	     * @param {RegExpMatchArray} match
	     */
	    function startNewMode(mode, match) {
	      if (mode.scope && typeof mode.scope === "string") {
	        emitter.openNode(language.classNameAliases[mode.scope] || mode.scope);
	      }
	      if (mode.beginScope) {
	        // beginScope just wraps the begin match itself in a scope
	        if (mode.beginScope._wrap) {
	          emitter.addKeyword(modeBuffer, language.classNameAliases[mode.beginScope._wrap] || mode.beginScope._wrap);
	          modeBuffer = "";
	        } else if (mode.beginScope._multi) {
	          // at this point modeBuffer should just be the match
	          emitMultiClass(mode.beginScope, match);
	          modeBuffer = "";
	        }
	      }

	      top = Object.create(mode, { parent: { value: top } });
	      return top;
	    }

	    /**
	     * @param {CompiledMode } mode - the mode to potentially end
	     * @param {RegExpMatchArray} match - the latest match
	     * @param {string} matchPlusRemainder - match plus remainder of content
	     * @returns {CompiledMode | void} - the next mode, or if void continue on in current mode
	     */
	    function endOfMode(mode, match, matchPlusRemainder) {
	      let matched = startsWith(mode.endRe, matchPlusRemainder);

	      if (matched) {
	        if (mode["on:end"]) {
	          const resp = new Response(mode);
	          mode["on:end"](match, resp);
	          if (resp.isMatchIgnored) matched = false;
	        }

	        if (matched) {
	          while (mode.endsParent && mode.parent) {
	            mode = mode.parent;
	          }
	          return mode;
	        }
	      }
	      // even if on:end fires an `ignore` it's still possible
	      // that we might trigger the end node because of a parent mode
	      if (mode.endsWithParent) {
	        return endOfMode(mode.parent, match, matchPlusRemainder);
	      }
	    }

	    /**
	     * Handle matching but then ignoring a sequence of text
	     *
	     * @param {string} lexeme - string containing full match text
	     */
	    function doIgnore(lexeme) {
	      if (top.matcher.regexIndex === 0) {
	        // no more regexes to potentially match here, so we move the cursor forward one
	        // space
	        modeBuffer += lexeme[0];
	        return 1;
	      } else {
	        // no need to move the cursor, we still have additional regexes to try and
	        // match at this very spot
	        resumeScanAtSamePosition = true;
	        return 0;
	      }
	    }

	    /**
	     * Handle the start of a new potential mode match
	     *
	     * @param {EnhancedMatch} match - the current match
	     * @returns {number} how far to advance the parse cursor
	     */
	    function doBeginMatch(match) {
	      const lexeme = match[0];
	      const newMode = match.rule;

	      const resp = new Response(newMode);
	      // first internal before callbacks, then the public ones
	      const beforeCallbacks = [newMode.__beforeBegin, newMode["on:begin"]];
	      for (const cb of beforeCallbacks) {
	        if (!cb) continue;
	        cb(match, resp);
	        if (resp.isMatchIgnored) return doIgnore(lexeme);
	      }

	      if (newMode.skip) {
	        modeBuffer += lexeme;
	      } else {
	        if (newMode.excludeBegin) {
	          modeBuffer += lexeme;
	        }
	        processBuffer();
	        if (!newMode.returnBegin && !newMode.excludeBegin) {
	          modeBuffer = lexeme;
	        }
	      }
	      startNewMode(newMode, match);
	      return newMode.returnBegin ? 0 : lexeme.length;
	    }

	    /**
	     * Handle the potential end of mode
	     *
	     * @param {RegExpMatchArray} match - the current match
	     */
	    function doEndMatch(match) {
	      const lexeme = match[0];
	      const matchPlusRemainder = codeToHighlight.substring(match.index);

	      const endMode = endOfMode(top, match, matchPlusRemainder);
	      if (!endMode) { return NO_MATCH; }

	      const origin = top;
	      if (top.endScope && top.endScope._wrap) {
	        processBuffer();
	        emitter.addKeyword(lexeme, top.endScope._wrap);
	      } else if (top.endScope && top.endScope._multi) {
	        processBuffer();
	        emitMultiClass(top.endScope, match);
	      } else if (origin.skip) {
	        modeBuffer += lexeme;
	      } else {
	        if (!(origin.returnEnd || origin.excludeEnd)) {
	          modeBuffer += lexeme;
	        }
	        processBuffer();
	        if (origin.excludeEnd) {
	          modeBuffer = lexeme;
	        }
	      }
	      do {
	        if (top.scope) {
	          emitter.closeNode();
	        }
	        if (!top.skip && !top.subLanguage) {
	          relevance += top.relevance;
	        }
	        top = top.parent;
	      } while (top !== endMode.parent);
	      if (endMode.starts) {
	        startNewMode(endMode.starts, match);
	      }
	      return origin.returnEnd ? 0 : lexeme.length;
	    }

	    function processContinuations() {
	      const list = [];
	      for (let current = top; current !== language; current = current.parent) {
	        if (current.scope) {
	          list.unshift(current.scope);
	        }
	      }
	      list.forEach(item => emitter.openNode(item));
	    }

	    /** @type {{type?: MatchType, index?: number, rule?: Mode}}} */
	    let lastMatch = {};

	    /**
	     *  Process an individual match
	     *
	     * @param {string} textBeforeMatch - text preceding the match (since the last match)
	     * @param {EnhancedMatch} [match] - the match itself
	     */
	    function processLexeme(textBeforeMatch, match) {
	      const lexeme = match && match[0];

	      // add non-matched text to the current mode buffer
	      modeBuffer += textBeforeMatch;

	      if (lexeme == null) {
	        processBuffer();
	        return 0;
	      }

	      // we've found a 0 width match and we're stuck, so we need to advance
	      // this happens when we have badly behaved rules that have optional matchers to the degree that
	      // sometimes they can end up matching nothing at all
	      // Ref: https://github.com/highlightjs/highlight.js/issues/2140
	      if (lastMatch.type === "begin" && match.type === "end" && lastMatch.index === match.index && lexeme === "") {
	        // spit the "skipped" character that our regex choked on back into the output sequence
	        modeBuffer += codeToHighlight.slice(match.index, match.index + 1);
	        if (!SAFE_MODE) {
	          /** @type {AnnotatedError} */
	          const err = new Error(`0 width match regex (${languageName})`);
	          err.languageName = languageName;
	          err.badRule = lastMatch.rule;
	          throw err;
	        }
	        return 1;
	      }
	      lastMatch = match;

	      if (match.type === "begin") {
	        return doBeginMatch(match);
	      } else if (match.type === "illegal" && !ignoreIllegals) {
	        // illegal match, we do not continue processing
	        /** @type {AnnotatedError} */
	        const err = new Error('Illegal lexeme "' + lexeme + '" for mode "' + (top.scope || '<unnamed>') + '"');
	        err.mode = top;
	        throw err;
	      } else if (match.type === "end") {
	        const processed = doEndMatch(match);
	        if (processed !== NO_MATCH) {
	          return processed;
	        }
	      }

	      // edge case for when illegal matches $ (end of line) which is technically
	      // a 0 width match but not a begin/end match so it's not caught by the
	      // first handler (when ignoreIllegals is true)
	      if (match.type === "illegal" && lexeme === "") {
	        // advance so we aren't stuck in an infinite loop
	        return 1;
	      }

	      // infinite loops are BAD, this is a last ditch catch all. if we have a
	      // decent number of iterations yet our index (cursor position in our
	      // parsing) still 3x behind our index then something is very wrong
	      // so we bail
	      if (iterations > 100000 && iterations > match.index * 3) {
	        const err = new Error('potential infinite loop, way more iterations than matches');
	        throw err;
	      }

	      /*
	      Why might be find ourselves here?  An potential end match that was
	      triggered but could not be completed.  IE, `doEndMatch` returned NO_MATCH.
	      (this could be because a callback requests the match be ignored, etc)

	      This causes no real harm other than stopping a few times too many.
	      */

	      modeBuffer += lexeme;
	      return lexeme.length;
	    }

	    const language = getLanguage(languageName);
	    if (!language) {
	      error(LANGUAGE_NOT_FOUND.replace("{}", languageName));
	      throw new Error('Unknown language: "' + languageName + '"');
	    }

	    const md = compileLanguage(language);
	    let result = '';
	    /** @type {CompiledMode} */
	    let top = continuation || md;
	    /** @type Record<string,CompiledMode> */
	    const continuations = {}; // keep continuations for sub-languages
	    const emitter = new options.__emitter(options);
	    processContinuations();
	    let modeBuffer = '';
	    let relevance = 0;
	    let index = 0;
	    let iterations = 0;
	    let resumeScanAtSamePosition = false;

	    try {
	      top.matcher.considerAll();

	      for (;;) {
	        iterations++;
	        if (resumeScanAtSamePosition) {
	          // only regexes not matched previously will now be
	          // considered for a potential match
	          resumeScanAtSamePosition = false;
	        } else {
	          top.matcher.considerAll();
	        }
	        top.matcher.lastIndex = index;

	        const match = top.matcher.exec(codeToHighlight);
	        // console.log("match", match[0], match.rule && match.rule.begin)

	        if (!match) break;

	        const beforeMatch = codeToHighlight.substring(index, match.index);
	        const processedCount = processLexeme(beforeMatch, match);
	        index = match.index + processedCount;
	      }
	      processLexeme(codeToHighlight.substring(index));
	      emitter.closeAllNodes();
	      emitter.finalize();
	      result = emitter.toHTML();

	      return {
	        language: languageName,
	        value: result,
	        relevance: relevance,
	        illegal: false,
	        _emitter: emitter,
	        _top: top
	      };
	    } catch (err) {
	      if (err.message && err.message.includes('Illegal')) {
	        return {
	          language: languageName,
	          value: escape$1(codeToHighlight),
	          illegal: true,
	          relevance: 0,
	          _illegalBy: {
	            message: err.message,
	            index: index,
	            context: codeToHighlight.slice(index - 100, index + 100),
	            mode: err.mode,
	            resultSoFar: result
	          },
	          _emitter: emitter
	        };
	      } else if (SAFE_MODE) {
	        return {
	          language: languageName,
	          value: escape$1(codeToHighlight),
	          illegal: false,
	          relevance: 0,
	          errorRaised: err,
	          _emitter: emitter,
	          _top: top
	        };
	      } else {
	        throw err;
	      }
	    }
	  }

	  /**
	   * returns a valid highlight result, without actually doing any actual work,
	   * auto highlight starts with this and it's possible for small snippets that
	   * auto-detection may not find a better match
	   * @param {string} code
	   * @returns {HighlightResult}
	   */
	  function justTextHighlightResult(code) {
	    const result = {
	      value: escape$1(code),
	      illegal: false,
	      relevance: 0,
	      _top: PLAINTEXT_LANGUAGE,
	      _emitter: new options.__emitter(options)
	    };
	    result._emitter.addText(code);
	    return result;
	  }

	  /**
	  Highlighting with language detection. Accepts a string with the code to
	  highlight. Returns an object with the following properties:

	  - language (detected language)
	  - relevance (int)
	  - value (an HTML string with highlighting markup)
	  - secondBest (object with the same structure for second-best heuristically
	    detected language, may be absent)

	    @param {string} code
	    @param {Array<string>} [languageSubset]
	    @returns {AutoHighlightResult}
	  */
	  function highlightAuto(code, languageSubset) {
	    languageSubset = languageSubset || options.languages || Object.keys(languages);
	    const plaintext = justTextHighlightResult(code);

	    const results = languageSubset.filter(getLanguage).filter(autoDetection).map(name =>
	      _highlight(name, code, false)
	    );
	    results.unshift(plaintext); // plaintext is always an option

	    const sorted = results.sort((a, b) => {
	      // sort base on relevance
	      if (a.relevance !== b.relevance) return b.relevance - a.relevance;

	      // always award the tie to the base language
	      // ie if C++ and Arduino are tied, it's more likely to be C++
	      if (a.language && b.language) {
	        if (getLanguage(a.language).supersetOf === b.language) {
	          return 1;
	        } else if (getLanguage(b.language).supersetOf === a.language) {
	          return -1;
	        }
	      }

	      // otherwise say they are equal, which has the effect of sorting on
	      // relevance while preserving the original ordering - which is how ties
	      // have historically been settled, ie the language that comes first always
	      // wins in the case of a tie
	      return 0;
	    });

	    const [best, secondBest] = sorted;

	    /** @type {AutoHighlightResult} */
	    const result = best;
	    result.secondBest = secondBest;

	    return result;
	  }

	  /**
	   * Builds new class name for block given the language name
	   *
	   * @param {HTMLElement} element
	   * @param {string} [currentLang]
	   * @param {string} [resultLang]
	   */
	  function updateClassName(element, currentLang, resultLang) {
	    const language = (currentLang && aliases[currentLang]) || resultLang;

	    element.classList.add("hljs");
	    element.classList.add(`language-${language}`);
	  }

	  /**
	   * Applies highlighting to a DOM node containing code.
	   *
	   * @param {HighlightedHTMLElement} element - the HTML element to highlight
	  */
	  function highlightElement(element) {
	    /** @type HTMLElement */
	    let node = null;
	    const language = blockLanguage(element);

	    if (shouldNotHighlight(language)) return;

	    fire("before:highlightElement",
	      { el: element, language: language });

	    // we should be all text, no child nodes (unescaped HTML) - this is possibly
	    // an HTML injection attack - it's likely too late if this is already in
	    // production (the code has likely already done its damage by the time
	    // we're seeing it)... but we yell loudly about this so that hopefully it's
	    // more likely to be caught in development before making it to production
	    if (element.children.length > 0) {
	      if (!options.ignoreUnescapedHTML) {
	        console.warn("One of your code blocks includes unescaped HTML. This is a potentially serious security risk.");
	        console.warn("https://github.com/highlightjs/highlight.js/wiki/security");
	        console.warn("The element with unescaped HTML:");
	        console.warn(element);
	      }
	      if (options.throwUnescapedHTML) {
	        const err = new HTMLInjectionError(
	          "One of your code blocks includes unescaped HTML.",
	          element.innerHTML
	        );
	        throw err;
	      }
	    }

	    node = element;
	    const text = node.textContent;
	    const result = language ? highlight(text, { language, ignoreIllegals: true }) : highlightAuto(text);

	    element.innerHTML = result.value;
	    updateClassName(element, language, result.language);
	    element.result = {
	      language: result.language,
	      // TODO: remove with version 11.0
	      re: result.relevance,
	      relevance: result.relevance
	    };
	    if (result.secondBest) {
	      element.secondBest = {
	        language: result.secondBest.language,
	        relevance: result.secondBest.relevance
	      };
	    }

	    fire("after:highlightElement", { el: element, result, text });
	  }

	  /**
	   * Updates highlight.js global options with the passed options
	   *
	   * @param {Partial<HLJSOptions>} userOptions
	   */
	  function configure(userOptions) {
	    options = inherit(options, userOptions);
	  }

	  // TODO: remove v12, deprecated
	  const initHighlighting = () => {
	    highlightAll();
	    deprecated("10.6.0", "initHighlighting() deprecated.  Use highlightAll() now.");
	  };

	  // TODO: remove v12, deprecated
	  function initHighlightingOnLoad() {
	    highlightAll();
	    deprecated("10.6.0", "initHighlightingOnLoad() deprecated.  Use highlightAll() now.");
	  }

	  let wantsHighlight = false;

	  /**
	   * auto-highlights all pre>code elements on the page
	   */
	  function highlightAll() {
	    // if we are called too early in the loading process
	    if (document.readyState === "loading") {
	      wantsHighlight = true;
	      return;
	    }

	    const blocks = document.querySelectorAll(options.cssSelector);
	    blocks.forEach(highlightElement);
	  }

	  function boot() {
	    // if a highlight was requested before DOM was loaded, do now
	    if (wantsHighlight) highlightAll();
	  }

	  // make sure we are in the browser environment
	  if (typeof window !== 'undefined' && window.addEventListener) {
	    window.addEventListener('DOMContentLoaded', boot, false);
	  }

	  /**
	   * Register a language grammar module
	   *
	   * @param {string} languageName
	   * @param {LanguageFn} languageDefinition
	   */
	  function registerLanguage(languageName, languageDefinition) {
	    let lang = null;
	    try {
	      lang = languageDefinition(hljs);
	    } catch (error$1) {
	      error("Language definition for '{}' could not be registered.".replace("{}", languageName));
	      // hard or soft error
	      if (!SAFE_MODE) { throw error$1; } else { error(error$1); }
	      // languages that have serious errors are replaced with essentially a
	      // "plaintext" stand-in so that the code blocks will still get normal
	      // css classes applied to them - and one bad language won't break the
	      // entire highlighter
	      lang = PLAINTEXT_LANGUAGE;
	    }
	    // give it a temporary name if it doesn't have one in the meta-data
	    if (!lang.name) lang.name = languageName;
	    languages[languageName] = lang;
	    lang.rawDefinition = languageDefinition.bind(null, hljs);

	    if (lang.aliases) {
	      registerAliases(lang.aliases, { languageName });
	    }
	  }

	  /**
	   * Remove a language grammar module
	   *
	   * @param {string} languageName
	   */
	  function unregisterLanguage(languageName) {
	    delete languages[languageName];
	    for (const alias of Object.keys(aliases)) {
	      if (aliases[alias] === languageName) {
	        delete aliases[alias];
	      }
	    }
	  }

	  /**
	   * @returns {string[]} List of language internal names
	   */
	  function listLanguages() {
	    return Object.keys(languages);
	  }

	  /**
	   * @param {string} name - name of the language to retrieve
	   * @returns {Language | undefined}
	   */
	  function getLanguage(name) {
	    name = (name || '').toLowerCase();
	    return languages[name] || languages[aliases[name]];
	  }

	  /**
	   *
	   * @param {string|string[]} aliasList - single alias or list of aliases
	   * @param {{languageName: string}} opts
	   */
	  function registerAliases(aliasList, { languageName }) {
	    if (typeof aliasList === 'string') {
	      aliasList = [aliasList];
	    }
	    aliasList.forEach(alias => { aliases[alias.toLowerCase()] = languageName; });
	  }

	  /**
	   * Determines if a given language has auto-detection enabled
	   * @param {string} name - name of the language
	   */
	  function autoDetection(name) {
	    const lang = getLanguage(name);
	    return lang && !lang.disableAutodetect;
	  }

	  /**
	   * Upgrades the old highlightBlock plugins to the new
	   * highlightElement API
	   * @param {HLJSPlugin} plugin
	   */
	  function upgradePluginAPI(plugin) {
	    // TODO: remove with v12
	    if (plugin["before:highlightBlock"] && !plugin["before:highlightElement"]) {
	      plugin["before:highlightElement"] = (data) => {
	        plugin["before:highlightBlock"](
	          Object.assign({ block: data.el }, data)
	        );
	      };
	    }
	    if (plugin["after:highlightBlock"] && !plugin["after:highlightElement"]) {
	      plugin["after:highlightElement"] = (data) => {
	        plugin["after:highlightBlock"](
	          Object.assign({ block: data.el }, data)
	        );
	      };
	    }
	  }

	  /**
	   * @param {HLJSPlugin} plugin
	   */
	  function addPlugin(plugin) {
	    upgradePluginAPI(plugin);
	    plugins.push(plugin);
	  }

	  /**
	   *
	   * @param {PluginEvent} event
	   * @param {any} args
	   */
	  function fire(event, args) {
	    const cb = event;
	    plugins.forEach(function(plugin) {
	      if (plugin[cb]) {
	        plugin[cb](args);
	      }
	    });
	  }

	  /**
	   * DEPRECATED
	   * @param {HighlightedHTMLElement} el
	   */
	  function deprecateHighlightBlock(el) {
	    deprecated("10.7.0", "highlightBlock will be removed entirely in v12.0");
	    deprecated("10.7.0", "Please use highlightElement now.");

	    return highlightElement(el);
	  }

	  /* Interface definition */
	  Object.assign(hljs, {
	    highlight,
	    highlightAuto,
	    highlightAll,
	    highlightElement,
	    // TODO: Remove with v12 API
	    highlightBlock: deprecateHighlightBlock,
	    configure,
	    initHighlighting,
	    initHighlightingOnLoad,
	    registerLanguage,
	    unregisterLanguage,
	    listLanguages,
	    getLanguage,
	    registerAliases,
	    autoDetection,
	    inherit,
	    addPlugin
	  });

	  hljs.debugMode = function() { SAFE_MODE = false; };
	  hljs.safeMode = function() { SAFE_MODE = true; };
	  hljs.versionString = version;

	  hljs.regex = {
	    concat: concat,
	    lookahead: lookahead,
	    either: either,
	    optional: optional,
	    anyNumberOfTimes: anyNumberOfTimes
	  };

	  for (const key in MODES) {
	    // @ts-ignore
	    if (typeof MODES[key] === "object") {
	      // @ts-ignore
	      deepFreezeEs6.exports(MODES[key]);
	    }
	  }

	  // merge all the modes/regexes into our main object
	  Object.assign(hljs, MODES);

	  return hljs;
	};

	// export an "instance" of the highlighter
	var highlight = HLJS({});

	var core = highlight;
	highlight.HighlightJS = highlight;
	highlight.default = highlight;

	/*
	Language: HTML, XML
	Website: https://www.w3.org/XML/
	Category: common, web
	Audit: 2020
	*/

	var xml_1;
	var hasRequiredXml;

	function requireXml () {
		if (hasRequiredXml) return xml_1;
		hasRequiredXml = 1;
		/** @type LanguageFn */
		function xml(hljs) {
		  const regex = hljs.regex;
		  // XML names can have the following additional letters: https://www.w3.org/TR/xml/#NT-NameChar
		  // OTHER_NAME_CHARS = /[:\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]/;
		  // Element names start with NAME_START_CHAR followed by optional other Unicode letters, ASCII digits, hyphens, underscores, and periods
		  // const TAG_NAME_RE = regex.concat(/[A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]/, regex.optional(/[A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*:/), /[A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*/);;
		  // const XML_IDENT_RE = /[A-Z_a-z:\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]+/;
		  // const TAG_NAME_RE = regex.concat(/[A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]/, regex.optional(/[A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*:/), /[A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*/);
		  // however, to cater for performance and more Unicode support rely simply on the Unicode letter class
		  const TAG_NAME_RE = regex.concat(/[\p{L}_]/u, regex.optional(/[\p{L}0-9_.-]*:/u), /[\p{L}0-9_.-]*/u);
		  const XML_IDENT_RE = /[\p{L}0-9._:-]+/u;
		  const XML_ENTITIES = {
		    className: 'symbol',
		    begin: /&[a-z]+;|&#[0-9]+;|&#x[a-f0-9]+;/
		  };
		  const XML_META_KEYWORDS = {
		    begin: /\s/,
		    contains: [
		      {
		        className: 'keyword',
		        begin: /#?[a-z_][a-z1-9_-]+/,
		        illegal: /\n/
		      }
		    ]
		  };
		  const XML_META_PAR_KEYWORDS = hljs.inherit(XML_META_KEYWORDS, {
		    begin: /\(/,
		    end: /\)/
		  });
		  const APOS_META_STRING_MODE = hljs.inherit(hljs.APOS_STRING_MODE, { className: 'string' });
		  const QUOTE_META_STRING_MODE = hljs.inherit(hljs.QUOTE_STRING_MODE, { className: 'string' });
		  const TAG_INTERNALS = {
		    endsWithParent: true,
		    illegal: /</,
		    relevance: 0,
		    contains: [
		      {
		        className: 'attr',
		        begin: XML_IDENT_RE,
		        relevance: 0
		      },
		      {
		        begin: /=\s*/,
		        relevance: 0,
		        contains: [
		          {
		            className: 'string',
		            endsParent: true,
		            variants: [
		              {
		                begin: /"/,
		                end: /"/,
		                contains: [ XML_ENTITIES ]
		              },
		              {
		                begin: /'/,
		                end: /'/,
		                contains: [ XML_ENTITIES ]
		              },
		              { begin: /[^\s"'=<>`]+/ }
		            ]
		          }
		        ]
		      }
		    ]
		  };
		  return {
		    name: 'HTML, XML',
		    aliases: [
		      'html',
		      'xhtml',
		      'rss',
		      'atom',
		      'xjb',
		      'xsd',
		      'xsl',
		      'plist',
		      'wsf',
		      'svg'
		    ],
		    case_insensitive: true,
		    unicodeRegex: true,
		    contains: [
		      {
		        className: 'meta',
		        begin: /<![a-z]/,
		        end: />/,
		        relevance: 10,
		        contains: [
		          XML_META_KEYWORDS,
		          QUOTE_META_STRING_MODE,
		          APOS_META_STRING_MODE,
		          XML_META_PAR_KEYWORDS,
		          {
		            begin: /\[/,
		            end: /\]/,
		            contains: [
		              {
		                className: 'meta',
		                begin: /<![a-z]/,
		                end: />/,
		                contains: [
		                  XML_META_KEYWORDS,
		                  XML_META_PAR_KEYWORDS,
		                  QUOTE_META_STRING_MODE,
		                  APOS_META_STRING_MODE
		                ]
		              }
		            ]
		          }
		        ]
		      },
		      hljs.COMMENT(
		        /<!--/,
		        /-->/,
		        { relevance: 10 }
		      ),
		      {
		        begin: /<!\[CDATA\[/,
		        end: /\]\]>/,
		        relevance: 10
		      },
		      XML_ENTITIES,
		      // xml processing instructions
		      {
		        className: 'meta',
		        end: /\?>/,
		        variants: [
		          {
		            begin: /<\?xml/,
		            relevance: 10,
		            contains: [
		              QUOTE_META_STRING_MODE
		            ]
		          },
		          {
		            begin: /<\?[a-z][a-z0-9]+/,
		          }
		        ]

		      },
		      {
		        className: 'tag',
		        /*
		        The lookahead pattern (?=...) ensures that 'begin' only matches
		        '<style' as a single word, followed by a whitespace or an
		        ending bracket.
		        */
		        begin: /<style(?=\s|>)/,
		        end: />/,
		        keywords: { name: 'style' },
		        contains: [ TAG_INTERNALS ],
		        starts: {
		          end: /<\/style>/,
		          returnEnd: true,
		          subLanguage: [
		            'css',
		            'xml'
		          ]
		        }
		      },
		      {
		        className: 'tag',
		        // See the comment in the <style tag about the lookahead pattern
		        begin: /<script(?=\s|>)/,
		        end: />/,
		        keywords: { name: 'script' },
		        contains: [ TAG_INTERNALS ],
		        starts: {
		          end: /<\/script>/,
		          returnEnd: true,
		          subLanguage: [
		            'javascript',
		            'handlebars',
		            'xml'
		          ]
		        }
		      },
		      // we need this for now for jSX
		      {
		        className: 'tag',
		        begin: /<>|<\/>/
		      },
		      // open tag
		      {
		        className: 'tag',
		        begin: regex.concat(
		          /</,
		          regex.lookahead(regex.concat(
		            TAG_NAME_RE,
		            // <tag/>
		            // <tag>
		            // <tag ...
		            regex.either(/\/>/, />/, /\s/)
		          ))
		        ),
		        end: /\/?>/,
		        contains: [
		          {
		            className: 'name',
		            begin: TAG_NAME_RE,
		            relevance: 0,
		            starts: TAG_INTERNALS
		          }
		        ]
		      },
		      // close tag
		      {
		        className: 'tag',
		        begin: regex.concat(
		          /<\//,
		          regex.lookahead(regex.concat(
		            TAG_NAME_RE, />/
		          ))
		        ),
		        contains: [
		          {
		            className: 'name',
		            begin: TAG_NAME_RE,
		            relevance: 0
		          },
		          {
		            begin: />/,
		            relevance: 0,
		            endsParent: true
		          }
		        ]
		      }
		    ]
		  };
		}

		xml_1 = xml;
		return xml_1;
	}

	/*
	Language: Bash
	Author: vah <vahtenberg@gmail.com>
	Contributrors: Benjamin Pannell <contact@sierrasoftworks.com>
	Website: https://www.gnu.org/software/bash/
	Category: common
	*/

	var bash_1;
	var hasRequiredBash;

	function requireBash () {
		if (hasRequiredBash) return bash_1;
		hasRequiredBash = 1;
		/** @type LanguageFn */
		function bash(hljs) {
		  const regex = hljs.regex;
		  const VAR = {};
		  const BRACED_VAR = {
		    begin: /\$\{/,
		    end: /\}/,
		    contains: [
		      "self",
		      {
		        begin: /:-/,
		        contains: [ VAR ]
		      } // default values
		    ]
		  };
		  Object.assign(VAR, {
		    className: 'variable',
		    variants: [
		      { begin: regex.concat(/\$[\w\d#@][\w\d_]*/,
		        // negative look-ahead tries to avoid matching patterns that are not
		        // Perl at all like $ident$, @ident@, etc.
		        `(?![\\w\\d])(?![$])`) },
		      BRACED_VAR
		    ]
		  });

		  const SUBST = {
		    className: 'subst',
		    begin: /\$\(/,
		    end: /\)/,
		    contains: [ hljs.BACKSLASH_ESCAPE ]
		  };
		  const HERE_DOC = {
		    begin: /<<-?\s*(?=\w+)/,
		    starts: { contains: [
		      hljs.END_SAME_AS_BEGIN({
		        begin: /(\w+)/,
		        end: /(\w+)/,
		        className: 'string'
		      })
		    ] }
		  };
		  const QUOTE_STRING = {
		    className: 'string',
		    begin: /"/,
		    end: /"/,
		    contains: [
		      hljs.BACKSLASH_ESCAPE,
		      VAR,
		      SUBST
		    ]
		  };
		  SUBST.contains.push(QUOTE_STRING);
		  const ESCAPED_QUOTE = {
		    className: '',
		    begin: /\\"/

		  };
		  const APOS_STRING = {
		    className: 'string',
		    begin: /'/,
		    end: /'/
		  };
		  const ARITHMETIC = {
		    begin: /\$\(\(/,
		    end: /\)\)/,
		    contains: [
		      {
		        begin: /\d+#[0-9a-f]+/,
		        className: "number"
		      },
		      hljs.NUMBER_MODE,
		      VAR
		    ]
		  };
		  const SH_LIKE_SHELLS = [
		    "fish",
		    "bash",
		    "zsh",
		    "sh",
		    "csh",
		    "ksh",
		    "tcsh",
		    "dash",
		    "scsh",
		  ];
		  const KNOWN_SHEBANG = hljs.SHEBANG({
		    binary: `(${SH_LIKE_SHELLS.join("|")})`,
		    relevance: 10
		  });
		  const FUNCTION = {
		    className: 'function',
		    begin: /\w[\w\d_]*\s*\(\s*\)\s*\{/,
		    returnBegin: true,
		    contains: [ hljs.inherit(hljs.TITLE_MODE, { begin: /\w[\w\d_]*/ }) ],
		    relevance: 0
		  };

		  const KEYWORDS = [
		    "if",
		    "then",
		    "else",
		    "elif",
		    "fi",
		    "for",
		    "while",
		    "in",
		    "do",
		    "done",
		    "case",
		    "esac",
		    "function"
		  ];

		  const LITERALS = [
		    "true",
		    "false"
		  ];

		  // to consume paths to prevent keyword matches inside them
		  const PATH_MODE = { match: /(\/[a-z._-]+)+/ };

		  // http://www.gnu.org/software/bash/manual/html_node/Shell-Builtin-Commands.html
		  const SHELL_BUILT_INS = [
		    "break",
		    "cd",
		    "continue",
		    "eval",
		    "exec",
		    "exit",
		    "export",
		    "getopts",
		    "hash",
		    "pwd",
		    "readonly",
		    "return",
		    "shift",
		    "test",
		    "times",
		    "trap",
		    "umask",
		    "unset"
		  ];

		  const BASH_BUILT_INS = [
		    "alias",
		    "bind",
		    "builtin",
		    "caller",
		    "command",
		    "declare",
		    "echo",
		    "enable",
		    "help",
		    "let",
		    "local",
		    "logout",
		    "mapfile",
		    "printf",
		    "read",
		    "readarray",
		    "source",
		    "type",
		    "typeset",
		    "ulimit",
		    "unalias"
		  ];

		  const ZSH_BUILT_INS = [
		    "autoload",
		    "bg",
		    "bindkey",
		    "bye",
		    "cap",
		    "chdir",
		    "clone",
		    "comparguments",
		    "compcall",
		    "compctl",
		    "compdescribe",
		    "compfiles",
		    "compgroups",
		    "compquote",
		    "comptags",
		    "comptry",
		    "compvalues",
		    "dirs",
		    "disable",
		    "disown",
		    "echotc",
		    "echoti",
		    "emulate",
		    "fc",
		    "fg",
		    "float",
		    "functions",
		    "getcap",
		    "getln",
		    "history",
		    "integer",
		    "jobs",
		    "kill",
		    "limit",
		    "log",
		    "noglob",
		    "popd",
		    "print",
		    "pushd",
		    "pushln",
		    "rehash",
		    "sched",
		    "setcap",
		    "setopt",
		    "stat",
		    "suspend",
		    "ttyctl",
		    "unfunction",
		    "unhash",
		    "unlimit",
		    "unsetopt",
		    "vared",
		    "wait",
		    "whence",
		    "where",
		    "which",
		    "zcompile",
		    "zformat",
		    "zftp",
		    "zle",
		    "zmodload",
		    "zparseopts",
		    "zprof",
		    "zpty",
		    "zregexparse",
		    "zsocket",
		    "zstyle",
		    "ztcp"
		  ];

		  const GNU_CORE_UTILS = [
		    "chcon",
		    "chgrp",
		    "chown",
		    "chmod",
		    "cp",
		    "dd",
		    "df",
		    "dir",
		    "dircolors",
		    "ln",
		    "ls",
		    "mkdir",
		    "mkfifo",
		    "mknod",
		    "mktemp",
		    "mv",
		    "realpath",
		    "rm",
		    "rmdir",
		    "shred",
		    "sync",
		    "touch",
		    "truncate",
		    "vdir",
		    "b2sum",
		    "base32",
		    "base64",
		    "cat",
		    "cksum",
		    "comm",
		    "csplit",
		    "cut",
		    "expand",
		    "fmt",
		    "fold",
		    "head",
		    "join",
		    "md5sum",
		    "nl",
		    "numfmt",
		    "od",
		    "paste",
		    "ptx",
		    "pr",
		    "sha1sum",
		    "sha224sum",
		    "sha256sum",
		    "sha384sum",
		    "sha512sum",
		    "shuf",
		    "sort",
		    "split",
		    "sum",
		    "tac",
		    "tail",
		    "tr",
		    "tsort",
		    "unexpand",
		    "uniq",
		    "wc",
		    "arch",
		    "basename",
		    "chroot",
		    "date",
		    "dirname",
		    "du",
		    "echo",
		    "env",
		    "expr",
		    "factor",
		    // "false", // keyword literal already
		    "groups",
		    "hostid",
		    "id",
		    "link",
		    "logname",
		    "nice",
		    "nohup",
		    "nproc",
		    "pathchk",
		    "pinky",
		    "printenv",
		    "printf",
		    "pwd",
		    "readlink",
		    "runcon",
		    "seq",
		    "sleep",
		    "stat",
		    "stdbuf",
		    "stty",
		    "tee",
		    "test",
		    "timeout",
		    // "true", // keyword literal already
		    "tty",
		    "uname",
		    "unlink",
		    "uptime",
		    "users",
		    "who",
		    "whoami",
		    "yes"
		  ];

		  return {
		    name: 'Bash',
		    aliases: [ 'sh' ],
		    keywords: {
		      $pattern: /\b[a-z][a-z0-9._-]+\b/,
		      keyword: KEYWORDS,
		      literal: LITERALS,
		      built_in: [
		        ...SHELL_BUILT_INS,
		        ...BASH_BUILT_INS,
		        // Shell modifiers
		        "set",
		        "shopt",
		        ...ZSH_BUILT_INS,
		        ...GNU_CORE_UTILS
		      ]
		    },
		    contains: [
		      KNOWN_SHEBANG, // to catch known shells and boost relevancy
		      hljs.SHEBANG(), // to catch unknown shells but still highlight the shebang
		      FUNCTION,
		      ARITHMETIC,
		      hljs.HASH_COMMENT_MODE,
		      HERE_DOC,
		      PATH_MODE,
		      QUOTE_STRING,
		      ESCAPED_QUOTE,
		      APOS_STRING,
		      VAR
		    ]
		  };
		}

		bash_1 = bash;
		return bash_1;
	}

	/*
	Language: C
	Category: common, system
	Website: https://en.wikipedia.org/wiki/C_(programming_language)
	*/

	var c_1;
	var hasRequiredC;

	function requireC () {
		if (hasRequiredC) return c_1;
		hasRequiredC = 1;
		/** @type LanguageFn */
		function c(hljs) {
		  const regex = hljs.regex;
		  // added for historic reasons because `hljs.C_LINE_COMMENT_MODE` does
		  // not include such support nor can we be sure all the grammars depending
		  // on it would desire this behavior
		  const C_LINE_COMMENT_MODE = hljs.COMMENT('//', '$', { contains: [ { begin: /\\\n/ } ] });
		  const DECLTYPE_AUTO_RE = 'decltype\\(auto\\)';
		  const NAMESPACE_RE = '[a-zA-Z_]\\w*::';
		  const TEMPLATE_ARGUMENT_RE = '<[^<>]+>';
		  const FUNCTION_TYPE_RE = '('
		    + DECLTYPE_AUTO_RE + '|'
		    + regex.optional(NAMESPACE_RE)
		    + '[a-zA-Z_]\\w*' + regex.optional(TEMPLATE_ARGUMENT_RE)
		  + ')';


		  const TYPES = {
		    className: 'type',
		    variants: [
		      { begin: '\\b[a-z\\d_]*_t\\b' },
		      { match: /\batomic_[a-z]{3,6}\b/ }
		    ]

		  };

		  // https://en.cppreference.com/w/cpp/language/escape
		  // \\ \x \xFF \u2837 \u00323747 \374
		  const CHARACTER_ESCAPES = '\\\\(x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4,8}|[0-7]{3}|\\S)';
		  const STRINGS = {
		    className: 'string',
		    variants: [
		      {
		        begin: '(u8?|U|L)?"',
		        end: '"',
		        illegal: '\\n',
		        contains: [ hljs.BACKSLASH_ESCAPE ]
		      },
		      {
		        begin: '(u8?|U|L)?\'(' + CHARACTER_ESCAPES + "|.)",
		        end: '\'',
		        illegal: '.'
		      },
		      hljs.END_SAME_AS_BEGIN({
		        begin: /(?:u8?|U|L)?R"([^()\\ ]{0,16})\(/,
		        end: /\)([^()\\ ]{0,16})"/
		      })
		    ]
		  };

		  const NUMBERS = {
		    className: 'number',
		    variants: [
		      { begin: '\\b(0b[01\']+)' },
		      { begin: '(-?)\\b([\\d\']+(\\.[\\d\']*)?|\\.[\\d\']+)((ll|LL|l|L)(u|U)?|(u|U)(ll|LL|l|L)?|f|F|b|B)' },
		      { begin: '(-?)(\\b0[xX][a-fA-F0-9\']+|(\\b[\\d\']+(\\.[\\d\']*)?|\\.[\\d\']+)([eE][-+]?[\\d\']+)?)' }
		    ],
		    relevance: 0
		  };

		  const PREPROCESSOR = {
		    className: 'meta',
		    begin: /#\s*[a-z]+\b/,
		    end: /$/,
		    keywords: { keyword:
		        'if else elif endif define undef warning error line '
		        + 'pragma _Pragma ifdef ifndef include' },
		    contains: [
		      {
		        begin: /\\\n/,
		        relevance: 0
		      },
		      hljs.inherit(STRINGS, { className: 'string' }),
		      {
		        className: 'string',
		        begin: /<.*?>/
		      },
		      C_LINE_COMMENT_MODE,
		      hljs.C_BLOCK_COMMENT_MODE
		    ]
		  };

		  const TITLE_MODE = {
		    className: 'title',
		    begin: regex.optional(NAMESPACE_RE) + hljs.IDENT_RE,
		    relevance: 0
		  };

		  const FUNCTION_TITLE = regex.optional(NAMESPACE_RE) + hljs.IDENT_RE + '\\s*\\(';

		  const C_KEYWORDS = [
		    "asm",
		    "auto",
		    "break",
		    "case",
		    "continue",
		    "default",
		    "do",
		    "else",
		    "enum",
		    "extern",
		    "for",
		    "fortran",
		    "goto",
		    "if",
		    "inline",
		    "register",
		    "restrict",
		    "return",
		    "sizeof",
		    "struct",
		    "switch",
		    "typedef",
		    "union",
		    "volatile",
		    "while",
		    "_Alignas",
		    "_Alignof",
		    "_Atomic",
		    "_Generic",
		    "_Noreturn",
		    "_Static_assert",
		    "_Thread_local",
		    // aliases
		    "alignas",
		    "alignof",
		    "noreturn",
		    "static_assert",
		    "thread_local",
		    // not a C keyword but is, for all intents and purposes, treated exactly like one.
		    "_Pragma"
		  ];

		  const C_TYPES = [
		    "float",
		    "double",
		    "signed",
		    "unsigned",
		    "int",
		    "short",
		    "long",
		    "char",
		    "void",
		    "_Bool",
		    "_Complex",
		    "_Imaginary",
		    "_Decimal32",
		    "_Decimal64",
		    "_Decimal128",
		    // modifiers
		    "const",
		    "static",
		    // aliases
		    "complex",
		    "bool",
		    "imaginary"
		  ];

		  const KEYWORDS = {
		    keyword: C_KEYWORDS,
		    type: C_TYPES,
		    literal: 'true false NULL',
		    // TODO: apply hinting work similar to what was done in cpp.js
		    built_in: 'std string wstring cin cout cerr clog stdin stdout stderr stringstream istringstream ostringstream '
		      + 'auto_ptr deque list queue stack vector map set pair bitset multiset multimap unordered_set '
		      + 'unordered_map unordered_multiset unordered_multimap priority_queue make_pair array shared_ptr abort terminate abs acos '
		      + 'asin atan2 atan calloc ceil cosh cos exit exp fabs floor fmod fprintf fputs free frexp '
		      + 'fscanf future isalnum isalpha iscntrl isdigit isgraph islower isprint ispunct isspace isupper '
		      + 'isxdigit tolower toupper labs ldexp log10 log malloc realloc memchr memcmp memcpy memset modf pow '
		      + 'printf putchar puts scanf sinh sin snprintf sprintf sqrt sscanf strcat strchr strcmp '
		      + 'strcpy strcspn strlen strncat strncmp strncpy strpbrk strrchr strspn strstr tanh tan '
		      + 'vfprintf vprintf vsprintf endl initializer_list unique_ptr',
		  };

		  const EXPRESSION_CONTAINS = [
		    PREPROCESSOR,
		    TYPES,
		    C_LINE_COMMENT_MODE,
		    hljs.C_BLOCK_COMMENT_MODE,
		    NUMBERS,
		    STRINGS
		  ];

		  const EXPRESSION_CONTEXT = {
		    // This mode covers expression context where we can't expect a function
		    // definition and shouldn't highlight anything that looks like one:
		    // `return some()`, `else if()`, `(x*sum(1, 2))`
		    variants: [
		      {
		        begin: /=/,
		        end: /;/
		      },
		      {
		        begin: /\(/,
		        end: /\)/
		      },
		      {
		        beginKeywords: 'new throw return else',
		        end: /;/
		      }
		    ],
		    keywords: KEYWORDS,
		    contains: EXPRESSION_CONTAINS.concat([
		      {
		        begin: /\(/,
		        end: /\)/,
		        keywords: KEYWORDS,
		        contains: EXPRESSION_CONTAINS.concat([ 'self' ]),
		        relevance: 0
		      }
		    ]),
		    relevance: 0
		  };

		  const FUNCTION_DECLARATION = {
		    begin: '(' + FUNCTION_TYPE_RE + '[\\*&\\s]+)+' + FUNCTION_TITLE,
		    returnBegin: true,
		    end: /[{;=]/,
		    excludeEnd: true,
		    keywords: KEYWORDS,
		    illegal: /[^\w\s\*&:<>.]/,
		    contains: [
		      { // to prevent it from being confused as the function title
		        begin: DECLTYPE_AUTO_RE,
		        keywords: KEYWORDS,
		        relevance: 0
		      },
		      {
		        begin: FUNCTION_TITLE,
		        returnBegin: true,
		        contains: [ hljs.inherit(TITLE_MODE, { className: "title.function" }) ],
		        relevance: 0
		      },
		      // allow for multiple declarations, e.g.:
		      // extern void f(int), g(char);
		      {
		        relevance: 0,
		        match: /,/
		      },
		      {
		        className: 'params',
		        begin: /\(/,
		        end: /\)/,
		        keywords: KEYWORDS,
		        relevance: 0,
		        contains: [
		          C_LINE_COMMENT_MODE,
		          hljs.C_BLOCK_COMMENT_MODE,
		          STRINGS,
		          NUMBERS,
		          TYPES,
		          // Count matching parentheses.
		          {
		            begin: /\(/,
		            end: /\)/,
		            keywords: KEYWORDS,
		            relevance: 0,
		            contains: [
		              'self',
		              C_LINE_COMMENT_MODE,
		              hljs.C_BLOCK_COMMENT_MODE,
		              STRINGS,
		              NUMBERS,
		              TYPES
		            ]
		          }
		        ]
		      },
		      TYPES,
		      C_LINE_COMMENT_MODE,
		      hljs.C_BLOCK_COMMENT_MODE,
		      PREPROCESSOR
		    ]
		  };

		  return {
		    name: "C",
		    aliases: [ 'h' ],
		    keywords: KEYWORDS,
		    // Until differentiations are added between `c` and `cpp`, `c` will
		    // not be auto-detected to avoid auto-detect conflicts between C and C++
		    disableAutodetect: true,
		    illegal: '</',
		    contains: [].concat(
		      EXPRESSION_CONTEXT,
		      FUNCTION_DECLARATION,
		      EXPRESSION_CONTAINS,
		      [
		        PREPROCESSOR,
		        {
		          begin: hljs.IDENT_RE + '::',
		          keywords: KEYWORDS
		        },
		        {
		          className: 'class',
		          beginKeywords: 'enum class struct union',
		          end: /[{;:<>=]/,
		          contains: [
		            { beginKeywords: "final class struct" },
		            hljs.TITLE_MODE
		          ]
		        }
		      ]),
		    exports: {
		      preprocessor: PREPROCESSOR,
		      strings: STRINGS,
		      keywords: KEYWORDS
		    }
		  };
		}

		c_1 = c;
		return c_1;
	}

	/*
	Language: C++
	Category: common, system
	Website: https://isocpp.org
	*/

	var cpp_1;
	var hasRequiredCpp;

	function requireCpp () {
		if (hasRequiredCpp) return cpp_1;
		hasRequiredCpp = 1;
		/** @type LanguageFn */
		function cpp(hljs) {
		  const regex = hljs.regex;
		  // added for historic reasons because `hljs.C_LINE_COMMENT_MODE` does
		  // not include such support nor can we be sure all the grammars depending
		  // on it would desire this behavior
		  const C_LINE_COMMENT_MODE = hljs.COMMENT('//', '$', { contains: [ { begin: /\\\n/ } ] });
		  const DECLTYPE_AUTO_RE = 'decltype\\(auto\\)';
		  const NAMESPACE_RE = '[a-zA-Z_]\\w*::';
		  const TEMPLATE_ARGUMENT_RE = '<[^<>]+>';
		  const FUNCTION_TYPE_RE = '(?!struct)('
		    + DECLTYPE_AUTO_RE + '|'
		    + regex.optional(NAMESPACE_RE)
		    + '[a-zA-Z_]\\w*' + regex.optional(TEMPLATE_ARGUMENT_RE)
		  + ')';

		  const CPP_PRIMITIVE_TYPES = {
		    className: 'type',
		    begin: '\\b[a-z\\d_]*_t\\b'
		  };

		  // https://en.cppreference.com/w/cpp/language/escape
		  // \\ \x \xFF \u2837 \u00323747 \374
		  const CHARACTER_ESCAPES = '\\\\(x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4,8}|[0-7]{3}|\\S)';
		  const STRINGS = {
		    className: 'string',
		    variants: [
		      {
		        begin: '(u8?|U|L)?"',
		        end: '"',
		        illegal: '\\n',
		        contains: [ hljs.BACKSLASH_ESCAPE ]
		      },
		      {
		        begin: '(u8?|U|L)?\'(' + CHARACTER_ESCAPES + '|.)',
		        end: '\'',
		        illegal: '.'
		      },
		      hljs.END_SAME_AS_BEGIN({
		        begin: /(?:u8?|U|L)?R"([^()\\ ]{0,16})\(/,
		        end: /\)([^()\\ ]{0,16})"/
		      })
		    ]
		  };

		  const NUMBERS = {
		    className: 'number',
		    variants: [
		      { begin: '\\b(0b[01\']+)' },
		      { begin: '(-?)\\b([\\d\']+(\\.[\\d\']*)?|\\.[\\d\']+)((ll|LL|l|L)(u|U)?|(u|U)(ll|LL|l|L)?|f|F|b|B)' },
		      { begin: '(-?)(\\b0[xX][a-fA-F0-9\']+|(\\b[\\d\']+(\\.[\\d\']*)?|\\.[\\d\']+)([eE][-+]?[\\d\']+)?)' }
		    ],
		    relevance: 0
		  };

		  const PREPROCESSOR = {
		    className: 'meta',
		    begin: /#\s*[a-z]+\b/,
		    end: /$/,
		    keywords: { keyword:
		        'if else elif endif define undef warning error line '
		        + 'pragma _Pragma ifdef ifndef include' },
		    contains: [
		      {
		        begin: /\\\n/,
		        relevance: 0
		      },
		      hljs.inherit(STRINGS, { className: 'string' }),
		      {
		        className: 'string',
		        begin: /<.*?>/
		      },
		      C_LINE_COMMENT_MODE,
		      hljs.C_BLOCK_COMMENT_MODE
		    ]
		  };

		  const TITLE_MODE = {
		    className: 'title',
		    begin: regex.optional(NAMESPACE_RE) + hljs.IDENT_RE,
		    relevance: 0
		  };

		  const FUNCTION_TITLE = regex.optional(NAMESPACE_RE) + hljs.IDENT_RE + '\\s*\\(';

		  // https://en.cppreference.com/w/cpp/keyword
		  const RESERVED_KEYWORDS = [
		    'alignas',
		    'alignof',
		    'and',
		    'and_eq',
		    'asm',
		    'atomic_cancel',
		    'atomic_commit',
		    'atomic_noexcept',
		    'auto',
		    'bitand',
		    'bitor',
		    'break',
		    'case',
		    'catch',
		    'class',
		    'co_await',
		    'co_return',
		    'co_yield',
		    'compl',
		    'concept',
		    'const_cast|10',
		    'consteval',
		    'constexpr',
		    'constinit',
		    'continue',
		    'decltype',
		    'default',
		    'delete',
		    'do',
		    'dynamic_cast|10',
		    'else',
		    'enum',
		    'explicit',
		    'export',
		    'extern',
		    'false',
		    'final',
		    'for',
		    'friend',
		    'goto',
		    'if',
		    'import',
		    'inline',
		    'module',
		    'mutable',
		    'namespace',
		    'new',
		    'noexcept',
		    'not',
		    'not_eq',
		    'nullptr',
		    'operator',
		    'or',
		    'or_eq',
		    'override',
		    'private',
		    'protected',
		    'public',
		    'reflexpr',
		    'register',
		    'reinterpret_cast|10',
		    'requires',
		    'return',
		    'sizeof',
		    'static_assert',
		    'static_cast|10',
		    'struct',
		    'switch',
		    'synchronized',
		    'template',
		    'this',
		    'thread_local',
		    'throw',
		    'transaction_safe',
		    'transaction_safe_dynamic',
		    'true',
		    'try',
		    'typedef',
		    'typeid',
		    'typename',
		    'union',
		    'using',
		    'virtual',
		    'volatile',
		    'while',
		    'xor',
		    'xor_eq'
		  ];

		  // https://en.cppreference.com/w/cpp/keyword
		  const RESERVED_TYPES = [
		    'bool',
		    'char',
		    'char16_t',
		    'char32_t',
		    'char8_t',
		    'double',
		    'float',
		    'int',
		    'long',
		    'short',
		    'void',
		    'wchar_t',
		    'unsigned',
		    'signed',
		    'const',
		    'static'
		  ];

		  const TYPE_HINTS = [
		    'any',
		    'auto_ptr',
		    'barrier',
		    'binary_semaphore',
		    'bitset',
		    'complex',
		    'condition_variable',
		    'condition_variable_any',
		    'counting_semaphore',
		    'deque',
		    'false_type',
		    'future',
		    'imaginary',
		    'initializer_list',
		    'istringstream',
		    'jthread',
		    'latch',
		    'lock_guard',
		    'multimap',
		    'multiset',
		    'mutex',
		    'optional',
		    'ostringstream',
		    'packaged_task',
		    'pair',
		    'promise',
		    'priority_queue',
		    'queue',
		    'recursive_mutex',
		    'recursive_timed_mutex',
		    'scoped_lock',
		    'set',
		    'shared_future',
		    'shared_lock',
		    'shared_mutex',
		    'shared_timed_mutex',
		    'shared_ptr',
		    'stack',
		    'string_view',
		    'stringstream',
		    'timed_mutex',
		    'thread',
		    'true_type',
		    'tuple',
		    'unique_lock',
		    'unique_ptr',
		    'unordered_map',
		    'unordered_multimap',
		    'unordered_multiset',
		    'unordered_set',
		    'variant',
		    'vector',
		    'weak_ptr',
		    'wstring',
		    'wstring_view'
		  ];

		  const FUNCTION_HINTS = [
		    'abort',
		    'abs',
		    'acos',
		    'apply',
		    'as_const',
		    'asin',
		    'atan',
		    'atan2',
		    'calloc',
		    'ceil',
		    'cerr',
		    'cin',
		    'clog',
		    'cos',
		    'cosh',
		    'cout',
		    'declval',
		    'endl',
		    'exchange',
		    'exit',
		    'exp',
		    'fabs',
		    'floor',
		    'fmod',
		    'forward',
		    'fprintf',
		    'fputs',
		    'free',
		    'frexp',
		    'fscanf',
		    'future',
		    'invoke',
		    'isalnum',
		    'isalpha',
		    'iscntrl',
		    'isdigit',
		    'isgraph',
		    'islower',
		    'isprint',
		    'ispunct',
		    'isspace',
		    'isupper',
		    'isxdigit',
		    'labs',
		    'launder',
		    'ldexp',
		    'log',
		    'log10',
		    'make_pair',
		    'make_shared',
		    'make_shared_for_overwrite',
		    'make_tuple',
		    'make_unique',
		    'malloc',
		    'memchr',
		    'memcmp',
		    'memcpy',
		    'memset',
		    'modf',
		    'move',
		    'pow',
		    'printf',
		    'putchar',
		    'puts',
		    'realloc',
		    'scanf',
		    'sin',
		    'sinh',
		    'snprintf',
		    'sprintf',
		    'sqrt',
		    'sscanf',
		    'std',
		    'stderr',
		    'stdin',
		    'stdout',
		    'strcat',
		    'strchr',
		    'strcmp',
		    'strcpy',
		    'strcspn',
		    'strlen',
		    'strncat',
		    'strncmp',
		    'strncpy',
		    'strpbrk',
		    'strrchr',
		    'strspn',
		    'strstr',
		    'swap',
		    'tan',
		    'tanh',
		    'terminate',
		    'to_underlying',
		    'tolower',
		    'toupper',
		    'vfprintf',
		    'visit',
		    'vprintf',
		    'vsprintf'
		  ];

		  const LITERALS = [
		    'NULL',
		    'false',
		    'nullopt',
		    'nullptr',
		    'true'
		  ];

		  // https://en.cppreference.com/w/cpp/keyword
		  const BUILT_IN = [ '_Pragma' ];

		  const CPP_KEYWORDS = {
		    type: RESERVED_TYPES,
		    keyword: RESERVED_KEYWORDS,
		    literal: LITERALS,
		    built_in: BUILT_IN,
		    _type_hints: TYPE_HINTS
		  };

		  const FUNCTION_DISPATCH = {
		    className: 'function.dispatch',
		    relevance: 0,
		    keywords: {
		      // Only for relevance, not highlighting.
		      _hint: FUNCTION_HINTS },
		    begin: regex.concat(
		      /\b/,
		      /(?!decltype)/,
		      /(?!if)/,
		      /(?!for)/,
		      /(?!switch)/,
		      /(?!while)/,
		      hljs.IDENT_RE,
		      regex.lookahead(/(<[^<>]+>|)\s*\(/))
		  };

		  const EXPRESSION_CONTAINS = [
		    FUNCTION_DISPATCH,
		    PREPROCESSOR,
		    CPP_PRIMITIVE_TYPES,
		    C_LINE_COMMENT_MODE,
		    hljs.C_BLOCK_COMMENT_MODE,
		    NUMBERS,
		    STRINGS
		  ];

		  const EXPRESSION_CONTEXT = {
		    // This mode covers expression context where we can't expect a function
		    // definition and shouldn't highlight anything that looks like one:
		    // `return some()`, `else if()`, `(x*sum(1, 2))`
		    variants: [
		      {
		        begin: /=/,
		        end: /;/
		      },
		      {
		        begin: /\(/,
		        end: /\)/
		      },
		      {
		        beginKeywords: 'new throw return else',
		        end: /;/
		      }
		    ],
		    keywords: CPP_KEYWORDS,
		    contains: EXPRESSION_CONTAINS.concat([
		      {
		        begin: /\(/,
		        end: /\)/,
		        keywords: CPP_KEYWORDS,
		        contains: EXPRESSION_CONTAINS.concat([ 'self' ]),
		        relevance: 0
		      }
		    ]),
		    relevance: 0
		  };

		  const FUNCTION_DECLARATION = {
		    className: 'function',
		    begin: '(' + FUNCTION_TYPE_RE + '[\\*&\\s]+)+' + FUNCTION_TITLE,
		    returnBegin: true,
		    end: /[{;=]/,
		    excludeEnd: true,
		    keywords: CPP_KEYWORDS,
		    illegal: /[^\w\s\*&:<>.]/,
		    contains: [
		      { // to prevent it from being confused as the function title
		        begin: DECLTYPE_AUTO_RE,
		        keywords: CPP_KEYWORDS,
		        relevance: 0
		      },
		      {
		        begin: FUNCTION_TITLE,
		        returnBegin: true,
		        contains: [ TITLE_MODE ],
		        relevance: 0
		      },
		      // needed because we do not have look-behind on the below rule
		      // to prevent it from grabbing the final : in a :: pair
		      {
		        begin: /::/,
		        relevance: 0
		      },
		      // initializers
		      {
		        begin: /:/,
		        endsWithParent: true,
		        contains: [
		          STRINGS,
		          NUMBERS
		        ]
		      },
		      // allow for multiple declarations, e.g.:
		      // extern void f(int), g(char);
		      {
		        relevance: 0,
		        match: /,/
		      },
		      {
		        className: 'params',
		        begin: /\(/,
		        end: /\)/,
		        keywords: CPP_KEYWORDS,
		        relevance: 0,
		        contains: [
		          C_LINE_COMMENT_MODE,
		          hljs.C_BLOCK_COMMENT_MODE,
		          STRINGS,
		          NUMBERS,
		          CPP_PRIMITIVE_TYPES,
		          // Count matching parentheses.
		          {
		            begin: /\(/,
		            end: /\)/,
		            keywords: CPP_KEYWORDS,
		            relevance: 0,
		            contains: [
		              'self',
		              C_LINE_COMMENT_MODE,
		              hljs.C_BLOCK_COMMENT_MODE,
		              STRINGS,
		              NUMBERS,
		              CPP_PRIMITIVE_TYPES
		            ]
		          }
		        ]
		      },
		      CPP_PRIMITIVE_TYPES,
		      C_LINE_COMMENT_MODE,
		      hljs.C_BLOCK_COMMENT_MODE,
		      PREPROCESSOR
		    ]
		  };

		  return {
		    name: 'C++',
		    aliases: [
		      'cc',
		      'c++',
		      'h++',
		      'hpp',
		      'hh',
		      'hxx',
		      'cxx'
		    ],
		    keywords: CPP_KEYWORDS,
		    illegal: '</',
		    classNameAliases: { 'function.dispatch': 'built_in' },
		    contains: [].concat(
		      EXPRESSION_CONTEXT,
		      FUNCTION_DECLARATION,
		      FUNCTION_DISPATCH,
		      EXPRESSION_CONTAINS,
		      [
		        PREPROCESSOR,
		        { // containers: ie, `vector <int> rooms (9);`
		          begin: '\\b(deque|list|queue|priority_queue|pair|stack|vector|map|set|bitset|multiset|multimap|unordered_map|unordered_set|unordered_multiset|unordered_multimap|array|tuple|optional|variant|function)\\s*<(?!<)',
		          end: '>',
		          keywords: CPP_KEYWORDS,
		          contains: [
		            'self',
		            CPP_PRIMITIVE_TYPES
		          ]
		        },
		        {
		          begin: hljs.IDENT_RE + '::',
		          keywords: CPP_KEYWORDS
		        },
		        {
		          match: [
		            // extra complexity to deal with `enum class` and `enum struct`
		            /\b(?:enum(?:\s+(?:class|struct))?|class|struct|union)/,
		            /\s+/,
		            /\w+/
		          ],
		          className: {
		            1: 'keyword',
		            3: 'title.class'
		          }
		        }
		      ])
		  };
		}

		cpp_1 = cpp;
		return cpp_1;
	}

	/*
	Language: C#
	Author: Jason Diamond <jason@diamond.name>
	Contributor: Nicolas LLOBERA <nllobera@gmail.com>, Pieter Vantorre <pietervantorre@gmail.com>, David Pine <david.pine@microsoft.com>
	Website: https://docs.microsoft.com/dotnet/csharp/
	Category: common
	*/

	var csharp_1;
	var hasRequiredCsharp;

	function requireCsharp () {
		if (hasRequiredCsharp) return csharp_1;
		hasRequiredCsharp = 1;
		/** @type LanguageFn */
		function csharp(hljs) {
		  const BUILT_IN_KEYWORDS = [
		    'bool',
		    'byte',
		    'char',
		    'decimal',
		    'delegate',
		    'double',
		    'dynamic',
		    'enum',
		    'float',
		    'int',
		    'long',
		    'nint',
		    'nuint',
		    'object',
		    'sbyte',
		    'short',
		    'string',
		    'ulong',
		    'uint',
		    'ushort'
		  ];
		  const FUNCTION_MODIFIERS = [
		    'public',
		    'private',
		    'protected',
		    'static',
		    'internal',
		    'protected',
		    'abstract',
		    'async',
		    'extern',
		    'override',
		    'unsafe',
		    'virtual',
		    'new',
		    'sealed',
		    'partial'
		  ];
		  const LITERAL_KEYWORDS = [
		    'default',
		    'false',
		    'null',
		    'true'
		  ];
		  const NORMAL_KEYWORDS = [
		    'abstract',
		    'as',
		    'base',
		    'break',
		    'case',
		    'catch',
		    'class',
		    'const',
		    'continue',
		    'do',
		    'else',
		    'event',
		    'explicit',
		    'extern',
		    'finally',
		    'fixed',
		    'for',
		    'foreach',
		    'goto',
		    'if',
		    'implicit',
		    'in',
		    'interface',
		    'internal',
		    'is',
		    'lock',
		    'namespace',
		    'new',
		    'operator',
		    'out',
		    'override',
		    'params',
		    'private',
		    'protected',
		    'public',
		    'readonly',
		    'record',
		    'ref',
		    'return',
		    'scoped',
		    'sealed',
		    'sizeof',
		    'stackalloc',
		    'static',
		    'struct',
		    'switch',
		    'this',
		    'throw',
		    'try',
		    'typeof',
		    'unchecked',
		    'unsafe',
		    'using',
		    'virtual',
		    'void',
		    'volatile',
		    'while'
		  ];
		  const CONTEXTUAL_KEYWORDS = [
		    'add',
		    'alias',
		    'and',
		    'ascending',
		    'async',
		    'await',
		    'by',
		    'descending',
		    'equals',
		    'from',
		    'get',
		    'global',
		    'group',
		    'init',
		    'into',
		    'join',
		    'let',
		    'nameof',
		    'not',
		    'notnull',
		    'on',
		    'or',
		    'orderby',
		    'partial',
		    'remove',
		    'select',
		    'set',
		    'unmanaged',
		    'value|0',
		    'var',
		    'when',
		    'where',
		    'with',
		    'yield'
		  ];

		  const KEYWORDS = {
		    keyword: NORMAL_KEYWORDS.concat(CONTEXTUAL_KEYWORDS),
		    built_in: BUILT_IN_KEYWORDS,
		    literal: LITERAL_KEYWORDS
		  };
		  const TITLE_MODE = hljs.inherit(hljs.TITLE_MODE, { begin: '[a-zA-Z](\\.?\\w)*' });
		  const NUMBERS = {
		    className: 'number',
		    variants: [
		      { begin: '\\b(0b[01\']+)' },
		      { begin: '(-?)\\b([\\d\']+(\\.[\\d\']*)?|\\.[\\d\']+)(u|U|l|L|ul|UL|f|F|b|B)' },
		      { begin: '(-?)(\\b0[xX][a-fA-F0-9\']+|(\\b[\\d\']+(\\.[\\d\']*)?|\\.[\\d\']+)([eE][-+]?[\\d\']+)?)' }
		    ],
		    relevance: 0
		  };
		  const VERBATIM_STRING = {
		    className: 'string',
		    begin: '@"',
		    end: '"',
		    contains: [ { begin: '""' } ]
		  };
		  const VERBATIM_STRING_NO_LF = hljs.inherit(VERBATIM_STRING, { illegal: /\n/ });
		  const SUBST = {
		    className: 'subst',
		    begin: /\{/,
		    end: /\}/,
		    keywords: KEYWORDS
		  };
		  const SUBST_NO_LF = hljs.inherit(SUBST, { illegal: /\n/ });
		  const INTERPOLATED_STRING = {
		    className: 'string',
		    begin: /\$"/,
		    end: '"',
		    illegal: /\n/,
		    contains: [
		      { begin: /\{\{/ },
		      { begin: /\}\}/ },
		      hljs.BACKSLASH_ESCAPE,
		      SUBST_NO_LF
		    ]
		  };
		  const INTERPOLATED_VERBATIM_STRING = {
		    className: 'string',
		    begin: /\$@"/,
		    end: '"',
		    contains: [
		      { begin: /\{\{/ },
		      { begin: /\}\}/ },
		      { begin: '""' },
		      SUBST
		    ]
		  };
		  const INTERPOLATED_VERBATIM_STRING_NO_LF = hljs.inherit(INTERPOLATED_VERBATIM_STRING, {
		    illegal: /\n/,
		    contains: [
		      { begin: /\{\{/ },
		      { begin: /\}\}/ },
		      { begin: '""' },
		      SUBST_NO_LF
		    ]
		  });
		  SUBST.contains = [
		    INTERPOLATED_VERBATIM_STRING,
		    INTERPOLATED_STRING,
		    VERBATIM_STRING,
		    hljs.APOS_STRING_MODE,
		    hljs.QUOTE_STRING_MODE,
		    NUMBERS,
		    hljs.C_BLOCK_COMMENT_MODE
		  ];
		  SUBST_NO_LF.contains = [
		    INTERPOLATED_VERBATIM_STRING_NO_LF,
		    INTERPOLATED_STRING,
		    VERBATIM_STRING_NO_LF,
		    hljs.APOS_STRING_MODE,
		    hljs.QUOTE_STRING_MODE,
		    NUMBERS,
		    hljs.inherit(hljs.C_BLOCK_COMMENT_MODE, { illegal: /\n/ })
		  ];
		  const STRING = { variants: [
		    INTERPOLATED_VERBATIM_STRING,
		    INTERPOLATED_STRING,
		    VERBATIM_STRING,
		    hljs.APOS_STRING_MODE,
		    hljs.QUOTE_STRING_MODE
		  ] };

		  const GENERIC_MODIFIER = {
		    begin: "<",
		    end: ">",
		    contains: [
		      { beginKeywords: "in out" },
		      TITLE_MODE
		    ]
		  };
		  const TYPE_IDENT_RE = hljs.IDENT_RE + '(<' + hljs.IDENT_RE + '(\\s*,\\s*' + hljs.IDENT_RE + ')*>)?(\\[\\])?';
		  const AT_IDENTIFIER = {
		    // prevents expressions like `@class` from incorrect flagging
		    // `class` as a keyword
		    begin: "@" + hljs.IDENT_RE,
		    relevance: 0
		  };

		  return {
		    name: 'C#',
		    aliases: [
		      'cs',
		      'c#'
		    ],
		    keywords: KEYWORDS,
		    illegal: /::/,
		    contains: [
		      hljs.COMMENT(
		        '///',
		        '$',
		        {
		          returnBegin: true,
		          contains: [
		            {
		              className: 'doctag',
		              variants: [
		                {
		                  begin: '///',
		                  relevance: 0
		                },
		                { begin: '<!--|-->' },
		                {
		                  begin: '</?',
		                  end: '>'
		                }
		              ]
		            }
		          ]
		        }
		      ),
		      hljs.C_LINE_COMMENT_MODE,
		      hljs.C_BLOCK_COMMENT_MODE,
		      {
		        className: 'meta',
		        begin: '#',
		        end: '$',
		        keywords: { keyword: 'if else elif endif define undef warning error line region endregion pragma checksum' }
		      },
		      STRING,
		      NUMBERS,
		      {
		        beginKeywords: 'class interface',
		        relevance: 0,
		        end: /[{;=]/,
		        illegal: /[^\s:,]/,
		        contains: [
		          { beginKeywords: "where class" },
		          TITLE_MODE,
		          GENERIC_MODIFIER,
		          hljs.C_LINE_COMMENT_MODE,
		          hljs.C_BLOCK_COMMENT_MODE
		        ]
		      },
		      {
		        beginKeywords: 'namespace',
		        relevance: 0,
		        end: /[{;=]/,
		        illegal: /[^\s:]/,
		        contains: [
		          TITLE_MODE,
		          hljs.C_LINE_COMMENT_MODE,
		          hljs.C_BLOCK_COMMENT_MODE
		        ]
		      },
		      {
		        beginKeywords: 'record',
		        relevance: 0,
		        end: /[{;=]/,
		        illegal: /[^\s:]/,
		        contains: [
		          TITLE_MODE,
		          GENERIC_MODIFIER,
		          hljs.C_LINE_COMMENT_MODE,
		          hljs.C_BLOCK_COMMENT_MODE
		        ]
		      },
		      {
		        // [Attributes("")]
		        className: 'meta',
		        begin: '^\\s*\\[(?=[\\w])',
		        excludeBegin: true,
		        end: '\\]',
		        excludeEnd: true,
		        contains: [
		          {
		            className: 'string',
		            begin: /"/,
		            end: /"/
		          }
		        ]
		      },
		      {
		        // Expression keywords prevent 'keyword Name(...)' from being
		        // recognized as a function definition
		        beginKeywords: 'new return throw await else',
		        relevance: 0
		      },
		      {
		        className: 'function',
		        begin: '(' + TYPE_IDENT_RE + '\\s+)+' + hljs.IDENT_RE + '\\s*(<[^=]+>\\s*)?\\(',
		        returnBegin: true,
		        end: /\s*[{;=]/,
		        excludeEnd: true,
		        keywords: KEYWORDS,
		        contains: [
		          // prevents these from being highlighted `title`
		          {
		            beginKeywords: FUNCTION_MODIFIERS.join(" "),
		            relevance: 0
		          },
		          {
		            begin: hljs.IDENT_RE + '\\s*(<[^=]+>\\s*)?\\(',
		            returnBegin: true,
		            contains: [
		              hljs.TITLE_MODE,
		              GENERIC_MODIFIER
		            ],
		            relevance: 0
		          },
		          { match: /\(\)/ },
		          {
		            className: 'params',
		            begin: /\(/,
		            end: /\)/,
		            excludeBegin: true,
		            excludeEnd: true,
		            keywords: KEYWORDS,
		            relevance: 0,
		            contains: [
		              STRING,
		              NUMBERS,
		              hljs.C_BLOCK_COMMENT_MODE
		            ]
		          },
		          hljs.C_LINE_COMMENT_MODE,
		          hljs.C_BLOCK_COMMENT_MODE
		        ]
		      },
		      AT_IDENTIFIER
		    ]
		  };
		}

		csharp_1 = csharp;
		return csharp_1;
	}

	var css_1;
	var hasRequiredCss;

	function requireCss () {
		if (hasRequiredCss) return css_1;
		hasRequiredCss = 1;
		const MODES = (hljs) => {
		  return {
		    IMPORTANT: {
		      scope: 'meta',
		      begin: '!important'
		    },
		    BLOCK_COMMENT: hljs.C_BLOCK_COMMENT_MODE,
		    HEXCOLOR: {
		      scope: 'number',
		      begin: /#(([0-9a-fA-F]{3,4})|(([0-9a-fA-F]{2}){3,4}))\b/
		    },
		    FUNCTION_DISPATCH: {
		      className: "built_in",
		      begin: /[\w-]+(?=\()/
		    },
		    ATTRIBUTE_SELECTOR_MODE: {
		      scope: 'selector-attr',
		      begin: /\[/,
		      end: /\]/,
		      illegal: '$',
		      contains: [
		        hljs.APOS_STRING_MODE,
		        hljs.QUOTE_STRING_MODE
		      ]
		    },
		    CSS_NUMBER_MODE: {
		      scope: 'number',
		      begin: hljs.NUMBER_RE + '(' +
		        '%|em|ex|ch|rem' +
		        '|vw|vh|vmin|vmax' +
		        '|cm|mm|in|pt|pc|px' +
		        '|deg|grad|rad|turn' +
		        '|s|ms' +
		        '|Hz|kHz' +
		        '|dpi|dpcm|dppx' +
		        ')?',
		      relevance: 0
		    },
		    CSS_VARIABLE: {
		      className: "attr",
		      begin: /--[A-Za-z][A-Za-z0-9_-]*/
		    }
		  };
		};

		const TAGS = [
		  'a',
		  'abbr',
		  'address',
		  'article',
		  'aside',
		  'audio',
		  'b',
		  'blockquote',
		  'body',
		  'button',
		  'canvas',
		  'caption',
		  'cite',
		  'code',
		  'dd',
		  'del',
		  'details',
		  'dfn',
		  'div',
		  'dl',
		  'dt',
		  'em',
		  'fieldset',
		  'figcaption',
		  'figure',
		  'footer',
		  'form',
		  'h1',
		  'h2',
		  'h3',
		  'h4',
		  'h5',
		  'h6',
		  'header',
		  'hgroup',
		  'html',
		  'i',
		  'iframe',
		  'img',
		  'input',
		  'ins',
		  'kbd',
		  'label',
		  'legend',
		  'li',
		  'main',
		  'mark',
		  'menu',
		  'nav',
		  'object',
		  'ol',
		  'p',
		  'q',
		  'quote',
		  'samp',
		  'section',
		  'span',
		  'strong',
		  'summary',
		  'sup',
		  'table',
		  'tbody',
		  'td',
		  'textarea',
		  'tfoot',
		  'th',
		  'thead',
		  'time',
		  'tr',
		  'ul',
		  'var',
		  'video'
		];

		const MEDIA_FEATURES = [
		  'any-hover',
		  'any-pointer',
		  'aspect-ratio',
		  'color',
		  'color-gamut',
		  'color-index',
		  'device-aspect-ratio',
		  'device-height',
		  'device-width',
		  'display-mode',
		  'forced-colors',
		  'grid',
		  'height',
		  'hover',
		  'inverted-colors',
		  'monochrome',
		  'orientation',
		  'overflow-block',
		  'overflow-inline',
		  'pointer',
		  'prefers-color-scheme',
		  'prefers-contrast',
		  'prefers-reduced-motion',
		  'prefers-reduced-transparency',
		  'resolution',
		  'scan',
		  'scripting',
		  'update',
		  'width',
		  // TODO: find a better solution?
		  'min-width',
		  'max-width',
		  'min-height',
		  'max-height'
		];

		// https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes
		const PSEUDO_CLASSES = [
		  'active',
		  'any-link',
		  'blank',
		  'checked',
		  'current',
		  'default',
		  'defined',
		  'dir', // dir()
		  'disabled',
		  'drop',
		  'empty',
		  'enabled',
		  'first',
		  'first-child',
		  'first-of-type',
		  'fullscreen',
		  'future',
		  'focus',
		  'focus-visible',
		  'focus-within',
		  'has', // has()
		  'host', // host or host()
		  'host-context', // host-context()
		  'hover',
		  'indeterminate',
		  'in-range',
		  'invalid',
		  'is', // is()
		  'lang', // lang()
		  'last-child',
		  'last-of-type',
		  'left',
		  'link',
		  'local-link',
		  'not', // not()
		  'nth-child', // nth-child()
		  'nth-col', // nth-col()
		  'nth-last-child', // nth-last-child()
		  'nth-last-col', // nth-last-col()
		  'nth-last-of-type', //nth-last-of-type()
		  'nth-of-type', //nth-of-type()
		  'only-child',
		  'only-of-type',
		  'optional',
		  'out-of-range',
		  'past',
		  'placeholder-shown',
		  'read-only',
		  'read-write',
		  'required',
		  'right',
		  'root',
		  'scope',
		  'target',
		  'target-within',
		  'user-invalid',
		  'valid',
		  'visited',
		  'where' // where()
		];

		// https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-elements
		const PSEUDO_ELEMENTS = [
		  'after',
		  'backdrop',
		  'before',
		  'cue',
		  'cue-region',
		  'first-letter',
		  'first-line',
		  'grammar-error',
		  'marker',
		  'part',
		  'placeholder',
		  'selection',
		  'slotted',
		  'spelling-error'
		];

		const ATTRIBUTES = [
		  'align-content',
		  'align-items',
		  'align-self',
		  'all',
		  'animation',
		  'animation-delay',
		  'animation-direction',
		  'animation-duration',
		  'animation-fill-mode',
		  'animation-iteration-count',
		  'animation-name',
		  'animation-play-state',
		  'animation-timing-function',
		  'backface-visibility',
		  'background',
		  'background-attachment',
		  'background-blend-mode',
		  'background-clip',
		  'background-color',
		  'background-image',
		  'background-origin',
		  'background-position',
		  'background-repeat',
		  'background-size',
		  'block-size',
		  'border',
		  'border-block',
		  'border-block-color',
		  'border-block-end',
		  'border-block-end-color',
		  'border-block-end-style',
		  'border-block-end-width',
		  'border-block-start',
		  'border-block-start-color',
		  'border-block-start-style',
		  'border-block-start-width',
		  'border-block-style',
		  'border-block-width',
		  'border-bottom',
		  'border-bottom-color',
		  'border-bottom-left-radius',
		  'border-bottom-right-radius',
		  'border-bottom-style',
		  'border-bottom-width',
		  'border-collapse',
		  'border-color',
		  'border-image',
		  'border-image-outset',
		  'border-image-repeat',
		  'border-image-slice',
		  'border-image-source',
		  'border-image-width',
		  'border-inline',
		  'border-inline-color',
		  'border-inline-end',
		  'border-inline-end-color',
		  'border-inline-end-style',
		  'border-inline-end-width',
		  'border-inline-start',
		  'border-inline-start-color',
		  'border-inline-start-style',
		  'border-inline-start-width',
		  'border-inline-style',
		  'border-inline-width',
		  'border-left',
		  'border-left-color',
		  'border-left-style',
		  'border-left-width',
		  'border-radius',
		  'border-right',
		  'border-right-color',
		  'border-right-style',
		  'border-right-width',
		  'border-spacing',
		  'border-style',
		  'border-top',
		  'border-top-color',
		  'border-top-left-radius',
		  'border-top-right-radius',
		  'border-top-style',
		  'border-top-width',
		  'border-width',
		  'bottom',
		  'box-decoration-break',
		  'box-shadow',
		  'box-sizing',
		  'break-after',
		  'break-before',
		  'break-inside',
		  'caption-side',
		  'caret-color',
		  'clear',
		  'clip',
		  'clip-path',
		  'clip-rule',
		  'color',
		  'column-count',
		  'column-fill',
		  'column-gap',
		  'column-rule',
		  'column-rule-color',
		  'column-rule-style',
		  'column-rule-width',
		  'column-span',
		  'column-width',
		  'columns',
		  'contain',
		  'content',
		  'content-visibility',
		  'counter-increment',
		  'counter-reset',
		  'cue',
		  'cue-after',
		  'cue-before',
		  'cursor',
		  'direction',
		  'display',
		  'empty-cells',
		  'filter',
		  'flex',
		  'flex-basis',
		  'flex-direction',
		  'flex-flow',
		  'flex-grow',
		  'flex-shrink',
		  'flex-wrap',
		  'float',
		  'flow',
		  'font',
		  'font-display',
		  'font-family',
		  'font-feature-settings',
		  'font-kerning',
		  'font-language-override',
		  'font-size',
		  'font-size-adjust',
		  'font-smoothing',
		  'font-stretch',
		  'font-style',
		  'font-synthesis',
		  'font-variant',
		  'font-variant-caps',
		  'font-variant-east-asian',
		  'font-variant-ligatures',
		  'font-variant-numeric',
		  'font-variant-position',
		  'font-variation-settings',
		  'font-weight',
		  'gap',
		  'glyph-orientation-vertical',
		  'grid',
		  'grid-area',
		  'grid-auto-columns',
		  'grid-auto-flow',
		  'grid-auto-rows',
		  'grid-column',
		  'grid-column-end',
		  'grid-column-start',
		  'grid-gap',
		  'grid-row',
		  'grid-row-end',
		  'grid-row-start',
		  'grid-template',
		  'grid-template-areas',
		  'grid-template-columns',
		  'grid-template-rows',
		  'hanging-punctuation',
		  'height',
		  'hyphens',
		  'icon',
		  'image-orientation',
		  'image-rendering',
		  'image-resolution',
		  'ime-mode',
		  'inline-size',
		  'isolation',
		  'justify-content',
		  'left',
		  'letter-spacing',
		  'line-break',
		  'line-height',
		  'list-style',
		  'list-style-image',
		  'list-style-position',
		  'list-style-type',
		  'margin',
		  'margin-block',
		  'margin-block-end',
		  'margin-block-start',
		  'margin-bottom',
		  'margin-inline',
		  'margin-inline-end',
		  'margin-inline-start',
		  'margin-left',
		  'margin-right',
		  'margin-top',
		  'marks',
		  'mask',
		  'mask-border',
		  'mask-border-mode',
		  'mask-border-outset',
		  'mask-border-repeat',
		  'mask-border-slice',
		  'mask-border-source',
		  'mask-border-width',
		  'mask-clip',
		  'mask-composite',
		  'mask-image',
		  'mask-mode',
		  'mask-origin',
		  'mask-position',
		  'mask-repeat',
		  'mask-size',
		  'mask-type',
		  'max-block-size',
		  'max-height',
		  'max-inline-size',
		  'max-width',
		  'min-block-size',
		  'min-height',
		  'min-inline-size',
		  'min-width',
		  'mix-blend-mode',
		  'nav-down',
		  'nav-index',
		  'nav-left',
		  'nav-right',
		  'nav-up',
		  'none',
		  'normal',
		  'object-fit',
		  'object-position',
		  'opacity',
		  'order',
		  'orphans',
		  'outline',
		  'outline-color',
		  'outline-offset',
		  'outline-style',
		  'outline-width',
		  'overflow',
		  'overflow-wrap',
		  'overflow-x',
		  'overflow-y',
		  'padding',
		  'padding-block',
		  'padding-block-end',
		  'padding-block-start',
		  'padding-bottom',
		  'padding-inline',
		  'padding-inline-end',
		  'padding-inline-start',
		  'padding-left',
		  'padding-right',
		  'padding-top',
		  'page-break-after',
		  'page-break-before',
		  'page-break-inside',
		  'pause',
		  'pause-after',
		  'pause-before',
		  'perspective',
		  'perspective-origin',
		  'pointer-events',
		  'position',
		  'quotes',
		  'resize',
		  'rest',
		  'rest-after',
		  'rest-before',
		  'right',
		  'row-gap',
		  'scroll-margin',
		  'scroll-margin-block',
		  'scroll-margin-block-end',
		  'scroll-margin-block-start',
		  'scroll-margin-bottom',
		  'scroll-margin-inline',
		  'scroll-margin-inline-end',
		  'scroll-margin-inline-start',
		  'scroll-margin-left',
		  'scroll-margin-right',
		  'scroll-margin-top',
		  'scroll-padding',
		  'scroll-padding-block',
		  'scroll-padding-block-end',
		  'scroll-padding-block-start',
		  'scroll-padding-bottom',
		  'scroll-padding-inline',
		  'scroll-padding-inline-end',
		  'scroll-padding-inline-start',
		  'scroll-padding-left',
		  'scroll-padding-right',
		  'scroll-padding-top',
		  'scroll-snap-align',
		  'scroll-snap-stop',
		  'scroll-snap-type',
		  'scrollbar-color',
		  'scrollbar-gutter',
		  'scrollbar-width',
		  'shape-image-threshold',
		  'shape-margin',
		  'shape-outside',
		  'speak',
		  'speak-as',
		  'src', // @font-face
		  'tab-size',
		  'table-layout',
		  'text-align',
		  'text-align-all',
		  'text-align-last',
		  'text-combine-upright',
		  'text-decoration',
		  'text-decoration-color',
		  'text-decoration-line',
		  'text-decoration-style',
		  'text-emphasis',
		  'text-emphasis-color',
		  'text-emphasis-position',
		  'text-emphasis-style',
		  'text-indent',
		  'text-justify',
		  'text-orientation',
		  'text-overflow',
		  'text-rendering',
		  'text-shadow',
		  'text-transform',
		  'text-underline-position',
		  'top',
		  'transform',
		  'transform-box',
		  'transform-origin',
		  'transform-style',
		  'transition',
		  'transition-delay',
		  'transition-duration',
		  'transition-property',
		  'transition-timing-function',
		  'unicode-bidi',
		  'vertical-align',
		  'visibility',
		  'voice-balance',
		  'voice-duration',
		  'voice-family',
		  'voice-pitch',
		  'voice-range',
		  'voice-rate',
		  'voice-stress',
		  'voice-volume',
		  'white-space',
		  'widows',
		  'width',
		  'will-change',
		  'word-break',
		  'word-spacing',
		  'word-wrap',
		  'writing-mode',
		  'z-index'
		  // reverse makes sure longer attributes `font-weight` are matched fully
		  // instead of getting false positives on say `font`
		].reverse();

		/*
		Language: CSS
		Category: common, css, web
		Website: https://developer.mozilla.org/en-US/docs/Web/CSS
		*/

		/** @type LanguageFn */
		function css(hljs) {
		  const regex = hljs.regex;
		  const modes = MODES(hljs);
		  const VENDOR_PREFIX = { begin: /-(webkit|moz|ms|o)-(?=[a-z])/ };
		  const AT_MODIFIERS = "and or not only";
		  const AT_PROPERTY_RE = /@-?\w[\w]*(-\w+)*/; // @-webkit-keyframes
		  const IDENT_RE = '[a-zA-Z-][a-zA-Z0-9_-]*';
		  const STRINGS = [
		    hljs.APOS_STRING_MODE,
		    hljs.QUOTE_STRING_MODE
		  ];

		  return {
		    name: 'CSS',
		    case_insensitive: true,
		    illegal: /[=|'\$]/,
		    keywords: { keyframePosition: "from to" },
		    classNameAliases: {
		      // for visual continuity with `tag {}` and because we
		      // don't have a great class for this?
		      keyframePosition: "selector-tag" },
		    contains: [
		      modes.BLOCK_COMMENT,
		      VENDOR_PREFIX,
		      // to recognize keyframe 40% etc which are outside the scope of our
		      // attribute value mode
		      modes.CSS_NUMBER_MODE,
		      {
		        className: 'selector-id',
		        begin: /#[A-Za-z0-9_-]+/,
		        relevance: 0
		      },
		      {
		        className: 'selector-class',
		        begin: '\\.' + IDENT_RE,
		        relevance: 0
		      },
		      modes.ATTRIBUTE_SELECTOR_MODE,
		      {
		        className: 'selector-pseudo',
		        variants: [
		          { begin: ':(' + PSEUDO_CLASSES.join('|') + ')' },
		          { begin: ':(:)?(' + PSEUDO_ELEMENTS.join('|') + ')' }
		        ]
		      },
		      // we may actually need this (12/2020)
		      // { // pseudo-selector params
		      //   begin: /\(/,
		      //   end: /\)/,
		      //   contains: [ hljs.CSS_NUMBER_MODE ]
		      // },
		      modes.CSS_VARIABLE,
		      {
		        className: 'attribute',
		        begin: '\\b(' + ATTRIBUTES.join('|') + ')\\b'
		      },
		      // attribute values
		      {
		        begin: /:/,
		        end: /[;}{]/,
		        contains: [
		          modes.BLOCK_COMMENT,
		          modes.HEXCOLOR,
		          modes.IMPORTANT,
		          modes.CSS_NUMBER_MODE,
		          ...STRINGS,
		          // needed to highlight these as strings and to avoid issues with
		          // illegal characters that might be inside urls that would tigger the
		          // languages illegal stack
		          {
		            begin: /(url|data-uri)\(/,
		            end: /\)/,
		            relevance: 0, // from keywords
		            keywords: { built_in: "url data-uri" },
		            contains: [
		              ...STRINGS,
		              {
		                className: "string",
		                // any character other than `)` as in `url()` will be the start
		                // of a string, which ends with `)` (from the parent mode)
		                begin: /[^)]/,
		                endsWithParent: true,
		                excludeEnd: true
		              }
		            ]
		          },
		          modes.FUNCTION_DISPATCH
		        ]
		      },
		      {
		        begin: regex.lookahead(/@/),
		        end: '[{;]',
		        relevance: 0,
		        illegal: /:/, // break on Less variables @var: ...
		        contains: [
		          {
		            className: 'keyword',
		            begin: AT_PROPERTY_RE
		          },
		          {
		            begin: /\s/,
		            endsWithParent: true,
		            excludeEnd: true,
		            relevance: 0,
		            keywords: {
		              $pattern: /[a-z-]+/,
		              keyword: AT_MODIFIERS,
		              attribute: MEDIA_FEATURES.join(" ")
		            },
		            contains: [
		              {
		                begin: /[a-z-]+(?=:)/,
		                className: "attribute"
		              },
		              ...STRINGS,
		              modes.CSS_NUMBER_MODE
		            ]
		          }
		        ]
		      },
		      {
		        className: 'selector-tag',
		        begin: '\\b(' + TAGS.join('|') + ')\\b'
		      }
		    ]
		  };
		}

		css_1 = css;
		return css_1;
	}

	/*
	Language: Markdown
	Requires: xml.js
	Author: John Crepezzi <john.crepezzi@gmail.com>
	Website: https://daringfireball.net/projects/markdown/
	Category: common, markup
	*/

	var markdown_1;
	var hasRequiredMarkdown;

	function requireMarkdown () {
		if (hasRequiredMarkdown) return markdown_1;
		hasRequiredMarkdown = 1;
		function markdown(hljs) {
		  const regex = hljs.regex;
		  const INLINE_HTML = {
		    begin: /<\/?[A-Za-z_]/,
		    end: '>',
		    subLanguage: 'xml',
		    relevance: 0
		  };
		  const HORIZONTAL_RULE = {
		    begin: '^[-\\*]{3,}',
		    end: '$'
		  };
		  const CODE = {
		    className: 'code',
		    variants: [
		      // TODO: fix to allow these to work with sublanguage also
		      { begin: '(`{3,})[^`](.|\\n)*?\\1`*[ ]*' },
		      { begin: '(~{3,})[^~](.|\\n)*?\\1~*[ ]*' },
		      // needed to allow markdown as a sublanguage to work
		      {
		        begin: '```',
		        end: '```+[ ]*$'
		      },
		      {
		        begin: '~~~',
		        end: '~~~+[ ]*$'
		      },
		      { begin: '`.+?`' },
		      {
		        begin: '(?=^( {4}|\\t))',
		        // use contains to gobble up multiple lines to allow the block to be whatever size
		        // but only have a single open/close tag vs one per line
		        contains: [
		          {
		            begin: '^( {4}|\\t)',
		            end: '(\\n)$'
		          }
		        ],
		        relevance: 0
		      }
		    ]
		  };
		  const LIST = {
		    className: 'bullet',
		    begin: '^[ \t]*([*+-]|(\\d+\\.))(?=\\s+)',
		    end: '\\s+',
		    excludeEnd: true
		  };
		  const LINK_REFERENCE = {
		    begin: /^\[[^\n]+\]:/,
		    returnBegin: true,
		    contains: [
		      {
		        className: 'symbol',
		        begin: /\[/,
		        end: /\]/,
		        excludeBegin: true,
		        excludeEnd: true
		      },
		      {
		        className: 'link',
		        begin: /:\s*/,
		        end: /$/,
		        excludeBegin: true
		      }
		    ]
		  };
		  const URL_SCHEME = /[A-Za-z][A-Za-z0-9+.-]*/;
		  const LINK = {
		    variants: [
		      // too much like nested array access in so many languages
		      // to have any real relevance
		      {
		        begin: /\[.+?\]\[.*?\]/,
		        relevance: 0
		      },
		      // popular internet URLs
		      {
		        begin: /\[.+?\]\(((data|javascript|mailto):|(?:http|ftp)s?:\/\/).*?\)/,
		        relevance: 2
		      },
		      {
		        begin: regex.concat(/\[.+?\]\(/, URL_SCHEME, /:\/\/.*?\)/),
		        relevance: 2
		      },
		      // relative urls
		      {
		        begin: /\[.+?\]\([./?&#].*?\)/,
		        relevance: 1
		      },
		      // whatever else, lower relevance (might not be a link at all)
		      {
		        begin: /\[.*?\]\(.*?\)/,
		        relevance: 0
		      }
		    ],
		    returnBegin: true,
		    contains: [
		      {
		        // empty strings for alt or link text
		        match: /\[(?=\])/ },
		      {
		        className: 'string',
		        relevance: 0,
		        begin: '\\[',
		        end: '\\]',
		        excludeBegin: true,
		        returnEnd: true
		      },
		      {
		        className: 'link',
		        relevance: 0,
		        begin: '\\]\\(',
		        end: '\\)',
		        excludeBegin: true,
		        excludeEnd: true
		      },
		      {
		        className: 'symbol',
		        relevance: 0,
		        begin: '\\]\\[',
		        end: '\\]',
		        excludeBegin: true,
		        excludeEnd: true
		      }
		    ]
		  };
		  const BOLD = {
		    className: 'strong',
		    contains: [], // defined later
		    variants: [
		      {
		        begin: /_{2}/,
		        end: /_{2}/
		      },
		      {
		        begin: /\*{2}/,
		        end: /\*{2}/
		      }
		    ]
		  };
		  const ITALIC = {
		    className: 'emphasis',
		    contains: [], // defined later
		    variants: [
		      {
		        begin: /\*(?!\*)/,
		        end: /\*/
		      },
		      {
		        begin: /_(?!_)/,
		        end: /_/,
		        relevance: 0
		      }
		    ]
		  };

		  // 3 level deep nesting is not allowed because it would create confusion
		  // in cases like `***testing***` because where we don't know if the last
		  // `***` is starting a new bold/italic or finishing the last one
		  const BOLD_WITHOUT_ITALIC = hljs.inherit(BOLD, { contains: [] });
		  const ITALIC_WITHOUT_BOLD = hljs.inherit(ITALIC, { contains: [] });
		  BOLD.contains.push(ITALIC_WITHOUT_BOLD);
		  ITALIC.contains.push(BOLD_WITHOUT_ITALIC);

		  let CONTAINABLE = [
		    INLINE_HTML,
		    LINK
		  ];

		  [
		    BOLD,
		    ITALIC,
		    BOLD_WITHOUT_ITALIC,
		    ITALIC_WITHOUT_BOLD
		  ].forEach(m => {
		    m.contains = m.contains.concat(CONTAINABLE);
		  });

		  CONTAINABLE = CONTAINABLE.concat(BOLD, ITALIC);

		  const HEADER = {
		    className: 'section',
		    variants: [
		      {
		        begin: '^#{1,6}',
		        end: '$',
		        contains: CONTAINABLE
		      },
		      {
		        begin: '(?=^.+?\\n[=-]{2,}$)',
		        contains: [
		          { begin: '^[=-]*$' },
		          {
		            begin: '^',
		            end: "\\n",
		            contains: CONTAINABLE
		          }
		        ]
		      }
		    ]
		  };

		  const BLOCKQUOTE = {
		    className: 'quote',
		    begin: '^>\\s+',
		    contains: CONTAINABLE,
		    end: '$'
		  };

		  return {
		    name: 'Markdown',
		    aliases: [
		      'md',
		      'mkdown',
		      'mkd'
		    ],
		    contains: [
		      HEADER,
		      INLINE_HTML,
		      LIST,
		      BOLD,
		      ITALIC,
		      BLOCKQUOTE,
		      CODE,
		      HORIZONTAL_RULE,
		      LINK,
		      LINK_REFERENCE
		    ]
		  };
		}

		markdown_1 = markdown;
		return markdown_1;
	}

	/*
	Language: Diff
	Description: Unified and context diff
	Author: Vasily Polovnyov <vast@whiteants.net>
	Website: https://www.gnu.org/software/diffutils/
	Category: common
	*/

	var diff_1;
	var hasRequiredDiff;

	function requireDiff () {
		if (hasRequiredDiff) return diff_1;
		hasRequiredDiff = 1;
		/** @type LanguageFn */
		function diff(hljs) {
		  const regex = hljs.regex;
		  return {
		    name: 'Diff',
		    aliases: [ 'patch' ],
		    contains: [
		      {
		        className: 'meta',
		        relevance: 10,
		        match: regex.either(
		          /^@@ +-\d+,\d+ +\+\d+,\d+ +@@/,
		          /^\*\*\* +\d+,\d+ +\*\*\*\*$/,
		          /^--- +\d+,\d+ +----$/
		        )
		      },
		      {
		        className: 'comment',
		        variants: [
		          {
		            begin: regex.either(
		              /Index: /,
		              /^index/,
		              /={3,}/,
		              /^-{3}/,
		              /^\*{3} /,
		              /^\+{3}/,
		              /^diff --git/
		            ),
		            end: /$/
		          },
		          { match: /^\*{15}$/ }
		        ]
		      },
		      {
		        className: 'addition',
		        begin: /^\+/,
		        end: /$/
		      },
		      {
		        className: 'deletion',
		        begin: /^-/,
		        end: /$/
		      },
		      {
		        className: 'addition',
		        begin: /^!/,
		        end: /$/
		      }
		    ]
		  };
		}

		diff_1 = diff;
		return diff_1;
	}

	/*
	Language: Ruby
	Description: Ruby is a dynamic, open source programming language with a focus on simplicity and productivity.
	Website: https://www.ruby-lang.org/
	Author: Anton Kovalyov <anton@kovalyov.net>
	Contributors: Peter Leonov <gojpeg@yandex.ru>, Vasily Polovnyov <vast@whiteants.net>, Loren Segal <lsegal@soen.ca>, Pascal Hurni <phi@ruby-reactive.org>, Cedric Sohrauer <sohrauer@googlemail.com>
	Category: common
	*/

	var ruby_1;
	var hasRequiredRuby;

	function requireRuby () {
		if (hasRequiredRuby) return ruby_1;
		hasRequiredRuby = 1;
		function ruby(hljs) {
		  const regex = hljs.regex;
		  const RUBY_METHOD_RE = '([a-zA-Z_]\\w*[!?=]?|[-+~]@|<<|>>|=~|===?|<=>|[<>]=?|\\*\\*|[-/+%^&*~`|]|\\[\\]=?)';
		  // TODO: move concepts like CAMEL_CASE into `modes.js`
		  const CLASS_NAME_RE = regex.either(
		    /\b([A-Z]+[a-z0-9]+)+/,
		    // ends in caps
		    /\b([A-Z]+[a-z0-9]+)+[A-Z]+/,
		  )
		  ;
		  const CLASS_NAME_WITH_NAMESPACE_RE = regex.concat(CLASS_NAME_RE, /(::\w+)*/);
		  const RUBY_KEYWORDS = {
		    "variable.constant": [
		      "__FILE__",
		      "__LINE__"
		    ],
		    "variable.language": [
		      "self",
		      "super",
		    ],
		    keyword: [
		      "alias",
		      "and",
		      "attr_accessor",
		      "attr_reader",
		      "attr_writer",
		      "begin",
		      "BEGIN",
		      "break",
		      "case",
		      "class",
		      "defined",
		      "do",
		      "else",
		      "elsif",
		      "end",
		      "END",
		      "ensure",
		      "for",
		      "if",
		      "in",
		      "include",
		      "module",
		      "next",
		      "not",
		      "or",
		      "redo",
		      "require",
		      "rescue",
		      "retry",
		      "return",
		      "then",
		      "undef",
		      "unless",
		      "until",
		      "when",
		      "while",
		      "yield",
		    ],
		    built_in: [
		      "proc",
		      "lambda"
		    ],
		    literal: [
		      "true",
		      "false",
		      "nil"
		    ]
		  };
		  const YARDOCTAG = {
		    className: 'doctag',
		    begin: '@[A-Za-z]+'
		  };
		  const IRB_OBJECT = {
		    begin: '#<',
		    end: '>'
		  };
		  const COMMENT_MODES = [
		    hljs.COMMENT(
		      '#',
		      '$',
		      { contains: [ YARDOCTAG ] }
		    ),
		    hljs.COMMENT(
		      '^=begin',
		      '^=end',
		      {
		        contains: [ YARDOCTAG ],
		        relevance: 10
		      }
		    ),
		    hljs.COMMENT('^__END__', hljs.MATCH_NOTHING_RE)
		  ];
		  const SUBST = {
		    className: 'subst',
		    begin: /#\{/,
		    end: /\}/,
		    keywords: RUBY_KEYWORDS
		  };
		  const STRING = {
		    className: 'string',
		    contains: [
		      hljs.BACKSLASH_ESCAPE,
		      SUBST
		    ],
		    variants: [
		      {
		        begin: /'/,
		        end: /'/
		      },
		      {
		        begin: /"/,
		        end: /"/
		      },
		      {
		        begin: /`/,
		        end: /`/
		      },
		      {
		        begin: /%[qQwWx]?\(/,
		        end: /\)/
		      },
		      {
		        begin: /%[qQwWx]?\[/,
		        end: /\]/
		      },
		      {
		        begin: /%[qQwWx]?\{/,
		        end: /\}/
		      },
		      {
		        begin: /%[qQwWx]?</,
		        end: />/
		      },
		      {
		        begin: /%[qQwWx]?\//,
		        end: /\//
		      },
		      {
		        begin: /%[qQwWx]?%/,
		        end: /%/
		      },
		      {
		        begin: /%[qQwWx]?-/,
		        end: /-/
		      },
		      {
		        begin: /%[qQwWx]?\|/,
		        end: /\|/
		      },
		      // in the following expressions, \B in the beginning suppresses recognition of ?-sequences
		      // where ? is the last character of a preceding identifier, as in: `func?4`
		      { begin: /\B\?(\\\d{1,3})/ },
		      { begin: /\B\?(\\x[A-Fa-f0-9]{1,2})/ },
		      { begin: /\B\?(\\u\{?[A-Fa-f0-9]{1,6}\}?)/ },
		      { begin: /\B\?(\\M-\\C-|\\M-\\c|\\c\\M-|\\M-|\\C-\\M-)[\x20-\x7e]/ },
		      { begin: /\B\?\\(c|C-)[\x20-\x7e]/ },
		      { begin: /\B\?\\?\S/ },
		      // heredocs
		      {
		        // this guard makes sure that we have an entire heredoc and not a false
		        // positive (auto-detect, etc.)
		        begin: regex.concat(
		          /<<[-~]?'?/,
		          regex.lookahead(/(\w+)(?=\W)[^\n]*\n(?:[^\n]*\n)*?\s*\1\b/)
		        ),
		        contains: [
		          hljs.END_SAME_AS_BEGIN({
		            begin: /(\w+)/,
		            end: /(\w+)/,
		            contains: [
		              hljs.BACKSLASH_ESCAPE,
		              SUBST
		            ]
		          })
		        ]
		      }
		    ]
		  };

		  // Ruby syntax is underdocumented, but this grammar seems to be accurate
		  // as of version 2.7.2 (confirmed with (irb and `Ripper.sexp(...)`)
		  // https://docs.ruby-lang.org/en/2.7.0/doc/syntax/literals_rdoc.html#label-Numbers
		  const decimal = '[1-9](_?[0-9])*|0';
		  const digits = '[0-9](_?[0-9])*';
		  const NUMBER = {
		    className: 'number',
		    relevance: 0,
		    variants: [
		      // decimal integer/float, optionally exponential or rational, optionally imaginary
		      { begin: `\\b(${decimal})(\\.(${digits}))?([eE][+-]?(${digits})|r)?i?\\b` },

		      // explicit decimal/binary/octal/hexadecimal integer,
		      // optionally rational and/or imaginary
		      { begin: "\\b0[dD][0-9](_?[0-9])*r?i?\\b" },
		      { begin: "\\b0[bB][0-1](_?[0-1])*r?i?\\b" },
		      { begin: "\\b0[oO][0-7](_?[0-7])*r?i?\\b" },
		      { begin: "\\b0[xX][0-9a-fA-F](_?[0-9a-fA-F])*r?i?\\b" },

		      // 0-prefixed implicit octal integer, optionally rational and/or imaginary
		      { begin: "\\b0(_?[0-7])+r?i?\\b" }
		    ]
		  };

		  const PARAMS = {
		    variants: [
		      {
		        match: /\(\)/,
		      },
		      {
		        className: 'params',
		        begin: /\(/,
		        end: /(?=\))/,
		        excludeBegin: true,
		        endsParent: true,
		        keywords: RUBY_KEYWORDS,
		      }
		    ]
		  };

		  const CLASS_DEFINITION = {
		    variants: [
		      {
		        match: [
		          /class\s+/,
		          CLASS_NAME_WITH_NAMESPACE_RE,
		          /\s+<\s+/,
		          CLASS_NAME_WITH_NAMESPACE_RE
		        ]
		      },
		      {
		        match: [
		          /class\s+/,
		          CLASS_NAME_WITH_NAMESPACE_RE
		        ]
		      }
		    ],
		    scope: {
		      2: "title.class",
		      4: "title.class.inherited"
		    },
		    keywords: RUBY_KEYWORDS
		  };

		  const UPPER_CASE_CONSTANT = {
		    relevance: 0,
		    match: /\b[A-Z][A-Z_0-9]+\b/,
		    className: "variable.constant"
		  };

		  const METHOD_DEFINITION = {
		    match: [
		      /def/, /\s+/,
		      RUBY_METHOD_RE
		    ],
		    scope: {
		      1: "keyword",
		      3: "title.function"
		    },
		    contains: [
		      PARAMS
		    ]
		  };

		  const OBJECT_CREATION = {
		    relevance: 0,
		    match: [
		      CLASS_NAME_WITH_NAMESPACE_RE,
		      /\.new[ (]/
		    ],
		    scope: {
		      1: "title.class"
		    }
		  };

		  const RUBY_DEFAULT_CONTAINS = [
		    STRING,
		    CLASS_DEFINITION,
		    OBJECT_CREATION,
		    UPPER_CASE_CONSTANT,
		    METHOD_DEFINITION,
		    {
		      // swallow namespace qualifiers before symbols
		      begin: hljs.IDENT_RE + '::' },
		    {
		      className: 'symbol',
		      begin: hljs.UNDERSCORE_IDENT_RE + '(!|\\?)?:',
		      relevance: 0
		    },
		    {
		      className: 'symbol',
		      begin: ':(?!\\s)',
		      contains: [
		        STRING,
		        { begin: RUBY_METHOD_RE }
		      ],
		      relevance: 0
		    },
		    NUMBER,
		    {
		      // negative-look forward attempts to prevent false matches like:
		      // @ident@ or $ident$ that might indicate this is not ruby at all
		      className: "variable",
		      begin: '(\\$\\W)|((\\$|@@?)(\\w+))(?=[^@$?])' + `(?![A-Za-z])(?![@$?'])`
		    },
		    {
		      className: 'params',
		      begin: /\|/,
		      end: /\|/,
		      excludeBegin: true,
		      excludeEnd: true,
		      relevance: 0, // this could be a lot of things (in other languages) other than params
		      keywords: RUBY_KEYWORDS
		    },
		    { // regexp container
		      begin: '(' + hljs.RE_STARTERS_RE + '|unless)\\s*',
		      keywords: 'unless',
		      contains: [
		        {
		          className: 'regexp',
		          contains: [
		            hljs.BACKSLASH_ESCAPE,
		            SUBST
		          ],
		          illegal: /\n/,
		          variants: [
		            {
		              begin: '/',
		              end: '/[a-z]*'
		            },
		            {
		              begin: /%r\{/,
		              end: /\}[a-z]*/
		            },
		            {
		              begin: '%r\\(',
		              end: '\\)[a-z]*'
		            },
		            {
		              begin: '%r!',
		              end: '![a-z]*'
		            },
		            {
		              begin: '%r\\[',
		              end: '\\][a-z]*'
		            }
		          ]
		        }
		      ].concat(IRB_OBJECT, COMMENT_MODES),
		      relevance: 0
		    }
		  ].concat(IRB_OBJECT, COMMENT_MODES);

		  SUBST.contains = RUBY_DEFAULT_CONTAINS;
		  PARAMS.contains = RUBY_DEFAULT_CONTAINS;

		  // >>
		  // ?>
		  const SIMPLE_PROMPT = "[>?]>";
		  // irb(main):001:0>
		  const DEFAULT_PROMPT = "[\\w#]+\\(\\w+\\):\\d+:\\d+[>*]";
		  const RVM_PROMPT = "(\\w+-)?\\d+\\.\\d+\\.\\d+(p\\d+)?[^\\d][^>]+>";

		  const IRB_DEFAULT = [
		    {
		      begin: /^\s*=>/,
		      starts: {
		        end: '$',
		        contains: RUBY_DEFAULT_CONTAINS
		      }
		    },
		    {
		      className: 'meta.prompt',
		      begin: '^(' + SIMPLE_PROMPT + "|" + DEFAULT_PROMPT + '|' + RVM_PROMPT + ')(?=[ ])',
		      starts: {
		        end: '$',
		        keywords: RUBY_KEYWORDS,
		        contains: RUBY_DEFAULT_CONTAINS
		      }
		    }
		  ];

		  COMMENT_MODES.unshift(IRB_OBJECT);

		  return {
		    name: 'Ruby',
		    aliases: [
		      'rb',
		      'gemspec',
		      'podspec',
		      'thor',
		      'irb'
		    ],
		    keywords: RUBY_KEYWORDS,
		    illegal: /\/\*/,
		    contains: [ hljs.SHEBANG({ binary: "ruby" }) ]
		      .concat(IRB_DEFAULT)
		      .concat(COMMENT_MODES)
		      .concat(RUBY_DEFAULT_CONTAINS)
		  };
		}

		ruby_1 = ruby;
		return ruby_1;
	}

	/*
	Language: Go
	Author: Stephan Kountso aka StepLg <steplg@gmail.com>
	Contributors: Evgeny Stepanischev <imbolk@gmail.com>
	Description: Google go language (golang). For info about language
	Website: http://golang.org/
	Category: common, system
	*/

	var go_1;
	var hasRequiredGo;

	function requireGo () {
		if (hasRequiredGo) return go_1;
		hasRequiredGo = 1;
		function go(hljs) {
		  const LITERALS = [
		    "true",
		    "false",
		    "iota",
		    "nil"
		  ];
		  const BUILT_INS = [
		    "append",
		    "cap",
		    "close",
		    "complex",
		    "copy",
		    "imag",
		    "len",
		    "make",
		    "new",
		    "panic",
		    "print",
		    "println",
		    "real",
		    "recover",
		    "delete"
		  ];
		  const TYPES = [
		    "bool",
		    "byte",
		    "complex64",
		    "complex128",
		    "error",
		    "float32",
		    "float64",
		    "int8",
		    "int16",
		    "int32",
		    "int64",
		    "string",
		    "uint8",
		    "uint16",
		    "uint32",
		    "uint64",
		    "int",
		    "uint",
		    "uintptr",
		    "rune"
		  ];
		  const KWS = [
		    "break",
		    "case",
		    "chan",
		    "const",
		    "continue",
		    "default",
		    "defer",
		    "else",
		    "fallthrough",
		    "for",
		    "func",
		    "go",
		    "goto",
		    "if",
		    "import",
		    "interface",
		    "map",
		    "package",
		    "range",
		    "return",
		    "select",
		    "struct",
		    "switch",
		    "type",
		    "var",
		  ];
		  const KEYWORDS = {
		    keyword: KWS,
		    type: TYPES,
		    literal: LITERALS,
		    built_in: BUILT_INS
		  };
		  return {
		    name: 'Go',
		    aliases: [ 'golang' ],
		    keywords: KEYWORDS,
		    illegal: '</',
		    contains: [
		      hljs.C_LINE_COMMENT_MODE,
		      hljs.C_BLOCK_COMMENT_MODE,
		      {
		        className: 'string',
		        variants: [
		          hljs.QUOTE_STRING_MODE,
		          hljs.APOS_STRING_MODE,
		          {
		            begin: '`',
		            end: '`'
		          }
		        ]
		      },
		      {
		        className: 'number',
		        variants: [
		          {
		            begin: hljs.C_NUMBER_RE + '[i]',
		            relevance: 1
		          },
		          hljs.C_NUMBER_MODE
		        ]
		      },
		      { begin: /:=/ // relevance booster
		      },
		      {
		        className: 'function',
		        beginKeywords: 'func',
		        end: '\\s*(\\{|$)',
		        excludeEnd: true,
		        contains: [
		          hljs.TITLE_MODE,
		          {
		            className: 'params',
		            begin: /\(/,
		            end: /\)/,
		            endsParent: true,
		            keywords: KEYWORDS,
		            illegal: /["']/
		          }
		        ]
		      }
		    ]
		  };
		}

		go_1 = go;
		return go_1;
	}

	/*
	 Language: GraphQL
	 Author: John Foster (GH jf990), and others
	 Description: GraphQL is a query language for APIs
	 Category: web, common
	*/

	var graphql_1;
	var hasRequiredGraphql;

	function requireGraphql () {
		if (hasRequiredGraphql) return graphql_1;
		hasRequiredGraphql = 1;
		/** @type LanguageFn */
		function graphql(hljs) {
		  const regex = hljs.regex;
		  const GQL_NAME = /[_A-Za-z][_0-9A-Za-z]*/;
		  return {
		    name: "GraphQL",
		    aliases: [ "gql" ],
		    case_insensitive: true,
		    disableAutodetect: false,
		    keywords: {
		      keyword: [
		        "query",
		        "mutation",
		        "subscription",
		        "type",
		        "input",
		        "schema",
		        "directive",
		        "interface",
		        "union",
		        "scalar",
		        "fragment",
		        "enum",
		        "on"
		      ],
		      literal: [
		        "true",
		        "false",
		        "null"
		      ]
		    },
		    contains: [
		      hljs.HASH_COMMENT_MODE,
		      hljs.QUOTE_STRING_MODE,
		      hljs.NUMBER_MODE,
		      {
		        scope: "punctuation",
		        match: /[.]{3}/,
		        relevance: 0
		      },
		      {
		        scope: "punctuation",
		        begin: /[\!\(\)\:\=\[\]\{\|\}]{1}/,
		        relevance: 0
		      },
		      {
		        scope: "variable",
		        begin: /\$/,
		        end: /\W/,
		        excludeEnd: true,
		        relevance: 0
		      },
		      {
		        scope: "meta",
		        match: /@\w+/,
		        excludeEnd: true
		      },
		      {
		        scope: "symbol",
		        begin: regex.concat(GQL_NAME, regex.lookahead(/\s*:/)),
		        relevance: 0
		      }
		    ],
		    illegal: [
		      /[;<']/,
		      /BEGIN/
		    ]
		  };
		}

		graphql_1 = graphql;
		return graphql_1;
	}

	/*
	Language: TOML, also INI
	Description: TOML aims to be a minimal configuration file format that's easy to read due to obvious semantics.
	Contributors: Guillaume Gomez <guillaume1.gomez@gmail.com>
	Category: common, config
	Website: https://github.com/toml-lang/toml
	*/

	var ini_1;
	var hasRequiredIni;

	function requireIni () {
		if (hasRequiredIni) return ini_1;
		hasRequiredIni = 1;
		function ini(hljs) {
		  const regex = hljs.regex;
		  const NUMBERS = {
		    className: 'number',
		    relevance: 0,
		    variants: [
		      { begin: /([+-]+)?[\d]+_[\d_]+/ },
		      { begin: hljs.NUMBER_RE }
		    ]
		  };
		  const COMMENTS = hljs.COMMENT();
		  COMMENTS.variants = [
		    {
		      begin: /;/,
		      end: /$/
		    },
		    {
		      begin: /#/,
		      end: /$/
		    }
		  ];
		  const VARIABLES = {
		    className: 'variable',
		    variants: [
		      { begin: /\$[\w\d"][\w\d_]*/ },
		      { begin: /\$\{(.*?)\}/ }
		    ]
		  };
		  const LITERALS = {
		    className: 'literal',
		    begin: /\bon|off|true|false|yes|no\b/
		  };
		  const STRINGS = {
		    className: "string",
		    contains: [ hljs.BACKSLASH_ESCAPE ],
		    variants: [
		      {
		        begin: "'''",
		        end: "'''",
		        relevance: 10
		      },
		      {
		        begin: '"""',
		        end: '"""',
		        relevance: 10
		      },
		      {
		        begin: '"',
		        end: '"'
		      },
		      {
		        begin: "'",
		        end: "'"
		      }
		    ]
		  };
		  const ARRAY = {
		    begin: /\[/,
		    end: /\]/,
		    contains: [
		      COMMENTS,
		      LITERALS,
		      VARIABLES,
		      STRINGS,
		      NUMBERS,
		      'self'
		    ],
		    relevance: 0
		  };

		  const BARE_KEY = /[A-Za-z0-9_-]+/;
		  const QUOTED_KEY_DOUBLE_QUOTE = /"(\\"|[^"])*"/;
		  const QUOTED_KEY_SINGLE_QUOTE = /'[^']*'/;
		  const ANY_KEY = regex.either(
		    BARE_KEY, QUOTED_KEY_DOUBLE_QUOTE, QUOTED_KEY_SINGLE_QUOTE
		  );
		  const DOTTED_KEY = regex.concat(
		    ANY_KEY, '(\\s*\\.\\s*', ANY_KEY, ')*',
		    regex.lookahead(/\s*=\s*[^#\s]/)
		  );

		  return {
		    name: 'TOML, also INI',
		    aliases: [ 'toml' ],
		    case_insensitive: true,
		    illegal: /\S/,
		    contains: [
		      COMMENTS,
		      {
		        className: 'section',
		        begin: /\[+/,
		        end: /\]+/
		      },
		      {
		        begin: DOTTED_KEY,
		        className: 'attr',
		        starts: {
		          end: /$/,
		          contains: [
		            COMMENTS,
		            ARRAY,
		            LITERALS,
		            VARIABLES,
		            STRINGS,
		            NUMBERS
		          ]
		        }
		      }
		    ]
		  };
		}

		ini_1 = ini;
		return ini_1;
	}

	var java_1;
	var hasRequiredJava;

	function requireJava () {
		if (hasRequiredJava) return java_1;
		hasRequiredJava = 1;
		// https://docs.oracle.com/javase/specs/jls/se15/html/jls-3.html#jls-3.10
		var decimalDigits = '[0-9](_*[0-9])*';
		var frac = `\\.(${decimalDigits})`;
		var hexDigits = '[0-9a-fA-F](_*[0-9a-fA-F])*';
		var NUMERIC = {
		  className: 'number',
		  variants: [
		    // DecimalFloatingPointLiteral
		    // including ExponentPart
		    { begin: `(\\b(${decimalDigits})((${frac})|\\.)?|(${frac}))` +
		      `[eE][+-]?(${decimalDigits})[fFdD]?\\b` },
		    // excluding ExponentPart
		    { begin: `\\b(${decimalDigits})((${frac})[fFdD]?\\b|\\.([fFdD]\\b)?)` },
		    { begin: `(${frac})[fFdD]?\\b` },
		    { begin: `\\b(${decimalDigits})[fFdD]\\b` },

		    // HexadecimalFloatingPointLiteral
		    { begin: `\\b0[xX]((${hexDigits})\\.?|(${hexDigits})?\\.(${hexDigits}))` +
		      `[pP][+-]?(${decimalDigits})[fFdD]?\\b` },

		    // DecimalIntegerLiteral
		    { begin: '\\b(0|[1-9](_*[0-9])*)[lL]?\\b' },

		    // HexIntegerLiteral
		    { begin: `\\b0[xX](${hexDigits})[lL]?\\b` },

		    // OctalIntegerLiteral
		    { begin: '\\b0(_*[0-7])*[lL]?\\b' },

		    // BinaryIntegerLiteral
		    { begin: '\\b0[bB][01](_*[01])*[lL]?\\b' },
		  ],
		  relevance: 0
		};

		/*
		Language: Java
		Author: Vsevolod Solovyov <vsevolod.solovyov@gmail.com>
		Category: common, enterprise
		Website: https://www.java.com/
		*/

		/**
		 * Allows recursive regex expressions to a given depth
		 *
		 * ie: recurRegex("(abc~~~)", /~~~/g, 2) becomes:
		 * (abc(abc(abc)))
		 *
		 * @param {string} re
		 * @param {RegExp} substitution (should be a g mode regex)
		 * @param {number} depth
		 * @returns {string}``
		 */
		function recurRegex(re, substitution, depth) {
		  if (depth === -1) return "";

		  return re.replace(substitution, _ => {
		    return recurRegex(re, substitution, depth - 1);
		  });
		}

		/** @type LanguageFn */
		function java(hljs) {
		  const regex = hljs.regex;
		  const JAVA_IDENT_RE = '[\u00C0-\u02B8a-zA-Z_$][\u00C0-\u02B8a-zA-Z_$0-9]*';
		  const GENERIC_IDENT_RE = JAVA_IDENT_RE
		    + recurRegex('(?:<' + JAVA_IDENT_RE + '~~~(?:\\s*,\\s*' + JAVA_IDENT_RE + '~~~)*>)?', /~~~/g, 2);
		  const MAIN_KEYWORDS = [
		    'synchronized',
		    'abstract',
		    'private',
		    'var',
		    'static',
		    'if',
		    'const ',
		    'for',
		    'while',
		    'strictfp',
		    'finally',
		    'protected',
		    'import',
		    'native',
		    'final',
		    'void',
		    'enum',
		    'else',
		    'break',
		    'transient',
		    'catch',
		    'instanceof',
		    'volatile',
		    'case',
		    'assert',
		    'package',
		    'default',
		    'public',
		    'try',
		    'switch',
		    'continue',
		    'throws',
		    'protected',
		    'public',
		    'private',
		    'module',
		    'requires',
		    'exports',
		    'do',
		    'sealed'
		  ];

		  const BUILT_INS = [
		    'super',
		    'this'
		  ];

		  const LITERALS = [
		    'false',
		    'true',
		    'null'
		  ];

		  const TYPES = [
		    'char',
		    'boolean',
		    'long',
		    'float',
		    'int',
		    'byte',
		    'short',
		    'double'
		  ];

		  const KEYWORDS = {
		    keyword: MAIN_KEYWORDS,
		    literal: LITERALS,
		    type: TYPES,
		    built_in: BUILT_INS
		  };

		  const ANNOTATION = {
		    className: 'meta',
		    begin: '@' + JAVA_IDENT_RE,
		    contains: [
		      {
		        begin: /\(/,
		        end: /\)/,
		        contains: [ "self" ] // allow nested () inside our annotation
		      }
		    ]
		  };
		  const PARAMS = {
		    className: 'params',
		    begin: /\(/,
		    end: /\)/,
		    keywords: KEYWORDS,
		    relevance: 0,
		    contains: [ hljs.C_BLOCK_COMMENT_MODE ],
		    endsParent: true
		  };

		  return {
		    name: 'Java',
		    aliases: [ 'jsp' ],
		    keywords: KEYWORDS,
		    illegal: /<\/|#/,
		    contains: [
		      hljs.COMMENT(
		        '/\\*\\*',
		        '\\*/',
		        {
		          relevance: 0,
		          contains: [
		            {
		              // eat up @'s in emails to prevent them to be recognized as doctags
		              begin: /\w+@/,
		              relevance: 0
		            },
		            {
		              className: 'doctag',
		              begin: '@[A-Za-z]+'
		            }
		          ]
		        }
		      ),
		      // relevance boost
		      {
		        begin: /import java\.[a-z]+\./,
		        keywords: "import",
		        relevance: 2
		      },
		      hljs.C_LINE_COMMENT_MODE,
		      hljs.C_BLOCK_COMMENT_MODE,
		      {
		        begin: /"""/,
		        end: /"""/,
		        className: "string",
		        contains: [ hljs.BACKSLASH_ESCAPE ]
		      },
		      hljs.APOS_STRING_MODE,
		      hljs.QUOTE_STRING_MODE,
		      {
		        match: [
		          /\b(?:class|interface|enum|extends|implements|new)/,
		          /\s+/,
		          JAVA_IDENT_RE
		        ],
		        className: {
		          1: "keyword",
		          3: "title.class"
		        }
		      },
		      {
		        // Exceptions for hyphenated keywords
		        match: /non-sealed/,
		        scope: "keyword"
		      },
		      {
		        begin: [
		          regex.concat(/(?!else)/, JAVA_IDENT_RE),
		          /\s+/,
		          JAVA_IDENT_RE,
		          /\s+/,
		          /=(?!=)/
		        ],
		        className: {
		          1: "type",
		          3: "variable",
		          5: "operator"
		        }
		      },
		      {
		        begin: [
		          /record/,
		          /\s+/,
		          JAVA_IDENT_RE
		        ],
		        className: {
		          1: "keyword",
		          3: "title.class"
		        },
		        contains: [
		          PARAMS,
		          hljs.C_LINE_COMMENT_MODE,
		          hljs.C_BLOCK_COMMENT_MODE
		        ]
		      },
		      {
		        // Expression keywords prevent 'keyword Name(...)' from being
		        // recognized as a function definition
		        beginKeywords: 'new throw return else',
		        relevance: 0
		      },
		      {
		        begin: [
		          '(?:' + GENERIC_IDENT_RE + '\\s+)',
		          hljs.UNDERSCORE_IDENT_RE,
		          /\s*(?=\()/
		        ],
		        className: { 2: "title.function" },
		        keywords: KEYWORDS,
		        contains: [
		          {
		            className: 'params',
		            begin: /\(/,
		            end: /\)/,
		            keywords: KEYWORDS,
		            relevance: 0,
		            contains: [
		              ANNOTATION,
		              hljs.APOS_STRING_MODE,
		              hljs.QUOTE_STRING_MODE,
		              NUMERIC,
		              hljs.C_BLOCK_COMMENT_MODE
		            ]
		          },
		          hljs.C_LINE_COMMENT_MODE,
		          hljs.C_BLOCK_COMMENT_MODE
		        ]
		      },
		      NUMERIC,
		      ANNOTATION
		    ]
		  };
		}

		java_1 = java;
		return java_1;
	}

	var javascript_1;
	var hasRequiredJavascript;

	function requireJavascript () {
		if (hasRequiredJavascript) return javascript_1;
		hasRequiredJavascript = 1;
		const IDENT_RE = '[A-Za-z$_][0-9A-Za-z$_]*';
		const KEYWORDS = [
		  "as", // for exports
		  "in",
		  "of",
		  "if",
		  "for",
		  "while",
		  "finally",
		  "var",
		  "new",
		  "function",
		  "do",
		  "return",
		  "void",
		  "else",
		  "break",
		  "catch",
		  "instanceof",
		  "with",
		  "throw",
		  "case",
		  "default",
		  "try",
		  "switch",
		  "continue",
		  "typeof",
		  "delete",
		  "let",
		  "yield",
		  "const",
		  "class",
		  // JS handles these with a special rule
		  // "get",
		  // "set",
		  "debugger",
		  "async",
		  "await",
		  "static",
		  "import",
		  "from",
		  "export",
		  "extends"
		];
		const LITERALS = [
		  "true",
		  "false",
		  "null",
		  "undefined",
		  "NaN",
		  "Infinity"
		];

		// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects
		const TYPES = [
		  // Fundamental objects
		  "Object",
		  "Function",
		  "Boolean",
		  "Symbol",
		  // numbers and dates
		  "Math",
		  "Date",
		  "Number",
		  "BigInt",
		  // text
		  "String",
		  "RegExp",
		  // Indexed collections
		  "Array",
		  "Float32Array",
		  "Float64Array",
		  "Int8Array",
		  "Uint8Array",
		  "Uint8ClampedArray",
		  "Int16Array",
		  "Int32Array",
		  "Uint16Array",
		  "Uint32Array",
		  "BigInt64Array",
		  "BigUint64Array",
		  // Keyed collections
		  "Set",
		  "Map",
		  "WeakSet",
		  "WeakMap",
		  // Structured data
		  "ArrayBuffer",
		  "SharedArrayBuffer",
		  "Atomics",
		  "DataView",
		  "JSON",
		  // Control abstraction objects
		  "Promise",
		  "Generator",
		  "GeneratorFunction",
		  "AsyncFunction",
		  // Reflection
		  "Reflect",
		  "Proxy",
		  // Internationalization
		  "Intl",
		  // WebAssembly
		  "WebAssembly"
		];

		const ERROR_TYPES = [
		  "Error",
		  "EvalError",
		  "InternalError",
		  "RangeError",
		  "ReferenceError",
		  "SyntaxError",
		  "TypeError",
		  "URIError"
		];

		const BUILT_IN_GLOBALS = [
		  "setInterval",
		  "setTimeout",
		  "clearInterval",
		  "clearTimeout",

		  "require",
		  "exports",

		  "eval",
		  "isFinite",
		  "isNaN",
		  "parseFloat",
		  "parseInt",
		  "decodeURI",
		  "decodeURIComponent",
		  "encodeURI",
		  "encodeURIComponent",
		  "escape",
		  "unescape"
		];

		const BUILT_IN_VARIABLES = [
		  "arguments",
		  "this",
		  "super",
		  "console",
		  "window",
		  "document",
		  "localStorage",
		  "module",
		  "global" // Node.js
		];

		const BUILT_INS = [].concat(
		  BUILT_IN_GLOBALS,
		  TYPES,
		  ERROR_TYPES
		);

		/*
		Language: JavaScript
		Description: JavaScript (JS) is a lightweight, interpreted, or just-in-time compiled programming language with first-class functions.
		Category: common, scripting, web
		Website: https://developer.mozilla.org/en-US/docs/Web/JavaScript
		*/

		/** @type LanguageFn */
		function javascript(hljs) {
		  const regex = hljs.regex;
		  /**
		   * Takes a string like "<Booger" and checks to see
		   * if we can find a matching "</Booger" later in the
		   * content.
		   * @param {RegExpMatchArray} match
		   * @param {{after:number}} param1
		   */
		  const hasClosingTag = (match, { after }) => {
		    const tag = "</" + match[0].slice(1);
		    const pos = match.input.indexOf(tag, after);
		    return pos !== -1;
		  };

		  const IDENT_RE$1 = IDENT_RE;
		  const FRAGMENT = {
		    begin: '<>',
		    end: '</>'
		  };
		  // to avoid some special cases inside isTrulyOpeningTag
		  const XML_SELF_CLOSING = /<[A-Za-z0-9\\._:-]+\s*\/>/;
		  const XML_TAG = {
		    begin: /<[A-Za-z0-9\\._:-]+/,
		    end: /\/[A-Za-z0-9\\._:-]+>|\/>/,
		    /**
		     * @param {RegExpMatchArray} match
		     * @param {CallbackResponse} response
		     */
		    isTrulyOpeningTag: (match, response) => {
		      const afterMatchIndex = match[0].length + match.index;
		      const nextChar = match.input[afterMatchIndex];
		      if (
		        // HTML should not include another raw `<` inside a tag
		        // nested type?
		        // `<Array<Array<number>>`, etc.
		        nextChar === "<" ||
		        // the , gives away that this is not HTML
		        // `<T, A extends keyof T, V>`
		        nextChar === ",") {
		        response.ignoreMatch();
		        return;
		      }

		      // `<something>`
		      // Quite possibly a tag, lets look for a matching closing tag...
		      if (nextChar === ">") {
		        // if we cannot find a matching closing tag, then we
		        // will ignore it
		        if (!hasClosingTag(match, { after: afterMatchIndex })) {
		          response.ignoreMatch();
		        }
		      }

		      // `<blah />` (self-closing)
		      // handled by simpleSelfClosing rule

		      // `<From extends string>`
		      // technically this could be HTML, but it smells like a type
		      let m;
		      const afterMatch = match.input.substring(afterMatchIndex);
		      // NOTE: This is ugh, but added specifically for https://github.com/highlightjs/highlight.js/issues/3276
		      if ((m = afterMatch.match(/^\s+extends\s+/))) {
		        if (m.index === 0) {
		          response.ignoreMatch();
		          // eslint-disable-next-line no-useless-return
		          return;
		        }
		      }
		    }
		  };
		  const KEYWORDS$1 = {
		    $pattern: IDENT_RE,
		    keyword: KEYWORDS,
		    literal: LITERALS,
		    built_in: BUILT_INS,
		    "variable.language": BUILT_IN_VARIABLES
		  };

		  // https://tc39.es/ecma262/#sec-literals-numeric-literals
		  const decimalDigits = '[0-9](_?[0-9])*';
		  const frac = `\\.(${decimalDigits})`;
		  // DecimalIntegerLiteral, including Annex B NonOctalDecimalIntegerLiteral
		  // https://tc39.es/ecma262/#sec-additional-syntax-numeric-literals
		  const decimalInteger = `0|[1-9](_?[0-9])*|0[0-7]*[89][0-9]*`;
		  const NUMBER = {
		    className: 'number',
		    variants: [
		      // DecimalLiteral
		      { begin: `(\\b(${decimalInteger})((${frac})|\\.)?|(${frac}))` +
		        `[eE][+-]?(${decimalDigits})\\b` },
		      { begin: `\\b(${decimalInteger})\\b((${frac})\\b|\\.)?|(${frac})\\b` },

		      // DecimalBigIntegerLiteral
		      { begin: `\\b(0|[1-9](_?[0-9])*)n\\b` },

		      // NonDecimalIntegerLiteral
		      { begin: "\\b0[xX][0-9a-fA-F](_?[0-9a-fA-F])*n?\\b" },
		      { begin: "\\b0[bB][0-1](_?[0-1])*n?\\b" },
		      { begin: "\\b0[oO][0-7](_?[0-7])*n?\\b" },

		      // LegacyOctalIntegerLiteral (does not include underscore separators)
		      // https://tc39.es/ecma262/#sec-additional-syntax-numeric-literals
		      { begin: "\\b0[0-7]+n?\\b" },
		    ],
		    relevance: 0
		  };

		  const SUBST = {
		    className: 'subst',
		    begin: '\\$\\{',
		    end: '\\}',
		    keywords: KEYWORDS$1,
		    contains: [] // defined later
		  };
		  const HTML_TEMPLATE = {
		    begin: 'html`',
		    end: '',
		    starts: {
		      end: '`',
		      returnEnd: false,
		      contains: [
		        hljs.BACKSLASH_ESCAPE,
		        SUBST
		      ],
		      subLanguage: 'xml'
		    }
		  };
		  const CSS_TEMPLATE = {
		    begin: 'css`',
		    end: '',
		    starts: {
		      end: '`',
		      returnEnd: false,
		      contains: [
		        hljs.BACKSLASH_ESCAPE,
		        SUBST
		      ],
		      subLanguage: 'css'
		    }
		  };
		  const TEMPLATE_STRING = {
		    className: 'string',
		    begin: '`',
		    end: '`',
		    contains: [
		      hljs.BACKSLASH_ESCAPE,
		      SUBST
		    ]
		  };
		  const JSDOC_COMMENT = hljs.COMMENT(
		    /\/\*\*(?!\/)/,
		    '\\*/',
		    {
		      relevance: 0,
		      contains: [
		        {
		          begin: '(?=@[A-Za-z]+)',
		          relevance: 0,
		          contains: [
		            {
		              className: 'doctag',
		              begin: '@[A-Za-z]+'
		            },
		            {
		              className: 'type',
		              begin: '\\{',
		              end: '\\}',
		              excludeEnd: true,
		              excludeBegin: true,
		              relevance: 0
		            },
		            {
		              className: 'variable',
		              begin: IDENT_RE$1 + '(?=\\s*(-)|$)',
		              endsParent: true,
		              relevance: 0
		            },
		            // eat spaces (not newlines) so we can find
		            // types or variables
		            {
		              begin: /(?=[^\n])\s/,
		              relevance: 0
		            }
		          ]
		        }
		      ]
		    }
		  );
		  const COMMENT = {
		    className: "comment",
		    variants: [
		      JSDOC_COMMENT,
		      hljs.C_BLOCK_COMMENT_MODE,
		      hljs.C_LINE_COMMENT_MODE
		    ]
		  };
		  const SUBST_INTERNALS = [
		    hljs.APOS_STRING_MODE,
		    hljs.QUOTE_STRING_MODE,
		    HTML_TEMPLATE,
		    CSS_TEMPLATE,
		    TEMPLATE_STRING,
		    NUMBER,
		    // This is intentional:
		    // See https://github.com/highlightjs/highlight.js/issues/3288
		    // hljs.REGEXP_MODE
		  ];
		  SUBST.contains = SUBST_INTERNALS
		    .concat({
		      // we need to pair up {} inside our subst to prevent
		      // it from ending too early by matching another }
		      begin: /\{/,
		      end: /\}/,
		      keywords: KEYWORDS$1,
		      contains: [
		        "self"
		      ].concat(SUBST_INTERNALS)
		    });
		  const SUBST_AND_COMMENTS = [].concat(COMMENT, SUBST.contains);
		  const PARAMS_CONTAINS = SUBST_AND_COMMENTS.concat([
		    // eat recursive parens in sub expressions
		    {
		      begin: /\(/,
		      end: /\)/,
		      keywords: KEYWORDS$1,
		      contains: ["self"].concat(SUBST_AND_COMMENTS)
		    }
		  ]);
		  const PARAMS = {
		    className: 'params',
		    begin: /\(/,
		    end: /\)/,
		    excludeBegin: true,
		    excludeEnd: true,
		    keywords: KEYWORDS$1,
		    contains: PARAMS_CONTAINS
		  };

		  // ES6 classes
		  const CLASS_OR_EXTENDS = {
		    variants: [
		      // class Car extends vehicle
		      {
		        match: [
		          /class/,
		          /\s+/,
		          IDENT_RE$1,
		          /\s+/,
		          /extends/,
		          /\s+/,
		          regex.concat(IDENT_RE$1, "(", regex.concat(/\./, IDENT_RE$1), ")*")
		        ],
		        scope: {
		          1: "keyword",
		          3: "title.class",
		          5: "keyword",
		          7: "title.class.inherited"
		        }
		      },
		      // class Car
		      {
		        match: [
		          /class/,
		          /\s+/,
		          IDENT_RE$1
		        ],
		        scope: {
		          1: "keyword",
		          3: "title.class"
		        }
		      },

		    ]
		  };

		  const CLASS_REFERENCE = {
		    relevance: 0,
		    match:
		    regex.either(
		      // Hard coded exceptions
		      /\bJSON/,
		      // Float32Array, OutT
		      /\b[A-Z][a-z]+([A-Z][a-z]*|\d)*/,
		      // CSSFactory, CSSFactoryT
		      /\b[A-Z]{2,}([A-Z][a-z]+|\d)+([A-Z][a-z]*)*/,
		      // FPs, FPsT
		      /\b[A-Z]{2,}[a-z]+([A-Z][a-z]+|\d)*([A-Z][a-z]*)*/,
		      // P
		      // single letters are not highlighted
		      // BLAH
		      // this will be flagged as a UPPER_CASE_CONSTANT instead
		    ),
		    className: "title.class",
		    keywords: {
		      _: [
		        // se we still get relevance credit for JS library classes
		        ...TYPES,
		        ...ERROR_TYPES
		      ]
		    }
		  };

		  const USE_STRICT = {
		    label: "use_strict",
		    className: 'meta',
		    relevance: 10,
		    begin: /^\s*['"]use (strict|asm)['"]/
		  };

		  const FUNCTION_DEFINITION = {
		    variants: [
		      {
		        match: [
		          /function/,
		          /\s+/,
		          IDENT_RE$1,
		          /(?=\s*\()/
		        ]
		      },
		      // anonymous function
		      {
		        match: [
		          /function/,
		          /\s*(?=\()/
		        ]
		      }
		    ],
		    className: {
		      1: "keyword",
		      3: "title.function"
		    },
		    label: "func.def",
		    contains: [ PARAMS ],
		    illegal: /%/
		  };

		  const UPPER_CASE_CONSTANT = {
		    relevance: 0,
		    match: /\b[A-Z][A-Z_0-9]+\b/,
		    className: "variable.constant"
		  };

		  function noneOf(list) {
		    return regex.concat("(?!", list.join("|"), ")");
		  }

		  const FUNCTION_CALL = {
		    match: regex.concat(
		      /\b/,
		      noneOf([
		        ...BUILT_IN_GLOBALS,
		        "super"
		      ]),
		      IDENT_RE$1, regex.lookahead(/\(/)),
		    className: "title.function",
		    relevance: 0
		  };

		  const PROPERTY_ACCESS = {
		    begin: regex.concat(/\./, regex.lookahead(
		      regex.concat(IDENT_RE$1, /(?![0-9A-Za-z$_(])/)
		    )),
		    end: IDENT_RE$1,
		    excludeBegin: true,
		    keywords: "prototype",
		    className: "property",
		    relevance: 0
		  };

		  const GETTER_OR_SETTER = {
		    match: [
		      /get|set/,
		      /\s+/,
		      IDENT_RE$1,
		      /(?=\()/
		    ],
		    className: {
		      1: "keyword",
		      3: "title.function"
		    },
		    contains: [
		      { // eat to avoid empty params
		        begin: /\(\)/
		      },
		      PARAMS
		    ]
		  };

		  const FUNC_LEAD_IN_RE = '(\\(' +
		    '[^()]*(\\(' +
		    '[^()]*(\\(' +
		    '[^()]*' +
		    '\\)[^()]*)*' +
		    '\\)[^()]*)*' +
		    '\\)|' + hljs.UNDERSCORE_IDENT_RE + ')\\s*=>';

		  const FUNCTION_VARIABLE = {
		    match: [
		      /const|var|let/, /\s+/,
		      IDENT_RE$1, /\s*/,
		      /=\s*/,
		      /(async\s*)?/, // async is optional
		      regex.lookahead(FUNC_LEAD_IN_RE)
		    ],
		    keywords: "async",
		    className: {
		      1: "keyword",
		      3: "title.function"
		    },
		    contains: [
		      PARAMS
		    ]
		  };

		  return {
		    name: 'Javascript',
		    aliases: ['js', 'jsx', 'mjs', 'cjs'],
		    keywords: KEYWORDS$1,
		    // this will be extended by TypeScript
		    exports: { PARAMS_CONTAINS, CLASS_REFERENCE },
		    illegal: /#(?![$_A-z])/,
		    contains: [
		      hljs.SHEBANG({
		        label: "shebang",
		        binary: "node",
		        relevance: 5
		      }),
		      USE_STRICT,
		      hljs.APOS_STRING_MODE,
		      hljs.QUOTE_STRING_MODE,
		      HTML_TEMPLATE,
		      CSS_TEMPLATE,
		      TEMPLATE_STRING,
		      COMMENT,
		      NUMBER,
		      CLASS_REFERENCE,
		      {
		        className: 'attr',
		        begin: IDENT_RE$1 + regex.lookahead(':'),
		        relevance: 0
		      },
		      FUNCTION_VARIABLE,
		      { // "value" container
		        begin: '(' + hljs.RE_STARTERS_RE + '|\\b(case|return|throw)\\b)\\s*',
		        keywords: 'return throw case',
		        relevance: 0,
		        contains: [
		          COMMENT,
		          hljs.REGEXP_MODE,
		          {
		            className: 'function',
		            // we have to count the parens to make sure we actually have the
		            // correct bounding ( ) before the =>.  There could be any number of
		            // sub-expressions inside also surrounded by parens.
		            begin: FUNC_LEAD_IN_RE,
		            returnBegin: true,
		            end: '\\s*=>',
		            contains: [
		              {
		                className: 'params',
		                variants: [
		                  {
		                    begin: hljs.UNDERSCORE_IDENT_RE,
		                    relevance: 0
		                  },
		                  {
		                    className: null,
		                    begin: /\(\s*\)/,
		                    skip: true
		                  },
		                  {
		                    begin: /\(/,
		                    end: /\)/,
		                    excludeBegin: true,
		                    excludeEnd: true,
		                    keywords: KEYWORDS$1,
		                    contains: PARAMS_CONTAINS
		                  }
		                ]
		              }
		            ]
		          },
		          { // could be a comma delimited list of params to a function call
		            begin: /,/,
		            relevance: 0
		          },
		          {
		            match: /\s+/,
		            relevance: 0
		          },
		          { // JSX
		            variants: [
		              { begin: FRAGMENT.begin, end: FRAGMENT.end },
		              { match: XML_SELF_CLOSING },
		              {
		                begin: XML_TAG.begin,
		                // we carefully check the opening tag to see if it truly
		                // is a tag and not a false positive
		                'on:begin': XML_TAG.isTrulyOpeningTag,
		                end: XML_TAG.end
		              }
		            ],
		            subLanguage: 'xml',
		            contains: [
		              {
		                begin: XML_TAG.begin,
		                end: XML_TAG.end,
		                skip: true,
		                contains: ['self']
		              }
		            ]
		          }
		        ],
		      },
		      FUNCTION_DEFINITION,
		      {
		        // prevent this from getting swallowed up by function
		        // since they appear "function like"
		        beginKeywords: "while if switch catch for"
		      },
		      {
		        // we have to count the parens to make sure we actually have the correct
		        // bounding ( ).  There could be any number of sub-expressions inside
		        // also surrounded by parens.
		        begin: '\\b(?!function)' + hljs.UNDERSCORE_IDENT_RE +
		          '\\(' + // first parens
		          '[^()]*(\\(' +
		            '[^()]*(\\(' +
		              '[^()]*' +
		            '\\)[^()]*)*' +
		          '\\)[^()]*)*' +
		          '\\)\\s*\\{', // end parens
		        returnBegin:true,
		        label: "func.def",
		        contains: [
		          PARAMS,
		          hljs.inherit(hljs.TITLE_MODE, { begin: IDENT_RE$1, className: "title.function" })
		        ]
		      },
		      // catch ... so it won't trigger the property rule below
		      {
		        match: /\.\.\./,
		        relevance: 0
		      },
		      PROPERTY_ACCESS,
		      // hack: prevents detection of keywords in some circumstances
		      // .keyword()
		      // $keyword = x
		      {
		        match: '\\$' + IDENT_RE$1,
		        relevance: 0
		      },
		      {
		        match: [ /\bconstructor(?=\s*\()/ ],
		        className: { 1: "title.function" },
		        contains: [ PARAMS ]
		      },
		      FUNCTION_CALL,
		      UPPER_CASE_CONSTANT,
		      CLASS_OR_EXTENDS,
		      GETTER_OR_SETTER,
		      {
		        match: /\$[(.]/ // relevance booster for a pattern common to JS libs: `$(something)` and `$.something`
		      }
		    ]
		  };
		}

		javascript_1 = javascript;
		return javascript_1;
	}

	/*
	Language: JSON
	Description: JSON (JavaScript Object Notation) is a lightweight data-interchange format.
	Author: Ivan Sagalaev <maniac@softwaremaniacs.org>
	Website: http://www.json.org
	Category: common, protocols, web
	*/

	var json_1;
	var hasRequiredJson;

	function requireJson () {
		if (hasRequiredJson) return json_1;
		hasRequiredJson = 1;
		function json(hljs) {
		  const ATTRIBUTE = {
		    className: 'attr',
		    begin: /"(\\.|[^\\"\r\n])*"(?=\s*:)/,
		    relevance: 1.01
		  };
		  const PUNCTUATION = {
		    match: /[{}[\],:]/,
		    className: "punctuation",
		    relevance: 0
		  };
		  const LITERALS = [
		    "true",
		    "false",
		    "null"
		  ];
		  // NOTE: normally we would rely on `keywords` for this but using a mode here allows us
		  // - to use the very tight `illegal: \S` rule later to flag any other character
		  // - as illegal indicating that despite looking like JSON we do not truly have
		  // - JSON and thus improve false-positively greatly since JSON will try and claim
		  // - all sorts of JSON looking stuff
		  const LITERALS_MODE = {
		    scope: "literal",
		    beginKeywords: LITERALS.join(" "),
		  };

		  return {
		    name: 'JSON',
		    keywords:{
		      literal: LITERALS,
		    },
		    contains: [
		      ATTRIBUTE,
		      PUNCTUATION,
		      hljs.QUOTE_STRING_MODE,
		      LITERALS_MODE,
		      hljs.C_NUMBER_MODE,
		      hljs.C_LINE_COMMENT_MODE,
		      hljs.C_BLOCK_COMMENT_MODE
		    ],
		    illegal: '\\S'
		  };
		}

		json_1 = json;
		return json_1;
	}

	var kotlin_1;
	var hasRequiredKotlin;

	function requireKotlin () {
		if (hasRequiredKotlin) return kotlin_1;
		hasRequiredKotlin = 1;
		// https://docs.oracle.com/javase/specs/jls/se15/html/jls-3.html#jls-3.10
		var decimalDigits = '[0-9](_*[0-9])*';
		var frac = `\\.(${decimalDigits})`;
		var hexDigits = '[0-9a-fA-F](_*[0-9a-fA-F])*';
		var NUMERIC = {
		  className: 'number',
		  variants: [
		    // DecimalFloatingPointLiteral
		    // including ExponentPart
		    { begin: `(\\b(${decimalDigits})((${frac})|\\.)?|(${frac}))` +
		      `[eE][+-]?(${decimalDigits})[fFdD]?\\b` },
		    // excluding ExponentPart
		    { begin: `\\b(${decimalDigits})((${frac})[fFdD]?\\b|\\.([fFdD]\\b)?)` },
		    { begin: `(${frac})[fFdD]?\\b` },
		    { begin: `\\b(${decimalDigits})[fFdD]\\b` },

		    // HexadecimalFloatingPointLiteral
		    { begin: `\\b0[xX]((${hexDigits})\\.?|(${hexDigits})?\\.(${hexDigits}))` +
		      `[pP][+-]?(${decimalDigits})[fFdD]?\\b` },

		    // DecimalIntegerLiteral
		    { begin: '\\b(0|[1-9](_*[0-9])*)[lL]?\\b' },

		    // HexIntegerLiteral
		    { begin: `\\b0[xX](${hexDigits})[lL]?\\b` },

		    // OctalIntegerLiteral
		    { begin: '\\b0(_*[0-7])*[lL]?\\b' },

		    // BinaryIntegerLiteral
		    { begin: '\\b0[bB][01](_*[01])*[lL]?\\b' },
		  ],
		  relevance: 0
		};

		/*
		 Language: Kotlin
		 Description: Kotlin is an OSS statically typed programming language that targets the JVM, Android, JavaScript and Native.
		 Author: Sergey Mashkov <cy6erGn0m@gmail.com>
		 Website: https://kotlinlang.org
		 Category: common
		 */

		function kotlin(hljs) {
		  const KEYWORDS = {
		    keyword:
		      'abstract as val var vararg get set class object open private protected public noinline '
		      + 'crossinline dynamic final enum if else do while for when throw try catch finally '
		      + 'import package is in fun override companion reified inline lateinit init '
		      + 'interface annotation data sealed internal infix operator out by constructor super '
		      + 'tailrec where const inner suspend typealias external expect actual',
		    built_in:
		      'Byte Short Char Int Long Boolean Float Double Void Unit Nothing',
		    literal:
		      'true false null'
		  };
		  const KEYWORDS_WITH_LABEL = {
		    className: 'keyword',
		    begin: /\b(break|continue|return|this)\b/,
		    starts: { contains: [
		      {
		        className: 'symbol',
		        begin: /@\w+/
		      }
		    ] }
		  };
		  const LABEL = {
		    className: 'symbol',
		    begin: hljs.UNDERSCORE_IDENT_RE + '@'
		  };

		  // for string templates
		  const SUBST = {
		    className: 'subst',
		    begin: /\$\{/,
		    end: /\}/,
		    contains: [ hljs.C_NUMBER_MODE ]
		  };
		  const VARIABLE = {
		    className: 'variable',
		    begin: '\\$' + hljs.UNDERSCORE_IDENT_RE
		  };
		  const STRING = {
		    className: 'string',
		    variants: [
		      {
		        begin: '"""',
		        end: '"""(?=[^"])',
		        contains: [
		          VARIABLE,
		          SUBST
		        ]
		      },
		      // Can't use built-in modes easily, as we want to use STRING in the meta
		      // context as 'meta-string' and there's no syntax to remove explicitly set
		      // classNames in built-in modes.
		      {
		        begin: '\'',
		        end: '\'',
		        illegal: /\n/,
		        contains: [ hljs.BACKSLASH_ESCAPE ]
		      },
		      {
		        begin: '"',
		        end: '"',
		        illegal: /\n/,
		        contains: [
		          hljs.BACKSLASH_ESCAPE,
		          VARIABLE,
		          SUBST
		        ]
		      }
		    ]
		  };
		  SUBST.contains.push(STRING);

		  const ANNOTATION_USE_SITE = {
		    className: 'meta',
		    begin: '@(?:file|property|field|get|set|receiver|param|setparam|delegate)\\s*:(?:\\s*' + hljs.UNDERSCORE_IDENT_RE + ')?'
		  };
		  const ANNOTATION = {
		    className: 'meta',
		    begin: '@' + hljs.UNDERSCORE_IDENT_RE,
		    contains: [
		      {
		        begin: /\(/,
		        end: /\)/,
		        contains: [
		          hljs.inherit(STRING, { className: 'string' }),
		          "self"
		        ]
		      }
		    ]
		  };

		  // https://kotlinlang.org/docs/reference/whatsnew11.html#underscores-in-numeric-literals
		  // According to the doc above, the number mode of kotlin is the same as java 8,
		  // so the code below is copied from java.js
		  const KOTLIN_NUMBER_MODE = NUMERIC;
		  const KOTLIN_NESTED_COMMENT = hljs.COMMENT(
		    '/\\*', '\\*/',
		    { contains: [ hljs.C_BLOCK_COMMENT_MODE ] }
		  );
		  const KOTLIN_PAREN_TYPE = { variants: [
		    {
		      className: 'type',
		      begin: hljs.UNDERSCORE_IDENT_RE
		    },
		    {
		      begin: /\(/,
		      end: /\)/,
		      contains: [] // defined later
		    }
		  ] };
		  const KOTLIN_PAREN_TYPE2 = KOTLIN_PAREN_TYPE;
		  KOTLIN_PAREN_TYPE2.variants[1].contains = [ KOTLIN_PAREN_TYPE ];
		  KOTLIN_PAREN_TYPE.variants[1].contains = [ KOTLIN_PAREN_TYPE2 ];

		  return {
		    name: 'Kotlin',
		    aliases: [
		      'kt',
		      'kts'
		    ],
		    keywords: KEYWORDS,
		    contains: [
		      hljs.COMMENT(
		        '/\\*\\*',
		        '\\*/',
		        {
		          relevance: 0,
		          contains: [
		            {
		              className: 'doctag',
		              begin: '@[A-Za-z]+'
		            }
		          ]
		        }
		      ),
		      hljs.C_LINE_COMMENT_MODE,
		      KOTLIN_NESTED_COMMENT,
		      KEYWORDS_WITH_LABEL,
		      LABEL,
		      ANNOTATION_USE_SITE,
		      ANNOTATION,
		      {
		        className: 'function',
		        beginKeywords: 'fun',
		        end: '[(]|$',
		        returnBegin: true,
		        excludeEnd: true,
		        keywords: KEYWORDS,
		        relevance: 5,
		        contains: [
		          {
		            begin: hljs.UNDERSCORE_IDENT_RE + '\\s*\\(',
		            returnBegin: true,
		            relevance: 0,
		            contains: [ hljs.UNDERSCORE_TITLE_MODE ]
		          },
		          {
		            className: 'type',
		            begin: /</,
		            end: />/,
		            keywords: 'reified',
		            relevance: 0
		          },
		          {
		            className: 'params',
		            begin: /\(/,
		            end: /\)/,
		            endsParent: true,
		            keywords: KEYWORDS,
		            relevance: 0,
		            contains: [
		              {
		                begin: /:/,
		                end: /[=,\/]/,
		                endsWithParent: true,
		                contains: [
		                  KOTLIN_PAREN_TYPE,
		                  hljs.C_LINE_COMMENT_MODE,
		                  KOTLIN_NESTED_COMMENT
		                ],
		                relevance: 0
		              },
		              hljs.C_LINE_COMMENT_MODE,
		              KOTLIN_NESTED_COMMENT,
		              ANNOTATION_USE_SITE,
		              ANNOTATION,
		              STRING,
		              hljs.C_NUMBER_MODE
		            ]
		          },
		          KOTLIN_NESTED_COMMENT
		        ]
		      },
		      {
		        begin: [
		          /class|interface|trait/,
		          /\s+/,
		          hljs.UNDERSCORE_IDENT_RE
		        ],
		        beginScope: {
		          3: "title.class"
		        },
		        keywords: 'class interface trait',
		        end: /[:\{(]|$/,
		        excludeEnd: true,
		        illegal: 'extends implements',
		        contains: [
		          { beginKeywords: 'public protected internal private constructor' },
		          hljs.UNDERSCORE_TITLE_MODE,
		          {
		            className: 'type',
		            begin: /</,
		            end: />/,
		            excludeBegin: true,
		            excludeEnd: true,
		            relevance: 0
		          },
		          {
		            className: 'type',
		            begin: /[,:]\s*/,
		            end: /[<\(,){\s]|$/,
		            excludeBegin: true,
		            returnEnd: true
		          },
		          ANNOTATION_USE_SITE,
		          ANNOTATION
		        ]
		      },
		      STRING,
		      {
		        className: 'meta',
		        begin: "^#!/usr/bin/env",
		        end: '$',
		        illegal: '\n'
		      },
		      KOTLIN_NUMBER_MODE
		    ]
		  };
		}

		kotlin_1 = kotlin;
		return kotlin_1;
	}

	var less_1;
	var hasRequiredLess;

	function requireLess () {
		if (hasRequiredLess) return less_1;
		hasRequiredLess = 1;
		const MODES = (hljs) => {
		  return {
		    IMPORTANT: {
		      scope: 'meta',
		      begin: '!important'
		    },
		    BLOCK_COMMENT: hljs.C_BLOCK_COMMENT_MODE,
		    HEXCOLOR: {
		      scope: 'number',
		      begin: /#(([0-9a-fA-F]{3,4})|(([0-9a-fA-F]{2}){3,4}))\b/
		    },
		    FUNCTION_DISPATCH: {
		      className: "built_in",
		      begin: /[\w-]+(?=\()/
		    },
		    ATTRIBUTE_SELECTOR_MODE: {
		      scope: 'selector-attr',
		      begin: /\[/,
		      end: /\]/,
		      illegal: '$',
		      contains: [
		        hljs.APOS_STRING_MODE,
		        hljs.QUOTE_STRING_MODE
		      ]
		    },
		    CSS_NUMBER_MODE: {
		      scope: 'number',
		      begin: hljs.NUMBER_RE + '(' +
		        '%|em|ex|ch|rem' +
		        '|vw|vh|vmin|vmax' +
		        '|cm|mm|in|pt|pc|px' +
		        '|deg|grad|rad|turn' +
		        '|s|ms' +
		        '|Hz|kHz' +
		        '|dpi|dpcm|dppx' +
		        ')?',
		      relevance: 0
		    },
		    CSS_VARIABLE: {
		      className: "attr",
		      begin: /--[A-Za-z][A-Za-z0-9_-]*/
		    }
		  };
		};

		const TAGS = [
		  'a',
		  'abbr',
		  'address',
		  'article',
		  'aside',
		  'audio',
		  'b',
		  'blockquote',
		  'body',
		  'button',
		  'canvas',
		  'caption',
		  'cite',
		  'code',
		  'dd',
		  'del',
		  'details',
		  'dfn',
		  'div',
		  'dl',
		  'dt',
		  'em',
		  'fieldset',
		  'figcaption',
		  'figure',
		  'footer',
		  'form',
		  'h1',
		  'h2',
		  'h3',
		  'h4',
		  'h5',
		  'h6',
		  'header',
		  'hgroup',
		  'html',
		  'i',
		  'iframe',
		  'img',
		  'input',
		  'ins',
		  'kbd',
		  'label',
		  'legend',
		  'li',
		  'main',
		  'mark',
		  'menu',
		  'nav',
		  'object',
		  'ol',
		  'p',
		  'q',
		  'quote',
		  'samp',
		  'section',
		  'span',
		  'strong',
		  'summary',
		  'sup',
		  'table',
		  'tbody',
		  'td',
		  'textarea',
		  'tfoot',
		  'th',
		  'thead',
		  'time',
		  'tr',
		  'ul',
		  'var',
		  'video'
		];

		const MEDIA_FEATURES = [
		  'any-hover',
		  'any-pointer',
		  'aspect-ratio',
		  'color',
		  'color-gamut',
		  'color-index',
		  'device-aspect-ratio',
		  'device-height',
		  'device-width',
		  'display-mode',
		  'forced-colors',
		  'grid',
		  'height',
		  'hover',
		  'inverted-colors',
		  'monochrome',
		  'orientation',
		  'overflow-block',
		  'overflow-inline',
		  'pointer',
		  'prefers-color-scheme',
		  'prefers-contrast',
		  'prefers-reduced-motion',
		  'prefers-reduced-transparency',
		  'resolution',
		  'scan',
		  'scripting',
		  'update',
		  'width',
		  // TODO: find a better solution?
		  'min-width',
		  'max-width',
		  'min-height',
		  'max-height'
		];

		// https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes
		const PSEUDO_CLASSES = [
		  'active',
		  'any-link',
		  'blank',
		  'checked',
		  'current',
		  'default',
		  'defined',
		  'dir', // dir()
		  'disabled',
		  'drop',
		  'empty',
		  'enabled',
		  'first',
		  'first-child',
		  'first-of-type',
		  'fullscreen',
		  'future',
		  'focus',
		  'focus-visible',
		  'focus-within',
		  'has', // has()
		  'host', // host or host()
		  'host-context', // host-context()
		  'hover',
		  'indeterminate',
		  'in-range',
		  'invalid',
		  'is', // is()
		  'lang', // lang()
		  'last-child',
		  'last-of-type',
		  'left',
		  'link',
		  'local-link',
		  'not', // not()
		  'nth-child', // nth-child()
		  'nth-col', // nth-col()
		  'nth-last-child', // nth-last-child()
		  'nth-last-col', // nth-last-col()
		  'nth-last-of-type', //nth-last-of-type()
		  'nth-of-type', //nth-of-type()
		  'only-child',
		  'only-of-type',
		  'optional',
		  'out-of-range',
		  'past',
		  'placeholder-shown',
		  'read-only',
		  'read-write',
		  'required',
		  'right',
		  'root',
		  'scope',
		  'target',
		  'target-within',
		  'user-invalid',
		  'valid',
		  'visited',
		  'where' // where()
		];

		// https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-elements
		const PSEUDO_ELEMENTS = [
		  'after',
		  'backdrop',
		  'before',
		  'cue',
		  'cue-region',
		  'first-letter',
		  'first-line',
		  'grammar-error',
		  'marker',
		  'part',
		  'placeholder',
		  'selection',
		  'slotted',
		  'spelling-error'
		];

		const ATTRIBUTES = [
		  'align-content',
		  'align-items',
		  'align-self',
		  'all',
		  'animation',
		  'animation-delay',
		  'animation-direction',
		  'animation-duration',
		  'animation-fill-mode',
		  'animation-iteration-count',
		  'animation-name',
		  'animation-play-state',
		  'animation-timing-function',
		  'backface-visibility',
		  'background',
		  'background-attachment',
		  'background-blend-mode',
		  'background-clip',
		  'background-color',
		  'background-image',
		  'background-origin',
		  'background-position',
		  'background-repeat',
		  'background-size',
		  'block-size',
		  'border',
		  'border-block',
		  'border-block-color',
		  'border-block-end',
		  'border-block-end-color',
		  'border-block-end-style',
		  'border-block-end-width',
		  'border-block-start',
		  'border-block-start-color',
		  'border-block-start-style',
		  'border-block-start-width',
		  'border-block-style',
		  'border-block-width',
		  'border-bottom',
		  'border-bottom-color',
		  'border-bottom-left-radius',
		  'border-bottom-right-radius',
		  'border-bottom-style',
		  'border-bottom-width',
		  'border-collapse',
		  'border-color',
		  'border-image',
		  'border-image-outset',
		  'border-image-repeat',
		  'border-image-slice',
		  'border-image-source',
		  'border-image-width',
		  'border-inline',
		  'border-inline-color',
		  'border-inline-end',
		  'border-inline-end-color',
		  'border-inline-end-style',
		  'border-inline-end-width',
		  'border-inline-start',
		  'border-inline-start-color',
		  'border-inline-start-style',
		  'border-inline-start-width',
		  'border-inline-style',
		  'border-inline-width',
		  'border-left',
		  'border-left-color',
		  'border-left-style',
		  'border-left-width',
		  'border-radius',
		  'border-right',
		  'border-right-color',
		  'border-right-style',
		  'border-right-width',
		  'border-spacing',
		  'border-style',
		  'border-top',
		  'border-top-color',
		  'border-top-left-radius',
		  'border-top-right-radius',
		  'border-top-style',
		  'border-top-width',
		  'border-width',
		  'bottom',
		  'box-decoration-break',
		  'box-shadow',
		  'box-sizing',
		  'break-after',
		  'break-before',
		  'break-inside',
		  'caption-side',
		  'caret-color',
		  'clear',
		  'clip',
		  'clip-path',
		  'clip-rule',
		  'color',
		  'column-count',
		  'column-fill',
		  'column-gap',
		  'column-rule',
		  'column-rule-color',
		  'column-rule-style',
		  'column-rule-width',
		  'column-span',
		  'column-width',
		  'columns',
		  'contain',
		  'content',
		  'content-visibility',
		  'counter-increment',
		  'counter-reset',
		  'cue',
		  'cue-after',
		  'cue-before',
		  'cursor',
		  'direction',
		  'display',
		  'empty-cells',
		  'filter',
		  'flex',
		  'flex-basis',
		  'flex-direction',
		  'flex-flow',
		  'flex-grow',
		  'flex-shrink',
		  'flex-wrap',
		  'float',
		  'flow',
		  'font',
		  'font-display',
		  'font-family',
		  'font-feature-settings',
		  'font-kerning',
		  'font-language-override',
		  'font-size',
		  'font-size-adjust',
		  'font-smoothing',
		  'font-stretch',
		  'font-style',
		  'font-synthesis',
		  'font-variant',
		  'font-variant-caps',
		  'font-variant-east-asian',
		  'font-variant-ligatures',
		  'font-variant-numeric',
		  'font-variant-position',
		  'font-variation-settings',
		  'font-weight',
		  'gap',
		  'glyph-orientation-vertical',
		  'grid',
		  'grid-area',
		  'grid-auto-columns',
		  'grid-auto-flow',
		  'grid-auto-rows',
		  'grid-column',
		  'grid-column-end',
		  'grid-column-start',
		  'grid-gap',
		  'grid-row',
		  'grid-row-end',
		  'grid-row-start',
		  'grid-template',
		  'grid-template-areas',
		  'grid-template-columns',
		  'grid-template-rows',
		  'hanging-punctuation',
		  'height',
		  'hyphens',
		  'icon',
		  'image-orientation',
		  'image-rendering',
		  'image-resolution',
		  'ime-mode',
		  'inline-size',
		  'isolation',
		  'justify-content',
		  'left',
		  'letter-spacing',
		  'line-break',
		  'line-height',
		  'list-style',
		  'list-style-image',
		  'list-style-position',
		  'list-style-type',
		  'margin',
		  'margin-block',
		  'margin-block-end',
		  'margin-block-start',
		  'margin-bottom',
		  'margin-inline',
		  'margin-inline-end',
		  'margin-inline-start',
		  'margin-left',
		  'margin-right',
		  'margin-top',
		  'marks',
		  'mask',
		  'mask-border',
		  'mask-border-mode',
		  'mask-border-outset',
		  'mask-border-repeat',
		  'mask-border-slice',
		  'mask-border-source',
		  'mask-border-width',
		  'mask-clip',
		  'mask-composite',
		  'mask-image',
		  'mask-mode',
		  'mask-origin',
		  'mask-position',
		  'mask-repeat',
		  'mask-size',
		  'mask-type',
		  'max-block-size',
		  'max-height',
		  'max-inline-size',
		  'max-width',
		  'min-block-size',
		  'min-height',
		  'min-inline-size',
		  'min-width',
		  'mix-blend-mode',
		  'nav-down',
		  'nav-index',
		  'nav-left',
		  'nav-right',
		  'nav-up',
		  'none',
		  'normal',
		  'object-fit',
		  'object-position',
		  'opacity',
		  'order',
		  'orphans',
		  'outline',
		  'outline-color',
		  'outline-offset',
		  'outline-style',
		  'outline-width',
		  'overflow',
		  'overflow-wrap',
		  'overflow-x',
		  'overflow-y',
		  'padding',
		  'padding-block',
		  'padding-block-end',
		  'padding-block-start',
		  'padding-bottom',
		  'padding-inline',
		  'padding-inline-end',
		  'padding-inline-start',
		  'padding-left',
		  'padding-right',
		  'padding-top',
		  'page-break-after',
		  'page-break-before',
		  'page-break-inside',
		  'pause',
		  'pause-after',
		  'pause-before',
		  'perspective',
		  'perspective-origin',
		  'pointer-events',
		  'position',
		  'quotes',
		  'resize',
		  'rest',
		  'rest-after',
		  'rest-before',
		  'right',
		  'row-gap',
		  'scroll-margin',
		  'scroll-margin-block',
		  'scroll-margin-block-end',
		  'scroll-margin-block-start',
		  'scroll-margin-bottom',
		  'scroll-margin-inline',
		  'scroll-margin-inline-end',
		  'scroll-margin-inline-start',
		  'scroll-margin-left',
		  'scroll-margin-right',
		  'scroll-margin-top',
		  'scroll-padding',
		  'scroll-padding-block',
		  'scroll-padding-block-end',
		  'scroll-padding-block-start',
		  'scroll-padding-bottom',
		  'scroll-padding-inline',
		  'scroll-padding-inline-end',
		  'scroll-padding-inline-start',
		  'scroll-padding-left',
		  'scroll-padding-right',
		  'scroll-padding-top',
		  'scroll-snap-align',
		  'scroll-snap-stop',
		  'scroll-snap-type',
		  'scrollbar-color',
		  'scrollbar-gutter',
		  'scrollbar-width',
		  'shape-image-threshold',
		  'shape-margin',
		  'shape-outside',
		  'speak',
		  'speak-as',
		  'src', // @font-face
		  'tab-size',
		  'table-layout',
		  'text-align',
		  'text-align-all',
		  'text-align-last',
		  'text-combine-upright',
		  'text-decoration',
		  'text-decoration-color',
		  'text-decoration-line',
		  'text-decoration-style',
		  'text-emphasis',
		  'text-emphasis-color',
		  'text-emphasis-position',
		  'text-emphasis-style',
		  'text-indent',
		  'text-justify',
		  'text-orientation',
		  'text-overflow',
		  'text-rendering',
		  'text-shadow',
		  'text-transform',
		  'text-underline-position',
		  'top',
		  'transform',
		  'transform-box',
		  'transform-origin',
		  'transform-style',
		  'transition',
		  'transition-delay',
		  'transition-duration',
		  'transition-property',
		  'transition-timing-function',
		  'unicode-bidi',
		  'vertical-align',
		  'visibility',
		  'voice-balance',
		  'voice-duration',
		  'voice-family',
		  'voice-pitch',
		  'voice-range',
		  'voice-rate',
		  'voice-stress',
		  'voice-volume',
		  'white-space',
		  'widows',
		  'width',
		  'will-change',
		  'word-break',
		  'word-spacing',
		  'word-wrap',
		  'writing-mode',
		  'z-index'
		  // reverse makes sure longer attributes `font-weight` are matched fully
		  // instead of getting false positives on say `font`
		].reverse();

		// some grammars use them all as a single group
		const PSEUDO_SELECTORS = PSEUDO_CLASSES.concat(PSEUDO_ELEMENTS);

		/*
		Language: Less
		Description: It's CSS, with just a little more.
		Author:   Max Mikhailov <seven.phases.max@gmail.com>
		Website: http://lesscss.org
		Category: common, css, web
		*/

		/** @type LanguageFn */
		function less(hljs) {
		  const modes = MODES(hljs);
		  const PSEUDO_SELECTORS$1 = PSEUDO_SELECTORS;

		  const AT_MODIFIERS = "and or not only";
		  const IDENT_RE = '[\\w-]+'; // yes, Less identifiers may begin with a digit
		  const INTERP_IDENT_RE = '(' + IDENT_RE + '|@\\{' + IDENT_RE + '\\})';

		  /* Generic Modes */

		  const RULES = []; const VALUE_MODES = []; // forward def. for recursive modes

		  const STRING_MODE = function(c) {
		    return {
		    // Less strings are not multiline (also include '~' for more consistent coloring of "escaped" strings)
		      className: 'string',
		      begin: '~?' + c + '.*?' + c
		    };
		  };

		  const IDENT_MODE = function(name, begin, relevance) {
		    return {
		      className: name,
		      begin: begin,
		      relevance: relevance
		    };
		  };

		  const AT_KEYWORDS = {
		    $pattern: /[a-z-]+/,
		    keyword: AT_MODIFIERS,
		    attribute: MEDIA_FEATURES.join(" ")
		  };

		  const PARENS_MODE = {
		    // used only to properly balance nested parens inside mixin call, def. arg list
		    begin: '\\(',
		    end: '\\)',
		    contains: VALUE_MODES,
		    keywords: AT_KEYWORDS,
		    relevance: 0
		  };

		  // generic Less highlighter (used almost everywhere except selectors):
		  VALUE_MODES.push(
		    hljs.C_LINE_COMMENT_MODE,
		    hljs.C_BLOCK_COMMENT_MODE,
		    STRING_MODE("'"),
		    STRING_MODE('"'),
		    modes.CSS_NUMBER_MODE, // fixme: it does not include dot for numbers like .5em :(
		    {
		      begin: '(url|data-uri)\\(',
		      starts: {
		        className: 'string',
		        end: '[\\)\\n]',
		        excludeEnd: true
		      }
		    },
		    modes.HEXCOLOR,
		    PARENS_MODE,
		    IDENT_MODE('variable', '@@?' + IDENT_RE, 10),
		    IDENT_MODE('variable', '@\\{' + IDENT_RE + '\\}'),
		    IDENT_MODE('built_in', '~?`[^`]*?`'), // inline javascript (or whatever host language) *multiline* string
		    { // @media features (it’s here to not duplicate things in AT_RULE_MODE with extra PARENS_MODE overriding):
		      className: 'attribute',
		      begin: IDENT_RE + '\\s*:',
		      end: ':',
		      returnBegin: true,
		      excludeEnd: true
		    },
		    modes.IMPORTANT,
		    { beginKeywords: 'and not' },
		    modes.FUNCTION_DISPATCH
		  );

		  const VALUE_WITH_RULESETS = VALUE_MODES.concat({
		    begin: /\{/,
		    end: /\}/,
		    contains: RULES
		  });

		  const MIXIN_GUARD_MODE = {
		    beginKeywords: 'when',
		    endsWithParent: true,
		    contains: [ { beginKeywords: 'and not' } ].concat(VALUE_MODES) // using this form to override VALUE’s 'function' match
		  };

		  /* Rule-Level Modes */

		  const RULE_MODE = {
		    begin: INTERP_IDENT_RE + '\\s*:',
		    returnBegin: true,
		    end: /[;}]/,
		    relevance: 0,
		    contains: [
		      { begin: /-(webkit|moz|ms|o)-/ },
		      modes.CSS_VARIABLE,
		      {
		        className: 'attribute',
		        begin: '\\b(' + ATTRIBUTES.join('|') + ')\\b',
		        end: /(?=:)/,
		        starts: {
		          endsWithParent: true,
		          illegal: '[<=$]',
		          relevance: 0,
		          contains: VALUE_MODES
		        }
		      }
		    ]
		  };

		  const AT_RULE_MODE = {
		    className: 'keyword',
		    begin: '@(import|media|charset|font-face|(-[a-z]+-)?keyframes|supports|document|namespace|page|viewport|host)\\b',
		    starts: {
		      end: '[;{}]',
		      keywords: AT_KEYWORDS,
		      returnEnd: true,
		      contains: VALUE_MODES,
		      relevance: 0
		    }
		  };

		  // variable definitions and calls
		  const VAR_RULE_MODE = {
		    className: 'variable',
		    variants: [
		      // using more strict pattern for higher relevance to increase chances of Less detection.
		      // this is *the only* Less specific statement used in most of the sources, so...
		      // (we’ll still often loose to the css-parser unless there's '//' comment,
		      // simply because 1 variable just can't beat 99 properties :)
		      {
		        begin: '@' + IDENT_RE + '\\s*:',
		        relevance: 15
		      },
		      { begin: '@' + IDENT_RE }
		    ],
		    starts: {
		      end: '[;}]',
		      returnEnd: true,
		      contains: VALUE_WITH_RULESETS
		    }
		  };

		  const SELECTOR_MODE = {
		    // first parse unambiguous selectors (i.e. those not starting with tag)
		    // then fall into the scary lookahead-discriminator variant.
		    // this mode also handles mixin definitions and calls
		    variants: [
		      {
		        begin: '[\\.#:&\\[>]',
		        end: '[;{}]' // mixin calls end with ';'
		      },
		      {
		        begin: INTERP_IDENT_RE,
		        end: /\{/
		      }
		    ],
		    returnBegin: true,
		    returnEnd: true,
		    illegal: '[<=\'$"]',
		    relevance: 0,
		    contains: [
		      hljs.C_LINE_COMMENT_MODE,
		      hljs.C_BLOCK_COMMENT_MODE,
		      MIXIN_GUARD_MODE,
		      IDENT_MODE('keyword', 'all\\b'),
		      IDENT_MODE('variable', '@\\{' + IDENT_RE + '\\}'), // otherwise it’s identified as tag
		      
		      {
		        begin: '\\b(' + TAGS.join('|') + ')\\b',
		        className: 'selector-tag'
		      },
		      modes.CSS_NUMBER_MODE,
		      IDENT_MODE('selector-tag', INTERP_IDENT_RE, 0),
		      IDENT_MODE('selector-id', '#' + INTERP_IDENT_RE),
		      IDENT_MODE('selector-class', '\\.' + INTERP_IDENT_RE, 0),
		      IDENT_MODE('selector-tag', '&', 0),
		      modes.ATTRIBUTE_SELECTOR_MODE,
		      {
		        className: 'selector-pseudo',
		        begin: ':(' + PSEUDO_CLASSES.join('|') + ')'
		      },
		      {
		        className: 'selector-pseudo',
		        begin: ':(:)?(' + PSEUDO_ELEMENTS.join('|') + ')'
		      },
		      {
		        begin: /\(/,
		        end: /\)/,
		        relevance: 0,
		        contains: VALUE_WITH_RULESETS
		      }, // argument list of parametric mixins
		      { begin: '!important' }, // eat !important after mixin call or it will be colored as tag
		      modes.FUNCTION_DISPATCH
		    ]
		  };

		  const PSEUDO_SELECTOR_MODE = {
		    begin: IDENT_RE + ':(:)?' + `(${PSEUDO_SELECTORS$1.join('|')})`,
		    returnBegin: true,
		    contains: [ SELECTOR_MODE ]
		  };

		  RULES.push(
		    hljs.C_LINE_COMMENT_MODE,
		    hljs.C_BLOCK_COMMENT_MODE,
		    AT_RULE_MODE,
		    VAR_RULE_MODE,
		    PSEUDO_SELECTOR_MODE,
		    RULE_MODE,
		    SELECTOR_MODE,
		    MIXIN_GUARD_MODE,
		    modes.FUNCTION_DISPATCH
		  );

		  return {
		    name: 'Less',
		    case_insensitive: true,
		    illegal: '[=>\'/<($"]',
		    contains: RULES
		  };
		}

		less_1 = less;
		return less_1;
	}

	/*
	Language: Lua
	Description: Lua is a powerful, efficient, lightweight, embeddable scripting language.
	Author: Andrew Fedorov <dmmdrs@mail.ru>
	Category: common, scripting
	Website: https://www.lua.org
	*/

	var lua_1;
	var hasRequiredLua;

	function requireLua () {
		if (hasRequiredLua) return lua_1;
		hasRequiredLua = 1;
		function lua(hljs) {
		  const OPENING_LONG_BRACKET = '\\[=*\\[';
		  const CLOSING_LONG_BRACKET = '\\]=*\\]';
		  const LONG_BRACKETS = {
		    begin: OPENING_LONG_BRACKET,
		    end: CLOSING_LONG_BRACKET,
		    contains: [ 'self' ]
		  };
		  const COMMENTS = [
		    hljs.COMMENT('--(?!' + OPENING_LONG_BRACKET + ')', '$'),
		    hljs.COMMENT(
		      '--' + OPENING_LONG_BRACKET,
		      CLOSING_LONG_BRACKET,
		      {
		        contains: [ LONG_BRACKETS ],
		        relevance: 10
		      }
		    )
		  ];
		  return {
		    name: 'Lua',
		    keywords: {
		      $pattern: hljs.UNDERSCORE_IDENT_RE,
		      literal: "true false nil",
		      keyword: "and break do else elseif end for goto if in local not or repeat return then until while",
		      built_in:
		        // Metatags and globals:
		        '_G _ENV _VERSION __index __newindex __mode __call __metatable __tostring __len '
		        + '__gc __add __sub __mul __div __mod __pow __concat __unm __eq __lt __le assert '
		        // Standard methods and properties:
		        + 'collectgarbage dofile error getfenv getmetatable ipairs load loadfile loadstring '
		        + 'module next pairs pcall print rawequal rawget rawset require select setfenv '
		        + 'setmetatable tonumber tostring type unpack xpcall arg self '
		        // Library methods and properties (one line per library):
		        + 'coroutine resume yield status wrap create running debug getupvalue '
		        + 'debug sethook getmetatable gethook setmetatable setlocal traceback setfenv getinfo setupvalue getlocal getregistry getfenv '
		        + 'io lines write close flush open output type read stderr stdin input stdout popen tmpfile '
		        + 'math log max acos huge ldexp pi cos tanh pow deg tan cosh sinh random randomseed frexp ceil floor rad abs sqrt modf asin min mod fmod log10 atan2 exp sin atan '
		        + 'os exit setlocale date getenv difftime remove time clock tmpname rename execute package preload loadlib loaded loaders cpath config path seeall '
		        + 'string sub upper len gfind rep find match char dump gmatch reverse byte format gsub lower '
		        + 'table setn insert getn foreachi maxn foreach concat sort remove'
		    },
		    contains: COMMENTS.concat([
		      {
		        className: 'function',
		        beginKeywords: 'function',
		        end: '\\)',
		        contains: [
		          hljs.inherit(hljs.TITLE_MODE, { begin: '([_a-zA-Z]\\w*\\.)*([_a-zA-Z]\\w*:)?[_a-zA-Z]\\w*' }),
		          {
		            className: 'params',
		            begin: '\\(',
		            endsWithParent: true,
		            contains: COMMENTS
		          }
		        ].concat(COMMENTS)
		      },
		      hljs.C_NUMBER_MODE,
		      hljs.APOS_STRING_MODE,
		      hljs.QUOTE_STRING_MODE,
		      {
		        className: 'string',
		        begin: OPENING_LONG_BRACKET,
		        end: CLOSING_LONG_BRACKET,
		        contains: [ LONG_BRACKETS ],
		        relevance: 5
		      }
		    ])
		  };
		}

		lua_1 = lua;
		return lua_1;
	}

	/*
	Language: Makefile
	Author: Ivan Sagalaev <maniac@softwaremaniacs.org>
	Contributors: Joël Porquet <joel@porquet.org>
	Website: https://www.gnu.org/software/make/manual/html_node/Introduction.html
	Category: common
	*/

	var makefile_1;
	var hasRequiredMakefile;

	function requireMakefile () {
		if (hasRequiredMakefile) return makefile_1;
		hasRequiredMakefile = 1;
		function makefile(hljs) {
		  /* Variables: simple (eg $(var)) and special (eg $@) */
		  const VARIABLE = {
		    className: 'variable',
		    variants: [
		      {
		        begin: '\\$\\(' + hljs.UNDERSCORE_IDENT_RE + '\\)',
		        contains: [ hljs.BACKSLASH_ESCAPE ]
		      },
		      { begin: /\$[@%<?\^\+\*]/ }
		    ]
		  };
		  /* Quoted string with variables inside */
		  const QUOTE_STRING = {
		    className: 'string',
		    begin: /"/,
		    end: /"/,
		    contains: [
		      hljs.BACKSLASH_ESCAPE,
		      VARIABLE
		    ]
		  };
		  /* Function: $(func arg,...) */
		  const FUNC = {
		    className: 'variable',
		    begin: /\$\([\w-]+\s/,
		    end: /\)/,
		    keywords: { built_in:
		        'subst patsubst strip findstring filter filter-out sort '
		        + 'word wordlist firstword lastword dir notdir suffix basename '
		        + 'addsuffix addprefix join wildcard realpath abspath error warning '
		        + 'shell origin flavor foreach if or and call eval file value' },
		    contains: [ VARIABLE ]
		  };
		  /* Variable assignment */
		  const ASSIGNMENT = { begin: '^' + hljs.UNDERSCORE_IDENT_RE + '\\s*(?=[:+?]?=)' };
		  /* Meta targets (.PHONY) */
		  const META = {
		    className: 'meta',
		    begin: /^\.PHONY:/,
		    end: /$/,
		    keywords: {
		      $pattern: /[\.\w]+/,
		      keyword: '.PHONY'
		    }
		  };
		  /* Targets */
		  const TARGET = {
		    className: 'section',
		    begin: /^[^\s]+:/,
		    end: /$/,
		    contains: [ VARIABLE ]
		  };
		  return {
		    name: 'Makefile',
		    aliases: [
		      'mk',
		      'mak',
		      'make',
		    ],
		    keywords: {
		      $pattern: /[\w-]+/,
		      keyword: 'define endef undefine ifdef ifndef ifeq ifneq else endif '
		      + 'include -include sinclude override export unexport private vpath'
		    },
		    contains: [
		      hljs.HASH_COMMENT_MODE,
		      VARIABLE,
		      QUOTE_STRING,
		      FUNC,
		      ASSIGNMENT,
		      META,
		      TARGET
		    ]
		  };
		}

		makefile_1 = makefile;
		return makefile_1;
	}

	/*
	Language: Perl
	Author: Peter Leonov <gojpeg@yandex.ru>
	Website: https://www.perl.org
	Category: common
	*/

	var perl_1;
	var hasRequiredPerl;

	function requirePerl () {
		if (hasRequiredPerl) return perl_1;
		hasRequiredPerl = 1;
		/** @type LanguageFn */
		function perl(hljs) {
		  const regex = hljs.regex;
		  const KEYWORDS = [
		    'abs',
		    'accept',
		    'alarm',
		    'and',
		    'atan2',
		    'bind',
		    'binmode',
		    'bless',
		    'break',
		    'caller',
		    'chdir',
		    'chmod',
		    'chomp',
		    'chop',
		    'chown',
		    'chr',
		    'chroot',
		    'close',
		    'closedir',
		    'connect',
		    'continue',
		    'cos',
		    'crypt',
		    'dbmclose',
		    'dbmopen',
		    'defined',
		    'delete',
		    'die',
		    'do',
		    'dump',
		    'each',
		    'else',
		    'elsif',
		    'endgrent',
		    'endhostent',
		    'endnetent',
		    'endprotoent',
		    'endpwent',
		    'endservent',
		    'eof',
		    'eval',
		    'exec',
		    'exists',
		    'exit',
		    'exp',
		    'fcntl',
		    'fileno',
		    'flock',
		    'for',
		    'foreach',
		    'fork',
		    'format',
		    'formline',
		    'getc',
		    'getgrent',
		    'getgrgid',
		    'getgrnam',
		    'gethostbyaddr',
		    'gethostbyname',
		    'gethostent',
		    'getlogin',
		    'getnetbyaddr',
		    'getnetbyname',
		    'getnetent',
		    'getpeername',
		    'getpgrp',
		    'getpriority',
		    'getprotobyname',
		    'getprotobynumber',
		    'getprotoent',
		    'getpwent',
		    'getpwnam',
		    'getpwuid',
		    'getservbyname',
		    'getservbyport',
		    'getservent',
		    'getsockname',
		    'getsockopt',
		    'given',
		    'glob',
		    'gmtime',
		    'goto',
		    'grep',
		    'gt',
		    'hex',
		    'if',
		    'index',
		    'int',
		    'ioctl',
		    'join',
		    'keys',
		    'kill',
		    'last',
		    'lc',
		    'lcfirst',
		    'length',
		    'link',
		    'listen',
		    'local',
		    'localtime',
		    'log',
		    'lstat',
		    'lt',
		    'ma',
		    'map',
		    'mkdir',
		    'msgctl',
		    'msgget',
		    'msgrcv',
		    'msgsnd',
		    'my',
		    'ne',
		    'next',
		    'no',
		    'not',
		    'oct',
		    'open',
		    'opendir',
		    'or',
		    'ord',
		    'our',
		    'pack',
		    'package',
		    'pipe',
		    'pop',
		    'pos',
		    'print',
		    'printf',
		    'prototype',
		    'push',
		    'q|0',
		    'qq',
		    'quotemeta',
		    'qw',
		    'qx',
		    'rand',
		    'read',
		    'readdir',
		    'readline',
		    'readlink',
		    'readpipe',
		    'recv',
		    'redo',
		    'ref',
		    'rename',
		    'require',
		    'reset',
		    'return',
		    'reverse',
		    'rewinddir',
		    'rindex',
		    'rmdir',
		    'say',
		    'scalar',
		    'seek',
		    'seekdir',
		    'select',
		    'semctl',
		    'semget',
		    'semop',
		    'send',
		    'setgrent',
		    'sethostent',
		    'setnetent',
		    'setpgrp',
		    'setpriority',
		    'setprotoent',
		    'setpwent',
		    'setservent',
		    'setsockopt',
		    'shift',
		    'shmctl',
		    'shmget',
		    'shmread',
		    'shmwrite',
		    'shutdown',
		    'sin',
		    'sleep',
		    'socket',
		    'socketpair',
		    'sort',
		    'splice',
		    'split',
		    'sprintf',
		    'sqrt',
		    'srand',
		    'stat',
		    'state',
		    'study',
		    'sub',
		    'substr',
		    'symlink',
		    'syscall',
		    'sysopen',
		    'sysread',
		    'sysseek',
		    'system',
		    'syswrite',
		    'tell',
		    'telldir',
		    'tie',
		    'tied',
		    'time',
		    'times',
		    'tr',
		    'truncate',
		    'uc',
		    'ucfirst',
		    'umask',
		    'undef',
		    'unless',
		    'unlink',
		    'unpack',
		    'unshift',
		    'untie',
		    'until',
		    'use',
		    'utime',
		    'values',
		    'vec',
		    'wait',
		    'waitpid',
		    'wantarray',
		    'warn',
		    'when',
		    'while',
		    'write',
		    'x|0',
		    'xor',
		    'y|0'
		  ];

		  // https://perldoc.perl.org/perlre#Modifiers
		  const REGEX_MODIFIERS = /[dualxmsipngr]{0,12}/; // aa and xx are valid, making max length 12
		  const PERL_KEYWORDS = {
		    $pattern: /[\w.]+/,
		    keyword: KEYWORDS.join(" ")
		  };
		  const SUBST = {
		    className: 'subst',
		    begin: '[$@]\\{',
		    end: '\\}',
		    keywords: PERL_KEYWORDS
		  };
		  const METHOD = {
		    begin: /->\{/,
		    end: /\}/
		    // contains defined later
		  };
		  const VAR = { variants: [
		    { begin: /\$\d/ },
		    { begin: regex.concat(
		      /[$%@](\^\w\b|#\w+(::\w+)*|\{\w+\}|\w+(::\w*)*)/,
		      // negative look-ahead tries to avoid matching patterns that are not
		      // Perl at all like $ident$, @ident@, etc.
		      `(?![A-Za-z])(?![@$%])`
		    ) },
		    {
		      begin: /[$%@][^\s\w{]/,
		      relevance: 0
		    }
		  ] };
		  const STRING_CONTAINS = [
		    hljs.BACKSLASH_ESCAPE,
		    SUBST,
		    VAR
		  ];
		  const REGEX_DELIMS = [
		    /!/,
		    /\//,
		    /\|/,
		    /\?/,
		    /'/,
		    /"/, // valid but infrequent and weird
		    /#/ // valid but infrequent and weird
		  ];
		  /**
		   * @param {string|RegExp} prefix
		   * @param {string|RegExp} open
		   * @param {string|RegExp} close
		   */
		  const PAIRED_DOUBLE_RE = (prefix, open, close = '\\1') => {
		    const middle = (close === '\\1')
		      ? close
		      : regex.concat(close, open);
		    return regex.concat(
		      regex.concat("(?:", prefix, ")"),
		      open,
		      /(?:\\.|[^\\\/])*?/,
		      middle,
		      /(?:\\.|[^\\\/])*?/,
		      close,
		      REGEX_MODIFIERS
		    );
		  };
		  /**
		   * @param {string|RegExp} prefix
		   * @param {string|RegExp} open
		   * @param {string|RegExp} close
		   */
		  const PAIRED_RE = (prefix, open, close) => {
		    return regex.concat(
		      regex.concat("(?:", prefix, ")"),
		      open,
		      /(?:\\.|[^\\\/])*?/,
		      close,
		      REGEX_MODIFIERS
		    );
		  };
		  const PERL_DEFAULT_CONTAINS = [
		    VAR,
		    hljs.HASH_COMMENT_MODE,
		    hljs.COMMENT(
		      /^=\w/,
		      /=cut/,
		      { endsWithParent: true }
		    ),
		    METHOD,
		    {
		      className: 'string',
		      contains: STRING_CONTAINS,
		      variants: [
		        {
		          begin: 'q[qwxr]?\\s*\\(',
		          end: '\\)',
		          relevance: 5
		        },
		        {
		          begin: 'q[qwxr]?\\s*\\[',
		          end: '\\]',
		          relevance: 5
		        },
		        {
		          begin: 'q[qwxr]?\\s*\\{',
		          end: '\\}',
		          relevance: 5
		        },
		        {
		          begin: 'q[qwxr]?\\s*\\|',
		          end: '\\|',
		          relevance: 5
		        },
		        {
		          begin: 'q[qwxr]?\\s*<',
		          end: '>',
		          relevance: 5
		        },
		        {
		          begin: 'qw\\s+q',
		          end: 'q',
		          relevance: 5
		        },
		        {
		          begin: '\'',
		          end: '\'',
		          contains: [ hljs.BACKSLASH_ESCAPE ]
		        },
		        {
		          begin: '"',
		          end: '"'
		        },
		        {
		          begin: '`',
		          end: '`',
		          contains: [ hljs.BACKSLASH_ESCAPE ]
		        },
		        {
		          begin: /\{\w+\}/,
		          relevance: 0
		        },
		        {
		          begin: '-?\\w+\\s*=>',
		          relevance: 0
		        }
		      ]
		    },
		    {
		      className: 'number',
		      begin: '(\\b0[0-7_]+)|(\\b0x[0-9a-fA-F_]+)|(\\b[1-9][0-9_]*(\\.[0-9_]+)?)|[0_]\\b',
		      relevance: 0
		    },
		    { // regexp container
		      begin: '(\\/\\/|' + hljs.RE_STARTERS_RE + '|\\b(split|return|print|reverse|grep)\\b)\\s*',
		      keywords: 'split return print reverse grep',
		      relevance: 0,
		      contains: [
		        hljs.HASH_COMMENT_MODE,
		        {
		          className: 'regexp',
		          variants: [
		            // allow matching common delimiters
		            { begin: PAIRED_DOUBLE_RE("s|tr|y", regex.either(...REGEX_DELIMS, { capture: true })) },
		            // and then paired delmis
		            { begin: PAIRED_DOUBLE_RE("s|tr|y", "\\(", "\\)") },
		            { begin: PAIRED_DOUBLE_RE("s|tr|y", "\\[", "\\]") },
		            { begin: PAIRED_DOUBLE_RE("s|tr|y", "\\{", "\\}") }
		          ],
		          relevance: 2
		        },
		        {
		          className: 'regexp',
		          variants: [
		            {
		              // could be a comment in many languages so do not count
		              // as relevant
		              begin: /(m|qr)\/\//,
		              relevance: 0
		            },
		            // prefix is optional with /regex/
		            { begin: PAIRED_RE("(?:m|qr)?", /\//, /\//) },
		            // allow matching common delimiters
		            { begin: PAIRED_RE("m|qr", regex.either(...REGEX_DELIMS, { capture: true }), /\1/) },
		            // allow common paired delmins
		            { begin: PAIRED_RE("m|qr", /\(/, /\)/) },
		            { begin: PAIRED_RE("m|qr", /\[/, /\]/) },
		            { begin: PAIRED_RE("m|qr", /\{/, /\}/) }
		          ]
		        }
		      ]
		    },
		    {
		      className: 'function',
		      beginKeywords: 'sub',
		      end: '(\\s*\\(.*?\\))?[;{]',
		      excludeEnd: true,
		      relevance: 5,
		      contains: [ hljs.TITLE_MODE ]
		    },
		    {
		      begin: '-\\w\\b',
		      relevance: 0
		    },
		    {
		      begin: "^__DATA__$",
		      end: "^__END__$",
		      subLanguage: 'mojolicious',
		      contains: [
		        {
		          begin: "^@@.*",
		          end: "$",
		          className: "comment"
		        }
		      ]
		    }
		  ];
		  SUBST.contains = PERL_DEFAULT_CONTAINS;
		  METHOD.contains = PERL_DEFAULT_CONTAINS;

		  return {
		    name: 'Perl',
		    aliases: [
		      'pl',
		      'pm'
		    ],
		    keywords: PERL_KEYWORDS,
		    contains: PERL_DEFAULT_CONTAINS
		  };
		}

		perl_1 = perl;
		return perl_1;
	}

	/*
	Language: Objective-C
	Author: Valerii Hiora <valerii.hiora@gmail.com>
	Contributors: Angel G. Olloqui <angelgarcia.mail@gmail.com>, Matt Diephouse <matt@diephouse.com>, Andrew Farmer <ahfarmer@gmail.com>, Minh Nguyễn <mxn@1ec5.org>
	Website: https://developer.apple.com/documentation/objectivec
	Category: common
	*/

	var objectivec_1;
	var hasRequiredObjectivec;

	function requireObjectivec () {
		if (hasRequiredObjectivec) return objectivec_1;
		hasRequiredObjectivec = 1;
		function objectivec(hljs) {
		  const API_CLASS = {
		    className: 'built_in',
		    begin: '\\b(AV|CA|CF|CG|CI|CL|CM|CN|CT|MK|MP|MTK|MTL|NS|SCN|SK|UI|WK|XC)\\w+'
		  };
		  const IDENTIFIER_RE = /[a-zA-Z@][a-zA-Z0-9_]*/;
		  const TYPES = [
		    "int",
		    "float",
		    "char",
		    "unsigned",
		    "signed",
		    "short",
		    "long",
		    "double",
		    "wchar_t",
		    "unichar",
		    "void",
		    "bool",
		    "BOOL",
		    "id|0",
		    "_Bool"
		  ];
		  const KWS = [
		    "while",
		    "export",
		    "sizeof",
		    "typedef",
		    "const",
		    "struct",
		    "for",
		    "union",
		    "volatile",
		    "static",
		    "mutable",
		    "if",
		    "do",
		    "return",
		    "goto",
		    "enum",
		    "else",
		    "break",
		    "extern",
		    "asm",
		    "case",
		    "default",
		    "register",
		    "explicit",
		    "typename",
		    "switch",
		    "continue",
		    "inline",
		    "readonly",
		    "assign",
		    "readwrite",
		    "self",
		    "@synchronized",
		    "id",
		    "typeof",
		    "nonatomic",
		    "IBOutlet",
		    "IBAction",
		    "strong",
		    "weak",
		    "copy",
		    "in",
		    "out",
		    "inout",
		    "bycopy",
		    "byref",
		    "oneway",
		    "__strong",
		    "__weak",
		    "__block",
		    "__autoreleasing",
		    "@private",
		    "@protected",
		    "@public",
		    "@try",
		    "@property",
		    "@end",
		    "@throw",
		    "@catch",
		    "@finally",
		    "@autoreleasepool",
		    "@synthesize",
		    "@dynamic",
		    "@selector",
		    "@optional",
		    "@required",
		    "@encode",
		    "@package",
		    "@import",
		    "@defs",
		    "@compatibility_alias",
		    "__bridge",
		    "__bridge_transfer",
		    "__bridge_retained",
		    "__bridge_retain",
		    "__covariant",
		    "__contravariant",
		    "__kindof",
		    "_Nonnull",
		    "_Nullable",
		    "_Null_unspecified",
		    "__FUNCTION__",
		    "__PRETTY_FUNCTION__",
		    "__attribute__",
		    "getter",
		    "setter",
		    "retain",
		    "unsafe_unretained",
		    "nonnull",
		    "nullable",
		    "null_unspecified",
		    "null_resettable",
		    "class",
		    "instancetype",
		    "NS_DESIGNATED_INITIALIZER",
		    "NS_UNAVAILABLE",
		    "NS_REQUIRES_SUPER",
		    "NS_RETURNS_INNER_POINTER",
		    "NS_INLINE",
		    "NS_AVAILABLE",
		    "NS_DEPRECATED",
		    "NS_ENUM",
		    "NS_OPTIONS",
		    "NS_SWIFT_UNAVAILABLE",
		    "NS_ASSUME_NONNULL_BEGIN",
		    "NS_ASSUME_NONNULL_END",
		    "NS_REFINED_FOR_SWIFT",
		    "NS_SWIFT_NAME",
		    "NS_SWIFT_NOTHROW",
		    "NS_DURING",
		    "NS_HANDLER",
		    "NS_ENDHANDLER",
		    "NS_VALUERETURN",
		    "NS_VOIDRETURN"
		  ];
		  const LITERALS = [
		    "false",
		    "true",
		    "FALSE",
		    "TRUE",
		    "nil",
		    "YES",
		    "NO",
		    "NULL"
		  ];
		  const BUILT_INS = [
		    "dispatch_once_t",
		    "dispatch_queue_t",
		    "dispatch_sync",
		    "dispatch_async",
		    "dispatch_once"
		  ];
		  const KEYWORDS = {
		    "variable.language": [
		      "this",
		      "super"
		    ],
		    $pattern: IDENTIFIER_RE,
		    keyword: KWS,
		    literal: LITERALS,
		    built_in: BUILT_INS,
		    type: TYPES
		  };
		  const CLASS_KEYWORDS = {
		    $pattern: IDENTIFIER_RE,
		    keyword: [
		      "@interface",
		      "@class",
		      "@protocol",
		      "@implementation"
		    ]
		  };
		  return {
		    name: 'Objective-C',
		    aliases: [
		      'mm',
		      'objc',
		      'obj-c',
		      'obj-c++',
		      'objective-c++'
		    ],
		    keywords: KEYWORDS,
		    illegal: '</',
		    contains: [
		      API_CLASS,
		      hljs.C_LINE_COMMENT_MODE,
		      hljs.C_BLOCK_COMMENT_MODE,
		      hljs.C_NUMBER_MODE,
		      hljs.QUOTE_STRING_MODE,
		      hljs.APOS_STRING_MODE,
		      {
		        className: 'string',
		        variants: [
		          {
		            begin: '@"',
		            end: '"',
		            illegal: '\\n',
		            contains: [ hljs.BACKSLASH_ESCAPE ]
		          }
		        ]
		      },
		      {
		        className: 'meta',
		        begin: /#\s*[a-z]+\b/,
		        end: /$/,
		        keywords: { keyword:
		            'if else elif endif define undef warning error line '
		            + 'pragma ifdef ifndef include' },
		        contains: [
		          {
		            begin: /\\\n/,
		            relevance: 0
		          },
		          hljs.inherit(hljs.QUOTE_STRING_MODE, { className: 'string' }),
		          {
		            className: 'string',
		            begin: /<.*?>/,
		            end: /$/,
		            illegal: '\\n'
		          },
		          hljs.C_LINE_COMMENT_MODE,
		          hljs.C_BLOCK_COMMENT_MODE
		        ]
		      },
		      {
		        className: 'class',
		        begin: '(' + CLASS_KEYWORDS.keyword.join('|') + ')\\b',
		        end: /(\{|$)/,
		        excludeEnd: true,
		        keywords: CLASS_KEYWORDS,
		        contains: [ hljs.UNDERSCORE_TITLE_MODE ]
		      },
		      {
		        begin: '\\.' + hljs.UNDERSCORE_IDENT_RE,
		        relevance: 0
		      }
		    ]
		  };
		}

		objectivec_1 = objectivec;
		return objectivec_1;
	}

	/*
	Language: PHP
	Author: Victor Karamzin <Victor.Karamzin@enterra-inc.com>
	Contributors: Evgeny Stepanischev <imbolk@gmail.com>, Ivan Sagalaev <maniac@softwaremaniacs.org>
	Website: https://www.php.net
	Category: common
	*/

	var php_1;
	var hasRequiredPhp;

	function requirePhp () {
		if (hasRequiredPhp) return php_1;
		hasRequiredPhp = 1;
		/**
		 * @param {HLJSApi} hljs
		 * @returns {LanguageDetail}
		 * */
		function php(hljs) {
		  const regex = hljs.regex;
		  // negative look-ahead tries to avoid matching patterns that are not
		  // Perl at all like $ident$, @ident@, etc.
		  const NOT_PERL_ETC = /(?![A-Za-z0-9])(?![$])/;
		  const IDENT_RE = regex.concat(
		    /[a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*/,
		    NOT_PERL_ETC);
		  // Will not detect camelCase classes
		  const PASCAL_CASE_CLASS_NAME_RE = regex.concat(
		    /(\\?[A-Z][a-z0-9_\x7f-\xff]+|\\?[A-Z]+(?=[A-Z][a-z0-9_\x7f-\xff])){1,}/,
		    NOT_PERL_ETC);
		  const VARIABLE = {
		    scope: 'variable',
		    match: '\\$+' + IDENT_RE,
		  };
		  const PREPROCESSOR = {
		    scope: 'meta',
		    variants: [
		      { begin: /<\?php/, relevance: 10 }, // boost for obvious PHP
		      { begin: /<\?=/ },
		      // less relevant per PSR-1 which says not to use short-tags
		      { begin: /<\?/, relevance: 0.1 },
		      { begin: /\?>/ } // end php tag
		    ]
		  };
		  const SUBST = {
		    scope: 'subst',
		    variants: [
		      { begin: /\$\w+/ },
		      {
		        begin: /\{\$/,
		        end: /\}/
		      }
		    ]
		  };
		  const SINGLE_QUOTED = hljs.inherit(hljs.APOS_STRING_MODE, { illegal: null, });
		  const DOUBLE_QUOTED = hljs.inherit(hljs.QUOTE_STRING_MODE, {
		    illegal: null,
		    contains: hljs.QUOTE_STRING_MODE.contains.concat(SUBST),
		  });
		  const HEREDOC = hljs.END_SAME_AS_BEGIN({
		    begin: /<<<[ \t]*(\w+)\n/,
		    end: /[ \t]*(\w+)\b/,
		    contains: hljs.QUOTE_STRING_MODE.contains.concat(SUBST),
		  });
		  // list of valid whitespaces because non-breaking space might be part of a IDENT_RE
		  const WHITESPACE = '[ \t\n]';
		  const STRING = {
		    scope: 'string',
		    variants: [
		      DOUBLE_QUOTED,
		      SINGLE_QUOTED,
		      HEREDOC
		    ]
		  };
		  const NUMBER = {
		    scope: 'number',
		    variants: [
		      { begin: `\\b0[bB][01]+(?:_[01]+)*\\b` }, // Binary w/ underscore support
		      { begin: `\\b0[oO][0-7]+(?:_[0-7]+)*\\b` }, // Octals w/ underscore support
		      { begin: `\\b0[xX][\\da-fA-F]+(?:_[\\da-fA-F]+)*\\b` }, // Hex w/ underscore support
		      // Decimals w/ underscore support, with optional fragments and scientific exponent (e) suffix.
		      { begin: `(?:\\b\\d+(?:_\\d+)*(\\.(?:\\d+(?:_\\d+)*))?|\\B\\.\\d+)(?:[eE][+-]?\\d+)?` }
		    ],
		    relevance: 0
		  };
		  const LITERALS = [
		    "false",
		    "null",
		    "true"
		  ];
		  const KWS = [
		    // Magic constants:
		    // <https://www.php.net/manual/en/language.constants.predefined.php>
		    "__CLASS__",
		    "__DIR__",
		    "__FILE__",
		    "__FUNCTION__",
		    "__COMPILER_HALT_OFFSET__",
		    "__LINE__",
		    "__METHOD__",
		    "__NAMESPACE__",
		    "__TRAIT__",
		    // Function that look like language construct or language construct that look like function:
		    // List of keywords that may not require parenthesis
		    "die",
		    "echo",
		    "exit",
		    "include",
		    "include_once",
		    "print",
		    "require",
		    "require_once",
		    // These are not language construct (function) but operate on the currently-executing function and can access the current symbol table
		    // 'compact extract func_get_arg func_get_args func_num_args get_called_class get_parent_class ' +
		    // Other keywords:
		    // <https://www.php.net/manual/en/reserved.php>
		    // <https://www.php.net/manual/en/language.types.type-juggling.php>
		    "array",
		    "abstract",
		    "and",
		    "as",
		    "binary",
		    "bool",
		    "boolean",
		    "break",
		    "callable",
		    "case",
		    "catch",
		    "class",
		    "clone",
		    "const",
		    "continue",
		    "declare",
		    "default",
		    "do",
		    "double",
		    "else",
		    "elseif",
		    "empty",
		    "enddeclare",
		    "endfor",
		    "endforeach",
		    "endif",
		    "endswitch",
		    "endwhile",
		    "enum",
		    "eval",
		    "extends",
		    "final",
		    "finally",
		    "float",
		    "for",
		    "foreach",
		    "from",
		    "global",
		    "goto",
		    "if",
		    "implements",
		    "instanceof",
		    "insteadof",
		    "int",
		    "integer",
		    "interface",
		    "isset",
		    "iterable",
		    "list",
		    "match|0",
		    "mixed",
		    "new",
		    "never",
		    "object",
		    "or",
		    "private",
		    "protected",
		    "public",
		    "readonly",
		    "real",
		    "return",
		    "string",
		    "switch",
		    "throw",
		    "trait",
		    "try",
		    "unset",
		    "use",
		    "var",
		    "void",
		    "while",
		    "xor",
		    "yield"
		  ];

		  const BUILT_INS = [
		    // Standard PHP library:
		    // <https://www.php.net/manual/en/book.spl.php>
		    "Error|0",
		    "AppendIterator",
		    "ArgumentCountError",
		    "ArithmeticError",
		    "ArrayIterator",
		    "ArrayObject",
		    "AssertionError",
		    "BadFunctionCallException",
		    "BadMethodCallException",
		    "CachingIterator",
		    "CallbackFilterIterator",
		    "CompileError",
		    "Countable",
		    "DirectoryIterator",
		    "DivisionByZeroError",
		    "DomainException",
		    "EmptyIterator",
		    "ErrorException",
		    "Exception",
		    "FilesystemIterator",
		    "FilterIterator",
		    "GlobIterator",
		    "InfiniteIterator",
		    "InvalidArgumentException",
		    "IteratorIterator",
		    "LengthException",
		    "LimitIterator",
		    "LogicException",
		    "MultipleIterator",
		    "NoRewindIterator",
		    "OutOfBoundsException",
		    "OutOfRangeException",
		    "OuterIterator",
		    "OverflowException",
		    "ParentIterator",
		    "ParseError",
		    "RangeException",
		    "RecursiveArrayIterator",
		    "RecursiveCachingIterator",
		    "RecursiveCallbackFilterIterator",
		    "RecursiveDirectoryIterator",
		    "RecursiveFilterIterator",
		    "RecursiveIterator",
		    "RecursiveIteratorIterator",
		    "RecursiveRegexIterator",
		    "RecursiveTreeIterator",
		    "RegexIterator",
		    "RuntimeException",
		    "SeekableIterator",
		    "SplDoublyLinkedList",
		    "SplFileInfo",
		    "SplFileObject",
		    "SplFixedArray",
		    "SplHeap",
		    "SplMaxHeap",
		    "SplMinHeap",
		    "SplObjectStorage",
		    "SplObserver",
		    "SplPriorityQueue",
		    "SplQueue",
		    "SplStack",
		    "SplSubject",
		    "SplTempFileObject",
		    "TypeError",
		    "UnderflowException",
		    "UnexpectedValueException",
		    "UnhandledMatchError",
		    // Reserved interfaces:
		    // <https://www.php.net/manual/en/reserved.interfaces.php>
		    "ArrayAccess",
		    "BackedEnum",
		    "Closure",
		    "Fiber",
		    "Generator",
		    "Iterator",
		    "IteratorAggregate",
		    "Serializable",
		    "Stringable",
		    "Throwable",
		    "Traversable",
		    "UnitEnum",
		    "WeakReference",
		    "WeakMap",
		    // Reserved classes:
		    // <https://www.php.net/manual/en/reserved.classes.php>
		    "Directory",
		    "__PHP_Incomplete_Class",
		    "parent",
		    "php_user_filter",
		    "self",
		    "static",
		    "stdClass"
		  ];

		  /** Dual-case keywords
		   *
		   * ["then","FILE"] =>
		   *     ["then", "THEN", "FILE", "file"]
		   *
		   * @param {string[]} items */
		  const dualCase = (items) => {
		    /** @type string[] */
		    const result = [];
		    items.forEach(item => {
		      result.push(item);
		      if (item.toLowerCase() === item) {
		        result.push(item.toUpperCase());
		      } else {
		        result.push(item.toLowerCase());
		      }
		    });
		    return result;
		  };

		  const KEYWORDS = {
		    keyword: KWS,
		    literal: dualCase(LITERALS),
		    built_in: BUILT_INS,
		  };

		  /**
		   * @param {string[]} items */
		  const normalizeKeywords = (items) => {
		    return items.map(item => {
		      return item.replace(/\|\d+$/, "");
		    });
		  };

		  const CONSTRUCTOR_CALL = { variants: [
		    {
		      match: [
		        /new/,
		        regex.concat(WHITESPACE, "+"),
		        // to prevent built ins from being confused as the class constructor call
		        regex.concat("(?!", normalizeKeywords(BUILT_INS).join("\\b|"), "\\b)"),
		        PASCAL_CASE_CLASS_NAME_RE,
		      ],
		      scope: {
		        1: "keyword",
		        4: "title.class",
		      },
		    }
		  ] };

		  const CONSTANT_REFERENCE = regex.concat(IDENT_RE, "\\b(?!\\()");

		  const LEFT_AND_RIGHT_SIDE_OF_DOUBLE_COLON = { variants: [
		    {
		      match: [
		        regex.concat(
		          /::/,
		          regex.lookahead(/(?!class\b)/)
		        ),
		        CONSTANT_REFERENCE,
		      ],
		      scope: { 2: "variable.constant", },
		    },
		    {
		      match: [
		        /::/,
		        /class/,
		      ],
		      scope: { 2: "variable.language", },
		    },
		    {
		      match: [
		        PASCAL_CASE_CLASS_NAME_RE,
		        regex.concat(
		          /::/,
		          regex.lookahead(/(?!class\b)/)
		        ),
		        CONSTANT_REFERENCE,
		      ],
		      scope: {
		        1: "title.class",
		        3: "variable.constant",
		      },
		    },
		    {
		      match: [
		        PASCAL_CASE_CLASS_NAME_RE,
		        regex.concat(
		          "::",
		          regex.lookahead(/(?!class\b)/)
		        ),
		      ],
		      scope: { 1: "title.class", },
		    },
		    {
		      match: [
		        PASCAL_CASE_CLASS_NAME_RE,
		        /::/,
		        /class/,
		      ],
		      scope: {
		        1: "title.class",
		        3: "variable.language",
		      },
		    }
		  ] };

		  const NAMED_ARGUMENT = {
		    scope: 'attr',
		    match: regex.concat(IDENT_RE, regex.lookahead(':'), regex.lookahead(/(?!::)/)),
		  };
		  const PARAMS_MODE = {
		    relevance: 0,
		    begin: /\(/,
		    end: /\)/,
		    keywords: KEYWORDS,
		    contains: [
		      NAMED_ARGUMENT,
		      VARIABLE,
		      LEFT_AND_RIGHT_SIDE_OF_DOUBLE_COLON,
		      hljs.C_BLOCK_COMMENT_MODE,
		      STRING,
		      NUMBER,
		      CONSTRUCTOR_CALL,
		    ],
		  };
		  const FUNCTION_INVOKE = {
		    relevance: 0,
		    match: [
		      /\b/,
		      // to prevent keywords from being confused as the function title
		      regex.concat("(?!fn\\b|function\\b|", normalizeKeywords(KWS).join("\\b|"), "|", normalizeKeywords(BUILT_INS).join("\\b|"), "\\b)"),
		      IDENT_RE,
		      regex.concat(WHITESPACE, "*"),
		      regex.lookahead(/(?=\()/)
		    ],
		    scope: { 3: "title.function.invoke", },
		    contains: [ PARAMS_MODE ]
		  };
		  PARAMS_MODE.contains.push(FUNCTION_INVOKE);

		  const ATTRIBUTE_CONTAINS = [
		    NAMED_ARGUMENT,
		    LEFT_AND_RIGHT_SIDE_OF_DOUBLE_COLON,
		    hljs.C_BLOCK_COMMENT_MODE,
		    STRING,
		    NUMBER,
		    CONSTRUCTOR_CALL,
		  ];

		  const ATTRIBUTES = {
		    begin: regex.concat(/#\[\s*/, PASCAL_CASE_CLASS_NAME_RE),
		    beginScope: "meta",
		    end: /]/,
		    endScope: "meta",
		    keywords: {
		      literal: LITERALS,
		      keyword: [
		        'new',
		        'array',
		      ]
		    },
		    contains: [
		      {
		        begin: /\[/,
		        end: /]/,
		        keywords: {
		          literal: LITERALS,
		          keyword: [
		            'new',
		            'array',
		          ]
		        },
		        contains: [
		          'self',
		          ...ATTRIBUTE_CONTAINS,
		        ]
		      },
		      ...ATTRIBUTE_CONTAINS,
		      {
		        scope: 'meta',
		        match: PASCAL_CASE_CLASS_NAME_RE
		      }
		    ]
		  };

		  return {
		    case_insensitive: false,
		    keywords: KEYWORDS,
		    contains: [
		      ATTRIBUTES,
		      hljs.HASH_COMMENT_MODE,
		      hljs.COMMENT('//', '$'),
		      hljs.COMMENT(
		        '/\\*',
		        '\\*/',
		        { contains: [
		          {
		            scope: 'doctag',
		            match: '@[A-Za-z]+'
		          }
		        ] }
		      ),
		      {
		        match: /__halt_compiler\(\);/,
		        keywords: '__halt_compiler',
		        starts: {
		          scope: "comment",
		          end: hljs.MATCH_NOTHING_RE,
		          contains: [
		            {
		              match: /\?>/,
		              scope: "meta",
		              endsParent: true
		            }
		          ]
		        }
		      },
		      PREPROCESSOR,
		      {
		        scope: 'variable.language',
		        match: /\$this\b/
		      },
		      VARIABLE,
		      FUNCTION_INVOKE,
		      LEFT_AND_RIGHT_SIDE_OF_DOUBLE_COLON,
		      {
		        match: [
		          /const/,
		          /\s/,
		          IDENT_RE,
		        ],
		        scope: {
		          1: "keyword",
		          3: "variable.constant",
		        },
		      },
		      CONSTRUCTOR_CALL,
		      {
		        scope: 'function',
		        relevance: 0,
		        beginKeywords: 'fn function',
		        end: /[;{]/,
		        excludeEnd: true,
		        illegal: '[$%\\[]',
		        contains: [
		          { beginKeywords: 'use', },
		          hljs.UNDERSCORE_TITLE_MODE,
		          {
		            begin: '=>', // No markup, just a relevance booster
		            endsParent: true
		          },
		          {
		            scope: 'params',
		            begin: '\\(',
		            end: '\\)',
		            excludeBegin: true,
		            excludeEnd: true,
		            keywords: KEYWORDS,
		            contains: [
		              'self',
		              VARIABLE,
		              LEFT_AND_RIGHT_SIDE_OF_DOUBLE_COLON,
		              hljs.C_BLOCK_COMMENT_MODE,
		              STRING,
		              NUMBER
		            ]
		          },
		        ]
		      },
		      {
		        scope: 'class',
		        variants: [
		          {
		            beginKeywords: "enum",
		            illegal: /[($"]/
		          },
		          {
		            beginKeywords: "class interface trait",
		            illegal: /[:($"]/
		          }
		        ],
		        relevance: 0,
		        end: /\{/,
		        excludeEnd: true,
		        contains: [
		          { beginKeywords: 'extends implements' },
		          hljs.UNDERSCORE_TITLE_MODE
		        ]
		      },
		      // both use and namespace still use "old style" rules (vs multi-match)
		      // because the namespace name can include `\` and we still want each
		      // element to be treated as its own *individual* title
		      {
		        beginKeywords: 'namespace',
		        relevance: 0,
		        end: ';',
		        illegal: /[.']/,
		        contains: [ hljs.inherit(hljs.UNDERSCORE_TITLE_MODE, { scope: "title.class" }) ]
		      },
		      {
		        beginKeywords: 'use',
		        relevance: 0,
		        end: ';',
		        contains: [
		          // TODO: title.function vs title.class
		          {
		            match: /\b(as|const|function)\b/,
		            scope: "keyword"
		          },
		          // TODO: could be title.class or title.function
		          hljs.UNDERSCORE_TITLE_MODE
		        ]
		      },
		      STRING,
		      NUMBER,
		    ]
		  };
		}

		php_1 = php;
		return php_1;
	}

	/*
	Language: PHP Template
	Requires: xml.js, php.js
	Author: Josh Goebel <hello@joshgoebel.com>
	Website: https://www.php.net
	Category: common
	*/

	var phpTemplate_1;
	var hasRequiredPhpTemplate;

	function requirePhpTemplate () {
		if (hasRequiredPhpTemplate) return phpTemplate_1;
		hasRequiredPhpTemplate = 1;
		function phpTemplate(hljs) {
		  return {
		    name: "PHP template",
		    subLanguage: 'xml',
		    contains: [
		      {
		        begin: /<\?(php|=)?/,
		        end: /\?>/,
		        subLanguage: 'php',
		        contains: [
		          // We don't want the php closing tag ?> to close the PHP block when
		          // inside any of the following blocks:
		          {
		            begin: '/\\*',
		            end: '\\*/',
		            skip: true
		          },
		          {
		            begin: 'b"',
		            end: '"',
		            skip: true
		          },
		          {
		            begin: 'b\'',
		            end: '\'',
		            skip: true
		          },
		          hljs.inherit(hljs.APOS_STRING_MODE, {
		            illegal: null,
		            className: null,
		            contains: null,
		            skip: true
		          }),
		          hljs.inherit(hljs.QUOTE_STRING_MODE, {
		            illegal: null,
		            className: null,
		            contains: null,
		            skip: true
		          })
		        ]
		      }
		    ]
		  };
		}

		phpTemplate_1 = phpTemplate;
		return phpTemplate_1;
	}

	/*
	Language: Plain text
	Author: Egor Rogov (e.rogov@postgrespro.ru)
	Description: Plain text without any highlighting.
	Category: common
	*/

	var plaintext_1;
	var hasRequiredPlaintext;

	function requirePlaintext () {
		if (hasRequiredPlaintext) return plaintext_1;
		hasRequiredPlaintext = 1;
		function plaintext(hljs) {
		  return {
		    name: 'Plain text',
		    aliases: [
		      'text',
		      'txt'
		    ],
		    disableAutodetect: true
		  };
		}

		plaintext_1 = plaintext;
		return plaintext_1;
	}

	/*
	Language: Python
	Description: Python is an interpreted, object-oriented, high-level programming language with dynamic semantics.
	Website: https://www.python.org
	Category: common
	*/

	var python_1;
	var hasRequiredPython;

	function requirePython () {
		if (hasRequiredPython) return python_1;
		hasRequiredPython = 1;
		function python(hljs) {
		  const regex = hljs.regex;
		  const IDENT_RE = /[\p{XID_Start}_]\p{XID_Continue}*/u;
		  const RESERVED_WORDS = [
		    'and',
		    'as',
		    'assert',
		    'async',
		    'await',
		    'break',
		    'case',
		    'class',
		    'continue',
		    'def',
		    'del',
		    'elif',
		    'else',
		    'except',
		    'finally',
		    'for',
		    'from',
		    'global',
		    'if',
		    'import',
		    'in',
		    'is',
		    'lambda',
		    'match',
		    'nonlocal|10',
		    'not',
		    'or',
		    'pass',
		    'raise',
		    'return',
		    'try',
		    'while',
		    'with',
		    'yield'
		  ];

		  const BUILT_INS = [
		    '__import__',
		    'abs',
		    'all',
		    'any',
		    'ascii',
		    'bin',
		    'bool',
		    'breakpoint',
		    'bytearray',
		    'bytes',
		    'callable',
		    'chr',
		    'classmethod',
		    'compile',
		    'complex',
		    'delattr',
		    'dict',
		    'dir',
		    'divmod',
		    'enumerate',
		    'eval',
		    'exec',
		    'filter',
		    'float',
		    'format',
		    'frozenset',
		    'getattr',
		    'globals',
		    'hasattr',
		    'hash',
		    'help',
		    'hex',
		    'id',
		    'input',
		    'int',
		    'isinstance',
		    'issubclass',
		    'iter',
		    'len',
		    'list',
		    'locals',
		    'map',
		    'max',
		    'memoryview',
		    'min',
		    'next',
		    'object',
		    'oct',
		    'open',
		    'ord',
		    'pow',
		    'print',
		    'property',
		    'range',
		    'repr',
		    'reversed',
		    'round',
		    'set',
		    'setattr',
		    'slice',
		    'sorted',
		    'staticmethod',
		    'str',
		    'sum',
		    'super',
		    'tuple',
		    'type',
		    'vars',
		    'zip'
		  ];

		  const LITERALS = [
		    '__debug__',
		    'Ellipsis',
		    'False',
		    'None',
		    'NotImplemented',
		    'True'
		  ];

		  // https://docs.python.org/3/library/typing.html
		  // TODO: Could these be supplemented by a CamelCase matcher in certain
		  // contexts, leaving these remaining only for relevance hinting?
		  const TYPES = [
		    "Any",
		    "Callable",
		    "Coroutine",
		    "Dict",
		    "List",
		    "Literal",
		    "Generic",
		    "Optional",
		    "Sequence",
		    "Set",
		    "Tuple",
		    "Type",
		    "Union"
		  ];

		  const KEYWORDS = {
		    $pattern: /[A-Za-z]\w+|__\w+__/,
		    keyword: RESERVED_WORDS,
		    built_in: BUILT_INS,
		    literal: LITERALS,
		    type: TYPES
		  };

		  const PROMPT = {
		    className: 'meta',
		    begin: /^(>>>|\.\.\.) /
		  };

		  const SUBST = {
		    className: 'subst',
		    begin: /\{/,
		    end: /\}/,
		    keywords: KEYWORDS,
		    illegal: /#/
		  };

		  const LITERAL_BRACKET = {
		    begin: /\{\{/,
		    relevance: 0
		  };

		  const STRING = {
		    className: 'string',
		    contains: [ hljs.BACKSLASH_ESCAPE ],
		    variants: [
		      {
		        begin: /([uU]|[bB]|[rR]|[bB][rR]|[rR][bB])?'''/,
		        end: /'''/,
		        contains: [
		          hljs.BACKSLASH_ESCAPE,
		          PROMPT
		        ],
		        relevance: 10
		      },
		      {
		        begin: /([uU]|[bB]|[rR]|[bB][rR]|[rR][bB])?"""/,
		        end: /"""/,
		        contains: [
		          hljs.BACKSLASH_ESCAPE,
		          PROMPT
		        ],
		        relevance: 10
		      },
		      {
		        begin: /([fF][rR]|[rR][fF]|[fF])'''/,
		        end: /'''/,
		        contains: [
		          hljs.BACKSLASH_ESCAPE,
		          PROMPT,
		          LITERAL_BRACKET,
		          SUBST
		        ]
		      },
		      {
		        begin: /([fF][rR]|[rR][fF]|[fF])"""/,
		        end: /"""/,
		        contains: [
		          hljs.BACKSLASH_ESCAPE,
		          PROMPT,
		          LITERAL_BRACKET,
		          SUBST
		        ]
		      },
		      {
		        begin: /([uU]|[rR])'/,
		        end: /'/,
		        relevance: 10
		      },
		      {
		        begin: /([uU]|[rR])"/,
		        end: /"/,
		        relevance: 10
		      },
		      {
		        begin: /([bB]|[bB][rR]|[rR][bB])'/,
		        end: /'/
		      },
		      {
		        begin: /([bB]|[bB][rR]|[rR][bB])"/,
		        end: /"/
		      },
		      {
		        begin: /([fF][rR]|[rR][fF]|[fF])'/,
		        end: /'/,
		        contains: [
		          hljs.BACKSLASH_ESCAPE,
		          LITERAL_BRACKET,
		          SUBST
		        ]
		      },
		      {
		        begin: /([fF][rR]|[rR][fF]|[fF])"/,
		        end: /"/,
		        contains: [
		          hljs.BACKSLASH_ESCAPE,
		          LITERAL_BRACKET,
		          SUBST
		        ]
		      },
		      hljs.APOS_STRING_MODE,
		      hljs.QUOTE_STRING_MODE
		    ]
		  };

		  // https://docs.python.org/3.9/reference/lexical_analysis.html#numeric-literals
		  const digitpart = '[0-9](_?[0-9])*';
		  const pointfloat = `(\\b(${digitpart}))?\\.(${digitpart})|\\b(${digitpart})\\.`;
		  // Whitespace after a number (or any lexical token) is needed only if its absence
		  // would change the tokenization
		  // https://docs.python.org/3.9/reference/lexical_analysis.html#whitespace-between-tokens
		  // We deviate slightly, requiring a word boundary or a keyword
		  // to avoid accidentally recognizing *prefixes* (e.g., `0` in `0x41` or `08` or `0__1`)
		  const lookahead = `\\b|${RESERVED_WORDS.join('|')}`;
		  const NUMBER = {
		    className: 'number',
		    relevance: 0,
		    variants: [
		      // exponentfloat, pointfloat
		      // https://docs.python.org/3.9/reference/lexical_analysis.html#floating-point-literals
		      // optionally imaginary
		      // https://docs.python.org/3.9/reference/lexical_analysis.html#imaginary-literals
		      // Note: no leading \b because floats can start with a decimal point
		      // and we don't want to mishandle e.g. `fn(.5)`,
		      // no trailing \b for pointfloat because it can end with a decimal point
		      // and we don't want to mishandle e.g. `0..hex()`; this should be safe
		      // because both MUST contain a decimal point and so cannot be confused with
		      // the interior part of an identifier
		      {
		        begin: `(\\b(${digitpart})|(${pointfloat}))[eE][+-]?(${digitpart})[jJ]?(?=${lookahead})`
		      },
		      {
		        begin: `(${pointfloat})[jJ]?`
		      },

		      // decinteger, bininteger, octinteger, hexinteger
		      // https://docs.python.org/3.9/reference/lexical_analysis.html#integer-literals
		      // optionally "long" in Python 2
		      // https://docs.python.org/2.7/reference/lexical_analysis.html#integer-and-long-integer-literals
		      // decinteger is optionally imaginary
		      // https://docs.python.org/3.9/reference/lexical_analysis.html#imaginary-literals
		      {
		        begin: `\\b([1-9](_?[0-9])*|0+(_?0)*)[lLjJ]?(?=${lookahead})`
		      },
		      {
		        begin: `\\b0[bB](_?[01])+[lL]?(?=${lookahead})`
		      },
		      {
		        begin: `\\b0[oO](_?[0-7])+[lL]?(?=${lookahead})`
		      },
		      {
		        begin: `\\b0[xX](_?[0-9a-fA-F])+[lL]?(?=${lookahead})`
		      },

		      // imagnumber (digitpart-based)
		      // https://docs.python.org/3.9/reference/lexical_analysis.html#imaginary-literals
		      {
		        begin: `\\b(${digitpart})[jJ](?=${lookahead})`
		      }
		    ]
		  };
		  const COMMENT_TYPE = {
		    className: "comment",
		    begin: regex.lookahead(/# type:/),
		    end: /$/,
		    keywords: KEYWORDS,
		    contains: [
		      { // prevent keywords from coloring `type`
		        begin: /# type:/
		      },
		      // comment within a datatype comment includes no keywords
		      {
		        begin: /#/,
		        end: /\b\B/,
		        endsWithParent: true
		      }
		    ]
		  };
		  const PARAMS = {
		    className: 'params',
		    variants: [
		      // Exclude params in functions without params
		      {
		        className: "",
		        begin: /\(\s*\)/,
		        skip: true
		      },
		      {
		        begin: /\(/,
		        end: /\)/,
		        excludeBegin: true,
		        excludeEnd: true,
		        keywords: KEYWORDS,
		        contains: [
		          'self',
		          PROMPT,
		          NUMBER,
		          STRING,
		          hljs.HASH_COMMENT_MODE
		        ]
		      }
		    ]
		  };
		  SUBST.contains = [
		    STRING,
		    NUMBER,
		    PROMPT
		  ];

		  return {
		    name: 'Python',
		    aliases: [
		      'py',
		      'gyp',
		      'ipython'
		    ],
		    unicodeRegex: true,
		    keywords: KEYWORDS,
		    illegal: /(<\/|->|\?)|=>/,
		    contains: [
		      PROMPT,
		      NUMBER,
		      {
		        // very common convention
		        begin: /\bself\b/
		      },
		      {
		        // eat "if" prior to string so that it won't accidentally be
		        // labeled as an f-string
		        beginKeywords: "if",
		        relevance: 0
		      },
		      STRING,
		      COMMENT_TYPE,
		      hljs.HASH_COMMENT_MODE,
		      {
		        match: [
		          /\bdef/, /\s+/,
		          IDENT_RE,
		        ],
		        scope: {
		          1: "keyword",
		          3: "title.function"
		        },
		        contains: [ PARAMS ]
		      },
		      {
		        variants: [
		          {
		            match: [
		              /\bclass/, /\s+/,
		              IDENT_RE, /\s*/,
		              /\(\s*/, IDENT_RE,/\s*\)/
		            ],
		          },
		          {
		            match: [
		              /\bclass/, /\s+/,
		              IDENT_RE
		            ],
		          }
		        ],
		        scope: {
		          1: "keyword",
		          3: "title.class",
		          6: "title.class.inherited",
		        }
		      },
		      {
		        className: 'meta',
		        begin: /^[\t ]*@/,
		        end: /(?=#)|$/,
		        contains: [
		          NUMBER,
		          PARAMS,
		          STRING
		        ]
		      }
		    ]
		  };
		}

		python_1 = python;
		return python_1;
	}

	/*
	Language: Python REPL
	Requires: python.js
	Author: Josh Goebel <hello@joshgoebel.com>
	Category: common
	*/

	var pythonRepl_1;
	var hasRequiredPythonRepl;

	function requirePythonRepl () {
		if (hasRequiredPythonRepl) return pythonRepl_1;
		hasRequiredPythonRepl = 1;
		function pythonRepl(hljs) {
		  return {
		    aliases: [ 'pycon' ],
		    contains: [
		      {
		        className: 'meta.prompt',
		        starts: {
		          // a space separates the REPL prefix from the actual code
		          // this is purely for cleaner HTML output
		          end: / |$/,
		          starts: {
		            end: '$',
		            subLanguage: 'python'
		          }
		        },
		        variants: [
		          { begin: /^>>>(?=[ ]|$)/ },
		          { begin: /^\.\.\.(?=[ ]|$)/ }
		        ]
		      }
		    ]
		  };
		}

		pythonRepl_1 = pythonRepl;
		return pythonRepl_1;
	}

	/*
	Language: R
	Description: R is a free software environment for statistical computing and graphics.
	Author: Joe Cheng <joe@rstudio.org>
	Contributors: Konrad Rudolph <konrad.rudolph@gmail.com>
	Website: https://www.r-project.org
	Category: common,scientific
	*/

	var r_1;
	var hasRequiredR;

	function requireR () {
		if (hasRequiredR) return r_1;
		hasRequiredR = 1;
		/** @type LanguageFn */
		function r(hljs) {
		  const regex = hljs.regex;
		  // Identifiers in R cannot start with `_`, but they can start with `.` if it
		  // is not immediately followed by a digit.
		  // R also supports quoted identifiers, which are near-arbitrary sequences
		  // delimited by backticks (`…`), which may contain escape sequences. These are
		  // handled in a separate mode. See `test/markup/r/names.txt` for examples.
		  // FIXME: Support Unicode identifiers.
		  const IDENT_RE = /(?:(?:[a-zA-Z]|\.[._a-zA-Z])[._a-zA-Z0-9]*)|\.(?!\d)/;
		  const NUMBER_TYPES_RE = regex.either(
		    // Special case: only hexadecimal binary powers can contain fractions
		    /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*[pP][+-]?\d+i?/,
		    // Hexadecimal numbers without fraction and optional binary power
		    /0[xX][0-9a-fA-F]+(?:[pP][+-]?\d+)?[Li]?/,
		    // Decimal numbers
		    /(?:\d+(?:\.\d*)?|\.\d+)(?:[eE][+-]?\d+)?[Li]?/
		  );
		  const OPERATORS_RE = /[=!<>:]=|\|\||&&|:::?|<-|<<-|->>|->|\|>|[-+*\/?!$&|:<=>@^~]|\*\*/;
		  const PUNCTUATION_RE = regex.either(
		    /[()]/,
		    /[{}]/,
		    /\[\[/,
		    /[[\]]/,
		    /\\/,
		    /,/
		  );

		  return {
		    name: 'R',

		    keywords: {
		      $pattern: IDENT_RE,
		      keyword:
		        'function if in break next repeat else for while',
		      literal:
		        'NULL NA TRUE FALSE Inf NaN NA_integer_|10 NA_real_|10 '
		        + 'NA_character_|10 NA_complex_|10',
		      built_in:
		        // Builtin constants
		        'LETTERS letters month.abb month.name pi T F '
		        // Primitive functions
		        // These are all the functions in `base` that are implemented as a
		        // `.Primitive`, minus those functions that are also keywords.
		        + 'abs acos acosh all any anyNA Arg as.call as.character '
		        + 'as.complex as.double as.environment as.integer as.logical '
		        + 'as.null.default as.numeric as.raw asin asinh atan atanh attr '
		        + 'attributes baseenv browser c call ceiling class Conj cos cosh '
		        + 'cospi cummax cummin cumprod cumsum digamma dim dimnames '
		        + 'emptyenv exp expression floor forceAndCall gamma gc.time '
		        + 'globalenv Im interactive invisible is.array is.atomic is.call '
		        + 'is.character is.complex is.double is.environment is.expression '
		        + 'is.finite is.function is.infinite is.integer is.language '
		        + 'is.list is.logical is.matrix is.na is.name is.nan is.null '
		        + 'is.numeric is.object is.pairlist is.raw is.recursive is.single '
		        + 'is.symbol lazyLoadDBfetch length lgamma list log max min '
		        + 'missing Mod names nargs nzchar oldClass on.exit pos.to.env '
		        + 'proc.time prod quote range Re rep retracemem return round '
		        + 'seq_along seq_len seq.int sign signif sin sinh sinpi sqrt '
		        + 'standardGeneric substitute sum switch tan tanh tanpi tracemem '
		        + 'trigamma trunc unclass untracemem UseMethod xtfrm',
		    },

		    contains: [
		      // Roxygen comments
		      hljs.COMMENT(
		        /#'/,
		        /$/,
		        { contains: [
		          {
		            // Handle `@examples` separately to cause all subsequent code
		            // until the next `@`-tag on its own line to be kept as-is,
		            // preventing highlighting. This code is example R code, so nested
		            // doctags shouldn’t be treated as such. See
		            // `test/markup/r/roxygen.txt` for an example.
		            scope: 'doctag',
		            match: /@examples/,
		            starts: {
		              end: regex.lookahead(regex.either(
		                // end if another doc comment
		                /\n^#'\s*(?=@[a-zA-Z]+)/,
		                // or a line with no comment
		                /\n^(?!#')/
		              )),
		              endsParent: true
		            }
		          },
		          {
		            // Handle `@param` to highlight the parameter name following
		            // after.
		            scope: 'doctag',
		            begin: '@param',
		            end: /$/,
		            contains: [
		              {
		                scope: 'variable',
		                variants: [
		                  { match: IDENT_RE },
		                  { match: /`(?:\\.|[^`\\])+`/ }
		                ],
		                endsParent: true
		              }
		            ]
		          },
		          {
		            scope: 'doctag',
		            match: /@[a-zA-Z]+/
		          },
		          {
		            scope: 'keyword',
		            match: /\\[a-zA-Z]+/
		          }
		        ] }
		      ),

		      hljs.HASH_COMMENT_MODE,

		      {
		        scope: 'string',
		        contains: [ hljs.BACKSLASH_ESCAPE ],
		        variants: [
		          hljs.END_SAME_AS_BEGIN({
		            begin: /[rR]"(-*)\(/,
		            end: /\)(-*)"/
		          }),
		          hljs.END_SAME_AS_BEGIN({
		            begin: /[rR]"(-*)\{/,
		            end: /\}(-*)"/
		          }),
		          hljs.END_SAME_AS_BEGIN({
		            begin: /[rR]"(-*)\[/,
		            end: /\](-*)"/
		          }),
		          hljs.END_SAME_AS_BEGIN({
		            begin: /[rR]'(-*)\(/,
		            end: /\)(-*)'/
		          }),
		          hljs.END_SAME_AS_BEGIN({
		            begin: /[rR]'(-*)\{/,
		            end: /\}(-*)'/
		          }),
		          hljs.END_SAME_AS_BEGIN({
		            begin: /[rR]'(-*)\[/,
		            end: /\](-*)'/
		          }),
		          {
		            begin: '"',
		            end: '"',
		            relevance: 0
		          },
		          {
		            begin: "'",
		            end: "'",
		            relevance: 0
		          }
		        ],
		      },

		      // Matching numbers immediately following punctuation and operators is
		      // tricky since we need to look at the character ahead of a number to
		      // ensure the number is not part of an identifier, and we cannot use
		      // negative look-behind assertions. So instead we explicitly handle all
		      // possible combinations of (operator|punctuation), number.
		      // TODO: replace with negative look-behind when available
		      // { begin: /(?<![a-zA-Z0-9._])0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*[pP][+-]?\d+i?/ },
		      // { begin: /(?<![a-zA-Z0-9._])0[xX][0-9a-fA-F]+([pP][+-]?\d+)?[Li]?/ },
		      // { begin: /(?<![a-zA-Z0-9._])(\d+(\.\d*)?|\.\d+)([eE][+-]?\d+)?[Li]?/ }
		      {
		        relevance: 0,
		        variants: [
		          {
		            scope: {
		              1: 'operator',
		              2: 'number'
		            },
		            match: [
		              OPERATORS_RE,
		              NUMBER_TYPES_RE
		            ]
		          },
		          {
		            scope: {
		              1: 'operator',
		              2: 'number'
		            },
		            match: [
		              /%[^%]*%/,
		              NUMBER_TYPES_RE
		            ]
		          },
		          {
		            scope: {
		              1: 'punctuation',
		              2: 'number'
		            },
		            match: [
		              PUNCTUATION_RE,
		              NUMBER_TYPES_RE
		            ]
		          },
		          {
		            scope: { 2: 'number' },
		            match: [
		              /[^a-zA-Z0-9._]|^/, // not part of an identifier, or start of document
		              NUMBER_TYPES_RE
		            ]
		          }
		        ]
		      },

		      // Operators/punctuation when they're not directly followed by numbers
		      {
		        // Relevance boost for the most common assignment form.
		        scope: { 3: 'operator' },
		        match: [
		          IDENT_RE,
		          /\s+/,
		          /<-/,
		          /\s+/
		        ]
		      },

		      {
		        scope: 'operator',
		        relevance: 0,
		        variants: [
		          { match: OPERATORS_RE },
		          { match: /%[^%]*%/ }
		        ]
		      },

		      {
		        scope: 'punctuation',
		        relevance: 0,
		        match: PUNCTUATION_RE
		      },

		      {
		        // Escaped identifier
		        begin: '`',
		        end: '`',
		        contains: [ { begin: /\\./ } ]
		      }
		    ]
		  };
		}

		r_1 = r;
		return r_1;
	}

	/*
	Language: Rust
	Author: Andrey Vlasovskikh <andrey.vlasovskikh@gmail.com>
	Contributors: Roman Shmatov <romanshmatov@gmail.com>, Kasper Andersen <kma_untrusted@protonmail.com>
	Website: https://www.rust-lang.org
	Category: common, system
	*/

	var rust_1;
	var hasRequiredRust;

	function requireRust () {
		if (hasRequiredRust) return rust_1;
		hasRequiredRust = 1;
		/** @type LanguageFn */
		function rust(hljs) {
		  const regex = hljs.regex;
		  const FUNCTION_INVOKE = {
		    className: "title.function.invoke",
		    relevance: 0,
		    begin: regex.concat(
		      /\b/,
		      /(?!let\b)/,
		      hljs.IDENT_RE,
		      regex.lookahead(/\s*\(/))
		  };
		  const NUMBER_SUFFIX = '([ui](8|16|32|64|128|size)|f(32|64))\?';
		  const KEYWORDS = [
		    "abstract",
		    "as",
		    "async",
		    "await",
		    "become",
		    "box",
		    "break",
		    "const",
		    "continue",
		    "crate",
		    "do",
		    "dyn",
		    "else",
		    "enum",
		    "extern",
		    "false",
		    "final",
		    "fn",
		    "for",
		    "if",
		    "impl",
		    "in",
		    "let",
		    "loop",
		    "macro",
		    "match",
		    "mod",
		    "move",
		    "mut",
		    "override",
		    "priv",
		    "pub",
		    "ref",
		    "return",
		    "self",
		    "Self",
		    "static",
		    "struct",
		    "super",
		    "trait",
		    "true",
		    "try",
		    "type",
		    "typeof",
		    "unsafe",
		    "unsized",
		    "use",
		    "virtual",
		    "where",
		    "while",
		    "yield"
		  ];
		  const LITERALS = [
		    "true",
		    "false",
		    "Some",
		    "None",
		    "Ok",
		    "Err"
		  ];
		  const BUILTINS = [
		    // functions
		    'drop ',
		    // traits
		    "Copy",
		    "Send",
		    "Sized",
		    "Sync",
		    "Drop",
		    "Fn",
		    "FnMut",
		    "FnOnce",
		    "ToOwned",
		    "Clone",
		    "Debug",
		    "PartialEq",
		    "PartialOrd",
		    "Eq",
		    "Ord",
		    "AsRef",
		    "AsMut",
		    "Into",
		    "From",
		    "Default",
		    "Iterator",
		    "Extend",
		    "IntoIterator",
		    "DoubleEndedIterator",
		    "ExactSizeIterator",
		    "SliceConcatExt",
		    "ToString",
		    // macros
		    "assert!",
		    "assert_eq!",
		    "bitflags!",
		    "bytes!",
		    "cfg!",
		    "col!",
		    "concat!",
		    "concat_idents!",
		    "debug_assert!",
		    "debug_assert_eq!",
		    "env!",
		    "panic!",
		    "file!",
		    "format!",
		    "format_args!",
		    "include_bytes!",
		    "include_str!",
		    "line!",
		    "local_data_key!",
		    "module_path!",
		    "option_env!",
		    "print!",
		    "println!",
		    "select!",
		    "stringify!",
		    "try!",
		    "unimplemented!",
		    "unreachable!",
		    "vec!",
		    "write!",
		    "writeln!",
		    "macro_rules!",
		    "assert_ne!",
		    "debug_assert_ne!"
		  ];
		  const TYPES = [
		    "i8",
		    "i16",
		    "i32",
		    "i64",
		    "i128",
		    "isize",
		    "u8",
		    "u16",
		    "u32",
		    "u64",
		    "u128",
		    "usize",
		    "f32",
		    "f64",
		    "str",
		    "char",
		    "bool",
		    "Box",
		    "Option",
		    "Result",
		    "String",
		    "Vec"
		  ];
		  return {
		    name: 'Rust',
		    aliases: [ 'rs' ],
		    keywords: {
		      $pattern: hljs.IDENT_RE + '!?',
		      type: TYPES,
		      keyword: KEYWORDS,
		      literal: LITERALS,
		      built_in: BUILTINS
		    },
		    illegal: '</',
		    contains: [
		      hljs.C_LINE_COMMENT_MODE,
		      hljs.COMMENT('/\\*', '\\*/', { contains: [ 'self' ] }),
		      hljs.inherit(hljs.QUOTE_STRING_MODE, {
		        begin: /b?"/,
		        illegal: null
		      }),
		      {
		        className: 'string',
		        variants: [
		          { begin: /b?r(#*)"(.|\n)*?"\1(?!#)/ },
		          { begin: /b?'\\?(x\w{2}|u\w{4}|U\w{8}|.)'/ }
		        ]
		      },
		      {
		        className: 'symbol',
		        begin: /'[a-zA-Z_][a-zA-Z0-9_]*/
		      },
		      {
		        className: 'number',
		        variants: [
		          { begin: '\\b0b([01_]+)' + NUMBER_SUFFIX },
		          { begin: '\\b0o([0-7_]+)' + NUMBER_SUFFIX },
		          { begin: '\\b0x([A-Fa-f0-9_]+)' + NUMBER_SUFFIX },
		          { begin: '\\b(\\d[\\d_]*(\\.[0-9_]+)?([eE][+-]?[0-9_]+)?)'
		                   + NUMBER_SUFFIX }
		        ],
		        relevance: 0
		      },
		      {
		        begin: [
		          /fn/,
		          /\s+/,
		          hljs.UNDERSCORE_IDENT_RE
		        ],
		        className: {
		          1: "keyword",
		          3: "title.function"
		        }
		      },
		      {
		        className: 'meta',
		        begin: '#!?\\[',
		        end: '\\]',
		        contains: [
		          {
		            className: 'string',
		            begin: /"/,
		            end: /"/
		          }
		        ]
		      },
		      {
		        begin: [
		          /let/,
		          /\s+/,
		          /(?:mut\s+)?/,
		          hljs.UNDERSCORE_IDENT_RE
		        ],
		        className: {
		          1: "keyword",
		          3: "keyword",
		          4: "variable"
		        }
		      },
		      // must come before impl/for rule later
		      {
		        begin: [
		          /for/,
		          /\s+/,
		          hljs.UNDERSCORE_IDENT_RE,
		          /\s+/,
		          /in/
		        ],
		        className: {
		          1: "keyword",
		          3: "variable",
		          5: "keyword"
		        }
		      },
		      {
		        begin: [
		          /type/,
		          /\s+/,
		          hljs.UNDERSCORE_IDENT_RE
		        ],
		        className: {
		          1: "keyword",
		          3: "title.class"
		        }
		      },
		      {
		        begin: [
		          /(?:trait|enum|struct|union|impl|for)/,
		          /\s+/,
		          hljs.UNDERSCORE_IDENT_RE
		        ],
		        className: {
		          1: "keyword",
		          3: "title.class"
		        }
		      },
		      {
		        begin: hljs.IDENT_RE + '::',
		        keywords: {
		          keyword: "Self",
		          built_in: BUILTINS,
		          type: TYPES
		        }
		      },
		      {
		        className: "punctuation",
		        begin: '->'
		      },
		      FUNCTION_INVOKE
		    ]
		  };
		}

		rust_1 = rust;
		return rust_1;
	}

	var scss_1;
	var hasRequiredScss;

	function requireScss () {
		if (hasRequiredScss) return scss_1;
		hasRequiredScss = 1;
		const MODES = (hljs) => {
		  return {
		    IMPORTANT: {
		      scope: 'meta',
		      begin: '!important'
		    },
		    BLOCK_COMMENT: hljs.C_BLOCK_COMMENT_MODE,
		    HEXCOLOR: {
		      scope: 'number',
		      begin: /#(([0-9a-fA-F]{3,4})|(([0-9a-fA-F]{2}){3,4}))\b/
		    },
		    FUNCTION_DISPATCH: {
		      className: "built_in",
		      begin: /[\w-]+(?=\()/
		    },
		    ATTRIBUTE_SELECTOR_MODE: {
		      scope: 'selector-attr',
		      begin: /\[/,
		      end: /\]/,
		      illegal: '$',
		      contains: [
		        hljs.APOS_STRING_MODE,
		        hljs.QUOTE_STRING_MODE
		      ]
		    },
		    CSS_NUMBER_MODE: {
		      scope: 'number',
		      begin: hljs.NUMBER_RE + '(' +
		        '%|em|ex|ch|rem' +
		        '|vw|vh|vmin|vmax' +
		        '|cm|mm|in|pt|pc|px' +
		        '|deg|grad|rad|turn' +
		        '|s|ms' +
		        '|Hz|kHz' +
		        '|dpi|dpcm|dppx' +
		        ')?',
		      relevance: 0
		    },
		    CSS_VARIABLE: {
		      className: "attr",
		      begin: /--[A-Za-z][A-Za-z0-9_-]*/
		    }
		  };
		};

		const TAGS = [
		  'a',
		  'abbr',
		  'address',
		  'article',
		  'aside',
		  'audio',
		  'b',
		  'blockquote',
		  'body',
		  'button',
		  'canvas',
		  'caption',
		  'cite',
		  'code',
		  'dd',
		  'del',
		  'details',
		  'dfn',
		  'div',
		  'dl',
		  'dt',
		  'em',
		  'fieldset',
		  'figcaption',
		  'figure',
		  'footer',
		  'form',
		  'h1',
		  'h2',
		  'h3',
		  'h4',
		  'h5',
		  'h6',
		  'header',
		  'hgroup',
		  'html',
		  'i',
		  'iframe',
		  'img',
		  'input',
		  'ins',
		  'kbd',
		  'label',
		  'legend',
		  'li',
		  'main',
		  'mark',
		  'menu',
		  'nav',
		  'object',
		  'ol',
		  'p',
		  'q',
		  'quote',
		  'samp',
		  'section',
		  'span',
		  'strong',
		  'summary',
		  'sup',
		  'table',
		  'tbody',
		  'td',
		  'textarea',
		  'tfoot',
		  'th',
		  'thead',
		  'time',
		  'tr',
		  'ul',
		  'var',
		  'video'
		];

		const MEDIA_FEATURES = [
		  'any-hover',
		  'any-pointer',
		  'aspect-ratio',
		  'color',
		  'color-gamut',
		  'color-index',
		  'device-aspect-ratio',
		  'device-height',
		  'device-width',
		  'display-mode',
		  'forced-colors',
		  'grid',
		  'height',
		  'hover',
		  'inverted-colors',
		  'monochrome',
		  'orientation',
		  'overflow-block',
		  'overflow-inline',
		  'pointer',
		  'prefers-color-scheme',
		  'prefers-contrast',
		  'prefers-reduced-motion',
		  'prefers-reduced-transparency',
		  'resolution',
		  'scan',
		  'scripting',
		  'update',
		  'width',
		  // TODO: find a better solution?
		  'min-width',
		  'max-width',
		  'min-height',
		  'max-height'
		];

		// https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes
		const PSEUDO_CLASSES = [
		  'active',
		  'any-link',
		  'blank',
		  'checked',
		  'current',
		  'default',
		  'defined',
		  'dir', // dir()
		  'disabled',
		  'drop',
		  'empty',
		  'enabled',
		  'first',
		  'first-child',
		  'first-of-type',
		  'fullscreen',
		  'future',
		  'focus',
		  'focus-visible',
		  'focus-within',
		  'has', // has()
		  'host', // host or host()
		  'host-context', // host-context()
		  'hover',
		  'indeterminate',
		  'in-range',
		  'invalid',
		  'is', // is()
		  'lang', // lang()
		  'last-child',
		  'last-of-type',
		  'left',
		  'link',
		  'local-link',
		  'not', // not()
		  'nth-child', // nth-child()
		  'nth-col', // nth-col()
		  'nth-last-child', // nth-last-child()
		  'nth-last-col', // nth-last-col()
		  'nth-last-of-type', //nth-last-of-type()
		  'nth-of-type', //nth-of-type()
		  'only-child',
		  'only-of-type',
		  'optional',
		  'out-of-range',
		  'past',
		  'placeholder-shown',
		  'read-only',
		  'read-write',
		  'required',
		  'right',
		  'root',
		  'scope',
		  'target',
		  'target-within',
		  'user-invalid',
		  'valid',
		  'visited',
		  'where' // where()
		];

		// https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-elements
		const PSEUDO_ELEMENTS = [
		  'after',
		  'backdrop',
		  'before',
		  'cue',
		  'cue-region',
		  'first-letter',
		  'first-line',
		  'grammar-error',
		  'marker',
		  'part',
		  'placeholder',
		  'selection',
		  'slotted',
		  'spelling-error'
		];

		const ATTRIBUTES = [
		  'align-content',
		  'align-items',
		  'align-self',
		  'all',
		  'animation',
		  'animation-delay',
		  'animation-direction',
		  'animation-duration',
		  'animation-fill-mode',
		  'animation-iteration-count',
		  'animation-name',
		  'animation-play-state',
		  'animation-timing-function',
		  'backface-visibility',
		  'background',
		  'background-attachment',
		  'background-blend-mode',
		  'background-clip',
		  'background-color',
		  'background-image',
		  'background-origin',
		  'background-position',
		  'background-repeat',
		  'background-size',
		  'block-size',
		  'border',
		  'border-block',
		  'border-block-color',
		  'border-block-end',
		  'border-block-end-color',
		  'border-block-end-style',
		  'border-block-end-width',
		  'border-block-start',
		  'border-block-start-color',
		  'border-block-start-style',
		  'border-block-start-width',
		  'border-block-style',
		  'border-block-width',
		  'border-bottom',
		  'border-bottom-color',
		  'border-bottom-left-radius',
		  'border-bottom-right-radius',
		  'border-bottom-style',
		  'border-bottom-width',
		  'border-collapse',
		  'border-color',
		  'border-image',
		  'border-image-outset',
		  'border-image-repeat',
		  'border-image-slice',
		  'border-image-source',
		  'border-image-width',
		  'border-inline',
		  'border-inline-color',
		  'border-inline-end',
		  'border-inline-end-color',
		  'border-inline-end-style',
		  'border-inline-end-width',
		  'border-inline-start',
		  'border-inline-start-color',
		  'border-inline-start-style',
		  'border-inline-start-width',
		  'border-inline-style',
		  'border-inline-width',
		  'border-left',
		  'border-left-color',
		  'border-left-style',
		  'border-left-width',
		  'border-radius',
		  'border-right',
		  'border-right-color',
		  'border-right-style',
		  'border-right-width',
		  'border-spacing',
		  'border-style',
		  'border-top',
		  'border-top-color',
		  'border-top-left-radius',
		  'border-top-right-radius',
		  'border-top-style',
		  'border-top-width',
		  'border-width',
		  'bottom',
		  'box-decoration-break',
		  'box-shadow',
		  'box-sizing',
		  'break-after',
		  'break-before',
		  'break-inside',
		  'caption-side',
		  'caret-color',
		  'clear',
		  'clip',
		  'clip-path',
		  'clip-rule',
		  'color',
		  'column-count',
		  'column-fill',
		  'column-gap',
		  'column-rule',
		  'column-rule-color',
		  'column-rule-style',
		  'column-rule-width',
		  'column-span',
		  'column-width',
		  'columns',
		  'contain',
		  'content',
		  'content-visibility',
		  'counter-increment',
		  'counter-reset',
		  'cue',
		  'cue-after',
		  'cue-before',
		  'cursor',
		  'direction',
		  'display',
		  'empty-cells',
		  'filter',
		  'flex',
		  'flex-basis',
		  'flex-direction',
		  'flex-flow',
		  'flex-grow',
		  'flex-shrink',
		  'flex-wrap',
		  'float',
		  'flow',
		  'font',
		  'font-display',
		  'font-family',
		  'font-feature-settings',
		  'font-kerning',
		  'font-language-override',
		  'font-size',
		  'font-size-adjust',
		  'font-smoothing',
		  'font-stretch',
		  'font-style',
		  'font-synthesis',
		  'font-variant',
		  'font-variant-caps',
		  'font-variant-east-asian',
		  'font-variant-ligatures',
		  'font-variant-numeric',
		  'font-variant-position',
		  'font-variation-settings',
		  'font-weight',
		  'gap',
		  'glyph-orientation-vertical',
		  'grid',
		  'grid-area',
		  'grid-auto-columns',
		  'grid-auto-flow',
		  'grid-auto-rows',
		  'grid-column',
		  'grid-column-end',
		  'grid-column-start',
		  'grid-gap',
		  'grid-row',
		  'grid-row-end',
		  'grid-row-start',
		  'grid-template',
		  'grid-template-areas',
		  'grid-template-columns',
		  'grid-template-rows',
		  'hanging-punctuation',
		  'height',
		  'hyphens',
		  'icon',
		  'image-orientation',
		  'image-rendering',
		  'image-resolution',
		  'ime-mode',
		  'inline-size',
		  'isolation',
		  'justify-content',
		  'left',
		  'letter-spacing',
		  'line-break',
		  'line-height',
		  'list-style',
		  'list-style-image',
		  'list-style-position',
		  'list-style-type',
		  'margin',
		  'margin-block',
		  'margin-block-end',
		  'margin-block-start',
		  'margin-bottom',
		  'margin-inline',
		  'margin-inline-end',
		  'margin-inline-start',
		  'margin-left',
		  'margin-right',
		  'margin-top',
		  'marks',
		  'mask',
		  'mask-border',
		  'mask-border-mode',
		  'mask-border-outset',
		  'mask-border-repeat',
		  'mask-border-slice',
		  'mask-border-source',
		  'mask-border-width',
		  'mask-clip',
		  'mask-composite',
		  'mask-image',
		  'mask-mode',
		  'mask-origin',
		  'mask-position',
		  'mask-repeat',
		  'mask-size',
		  'mask-type',
		  'max-block-size',
		  'max-height',
		  'max-inline-size',
		  'max-width',
		  'min-block-size',
		  'min-height',
		  'min-inline-size',
		  'min-width',
		  'mix-blend-mode',
		  'nav-down',
		  'nav-index',
		  'nav-left',
		  'nav-right',
		  'nav-up',
		  'none',
		  'normal',
		  'object-fit',
		  'object-position',
		  'opacity',
		  'order',
		  'orphans',
		  'outline',
		  'outline-color',
		  'outline-offset',
		  'outline-style',
		  'outline-width',
		  'overflow',
		  'overflow-wrap',
		  'overflow-x',
		  'overflow-y',
		  'padding',
		  'padding-block',
		  'padding-block-end',
		  'padding-block-start',
		  'padding-bottom',
		  'padding-inline',
		  'padding-inline-end',
		  'padding-inline-start',
		  'padding-left',
		  'padding-right',
		  'padding-top',
		  'page-break-after',
		  'page-break-before',
		  'page-break-inside',
		  'pause',
		  'pause-after',
		  'pause-before',
		  'perspective',
		  'perspective-origin',
		  'pointer-events',
		  'position',
		  'quotes',
		  'resize',
		  'rest',
		  'rest-after',
		  'rest-before',
		  'right',
		  'row-gap',
		  'scroll-margin',
		  'scroll-margin-block',
		  'scroll-margin-block-end',
		  'scroll-margin-block-start',
		  'scroll-margin-bottom',
		  'scroll-margin-inline',
		  'scroll-margin-inline-end',
		  'scroll-margin-inline-start',
		  'scroll-margin-left',
		  'scroll-margin-right',
		  'scroll-margin-top',
		  'scroll-padding',
		  'scroll-padding-block',
		  'scroll-padding-block-end',
		  'scroll-padding-block-start',
		  'scroll-padding-bottom',
		  'scroll-padding-inline',
		  'scroll-padding-inline-end',
		  'scroll-padding-inline-start',
		  'scroll-padding-left',
		  'scroll-padding-right',
		  'scroll-padding-top',
		  'scroll-snap-align',
		  'scroll-snap-stop',
		  'scroll-snap-type',
		  'scrollbar-color',
		  'scrollbar-gutter',
		  'scrollbar-width',
		  'shape-image-threshold',
		  'shape-margin',
		  'shape-outside',
		  'speak',
		  'speak-as',
		  'src', // @font-face
		  'tab-size',
		  'table-layout',
		  'text-align',
		  'text-align-all',
		  'text-align-last',
		  'text-combine-upright',
		  'text-decoration',
		  'text-decoration-color',
		  'text-decoration-line',
		  'text-decoration-style',
		  'text-emphasis',
		  'text-emphasis-color',
		  'text-emphasis-position',
		  'text-emphasis-style',
		  'text-indent',
		  'text-justify',
		  'text-orientation',
		  'text-overflow',
		  'text-rendering',
		  'text-shadow',
		  'text-transform',
		  'text-underline-position',
		  'top',
		  'transform',
		  'transform-box',
		  'transform-origin',
		  'transform-style',
		  'transition',
		  'transition-delay',
		  'transition-duration',
		  'transition-property',
		  'transition-timing-function',
		  'unicode-bidi',
		  'vertical-align',
		  'visibility',
		  'voice-balance',
		  'voice-duration',
		  'voice-family',
		  'voice-pitch',
		  'voice-range',
		  'voice-rate',
		  'voice-stress',
		  'voice-volume',
		  'white-space',
		  'widows',
		  'width',
		  'will-change',
		  'word-break',
		  'word-spacing',
		  'word-wrap',
		  'writing-mode',
		  'z-index'
		  // reverse makes sure longer attributes `font-weight` are matched fully
		  // instead of getting false positives on say `font`
		].reverse();

		/*
		Language: SCSS
		Description: Scss is an extension of the syntax of CSS.
		Author: Kurt Emch <kurt@kurtemch.com>
		Website: https://sass-lang.com
		Category: common, css, web
		*/

		/** @type LanguageFn */
		function scss(hljs) {
		  const modes = MODES(hljs);
		  const PSEUDO_ELEMENTS$1 = PSEUDO_ELEMENTS;
		  const PSEUDO_CLASSES$1 = PSEUDO_CLASSES;

		  const AT_IDENTIFIER = '@[a-z-]+'; // @font-face
		  const AT_MODIFIERS = "and or not only";
		  const IDENT_RE = '[a-zA-Z-][a-zA-Z0-9_-]*';
		  const VARIABLE = {
		    className: 'variable',
		    begin: '(\\$' + IDENT_RE + ')\\b',
		    relevance: 0
		  };

		  return {
		    name: 'SCSS',
		    case_insensitive: true,
		    illegal: '[=/|\']',
		    contains: [
		      hljs.C_LINE_COMMENT_MODE,
		      hljs.C_BLOCK_COMMENT_MODE,
		      // to recognize keyframe 40% etc which are outside the scope of our
		      // attribute value mode
		      modes.CSS_NUMBER_MODE,
		      {
		        className: 'selector-id',
		        begin: '#[A-Za-z0-9_-]+',
		        relevance: 0
		      },
		      {
		        className: 'selector-class',
		        begin: '\\.[A-Za-z0-9_-]+',
		        relevance: 0
		      },
		      modes.ATTRIBUTE_SELECTOR_MODE,
		      {
		        className: 'selector-tag',
		        begin: '\\b(' + TAGS.join('|') + ')\\b',
		        // was there, before, but why?
		        relevance: 0
		      },
		      {
		        className: 'selector-pseudo',
		        begin: ':(' + PSEUDO_CLASSES$1.join('|') + ')'
		      },
		      {
		        className: 'selector-pseudo',
		        begin: ':(:)?(' + PSEUDO_ELEMENTS$1.join('|') + ')'
		      },
		      VARIABLE,
		      { // pseudo-selector params
		        begin: /\(/,
		        end: /\)/,
		        contains: [ modes.CSS_NUMBER_MODE ]
		      },
		      modes.CSS_VARIABLE,
		      {
		        className: 'attribute',
		        begin: '\\b(' + ATTRIBUTES.join('|') + ')\\b'
		      },
		      { begin: '\\b(whitespace|wait|w-resize|visible|vertical-text|vertical-ideographic|uppercase|upper-roman|upper-alpha|underline|transparent|top|thin|thick|text|text-top|text-bottom|tb-rl|table-header-group|table-footer-group|sw-resize|super|strict|static|square|solid|small-caps|separate|se-resize|scroll|s-resize|rtl|row-resize|ridge|right|repeat|repeat-y|repeat-x|relative|progress|pointer|overline|outside|outset|oblique|nowrap|not-allowed|normal|none|nw-resize|no-repeat|no-drop|newspaper|ne-resize|n-resize|move|middle|medium|ltr|lr-tb|lowercase|lower-roman|lower-alpha|loose|list-item|line|line-through|line-edge|lighter|left|keep-all|justify|italic|inter-word|inter-ideograph|inside|inset|inline|inline-block|inherit|inactive|ideograph-space|ideograph-parenthesis|ideograph-numeric|ideograph-alpha|horizontal|hidden|help|hand|groove|fixed|ellipsis|e-resize|double|dotted|distribute|distribute-space|distribute-letter|distribute-all-lines|disc|disabled|default|decimal|dashed|crosshair|collapse|col-resize|circle|char|center|capitalize|break-word|break-all|bottom|both|bolder|bold|block|bidi-override|below|baseline|auto|always|all-scroll|absolute|table|table-cell)\\b' },
		      {
		        begin: /:/,
		        end: /[;}{]/,
		        relevance: 0,
		        contains: [
		          modes.BLOCK_COMMENT,
		          VARIABLE,
		          modes.HEXCOLOR,
		          modes.CSS_NUMBER_MODE,
		          hljs.QUOTE_STRING_MODE,
		          hljs.APOS_STRING_MODE,
		          modes.IMPORTANT,
		          modes.FUNCTION_DISPATCH
		        ]
		      },
		      // matching these here allows us to treat them more like regular CSS
		      // rules so everything between the {} gets regular rule highlighting,
		      // which is what we want for page and font-face
		      {
		        begin: '@(page|font-face)',
		        keywords: {
		          $pattern: AT_IDENTIFIER,
		          keyword: '@page @font-face'
		        }
		      },
		      {
		        begin: '@',
		        end: '[{;]',
		        returnBegin: true,
		        keywords: {
		          $pattern: /[a-z-]+/,
		          keyword: AT_MODIFIERS,
		          attribute: MEDIA_FEATURES.join(" ")
		        },
		        contains: [
		          {
		            begin: AT_IDENTIFIER,
		            className: "keyword"
		          },
		          {
		            begin: /[a-z-]+(?=:)/,
		            className: "attribute"
		          },
		          VARIABLE,
		          hljs.QUOTE_STRING_MODE,
		          hljs.APOS_STRING_MODE,
		          modes.HEXCOLOR,
		          modes.CSS_NUMBER_MODE
		        ]
		      },
		      modes.FUNCTION_DISPATCH
		    ]
		  };
		}

		scss_1 = scss;
		return scss_1;
	}

	/*
	Language: Shell Session
	Requires: bash.js
	Author: TSUYUSATO Kitsune <make.just.on@gmail.com>
	Category: common
	Audit: 2020
	*/

	var shell_1;
	var hasRequiredShell;

	function requireShell () {
		if (hasRequiredShell) return shell_1;
		hasRequiredShell = 1;
		/** @type LanguageFn */
		function shell(hljs) {
		  return {
		    name: 'Shell Session',
		    aliases: [
		      'console',
		      'shellsession'
		    ],
		    contains: [
		      {
		        className: 'meta.prompt',
		        // We cannot add \s (spaces) in the regular expression otherwise it will be too broad and produce unexpected result.
		        // For instance, in the following example, it would match "echo /path/to/home >" as a prompt:
		        // echo /path/to/home > t.exe
		        begin: /^\s{0,3}[/~\w\d[\]()@-]*[>%$#][ ]?/,
		        starts: {
		          end: /[^\\](?=\s*$)/,
		          subLanguage: 'bash'
		        }
		      }
		    ]
		  };
		}

		shell_1 = shell;
		return shell_1;
	}

	/*
	 Language: SQL
	 Website: https://en.wikipedia.org/wiki/SQL
	 Category: common, database
	 */

	var sql_1;
	var hasRequiredSql;

	function requireSql () {
		if (hasRequiredSql) return sql_1;
		hasRequiredSql = 1;
		/*

		Goals:

		SQL is intended to highlight basic/common SQL keywords and expressions

		- If pretty much every single SQL server includes supports, then it's a canidate.
		- It is NOT intended to include tons of vendor specific keywords (Oracle, MySQL,
		  PostgreSQL) although the list of data types is purposely a bit more expansive.
		- For more specific SQL grammars please see:
		  - PostgreSQL and PL/pgSQL - core
		  - T-SQL - https://github.com/highlightjs/highlightjs-tsql
		  - sql_more (core)

		 */

		function sql(hljs) {
		  const regex = hljs.regex;
		  const COMMENT_MODE = hljs.COMMENT('--', '$');
		  const STRING = {
		    className: 'string',
		    variants: [
		      {
		        begin: /'/,
		        end: /'/,
		        contains: [ { begin: /''/ } ]
		      }
		    ]
		  };
		  const QUOTED_IDENTIFIER = {
		    begin: /"/,
		    end: /"/,
		    contains: [ { begin: /""/ } ]
		  };

		  const LITERALS = [
		    "true",
		    "false",
		    // Not sure it's correct to call NULL literal, and clauses like IS [NOT] NULL look strange that way.
		    // "null",
		    "unknown"
		  ];

		  const MULTI_WORD_TYPES = [
		    "double precision",
		    "large object",
		    "with timezone",
		    "without timezone"
		  ];

		  const TYPES = [
		    'bigint',
		    'binary',
		    'blob',
		    'boolean',
		    'char',
		    'character',
		    'clob',
		    'date',
		    'dec',
		    'decfloat',
		    'decimal',
		    'float',
		    'int',
		    'integer',
		    'interval',
		    'nchar',
		    'nclob',
		    'national',
		    'numeric',
		    'real',
		    'row',
		    'smallint',
		    'time',
		    'timestamp',
		    'varchar',
		    'varying', // modifier (character varying)
		    'varbinary'
		  ];

		  const NON_RESERVED_WORDS = [
		    "add",
		    "asc",
		    "collation",
		    "desc",
		    "final",
		    "first",
		    "last",
		    "view"
		  ];

		  // https://jakewheat.github.io/sql-overview/sql-2016-foundation-grammar.html#reserved-word
		  const RESERVED_WORDS = [
		    "abs",
		    "acos",
		    "all",
		    "allocate",
		    "alter",
		    "and",
		    "any",
		    "are",
		    "array",
		    "array_agg",
		    "array_max_cardinality",
		    "as",
		    "asensitive",
		    "asin",
		    "asymmetric",
		    "at",
		    "atan",
		    "atomic",
		    "authorization",
		    "avg",
		    "begin",
		    "begin_frame",
		    "begin_partition",
		    "between",
		    "bigint",
		    "binary",
		    "blob",
		    "boolean",
		    "both",
		    "by",
		    "call",
		    "called",
		    "cardinality",
		    "cascaded",
		    "case",
		    "cast",
		    "ceil",
		    "ceiling",
		    "char",
		    "char_length",
		    "character",
		    "character_length",
		    "check",
		    "classifier",
		    "clob",
		    "close",
		    "coalesce",
		    "collate",
		    "collect",
		    "column",
		    "commit",
		    "condition",
		    "connect",
		    "constraint",
		    "contains",
		    "convert",
		    "copy",
		    "corr",
		    "corresponding",
		    "cos",
		    "cosh",
		    "count",
		    "covar_pop",
		    "covar_samp",
		    "create",
		    "cross",
		    "cube",
		    "cume_dist",
		    "current",
		    "current_catalog",
		    "current_date",
		    "current_default_transform_group",
		    "current_path",
		    "current_role",
		    "current_row",
		    "current_schema",
		    "current_time",
		    "current_timestamp",
		    "current_path",
		    "current_role",
		    "current_transform_group_for_type",
		    "current_user",
		    "cursor",
		    "cycle",
		    "date",
		    "day",
		    "deallocate",
		    "dec",
		    "decimal",
		    "decfloat",
		    "declare",
		    "default",
		    "define",
		    "delete",
		    "dense_rank",
		    "deref",
		    "describe",
		    "deterministic",
		    "disconnect",
		    "distinct",
		    "double",
		    "drop",
		    "dynamic",
		    "each",
		    "element",
		    "else",
		    "empty",
		    "end",
		    "end_frame",
		    "end_partition",
		    "end-exec",
		    "equals",
		    "escape",
		    "every",
		    "except",
		    "exec",
		    "execute",
		    "exists",
		    "exp",
		    "external",
		    "extract",
		    "false",
		    "fetch",
		    "filter",
		    "first_value",
		    "float",
		    "floor",
		    "for",
		    "foreign",
		    "frame_row",
		    "free",
		    "from",
		    "full",
		    "function",
		    "fusion",
		    "get",
		    "global",
		    "grant",
		    "group",
		    "grouping",
		    "groups",
		    "having",
		    "hold",
		    "hour",
		    "identity",
		    "in",
		    "indicator",
		    "initial",
		    "inner",
		    "inout",
		    "insensitive",
		    "insert",
		    "int",
		    "integer",
		    "intersect",
		    "intersection",
		    "interval",
		    "into",
		    "is",
		    "join",
		    "json_array",
		    "json_arrayagg",
		    "json_exists",
		    "json_object",
		    "json_objectagg",
		    "json_query",
		    "json_table",
		    "json_table_primitive",
		    "json_value",
		    "lag",
		    "language",
		    "large",
		    "last_value",
		    "lateral",
		    "lead",
		    "leading",
		    "left",
		    "like",
		    "like_regex",
		    "listagg",
		    "ln",
		    "local",
		    "localtime",
		    "localtimestamp",
		    "log",
		    "log10",
		    "lower",
		    "match",
		    "match_number",
		    "match_recognize",
		    "matches",
		    "max",
		    "member",
		    "merge",
		    "method",
		    "min",
		    "minute",
		    "mod",
		    "modifies",
		    "module",
		    "month",
		    "multiset",
		    "national",
		    "natural",
		    "nchar",
		    "nclob",
		    "new",
		    "no",
		    "none",
		    "normalize",
		    "not",
		    "nth_value",
		    "ntile",
		    "null",
		    "nullif",
		    "numeric",
		    "octet_length",
		    "occurrences_regex",
		    "of",
		    "offset",
		    "old",
		    "omit",
		    "on",
		    "one",
		    "only",
		    "open",
		    "or",
		    "order",
		    "out",
		    "outer",
		    "over",
		    "overlaps",
		    "overlay",
		    "parameter",
		    "partition",
		    "pattern",
		    "per",
		    "percent",
		    "percent_rank",
		    "percentile_cont",
		    "percentile_disc",
		    "period",
		    "portion",
		    "position",
		    "position_regex",
		    "power",
		    "precedes",
		    "precision",
		    "prepare",
		    "primary",
		    "procedure",
		    "ptf",
		    "range",
		    "rank",
		    "reads",
		    "real",
		    "recursive",
		    "ref",
		    "references",
		    "referencing",
		    "regr_avgx",
		    "regr_avgy",
		    "regr_count",
		    "regr_intercept",
		    "regr_r2",
		    "regr_slope",
		    "regr_sxx",
		    "regr_sxy",
		    "regr_syy",
		    "release",
		    "result",
		    "return",
		    "returns",
		    "revoke",
		    "right",
		    "rollback",
		    "rollup",
		    "row",
		    "row_number",
		    "rows",
		    "running",
		    "savepoint",
		    "scope",
		    "scroll",
		    "search",
		    "second",
		    "seek",
		    "select",
		    "sensitive",
		    "session_user",
		    "set",
		    "show",
		    "similar",
		    "sin",
		    "sinh",
		    "skip",
		    "smallint",
		    "some",
		    "specific",
		    "specifictype",
		    "sql",
		    "sqlexception",
		    "sqlstate",
		    "sqlwarning",
		    "sqrt",
		    "start",
		    "static",
		    "stddev_pop",
		    "stddev_samp",
		    "submultiset",
		    "subset",
		    "substring",
		    "substring_regex",
		    "succeeds",
		    "sum",
		    "symmetric",
		    "system",
		    "system_time",
		    "system_user",
		    "table",
		    "tablesample",
		    "tan",
		    "tanh",
		    "then",
		    "time",
		    "timestamp",
		    "timezone_hour",
		    "timezone_minute",
		    "to",
		    "trailing",
		    "translate",
		    "translate_regex",
		    "translation",
		    "treat",
		    "trigger",
		    "trim",
		    "trim_array",
		    "true",
		    "truncate",
		    "uescape",
		    "union",
		    "unique",
		    "unknown",
		    "unnest",
		    "update",
		    "upper",
		    "user",
		    "using",
		    "value",
		    "values",
		    "value_of",
		    "var_pop",
		    "var_samp",
		    "varbinary",
		    "varchar",
		    "varying",
		    "versioning",
		    "when",
		    "whenever",
		    "where",
		    "width_bucket",
		    "window",
		    "with",
		    "within",
		    "without",
		    "year",
		  ];

		  // these are reserved words we have identified to be functions
		  // and should only be highlighted in a dispatch-like context
		  // ie, array_agg(...), etc.
		  const RESERVED_FUNCTIONS = [
		    "abs",
		    "acos",
		    "array_agg",
		    "asin",
		    "atan",
		    "avg",
		    "cast",
		    "ceil",
		    "ceiling",
		    "coalesce",
		    "corr",
		    "cos",
		    "cosh",
		    "count",
		    "covar_pop",
		    "covar_samp",
		    "cume_dist",
		    "dense_rank",
		    "deref",
		    "element",
		    "exp",
		    "extract",
		    "first_value",
		    "floor",
		    "json_array",
		    "json_arrayagg",
		    "json_exists",
		    "json_object",
		    "json_objectagg",
		    "json_query",
		    "json_table",
		    "json_table_primitive",
		    "json_value",
		    "lag",
		    "last_value",
		    "lead",
		    "listagg",
		    "ln",
		    "log",
		    "log10",
		    "lower",
		    "max",
		    "min",
		    "mod",
		    "nth_value",
		    "ntile",
		    "nullif",
		    "percent_rank",
		    "percentile_cont",
		    "percentile_disc",
		    "position",
		    "position_regex",
		    "power",
		    "rank",
		    "regr_avgx",
		    "regr_avgy",
		    "regr_count",
		    "regr_intercept",
		    "regr_r2",
		    "regr_slope",
		    "regr_sxx",
		    "regr_sxy",
		    "regr_syy",
		    "row_number",
		    "sin",
		    "sinh",
		    "sqrt",
		    "stddev_pop",
		    "stddev_samp",
		    "substring",
		    "substring_regex",
		    "sum",
		    "tan",
		    "tanh",
		    "translate",
		    "translate_regex",
		    "treat",
		    "trim",
		    "trim_array",
		    "unnest",
		    "upper",
		    "value_of",
		    "var_pop",
		    "var_samp",
		    "width_bucket",
		  ];

		  // these functions can
		  const POSSIBLE_WITHOUT_PARENS = [
		    "current_catalog",
		    "current_date",
		    "current_default_transform_group",
		    "current_path",
		    "current_role",
		    "current_schema",
		    "current_transform_group_for_type",
		    "current_user",
		    "session_user",
		    "system_time",
		    "system_user",
		    "current_time",
		    "localtime",
		    "current_timestamp",
		    "localtimestamp"
		  ];

		  // those exist to boost relevance making these very
		  // "SQL like" keyword combos worth +1 extra relevance
		  const COMBOS = [
		    "create table",
		    "insert into",
		    "primary key",
		    "foreign key",
		    "not null",
		    "alter table",
		    "add constraint",
		    "grouping sets",
		    "on overflow",
		    "character set",
		    "respect nulls",
		    "ignore nulls",
		    "nulls first",
		    "nulls last",
		    "depth first",
		    "breadth first"
		  ];

		  const FUNCTIONS = RESERVED_FUNCTIONS;

		  const KEYWORDS = [
		    ...RESERVED_WORDS,
		    ...NON_RESERVED_WORDS
		  ].filter((keyword) => {
		    return !RESERVED_FUNCTIONS.includes(keyword);
		  });

		  const VARIABLE = {
		    className: "variable",
		    begin: /@[a-z0-9]+/,
		  };

		  const OPERATOR = {
		    className: "operator",
		    begin: /[-+*/=%^~]|&&?|\|\|?|!=?|<(?:=>?|<|>)?|>[>=]?/,
		    relevance: 0,
		  };

		  const FUNCTION_CALL = {
		    begin: regex.concat(/\b/, regex.either(...FUNCTIONS), /\s*\(/),
		    relevance: 0,
		    keywords: { built_in: FUNCTIONS }
		  };

		  // keywords with less than 3 letters are reduced in relevancy
		  function reduceRelevancy(list, {
		    exceptions, when
		  } = {}) {
		    const qualifyFn = when;
		    exceptions = exceptions || [];
		    return list.map((item) => {
		      if (item.match(/\|\d+$/) || exceptions.includes(item)) {
		        return item;
		      } else if (qualifyFn(item)) {
		        return `${item}|0`;
		      } else {
		        return item;
		      }
		    });
		  }

		  return {
		    name: 'SQL',
		    case_insensitive: true,
		    // does not include {} or HTML tags `</`
		    illegal: /[{}]|<\//,
		    keywords: {
		      $pattern: /\b[\w\.]+/,
		      keyword:
		        reduceRelevancy(KEYWORDS, { when: (x) => x.length < 3 }),
		      literal: LITERALS,
		      type: TYPES,
		      built_in: POSSIBLE_WITHOUT_PARENS
		    },
		    contains: [
		      {
		        begin: regex.either(...COMBOS),
		        relevance: 0,
		        keywords: {
		          $pattern: /[\w\.]+/,
		          keyword: KEYWORDS.concat(COMBOS),
		          literal: LITERALS,
		          type: TYPES
		        },
		      },
		      {
		        className: "type",
		        begin: regex.either(...MULTI_WORD_TYPES)
		      },
		      FUNCTION_CALL,
		      VARIABLE,
		      STRING,
		      QUOTED_IDENTIFIER,
		      hljs.C_NUMBER_MODE,
		      hljs.C_BLOCK_COMMENT_MODE,
		      COMMENT_MODE,
		      OPERATOR
		    ]
		  };
		}

		sql_1 = sql;
		return sql_1;
	}

	/**
	 * @param {string} value
	 * @returns {RegExp}
	 * */

	var swift_1;
	var hasRequiredSwift;

	function requireSwift () {
		if (hasRequiredSwift) return swift_1;
		hasRequiredSwift = 1;
		/**
		 * @param {RegExp | string } re
		 * @returns {string}
		 */
		function source(re) {
		  if (!re) return null;
		  if (typeof re === "string") return re;

		  return re.source;
		}

		/**
		 * @param {RegExp | string } re
		 * @returns {string}
		 */
		function lookahead(re) {
		  return concat('(?=', re, ')');
		}

		/**
		 * @param {...(RegExp | string) } args
		 * @returns {string}
		 */
		function concat(...args) {
		  const joined = args.map((x) => source(x)).join("");
		  return joined;
		}

		/**
		 * @param { Array<string | RegExp | Object> } args
		 * @returns {object}
		 */
		function stripOptionsFromArgs(args) {
		  const opts = args[args.length - 1];

		  if (typeof opts === 'object' && opts.constructor === Object) {
		    args.splice(args.length - 1, 1);
		    return opts;
		  } else {
		    return {};
		  }
		}

		/** @typedef { {capture?: boolean} } RegexEitherOptions */

		/**
		 * Any of the passed expresssions may match
		 *
		 * Creates a huge this | this | that | that match
		 * @param {(RegExp | string)[] | [...(RegExp | string)[], RegexEitherOptions]} args
		 * @returns {string}
		 */
		function either(...args) {
		  /** @type { object & {capture?: boolean} }  */
		  const opts = stripOptionsFromArgs(args);
		  const joined = '('
		    + (opts.capture ? "" : "?:")
		    + args.map((x) => source(x)).join("|") + ")";
		  return joined;
		}

		const keywordWrapper = keyword => concat(
		  /\b/,
		  keyword,
		  /\w$/.test(keyword) ? /\b/ : /\B/
		);

		// Keywords that require a leading dot.
		const dotKeywords = [
		  'Protocol', // contextual
		  'Type' // contextual
		].map(keywordWrapper);

		// Keywords that may have a leading dot.
		const optionalDotKeywords = [
		  'init',
		  'self'
		].map(keywordWrapper);

		// should register as keyword, not type
		const keywordTypes = [
		  'Any',
		  'Self'
		];

		// Regular keywords and literals.
		const keywords = [
		  // strings below will be fed into the regular `keywords` engine while regex
		  // will result in additional modes being created to scan for those keywords to
		  // avoid conflicts with other rules
		  'actor',
		  'any', // contextual
		  'associatedtype',
		  'async',
		  'await',
		  /as\?/, // operator
		  /as!/, // operator
		  'as', // operator
		  'break',
		  'case',
		  'catch',
		  'class',
		  'continue',
		  'convenience', // contextual
		  'default',
		  'defer',
		  'deinit',
		  'didSet', // contextual
		  'distributed',
		  'do',
		  'dynamic', // contextual
		  'else',
		  'enum',
		  'extension',
		  'fallthrough',
		  /fileprivate\(set\)/,
		  'fileprivate',
		  'final', // contextual
		  'for',
		  'func',
		  'get', // contextual
		  'guard',
		  'if',
		  'import',
		  'indirect', // contextual
		  'infix', // contextual
		  /init\?/,
		  /init!/,
		  'inout',
		  /internal\(set\)/,
		  'internal',
		  'in',
		  'is', // operator
		  'isolated', // contextual
		  'nonisolated', // contextual
		  'lazy', // contextual
		  'let',
		  'mutating', // contextual
		  'nonmutating', // contextual
		  /open\(set\)/, // contextual
		  'open', // contextual
		  'operator',
		  'optional', // contextual
		  'override', // contextual
		  'postfix', // contextual
		  'precedencegroup',
		  'prefix', // contextual
		  /private\(set\)/,
		  'private',
		  'protocol',
		  /public\(set\)/,
		  'public',
		  'repeat',
		  'required', // contextual
		  'rethrows',
		  'return',
		  'set', // contextual
		  'some', // contextual
		  'static',
		  'struct',
		  'subscript',
		  'super',
		  'switch',
		  'throws',
		  'throw',
		  /try\?/, // operator
		  /try!/, // operator
		  'try', // operator
		  'typealias',
		  /unowned\(safe\)/, // contextual
		  /unowned\(unsafe\)/, // contextual
		  'unowned', // contextual
		  'var',
		  'weak', // contextual
		  'where',
		  'while',
		  'willSet' // contextual
		];

		// NOTE: Contextual keywords are reserved only in specific contexts.
		// Ideally, these should be matched using modes to avoid false positives.

		// Literals.
		const literals = [
		  'false',
		  'nil',
		  'true'
		];

		// Keywords used in precedence groups.
		const precedencegroupKeywords = [
		  'assignment',
		  'associativity',
		  'higherThan',
		  'left',
		  'lowerThan',
		  'none',
		  'right'
		];

		// Keywords that start with a number sign (#).
		// #(un)available is handled separately.
		const numberSignKeywords = [
		  '#colorLiteral',
		  '#column',
		  '#dsohandle',
		  '#else',
		  '#elseif',
		  '#endif',
		  '#error',
		  '#file',
		  '#fileID',
		  '#fileLiteral',
		  '#filePath',
		  '#function',
		  '#if',
		  '#imageLiteral',
		  '#keyPath',
		  '#line',
		  '#selector',
		  '#sourceLocation',
		  '#warn_unqualified_access',
		  '#warning'
		];

		// Global functions in the Standard Library.
		const builtIns = [
		  'abs',
		  'all',
		  'any',
		  'assert',
		  'assertionFailure',
		  'debugPrint',
		  'dump',
		  'fatalError',
		  'getVaList',
		  'isKnownUniquelyReferenced',
		  'max',
		  'min',
		  'numericCast',
		  'pointwiseMax',
		  'pointwiseMin',
		  'precondition',
		  'preconditionFailure',
		  'print',
		  'readLine',
		  'repeatElement',
		  'sequence',
		  'stride',
		  'swap',
		  'swift_unboxFromSwiftValueWithType',
		  'transcode',
		  'type',
		  'unsafeBitCast',
		  'unsafeDowncast',
		  'withExtendedLifetime',
		  'withUnsafeMutablePointer',
		  'withUnsafePointer',
		  'withVaList',
		  'withoutActuallyEscaping',
		  'zip'
		];

		// Valid first characters for operators.
		const operatorHead = either(
		  /[/=\-+!*%<>&|^~?]/,
		  /[\u00A1-\u00A7]/,
		  /[\u00A9\u00AB]/,
		  /[\u00AC\u00AE]/,
		  /[\u00B0\u00B1]/,
		  /[\u00B6\u00BB\u00BF\u00D7\u00F7]/,
		  /[\u2016-\u2017]/,
		  /[\u2020-\u2027]/,
		  /[\u2030-\u203E]/,
		  /[\u2041-\u2053]/,
		  /[\u2055-\u205E]/,
		  /[\u2190-\u23FF]/,
		  /[\u2500-\u2775]/,
		  /[\u2794-\u2BFF]/,
		  /[\u2E00-\u2E7F]/,
		  /[\u3001-\u3003]/,
		  /[\u3008-\u3020]/,
		  /[\u3030]/
		);

		// Valid characters for operators.
		const operatorCharacter = either(
		  operatorHead,
		  /[\u0300-\u036F]/,
		  /[\u1DC0-\u1DFF]/,
		  /[\u20D0-\u20FF]/,
		  /[\uFE00-\uFE0F]/,
		  /[\uFE20-\uFE2F]/
		  // TODO: The following characters are also allowed, but the regex isn't supported yet.
		  // /[\u{E0100}-\u{E01EF}]/u
		);

		// Valid operator.
		const operator = concat(operatorHead, operatorCharacter, '*');

		// Valid first characters for identifiers.
		const identifierHead = either(
		  /[a-zA-Z_]/,
		  /[\u00A8\u00AA\u00AD\u00AF\u00B2-\u00B5\u00B7-\u00BA]/,
		  /[\u00BC-\u00BE\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u00FF]/,
		  /[\u0100-\u02FF\u0370-\u167F\u1681-\u180D\u180F-\u1DBF]/,
		  /[\u1E00-\u1FFF]/,
		  /[\u200B-\u200D\u202A-\u202E\u203F-\u2040\u2054\u2060-\u206F]/,
		  /[\u2070-\u20CF\u2100-\u218F\u2460-\u24FF\u2776-\u2793]/,
		  /[\u2C00-\u2DFF\u2E80-\u2FFF]/,
		  /[\u3004-\u3007\u3021-\u302F\u3031-\u303F\u3040-\uD7FF]/,
		  /[\uF900-\uFD3D\uFD40-\uFDCF\uFDF0-\uFE1F\uFE30-\uFE44]/,
		  /[\uFE47-\uFEFE\uFF00-\uFFFD]/ // Should be /[\uFE47-\uFFFD]/, but we have to exclude FEFF.
		  // The following characters are also allowed, but the regexes aren't supported yet.
		  // /[\u{10000}-\u{1FFFD}\u{20000-\u{2FFFD}\u{30000}-\u{3FFFD}\u{40000}-\u{4FFFD}]/u,
		  // /[\u{50000}-\u{5FFFD}\u{60000-\u{6FFFD}\u{70000}-\u{7FFFD}\u{80000}-\u{8FFFD}]/u,
		  // /[\u{90000}-\u{9FFFD}\u{A0000-\u{AFFFD}\u{B0000}-\u{BFFFD}\u{C0000}-\u{CFFFD}]/u,
		  // /[\u{D0000}-\u{DFFFD}\u{E0000-\u{EFFFD}]/u
		);

		// Valid characters for identifiers.
		const identifierCharacter = either(
		  identifierHead,
		  /\d/,
		  /[\u0300-\u036F\u1DC0-\u1DFF\u20D0-\u20FF\uFE20-\uFE2F]/
		);

		// Valid identifier.
		const identifier = concat(identifierHead, identifierCharacter, '*');

		// Valid type identifier.
		const typeIdentifier = concat(/[A-Z]/, identifierCharacter, '*');

		// Built-in attributes, which are highlighted as keywords.
		// @available is handled separately.
		const keywordAttributes = [
		  'autoclosure',
		  concat(/convention\(/, either('swift', 'block', 'c'), /\)/),
		  'discardableResult',
		  'dynamicCallable',
		  'dynamicMemberLookup',
		  'escaping',
		  'frozen',
		  'GKInspectable',
		  'IBAction',
		  'IBDesignable',
		  'IBInspectable',
		  'IBOutlet',
		  'IBSegueAction',
		  'inlinable',
		  'main',
		  'nonobjc',
		  'NSApplicationMain',
		  'NSCopying',
		  'NSManaged',
		  concat(/objc\(/, identifier, /\)/),
		  'objc',
		  'objcMembers',
		  'propertyWrapper',
		  'requires_stored_property_inits',
		  'resultBuilder',
		  'testable',
		  'UIApplicationMain',
		  'unknown',
		  'usableFromInline'
		];

		// Contextual keywords used in @available and #(un)available.
		const availabilityKeywords = [
		  'iOS',
		  'iOSApplicationExtension',
		  'macOS',
		  'macOSApplicationExtension',
		  'macCatalyst',
		  'macCatalystApplicationExtension',
		  'watchOS',
		  'watchOSApplicationExtension',
		  'tvOS',
		  'tvOSApplicationExtension',
		  'swift'
		];

		/*
		Language: Swift
		Description: Swift is a general-purpose programming language built using a modern approach to safety, performance, and software design patterns.
		Author: Steven Van Impe <steven.vanimpe@icloud.com>
		Contributors: Chris Eidhof <chris@eidhof.nl>, Nate Cook <natecook@gmail.com>, Alexander Lichter <manniL@gmx.net>, Richard Gibson <gibson042@github>
		Website: https://swift.org
		Category: common, system
		*/

		/** @type LanguageFn */
		function swift(hljs) {
		  const WHITESPACE = {
		    match: /\s+/,
		    relevance: 0
		  };
		  // https://docs.swift.org/swift-book/ReferenceManual/LexicalStructure.html#ID411
		  const BLOCK_COMMENT = hljs.COMMENT(
		    '/\\*',
		    '\\*/',
		    { contains: [ 'self' ] }
		  );
		  const COMMENTS = [
		    hljs.C_LINE_COMMENT_MODE,
		    BLOCK_COMMENT
		  ];

		  // https://docs.swift.org/swift-book/ReferenceManual/LexicalStructure.html#ID413
		  // https://docs.swift.org/swift-book/ReferenceManual/zzSummaryOfTheGrammar.html
		  const DOT_KEYWORD = {
		    match: [
		      /\./,
		      either(...dotKeywords, ...optionalDotKeywords)
		    ],
		    className: { 2: "keyword" }
		  };
		  const KEYWORD_GUARD = {
		    // Consume .keyword to prevent highlighting properties and methods as keywords.
		    match: concat(/\./, either(...keywords)),
		    relevance: 0
		  };
		  const PLAIN_KEYWORDS = keywords
		    .filter(kw => typeof kw === 'string')
		    .concat([ "_|0" ]); // seems common, so 0 relevance
		  const REGEX_KEYWORDS = keywords
		    .filter(kw => typeof kw !== 'string') // find regex
		    .concat(keywordTypes)
		    .map(keywordWrapper);
		  const KEYWORD = { variants: [
		    {
		      className: 'keyword',
		      match: either(...REGEX_KEYWORDS, ...optionalDotKeywords)
		    }
		  ] };
		  // find all the regular keywords
		  const KEYWORDS = {
		    $pattern: either(
		      /\b\w+/, // regular keywords
		      /#\w+/ // number keywords
		    ),
		    keyword: PLAIN_KEYWORDS
		      .concat(numberSignKeywords),
		    literal: literals
		  };
		  const KEYWORD_MODES = [
		    DOT_KEYWORD,
		    KEYWORD_GUARD,
		    KEYWORD
		  ];

		  // https://github.com/apple/swift/tree/main/stdlib/public/core
		  const BUILT_IN_GUARD = {
		    // Consume .built_in to prevent highlighting properties and methods.
		    match: concat(/\./, either(...builtIns)),
		    relevance: 0
		  };
		  const BUILT_IN = {
		    className: 'built_in',
		    match: concat(/\b/, either(...builtIns), /(?=\()/)
		  };
		  const BUILT_INS = [
		    BUILT_IN_GUARD,
		    BUILT_IN
		  ];

		  // https://docs.swift.org/swift-book/ReferenceManual/LexicalStructure.html#ID418
		  const OPERATOR_GUARD = {
		    // Prevent -> from being highlighting as an operator.
		    match: /->/,
		    relevance: 0
		  };
		  const OPERATOR = {
		    className: 'operator',
		    relevance: 0,
		    variants: [
		      { match: operator },
		      {
		        // dot-operator: only operators that start with a dot are allowed to use dots as
		        // characters (..., ...<, .*, etc). So there rule here is: a dot followed by one or more
		        // characters that may also include dots.
		        match: `\\.(\\.|${operatorCharacter})+` }
		    ]
		  };
		  const OPERATORS = [
		    OPERATOR_GUARD,
		    OPERATOR
		  ];

		  // https://docs.swift.org/swift-book/ReferenceManual/LexicalStructure.html#grammar_numeric-literal
		  // TODO: Update for leading `-` after lookbehind is supported everywhere
		  const decimalDigits = '([0-9]_*)+';
		  const hexDigits = '([0-9a-fA-F]_*)+';
		  const NUMBER = {
		    className: 'number',
		    relevance: 0,
		    variants: [
		      // decimal floating-point-literal (subsumes decimal-literal)
		      { match: `\\b(${decimalDigits})(\\.(${decimalDigits}))?` + `([eE][+-]?(${decimalDigits}))?\\b` },
		      // hexadecimal floating-point-literal (subsumes hexadecimal-literal)
		      { match: `\\b0x(${hexDigits})(\\.(${hexDigits}))?` + `([pP][+-]?(${decimalDigits}))?\\b` },
		      // octal-literal
		      { match: /\b0o([0-7]_*)+\b/ },
		      // binary-literal
		      { match: /\b0b([01]_*)+\b/ }
		    ]
		  };

		  // https://docs.swift.org/swift-book/ReferenceManual/LexicalStructure.html#grammar_string-literal
		  const ESCAPED_CHARACTER = (rawDelimiter = "") => ({
		    className: 'subst',
		    variants: [
		      { match: concat(/\\/, rawDelimiter, /[0\\tnr"']/) },
		      { match: concat(/\\/, rawDelimiter, /u\{[0-9a-fA-F]{1,8}\}/) }
		    ]
		  });
		  const ESCAPED_NEWLINE = (rawDelimiter = "") => ({
		    className: 'subst',
		    match: concat(/\\/, rawDelimiter, /[\t ]*(?:[\r\n]|\r\n)/)
		  });
		  const INTERPOLATION = (rawDelimiter = "") => ({
		    className: 'subst',
		    label: "interpol",
		    begin: concat(/\\/, rawDelimiter, /\(/),
		    end: /\)/
		  });
		  const MULTILINE_STRING = (rawDelimiter = "") => ({
		    begin: concat(rawDelimiter, /"""/),
		    end: concat(/"""/, rawDelimiter),
		    contains: [
		      ESCAPED_CHARACTER(rawDelimiter),
		      ESCAPED_NEWLINE(rawDelimiter),
		      INTERPOLATION(rawDelimiter)
		    ]
		  });
		  const SINGLE_LINE_STRING = (rawDelimiter = "") => ({
		    begin: concat(rawDelimiter, /"/),
		    end: concat(/"/, rawDelimiter),
		    contains: [
		      ESCAPED_CHARACTER(rawDelimiter),
		      INTERPOLATION(rawDelimiter)
		    ]
		  });
		  const STRING = {
		    className: 'string',
		    variants: [
		      MULTILINE_STRING(),
		      MULTILINE_STRING("#"),
		      MULTILINE_STRING("##"),
		      MULTILINE_STRING("###"),
		      SINGLE_LINE_STRING(),
		      SINGLE_LINE_STRING("#"),
		      SINGLE_LINE_STRING("##"),
		      SINGLE_LINE_STRING("###")
		    ]
		  };

		  // https://docs.swift.org/swift-book/ReferenceManual/LexicalStructure.html#ID412
		  const QUOTED_IDENTIFIER = { match: concat(/`/, identifier, /`/) };
		  const IMPLICIT_PARAMETER = {
		    className: 'variable',
		    match: /\$\d+/
		  };
		  const PROPERTY_WRAPPER_PROJECTION = {
		    className: 'variable',
		    match: `\\$${identifierCharacter}+`
		  };
		  const IDENTIFIERS = [
		    QUOTED_IDENTIFIER,
		    IMPLICIT_PARAMETER,
		    PROPERTY_WRAPPER_PROJECTION
		  ];

		  // https://docs.swift.org/swift-book/ReferenceManual/Attributes.html
		  const AVAILABLE_ATTRIBUTE = {
		    match: /(@|#(un)?)available/,
		    className: "keyword",
		    starts: { contains: [
		      {
		        begin: /\(/,
		        end: /\)/,
		        keywords: availabilityKeywords,
		        contains: [
		          ...OPERATORS,
		          NUMBER,
		          STRING
		        ]
		      }
		    ] }
		  };
		  const KEYWORD_ATTRIBUTE = {
		    className: 'keyword',
		    match: concat(/@/, either(...keywordAttributes))
		  };
		  const USER_DEFINED_ATTRIBUTE = {
		    className: 'meta',
		    match: concat(/@/, identifier)
		  };
		  const ATTRIBUTES = [
		    AVAILABLE_ATTRIBUTE,
		    KEYWORD_ATTRIBUTE,
		    USER_DEFINED_ATTRIBUTE
		  ];

		  // https://docs.swift.org/swift-book/ReferenceManual/Types.html
		  const TYPE = {
		    match: lookahead(/\b[A-Z]/),
		    relevance: 0,
		    contains: [
		      { // Common Apple frameworks, for relevance boost
		        className: 'type',
		        match: concat(/(AV|CA|CF|CG|CI|CL|CM|CN|CT|MK|MP|MTK|MTL|NS|SCN|SK|UI|WK|XC)/, identifierCharacter, '+')
		      },
		      { // Type identifier
		        className: 'type',
		        match: typeIdentifier,
		        relevance: 0
		      },
		      { // Optional type
		        match: /[?!]+/,
		        relevance: 0
		      },
		      { // Variadic parameter
		        match: /\.\.\./,
		        relevance: 0
		      },
		      { // Protocol composition
		        match: concat(/\s+&\s+/, lookahead(typeIdentifier)),
		        relevance: 0
		      }
		    ]
		  };
		  const GENERIC_ARGUMENTS = {
		    begin: /</,
		    end: />/,
		    keywords: KEYWORDS,
		    contains: [
		      ...COMMENTS,
		      ...KEYWORD_MODES,
		      ...ATTRIBUTES,
		      OPERATOR_GUARD,
		      TYPE
		    ]
		  };
		  TYPE.contains.push(GENERIC_ARGUMENTS);

		  // https://docs.swift.org/swift-book/ReferenceManual/Expressions.html#ID552
		  // Prevents element names from being highlighted as keywords.
		  const TUPLE_ELEMENT_NAME = {
		    match: concat(identifier, /\s*:/),
		    keywords: "_|0",
		    relevance: 0
		  };
		  // Matches tuples as well as the parameter list of a function type.
		  const TUPLE = {
		    begin: /\(/,
		    end: /\)/,
		    relevance: 0,
		    keywords: KEYWORDS,
		    contains: [
		      'self',
		      TUPLE_ELEMENT_NAME,
		      ...COMMENTS,
		      ...KEYWORD_MODES,
		      ...BUILT_INS,
		      ...OPERATORS,
		      NUMBER,
		      STRING,
		      ...IDENTIFIERS,
		      ...ATTRIBUTES,
		      TYPE
		    ]
		  };

		  const GENERIC_PARAMETERS = {
		    begin: /</,
		    end: />/,
		    contains: [
		      ...COMMENTS,
		      TYPE
		    ]
		  };
		  const FUNCTION_PARAMETER_NAME = {
		    begin: either(
		      lookahead(concat(identifier, /\s*:/)),
		      lookahead(concat(identifier, /\s+/, identifier, /\s*:/))
		    ),
		    end: /:/,
		    relevance: 0,
		    contains: [
		      {
		        className: 'keyword',
		        match: /\b_\b/
		      },
		      {
		        className: 'params',
		        match: identifier
		      }
		    ]
		  };
		  const FUNCTION_PARAMETERS = {
		    begin: /\(/,
		    end: /\)/,
		    keywords: KEYWORDS,
		    contains: [
		      FUNCTION_PARAMETER_NAME,
		      ...COMMENTS,
		      ...KEYWORD_MODES,
		      ...OPERATORS,
		      NUMBER,
		      STRING,
		      ...ATTRIBUTES,
		      TYPE,
		      TUPLE
		    ],
		    endsParent: true,
		    illegal: /["']/
		  };
		  // https://docs.swift.org/swift-book/ReferenceManual/Declarations.html#ID362
		  const FUNCTION = {
		    match: [
		      /func/,
		      /\s+/,
		      either(QUOTED_IDENTIFIER.match, identifier, operator)
		    ],
		    className: {
		      1: "keyword",
		      3: "title.function"
		    },
		    contains: [
		      GENERIC_PARAMETERS,
		      FUNCTION_PARAMETERS,
		      WHITESPACE
		    ],
		    illegal: [
		      /\[/,
		      /%/
		    ]
		  };

		  // https://docs.swift.org/swift-book/ReferenceManual/Declarations.html#ID375
		  // https://docs.swift.org/swift-book/ReferenceManual/Declarations.html#ID379
		  const INIT_SUBSCRIPT = {
		    match: [
		      /\b(?:subscript|init[?!]?)/,
		      /\s*(?=[<(])/,
		    ],
		    className: { 1: "keyword" },
		    contains: [
		      GENERIC_PARAMETERS,
		      FUNCTION_PARAMETERS,
		      WHITESPACE
		    ],
		    illegal: /\[|%/
		  };
		  // https://docs.swift.org/swift-book/ReferenceManual/Declarations.html#ID380
		  const OPERATOR_DECLARATION = {
		    match: [
		      /operator/,
		      /\s+/,
		      operator
		    ],
		    className: {
		      1: "keyword",
		      3: "title"
		    }
		  };

		  // https://docs.swift.org/swift-book/ReferenceManual/Declarations.html#ID550
		  const PRECEDENCEGROUP = {
		    begin: [
		      /precedencegroup/,
		      /\s+/,
		      typeIdentifier
		    ],
		    className: {
		      1: "keyword",
		      3: "title"
		    },
		    contains: [ TYPE ],
		    keywords: [
		      ...precedencegroupKeywords,
		      ...literals
		    ],
		    end: /}/
		  };

		  // Add supported submodes to string interpolation.
		  for (const variant of STRING.variants) {
		    const interpolation = variant.contains.find(mode => mode.label === "interpol");
		    // TODO: Interpolation can contain any expression, so there's room for improvement here.
		    interpolation.keywords = KEYWORDS;
		    const submodes = [
		      ...KEYWORD_MODES,
		      ...BUILT_INS,
		      ...OPERATORS,
		      NUMBER,
		      STRING,
		      ...IDENTIFIERS
		    ];
		    interpolation.contains = [
		      ...submodes,
		      {
		        begin: /\(/,
		        end: /\)/,
		        contains: [
		          'self',
		          ...submodes
		        ]
		      }
		    ];
		  }

		  return {
		    name: 'Swift',
		    keywords: KEYWORDS,
		    contains: [
		      ...COMMENTS,
		      FUNCTION,
		      INIT_SUBSCRIPT,
		      {
		        beginKeywords: 'struct protocol class extension enum actor',
		        end: '\\{',
		        excludeEnd: true,
		        keywords: KEYWORDS,
		        contains: [
		          hljs.inherit(hljs.TITLE_MODE, {
		            className: "title.class",
		            begin: /[A-Za-z$_][\u00C0-\u02B80-9A-Za-z$_]*/
		          }),
		          ...KEYWORD_MODES
		        ]
		      },
		      OPERATOR_DECLARATION,
		      PRECEDENCEGROUP,
		      {
		        beginKeywords: 'import',
		        end: /$/,
		        contains: [ ...COMMENTS ],
		        relevance: 0
		      },
		      ...KEYWORD_MODES,
		      ...BUILT_INS,
		      ...OPERATORS,
		      NUMBER,
		      STRING,
		      ...IDENTIFIERS,
		      ...ATTRIBUTES,
		      TYPE,
		      TUPLE
		    ]
		  };
		}

		swift_1 = swift;
		return swift_1;
	}

	/*
	Language: YAML
	Description: Yet Another Markdown Language
	Author: Stefan Wienert <stwienert@gmail.com>
	Contributors: Carl Baxter <carl@cbax.tech>
	Requires: ruby.js
	Website: https://yaml.org
	Category: common, config
	*/

	var yaml_1;
	var hasRequiredYaml;

	function requireYaml () {
		if (hasRequiredYaml) return yaml_1;
		hasRequiredYaml = 1;
		function yaml(hljs) {
		  const LITERALS = 'true false yes no null';

		  // YAML spec allows non-reserved URI characters in tags.
		  const URI_CHARACTERS = '[\\w#;/?:@&=+$,.~*\'()[\\]]+';

		  // Define keys as starting with a word character
		  // ...containing word chars, spaces, colons, forward-slashes, hyphens and periods
		  // ...and ending with a colon followed immediately by a space, tab or newline.
		  // The YAML spec allows for much more than this, but this covers most use-cases.
		  const KEY = {
		    className: 'attr',
		    variants: [
		      { begin: '\\w[\\w :\\/.-]*:(?=[ \t]|$)' },
		      { // double quoted keys
		        begin: '"\\w[\\w :\\/.-]*":(?=[ \t]|$)' },
		      { // single quoted keys
		        begin: '\'\\w[\\w :\\/.-]*\':(?=[ \t]|$)' }
		    ]
		  };

		  const TEMPLATE_VARIABLES = {
		    className: 'template-variable',
		    variants: [
		      { // jinja templates Ansible
		        begin: /\{\{/,
		        end: /\}\}/
		      },
		      { // Ruby i18n
		        begin: /%\{/,
		        end: /\}/
		      }
		    ]
		  };
		  const STRING = {
		    className: 'string',
		    relevance: 0,
		    variants: [
		      {
		        begin: /'/,
		        end: /'/
		      },
		      {
		        begin: /"/,
		        end: /"/
		      },
		      { begin: /\S+/ }
		    ],
		    contains: [
		      hljs.BACKSLASH_ESCAPE,
		      TEMPLATE_VARIABLES
		    ]
		  };

		  // Strings inside of value containers (objects) can't contain braces,
		  // brackets, or commas
		  const CONTAINER_STRING = hljs.inherit(STRING, { variants: [
		    {
		      begin: /'/,
		      end: /'/
		    },
		    {
		      begin: /"/,
		      end: /"/
		    },
		    { begin: /[^\s,{}[\]]+/ }
		  ] });

		  const DATE_RE = '[0-9]{4}(-[0-9][0-9]){0,2}';
		  const TIME_RE = '([Tt \\t][0-9][0-9]?(:[0-9][0-9]){2})?';
		  const FRACTION_RE = '(\\.[0-9]*)?';
		  const ZONE_RE = '([ \\t])*(Z|[-+][0-9][0-9]?(:[0-9][0-9])?)?';
		  const TIMESTAMP = {
		    className: 'number',
		    begin: '\\b' + DATE_RE + TIME_RE + FRACTION_RE + ZONE_RE + '\\b'
		  };

		  const VALUE_CONTAINER = {
		    end: ',',
		    endsWithParent: true,
		    excludeEnd: true,
		    keywords: LITERALS,
		    relevance: 0
		  };
		  const OBJECT = {
		    begin: /\{/,
		    end: /\}/,
		    contains: [ VALUE_CONTAINER ],
		    illegal: '\\n',
		    relevance: 0
		  };
		  const ARRAY = {
		    begin: '\\[',
		    end: '\\]',
		    contains: [ VALUE_CONTAINER ],
		    illegal: '\\n',
		    relevance: 0
		  };

		  const MODES = [
		    KEY,
		    {
		      className: 'meta',
		      begin: '^---\\s*$',
		      relevance: 10
		    },
		    { // multi line string
		      // Blocks start with a | or > followed by a newline
		      //
		      // Indentation of subsequent lines must be the same to
		      // be considered part of the block
		      className: 'string',
		      begin: '[\\|>]([1-9]?[+-])?[ ]*\\n( +)[^ ][^\\n]*\\n(\\2[^\\n]+\\n?)*'
		    },
		    { // Ruby/Rails erb
		      begin: '<%[%=-]?',
		      end: '[%-]?%>',
		      subLanguage: 'ruby',
		      excludeBegin: true,
		      excludeEnd: true,
		      relevance: 0
		    },
		    { // named tags
		      className: 'type',
		      begin: '!\\w+!' + URI_CHARACTERS
		    },
		    // https://yaml.org/spec/1.2/spec.html#id2784064
		    { // verbatim tags
		      className: 'type',
		      begin: '!<' + URI_CHARACTERS + ">"
		    },
		    { // primary tags
		      className: 'type',
		      begin: '!' + URI_CHARACTERS
		    },
		    { // secondary tags
		      className: 'type',
		      begin: '!!' + URI_CHARACTERS
		    },
		    { // fragment id &ref
		      className: 'meta',
		      begin: '&' + hljs.UNDERSCORE_IDENT_RE + '$'
		    },
		    { // fragment reference *ref
		      className: 'meta',
		      begin: '\\*' + hljs.UNDERSCORE_IDENT_RE + '$'
		    },
		    { // array listing
		      className: 'bullet',
		      // TODO: remove |$ hack when we have proper look-ahead support
		      begin: '-(?=[ ]|$)',
		      relevance: 0
		    },
		    hljs.HASH_COMMENT_MODE,
		    {
		      beginKeywords: LITERALS,
		      keywords: { literal: LITERALS }
		    },
		    TIMESTAMP,
		    // numbers are any valid C-style number that
		    // sit isolated from other words
		    {
		      className: 'number',
		      begin: hljs.C_NUMBER_RE + '\\b',
		      relevance: 0
		    },
		    OBJECT,
		    ARRAY,
		    STRING
		  ];

		  const VALUE_MODES = [ ...MODES ];
		  VALUE_MODES.pop();
		  VALUE_MODES.push(CONTAINER_STRING);
		  VALUE_CONTAINER.contains = VALUE_MODES;

		  return {
		    name: 'YAML',
		    case_insensitive: true,
		    aliases: [ 'yml' ],
		    contains: MODES
		  };
		}

		yaml_1 = yaml;
		return yaml_1;
	}

	var typescript_1;
	var hasRequiredTypescript;

	function requireTypescript () {
		if (hasRequiredTypescript) return typescript_1;
		hasRequiredTypescript = 1;
		const IDENT_RE = '[A-Za-z$_][0-9A-Za-z$_]*';
		const KEYWORDS = [
		  "as", // for exports
		  "in",
		  "of",
		  "if",
		  "for",
		  "while",
		  "finally",
		  "var",
		  "new",
		  "function",
		  "do",
		  "return",
		  "void",
		  "else",
		  "break",
		  "catch",
		  "instanceof",
		  "with",
		  "throw",
		  "case",
		  "default",
		  "try",
		  "switch",
		  "continue",
		  "typeof",
		  "delete",
		  "let",
		  "yield",
		  "const",
		  "class",
		  // JS handles these with a special rule
		  // "get",
		  // "set",
		  "debugger",
		  "async",
		  "await",
		  "static",
		  "import",
		  "from",
		  "export",
		  "extends"
		];
		const LITERALS = [
		  "true",
		  "false",
		  "null",
		  "undefined",
		  "NaN",
		  "Infinity"
		];

		// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects
		const TYPES = [
		  // Fundamental objects
		  "Object",
		  "Function",
		  "Boolean",
		  "Symbol",
		  // numbers and dates
		  "Math",
		  "Date",
		  "Number",
		  "BigInt",
		  // text
		  "String",
		  "RegExp",
		  // Indexed collections
		  "Array",
		  "Float32Array",
		  "Float64Array",
		  "Int8Array",
		  "Uint8Array",
		  "Uint8ClampedArray",
		  "Int16Array",
		  "Int32Array",
		  "Uint16Array",
		  "Uint32Array",
		  "BigInt64Array",
		  "BigUint64Array",
		  // Keyed collections
		  "Set",
		  "Map",
		  "WeakSet",
		  "WeakMap",
		  // Structured data
		  "ArrayBuffer",
		  "SharedArrayBuffer",
		  "Atomics",
		  "DataView",
		  "JSON",
		  // Control abstraction objects
		  "Promise",
		  "Generator",
		  "GeneratorFunction",
		  "AsyncFunction",
		  // Reflection
		  "Reflect",
		  "Proxy",
		  // Internationalization
		  "Intl",
		  // WebAssembly
		  "WebAssembly"
		];

		const ERROR_TYPES = [
		  "Error",
		  "EvalError",
		  "InternalError",
		  "RangeError",
		  "ReferenceError",
		  "SyntaxError",
		  "TypeError",
		  "URIError"
		];

		const BUILT_IN_GLOBALS = [
		  "setInterval",
		  "setTimeout",
		  "clearInterval",
		  "clearTimeout",

		  "require",
		  "exports",

		  "eval",
		  "isFinite",
		  "isNaN",
		  "parseFloat",
		  "parseInt",
		  "decodeURI",
		  "decodeURIComponent",
		  "encodeURI",
		  "encodeURIComponent",
		  "escape",
		  "unescape"
		];

		const BUILT_IN_VARIABLES = [
		  "arguments",
		  "this",
		  "super",
		  "console",
		  "window",
		  "document",
		  "localStorage",
		  "module",
		  "global" // Node.js
		];

		const BUILT_INS = [].concat(
		  BUILT_IN_GLOBALS,
		  TYPES,
		  ERROR_TYPES
		);

		/*
		Language: JavaScript
		Description: JavaScript (JS) is a lightweight, interpreted, or just-in-time compiled programming language with first-class functions.
		Category: common, scripting, web
		Website: https://developer.mozilla.org/en-US/docs/Web/JavaScript
		*/

		/** @type LanguageFn */
		function javascript(hljs) {
		  const regex = hljs.regex;
		  /**
		   * Takes a string like "<Booger" and checks to see
		   * if we can find a matching "</Booger" later in the
		   * content.
		   * @param {RegExpMatchArray} match
		   * @param {{after:number}} param1
		   */
		  const hasClosingTag = (match, { after }) => {
		    const tag = "</" + match[0].slice(1);
		    const pos = match.input.indexOf(tag, after);
		    return pos !== -1;
		  };

		  const IDENT_RE$1 = IDENT_RE;
		  const FRAGMENT = {
		    begin: '<>',
		    end: '</>'
		  };
		  // to avoid some special cases inside isTrulyOpeningTag
		  const XML_SELF_CLOSING = /<[A-Za-z0-9\\._:-]+\s*\/>/;
		  const XML_TAG = {
		    begin: /<[A-Za-z0-9\\._:-]+/,
		    end: /\/[A-Za-z0-9\\._:-]+>|\/>/,
		    /**
		     * @param {RegExpMatchArray} match
		     * @param {CallbackResponse} response
		     */
		    isTrulyOpeningTag: (match, response) => {
		      const afterMatchIndex = match[0].length + match.index;
		      const nextChar = match.input[afterMatchIndex];
		      if (
		        // HTML should not include another raw `<` inside a tag
		        // nested type?
		        // `<Array<Array<number>>`, etc.
		        nextChar === "<" ||
		        // the , gives away that this is not HTML
		        // `<T, A extends keyof T, V>`
		        nextChar === ",") {
		        response.ignoreMatch();
		        return;
		      }

		      // `<something>`
		      // Quite possibly a tag, lets look for a matching closing tag...
		      if (nextChar === ">") {
		        // if we cannot find a matching closing tag, then we
		        // will ignore it
		        if (!hasClosingTag(match, { after: afterMatchIndex })) {
		          response.ignoreMatch();
		        }
		      }

		      // `<blah />` (self-closing)
		      // handled by simpleSelfClosing rule

		      // `<From extends string>`
		      // technically this could be HTML, but it smells like a type
		      let m;
		      const afterMatch = match.input.substring(afterMatchIndex);
		      // NOTE: This is ugh, but added specifically for https://github.com/highlightjs/highlight.js/issues/3276
		      if ((m = afterMatch.match(/^\s+extends\s+/))) {
		        if (m.index === 0) {
		          response.ignoreMatch();
		          // eslint-disable-next-line no-useless-return
		          return;
		        }
		      }
		    }
		  };
		  const KEYWORDS$1 = {
		    $pattern: IDENT_RE,
		    keyword: KEYWORDS,
		    literal: LITERALS,
		    built_in: BUILT_INS,
		    "variable.language": BUILT_IN_VARIABLES
		  };

		  // https://tc39.es/ecma262/#sec-literals-numeric-literals
		  const decimalDigits = '[0-9](_?[0-9])*';
		  const frac = `\\.(${decimalDigits})`;
		  // DecimalIntegerLiteral, including Annex B NonOctalDecimalIntegerLiteral
		  // https://tc39.es/ecma262/#sec-additional-syntax-numeric-literals
		  const decimalInteger = `0|[1-9](_?[0-9])*|0[0-7]*[89][0-9]*`;
		  const NUMBER = {
		    className: 'number',
		    variants: [
		      // DecimalLiteral
		      { begin: `(\\b(${decimalInteger})((${frac})|\\.)?|(${frac}))` +
		        `[eE][+-]?(${decimalDigits})\\b` },
		      { begin: `\\b(${decimalInteger})\\b((${frac})\\b|\\.)?|(${frac})\\b` },

		      // DecimalBigIntegerLiteral
		      { begin: `\\b(0|[1-9](_?[0-9])*)n\\b` },

		      // NonDecimalIntegerLiteral
		      { begin: "\\b0[xX][0-9a-fA-F](_?[0-9a-fA-F])*n?\\b" },
		      { begin: "\\b0[bB][0-1](_?[0-1])*n?\\b" },
		      { begin: "\\b0[oO][0-7](_?[0-7])*n?\\b" },

		      // LegacyOctalIntegerLiteral (does not include underscore separators)
		      // https://tc39.es/ecma262/#sec-additional-syntax-numeric-literals
		      { begin: "\\b0[0-7]+n?\\b" },
		    ],
		    relevance: 0
		  };

		  const SUBST = {
		    className: 'subst',
		    begin: '\\$\\{',
		    end: '\\}',
		    keywords: KEYWORDS$1,
		    contains: [] // defined later
		  };
		  const HTML_TEMPLATE = {
		    begin: 'html`',
		    end: '',
		    starts: {
		      end: '`',
		      returnEnd: false,
		      contains: [
		        hljs.BACKSLASH_ESCAPE,
		        SUBST
		      ],
		      subLanguage: 'xml'
		    }
		  };
		  const CSS_TEMPLATE = {
		    begin: 'css`',
		    end: '',
		    starts: {
		      end: '`',
		      returnEnd: false,
		      contains: [
		        hljs.BACKSLASH_ESCAPE,
		        SUBST
		      ],
		      subLanguage: 'css'
		    }
		  };
		  const TEMPLATE_STRING = {
		    className: 'string',
		    begin: '`',
		    end: '`',
		    contains: [
		      hljs.BACKSLASH_ESCAPE,
		      SUBST
		    ]
		  };
		  const JSDOC_COMMENT = hljs.COMMENT(
		    /\/\*\*(?!\/)/,
		    '\\*/',
		    {
		      relevance: 0,
		      contains: [
		        {
		          begin: '(?=@[A-Za-z]+)',
		          relevance: 0,
		          contains: [
		            {
		              className: 'doctag',
		              begin: '@[A-Za-z]+'
		            },
		            {
		              className: 'type',
		              begin: '\\{',
		              end: '\\}',
		              excludeEnd: true,
		              excludeBegin: true,
		              relevance: 0
		            },
		            {
		              className: 'variable',
		              begin: IDENT_RE$1 + '(?=\\s*(-)|$)',
		              endsParent: true,
		              relevance: 0
		            },
		            // eat spaces (not newlines) so we can find
		            // types or variables
		            {
		              begin: /(?=[^\n])\s/,
		              relevance: 0
		            }
		          ]
		        }
		      ]
		    }
		  );
		  const COMMENT = {
		    className: "comment",
		    variants: [
		      JSDOC_COMMENT,
		      hljs.C_BLOCK_COMMENT_MODE,
		      hljs.C_LINE_COMMENT_MODE
		    ]
		  };
		  const SUBST_INTERNALS = [
		    hljs.APOS_STRING_MODE,
		    hljs.QUOTE_STRING_MODE,
		    HTML_TEMPLATE,
		    CSS_TEMPLATE,
		    TEMPLATE_STRING,
		    NUMBER,
		    // This is intentional:
		    // See https://github.com/highlightjs/highlight.js/issues/3288
		    // hljs.REGEXP_MODE
		  ];
		  SUBST.contains = SUBST_INTERNALS
		    .concat({
		      // we need to pair up {} inside our subst to prevent
		      // it from ending too early by matching another }
		      begin: /\{/,
		      end: /\}/,
		      keywords: KEYWORDS$1,
		      contains: [
		        "self"
		      ].concat(SUBST_INTERNALS)
		    });
		  const SUBST_AND_COMMENTS = [].concat(COMMENT, SUBST.contains);
		  const PARAMS_CONTAINS = SUBST_AND_COMMENTS.concat([
		    // eat recursive parens in sub expressions
		    {
		      begin: /\(/,
		      end: /\)/,
		      keywords: KEYWORDS$1,
		      contains: ["self"].concat(SUBST_AND_COMMENTS)
		    }
		  ]);
		  const PARAMS = {
		    className: 'params',
		    begin: /\(/,
		    end: /\)/,
		    excludeBegin: true,
		    excludeEnd: true,
		    keywords: KEYWORDS$1,
		    contains: PARAMS_CONTAINS
		  };

		  // ES6 classes
		  const CLASS_OR_EXTENDS = {
		    variants: [
		      // class Car extends vehicle
		      {
		        match: [
		          /class/,
		          /\s+/,
		          IDENT_RE$1,
		          /\s+/,
		          /extends/,
		          /\s+/,
		          regex.concat(IDENT_RE$1, "(", regex.concat(/\./, IDENT_RE$1), ")*")
		        ],
		        scope: {
		          1: "keyword",
		          3: "title.class",
		          5: "keyword",
		          7: "title.class.inherited"
		        }
		      },
		      // class Car
		      {
		        match: [
		          /class/,
		          /\s+/,
		          IDENT_RE$1
		        ],
		        scope: {
		          1: "keyword",
		          3: "title.class"
		        }
		      },

		    ]
		  };

		  const CLASS_REFERENCE = {
		    relevance: 0,
		    match:
		    regex.either(
		      // Hard coded exceptions
		      /\bJSON/,
		      // Float32Array, OutT
		      /\b[A-Z][a-z]+([A-Z][a-z]*|\d)*/,
		      // CSSFactory, CSSFactoryT
		      /\b[A-Z]{2,}([A-Z][a-z]+|\d)+([A-Z][a-z]*)*/,
		      // FPs, FPsT
		      /\b[A-Z]{2,}[a-z]+([A-Z][a-z]+|\d)*([A-Z][a-z]*)*/,
		      // P
		      // single letters are not highlighted
		      // BLAH
		      // this will be flagged as a UPPER_CASE_CONSTANT instead
		    ),
		    className: "title.class",
		    keywords: {
		      _: [
		        // se we still get relevance credit for JS library classes
		        ...TYPES,
		        ...ERROR_TYPES
		      ]
		    }
		  };

		  const USE_STRICT = {
		    label: "use_strict",
		    className: 'meta',
		    relevance: 10,
		    begin: /^\s*['"]use (strict|asm)['"]/
		  };

		  const FUNCTION_DEFINITION = {
		    variants: [
		      {
		        match: [
		          /function/,
		          /\s+/,
		          IDENT_RE$1,
		          /(?=\s*\()/
		        ]
		      },
		      // anonymous function
		      {
		        match: [
		          /function/,
		          /\s*(?=\()/
		        ]
		      }
		    ],
		    className: {
		      1: "keyword",
		      3: "title.function"
		    },
		    label: "func.def",
		    contains: [ PARAMS ],
		    illegal: /%/
		  };

		  const UPPER_CASE_CONSTANT = {
		    relevance: 0,
		    match: /\b[A-Z][A-Z_0-9]+\b/,
		    className: "variable.constant"
		  };

		  function noneOf(list) {
		    return regex.concat("(?!", list.join("|"), ")");
		  }

		  const FUNCTION_CALL = {
		    match: regex.concat(
		      /\b/,
		      noneOf([
		        ...BUILT_IN_GLOBALS,
		        "super"
		      ]),
		      IDENT_RE$1, regex.lookahead(/\(/)),
		    className: "title.function",
		    relevance: 0
		  };

		  const PROPERTY_ACCESS = {
		    begin: regex.concat(/\./, regex.lookahead(
		      regex.concat(IDENT_RE$1, /(?![0-9A-Za-z$_(])/)
		    )),
		    end: IDENT_RE$1,
		    excludeBegin: true,
		    keywords: "prototype",
		    className: "property",
		    relevance: 0
		  };

		  const GETTER_OR_SETTER = {
		    match: [
		      /get|set/,
		      /\s+/,
		      IDENT_RE$1,
		      /(?=\()/
		    ],
		    className: {
		      1: "keyword",
		      3: "title.function"
		    },
		    contains: [
		      { // eat to avoid empty params
		        begin: /\(\)/
		      },
		      PARAMS
		    ]
		  };

		  const FUNC_LEAD_IN_RE = '(\\(' +
		    '[^()]*(\\(' +
		    '[^()]*(\\(' +
		    '[^()]*' +
		    '\\)[^()]*)*' +
		    '\\)[^()]*)*' +
		    '\\)|' + hljs.UNDERSCORE_IDENT_RE + ')\\s*=>';

		  const FUNCTION_VARIABLE = {
		    match: [
		      /const|var|let/, /\s+/,
		      IDENT_RE$1, /\s*/,
		      /=\s*/,
		      /(async\s*)?/, // async is optional
		      regex.lookahead(FUNC_LEAD_IN_RE)
		    ],
		    keywords: "async",
		    className: {
		      1: "keyword",
		      3: "title.function"
		    },
		    contains: [
		      PARAMS
		    ]
		  };

		  return {
		    name: 'Javascript',
		    aliases: ['js', 'jsx', 'mjs', 'cjs'],
		    keywords: KEYWORDS$1,
		    // this will be extended by TypeScript
		    exports: { PARAMS_CONTAINS, CLASS_REFERENCE },
		    illegal: /#(?![$_A-z])/,
		    contains: [
		      hljs.SHEBANG({
		        label: "shebang",
		        binary: "node",
		        relevance: 5
		      }),
		      USE_STRICT,
		      hljs.APOS_STRING_MODE,
		      hljs.QUOTE_STRING_MODE,
		      HTML_TEMPLATE,
		      CSS_TEMPLATE,
		      TEMPLATE_STRING,
		      COMMENT,
		      NUMBER,
		      CLASS_REFERENCE,
		      {
		        className: 'attr',
		        begin: IDENT_RE$1 + regex.lookahead(':'),
		        relevance: 0
		      },
		      FUNCTION_VARIABLE,
		      { // "value" container
		        begin: '(' + hljs.RE_STARTERS_RE + '|\\b(case|return|throw)\\b)\\s*',
		        keywords: 'return throw case',
		        relevance: 0,
		        contains: [
		          COMMENT,
		          hljs.REGEXP_MODE,
		          {
		            className: 'function',
		            // we have to count the parens to make sure we actually have the
		            // correct bounding ( ) before the =>.  There could be any number of
		            // sub-expressions inside also surrounded by parens.
		            begin: FUNC_LEAD_IN_RE,
		            returnBegin: true,
		            end: '\\s*=>',
		            contains: [
		              {
		                className: 'params',
		                variants: [
		                  {
		                    begin: hljs.UNDERSCORE_IDENT_RE,
		                    relevance: 0
		                  },
		                  {
		                    className: null,
		                    begin: /\(\s*\)/,
		                    skip: true
		                  },
		                  {
		                    begin: /\(/,
		                    end: /\)/,
		                    excludeBegin: true,
		                    excludeEnd: true,
		                    keywords: KEYWORDS$1,
		                    contains: PARAMS_CONTAINS
		                  }
		                ]
		              }
		            ]
		          },
		          { // could be a comma delimited list of params to a function call
		            begin: /,/,
		            relevance: 0
		          },
		          {
		            match: /\s+/,
		            relevance: 0
		          },
		          { // JSX
		            variants: [
		              { begin: FRAGMENT.begin, end: FRAGMENT.end },
		              { match: XML_SELF_CLOSING },
		              {
		                begin: XML_TAG.begin,
		                // we carefully check the opening tag to see if it truly
		                // is a tag and not a false positive
		                'on:begin': XML_TAG.isTrulyOpeningTag,
		                end: XML_TAG.end
		              }
		            ],
		            subLanguage: 'xml',
		            contains: [
		              {
		                begin: XML_TAG.begin,
		                end: XML_TAG.end,
		                skip: true,
		                contains: ['self']
		              }
		            ]
		          }
		        ],
		      },
		      FUNCTION_DEFINITION,
		      {
		        // prevent this from getting swallowed up by function
		        // since they appear "function like"
		        beginKeywords: "while if switch catch for"
		      },
		      {
		        // we have to count the parens to make sure we actually have the correct
		        // bounding ( ).  There could be any number of sub-expressions inside
		        // also surrounded by parens.
		        begin: '\\b(?!function)' + hljs.UNDERSCORE_IDENT_RE +
		          '\\(' + // first parens
		          '[^()]*(\\(' +
		            '[^()]*(\\(' +
		              '[^()]*' +
		            '\\)[^()]*)*' +
		          '\\)[^()]*)*' +
		          '\\)\\s*\\{', // end parens
		        returnBegin:true,
		        label: "func.def",
		        contains: [
		          PARAMS,
		          hljs.inherit(hljs.TITLE_MODE, { begin: IDENT_RE$1, className: "title.function" })
		        ]
		      },
		      // catch ... so it won't trigger the property rule below
		      {
		        match: /\.\.\./,
		        relevance: 0
		      },
		      PROPERTY_ACCESS,
		      // hack: prevents detection of keywords in some circumstances
		      // .keyword()
		      // $keyword = x
		      {
		        match: '\\$' + IDENT_RE$1,
		        relevance: 0
		      },
		      {
		        match: [ /\bconstructor(?=\s*\()/ ],
		        className: { 1: "title.function" },
		        contains: [ PARAMS ]
		      },
		      FUNCTION_CALL,
		      UPPER_CASE_CONSTANT,
		      CLASS_OR_EXTENDS,
		      GETTER_OR_SETTER,
		      {
		        match: /\$[(.]/ // relevance booster for a pattern common to JS libs: `$(something)` and `$.something`
		      }
		    ]
		  };
		}

		/*
		Language: TypeScript
		Author: Panu Horsmalahti <panu.horsmalahti@iki.fi>
		Contributors: Ike Ku <dempfi@yahoo.com>
		Description: TypeScript is a strict superset of JavaScript
		Website: https://www.typescriptlang.org
		Category: common, scripting
		*/

		/** @type LanguageFn */
		function typescript(hljs) {
		  const tsLanguage = javascript(hljs);

		  const IDENT_RE$1 = IDENT_RE;
		  const TYPES = [
		    "any",
		    "void",
		    "number",
		    "boolean",
		    "string",
		    "object",
		    "never",
		    "symbol",
		    "bigint",
		    "unknown"
		  ];
		  const NAMESPACE = {
		    beginKeywords: 'namespace',
		    end: /\{/,
		    excludeEnd: true,
		    contains: [ tsLanguage.exports.CLASS_REFERENCE ]
		  };
		  const INTERFACE = {
		    beginKeywords: 'interface',
		    end: /\{/,
		    excludeEnd: true,
		    keywords: {
		      keyword: 'interface extends',
		      built_in: TYPES
		    },
		    contains: [ tsLanguage.exports.CLASS_REFERENCE ]
		  };
		  const USE_STRICT = {
		    className: 'meta',
		    relevance: 10,
		    begin: /^\s*['"]use strict['"]/
		  };
		  const TS_SPECIFIC_KEYWORDS = [
		    "type",
		    "namespace",
		    "interface",
		    "public",
		    "private",
		    "protected",
		    "implements",
		    "declare",
		    "abstract",
		    "readonly",
		    "enum",
		    "override"
		  ];
		  const KEYWORDS$1 = {
		    $pattern: IDENT_RE,
		    keyword: KEYWORDS.concat(TS_SPECIFIC_KEYWORDS),
		    literal: LITERALS,
		    built_in: BUILT_INS.concat(TYPES),
		    "variable.language": BUILT_IN_VARIABLES
		  };
		  const DECORATOR = {
		    className: 'meta',
		    begin: '@' + IDENT_RE$1,
		  };

		  const swapMode = (mode, label, replacement) => {
		    const indx = mode.contains.findIndex(m => m.label === label);
		    if (indx === -1) { throw new Error("can not find mode to replace"); }

		    mode.contains.splice(indx, 1, replacement);
		  };


		  // this should update anywhere keywords is used since
		  // it will be the same actual JS object
		  Object.assign(tsLanguage.keywords, KEYWORDS$1);

		  tsLanguage.exports.PARAMS_CONTAINS.push(DECORATOR);
		  tsLanguage.contains = tsLanguage.contains.concat([
		    DECORATOR,
		    NAMESPACE,
		    INTERFACE,
		  ]);

		  // TS gets a simpler shebang rule than JS
		  swapMode(tsLanguage, "shebang", hljs.SHEBANG());
		  // JS use strict rule purposely excludes `asm` which makes no sense
		  swapMode(tsLanguage, "use_strict", USE_STRICT);

		  const functionDeclaration = tsLanguage.contains.find(m => m.label === "func.def");
		  functionDeclaration.relevance = 0; // () => {} is more typical in TypeScript

		  Object.assign(tsLanguage, {
		    name: 'TypeScript',
		    aliases: [
		      'ts',
		      'tsx'
		    ]
		  });

		  return tsLanguage;
		}

		typescript_1 = typescript;
		return typescript_1;
	}

	/*
	Language: Visual Basic .NET
	Description: Visual Basic .NET (VB.NET) is a multi-paradigm, object-oriented programming language, implemented on the .NET Framework.
	Authors: Poren Chiang <ren.chiang@gmail.com>, Jan Pilzer
	Website: https://docs.microsoft.com/dotnet/visual-basic/getting-started
	Category: common
	*/

	var vbnet_1;
	var hasRequiredVbnet;

	function requireVbnet () {
		if (hasRequiredVbnet) return vbnet_1;
		hasRequiredVbnet = 1;
		/** @type LanguageFn */
		function vbnet(hljs) {
		  const regex = hljs.regex;
		  /**
		   * Character Literal
		   * Either a single character ("a"C) or an escaped double quote (""""C).
		   */
		  const CHARACTER = {
		    className: 'string',
		    begin: /"(""|[^/n])"C\b/
		  };

		  const STRING = {
		    className: 'string',
		    begin: /"/,
		    end: /"/,
		    illegal: /\n/,
		    contains: [
		      {
		        // double quote escape
		        begin: /""/ }
		    ]
		  };

		  /** Date Literals consist of a date, a time, or both separated by whitespace, surrounded by # */
		  const MM_DD_YYYY = /\d{1,2}\/\d{1,2}\/\d{4}/;
		  const YYYY_MM_DD = /\d{4}-\d{1,2}-\d{1,2}/;
		  const TIME_12H = /(\d|1[012])(:\d+){0,2} *(AM|PM)/;
		  const TIME_24H = /\d{1,2}(:\d{1,2}){1,2}/;
		  const DATE = {
		    className: 'literal',
		    variants: [
		      {
		        // #YYYY-MM-DD# (ISO-Date) or #M/D/YYYY# (US-Date)
		        begin: regex.concat(/# */, regex.either(YYYY_MM_DD, MM_DD_YYYY), / *#/) },
		      {
		        // #H:mm[:ss]# (24h Time)
		        begin: regex.concat(/# */, TIME_24H, / *#/) },
		      {
		        // #h[:mm[:ss]] A# (12h Time)
		        begin: regex.concat(/# */, TIME_12H, / *#/) },
		      {
		        // date plus time
		        begin: regex.concat(
		          /# */,
		          regex.either(YYYY_MM_DD, MM_DD_YYYY),
		          / +/,
		          regex.either(TIME_12H, TIME_24H),
		          / *#/
		        ) }
		    ]
		  };

		  const NUMBER = {
		    className: 'number',
		    relevance: 0,
		    variants: [
		      {
		        // Float
		        begin: /\b\d[\d_]*((\.[\d_]+(E[+-]?[\d_]+)?)|(E[+-]?[\d_]+))[RFD@!#]?/ },
		      {
		        // Integer (base 10)
		        begin: /\b\d[\d_]*((U?[SIL])|[%&])?/ },
		      {
		        // Integer (base 16)
		        begin: /&H[\dA-F_]+((U?[SIL])|[%&])?/ },
		      {
		        // Integer (base 8)
		        begin: /&O[0-7_]+((U?[SIL])|[%&])?/ },
		      {
		        // Integer (base 2)
		        begin: /&B[01_]+((U?[SIL])|[%&])?/ }
		    ]
		  };

		  const LABEL = {
		    className: 'label',
		    begin: /^\w+:/
		  };

		  const DOC_COMMENT = hljs.COMMENT(/'''/, /$/, { contains: [
		    {
		      className: 'doctag',
		      begin: /<\/?/,
		      end: />/
		    }
		  ] });

		  const COMMENT = hljs.COMMENT(null, /$/, { variants: [
		    { begin: /'/ },
		    {
		      // TODO: Use multi-class for leading spaces
		      begin: /([\t ]|^)REM(?=\s)/ }
		  ] });

		  const DIRECTIVES = {
		    className: 'meta',
		    // TODO: Use multi-class for indentation once available
		    begin: /[\t ]*#(const|disable|else|elseif|enable|end|externalsource|if|region)\b/,
		    end: /$/,
		    keywords: { keyword:
		        'const disable else elseif enable end externalsource if region then' },
		    contains: [ COMMENT ]
		  };

		  return {
		    name: 'Visual Basic .NET',
		    aliases: [ 'vb' ],
		    case_insensitive: true,
		    classNameAliases: { label: 'symbol' },
		    keywords: {
		      keyword:
		        'addhandler alias aggregate ansi as async assembly auto binary by byref byval ' /* a-b */
		        + 'call case catch class compare const continue custom declare default delegate dim distinct do ' /* c-d */
		        + 'each equals else elseif end enum erase error event exit explicit finally for friend from function ' /* e-f */
		        + 'get global goto group handles if implements imports in inherits interface into iterator ' /* g-i */
		        + 'join key let lib loop me mid module mustinherit mustoverride mybase myclass ' /* j-m */
		        + 'namespace narrowing new next notinheritable notoverridable ' /* n */
		        + 'of off on operator option optional order overloads overridable overrides ' /* o */
		        + 'paramarray partial preserve private property protected public ' /* p */
		        + 'raiseevent readonly redim removehandler resume return ' /* r */
		        + 'select set shadows shared skip static step stop structure strict sub synclock ' /* s */
		        + 'take text then throw to try unicode until using when where while widening with withevents writeonly yield' /* t-y */,
		      built_in:
		        // Operators https://docs.microsoft.com/dotnet/visual-basic/language-reference/operators
		        'addressof and andalso await directcast gettype getxmlnamespace is isfalse isnot istrue like mod nameof new not or orelse trycast typeof xor '
		        // Type Conversion Functions https://docs.microsoft.com/dotnet/visual-basic/language-reference/functions/type-conversion-functions
		        + 'cbool cbyte cchar cdate cdbl cdec cint clng cobj csbyte cshort csng cstr cuint culng cushort',
		      type:
		        // Data types https://docs.microsoft.com/dotnet/visual-basic/language-reference/data-types
		        'boolean byte char date decimal double integer long object sbyte short single string uinteger ulong ushort',
		      literal: 'true false nothing'
		    },
		    illegal:
		      '//|\\{|\\}|endif|gosub|variant|wend|^\\$ ' /* reserved deprecated keywords */,
		    contains: [
		      CHARACTER,
		      STRING,
		      DATE,
		      NUMBER,
		      LABEL,
		      DOC_COMMENT,
		      COMMENT,
		      DIRECTIVES
		    ]
		  };
		}

		vbnet_1 = vbnet;
		return vbnet_1;
	}

	/*
	Language: WebAssembly
	Website: https://webassembly.org
	Description:  Wasm is designed as a portable compilation target for programming languages, enabling deployment on the web for client and server applications.
	Category: web, common
	Audit: 2020
	*/

	var wasm_1;
	var hasRequiredWasm;

	function requireWasm () {
		if (hasRequiredWasm) return wasm_1;
		hasRequiredWasm = 1;
		/** @type LanguageFn */
		function wasm(hljs) {
		  hljs.regex;
		  const BLOCK_COMMENT = hljs.COMMENT(/\(;/, /;\)/);
		  BLOCK_COMMENT.contains.push("self");
		  const LINE_COMMENT = hljs.COMMENT(/;;/, /$/);

		  const KWS = [
		    "anyfunc",
		    "block",
		    "br",
		    "br_if",
		    "br_table",
		    "call",
		    "call_indirect",
		    "data",
		    "drop",
		    "elem",
		    "else",
		    "end",
		    "export",
		    "func",
		    "global.get",
		    "global.set",
		    "local.get",
		    "local.set",
		    "local.tee",
		    "get_global",
		    "get_local",
		    "global",
		    "if",
		    "import",
		    "local",
		    "loop",
		    "memory",
		    "memory.grow",
		    "memory.size",
		    "module",
		    "mut",
		    "nop",
		    "offset",
		    "param",
		    "result",
		    "return",
		    "select",
		    "set_global",
		    "set_local",
		    "start",
		    "table",
		    "tee_local",
		    "then",
		    "type",
		    "unreachable"
		  ];

		  const FUNCTION_REFERENCE = {
		    begin: [
		      /(?:func|call|call_indirect)/,
		      /\s+/,
		      /\$[^\s)]+/
		    ],
		    className: {
		      1: "keyword",
		      3: "title.function"
		    }
		  };

		  const ARGUMENT = {
		    className: "variable",
		    begin: /\$[\w_]+/
		  };

		  const PARENS = {
		    match: /(\((?!;)|\))+/,
		    className: "punctuation",
		    relevance: 0
		  };

		  const NUMBER = {
		    className: "number",
		    relevance: 0,
		    // borrowed from Prism, TODO: split out into variants
		    match: /[+-]?\b(?:\d(?:_?\d)*(?:\.\d(?:_?\d)*)?(?:[eE][+-]?\d(?:_?\d)*)?|0x[\da-fA-F](?:_?[\da-fA-F])*(?:\.[\da-fA-F](?:_?[\da-fA-D])*)?(?:[pP][+-]?\d(?:_?\d)*)?)\b|\binf\b|\bnan(?::0x[\da-fA-F](?:_?[\da-fA-D])*)?\b/
		  };

		  const TYPE = {
		    // look-ahead prevents us from gobbling up opcodes
		    match: /(i32|i64|f32|f64)(?!\.)/,
		    className: "type"
		  };

		  const MATH_OPERATIONS = {
		    className: "keyword",
		    // borrowed from Prism, TODO: split out into variants
		    match: /\b(f32|f64|i32|i64)(?:\.(?:abs|add|and|ceil|clz|const|convert_[su]\/i(?:32|64)|copysign|ctz|demote\/f64|div(?:_[su])?|eqz?|extend_[su]\/i32|floor|ge(?:_[su])?|gt(?:_[su])?|le(?:_[su])?|load(?:(?:8|16|32)_[su])?|lt(?:_[su])?|max|min|mul|nearest|neg?|or|popcnt|promote\/f32|reinterpret\/[fi](?:32|64)|rem_[su]|rot[lr]|shl|shr_[su]|store(?:8|16|32)?|sqrt|sub|trunc(?:_[su]\/f(?:32|64))?|wrap\/i64|xor))\b/
		  };

		  const OFFSET_ALIGN = {
		    match: [
		      /(?:offset|align)/,
		      /\s*/,
		      /=/
		    ],
		    className: {
		      1: "keyword",
		      3: "operator"
		    }
		  };

		  return {
		    name: 'WebAssembly',
		    keywords: {
		      $pattern: /[\w.]+/,
		      keyword: KWS
		    },
		    contains: [
		      LINE_COMMENT,
		      BLOCK_COMMENT,
		      OFFSET_ALIGN,
		      ARGUMENT,
		      PARENS,
		      FUNCTION_REFERENCE,
		      hljs.QUOTE_STRING_MODE,
		      TYPE,
		      MATH_OPERATIONS,
		      NUMBER
		    ]
		  };
		}

		wasm_1 = wasm;
		return wasm_1;
	}

	var hljs = core;

	hljs.registerLanguage('xml', requireXml());
	hljs.registerLanguage('bash', requireBash());
	hljs.registerLanguage('c', requireC());
	hljs.registerLanguage('cpp', requireCpp());
	hljs.registerLanguage('csharp', requireCsharp());
	hljs.registerLanguage('css', requireCss());
	hljs.registerLanguage('markdown', requireMarkdown());
	hljs.registerLanguage('diff', requireDiff());
	hljs.registerLanguage('ruby', requireRuby());
	hljs.registerLanguage('go', requireGo());
	hljs.registerLanguage('graphql', requireGraphql());
	hljs.registerLanguage('ini', requireIni());
	hljs.registerLanguage('java', requireJava());
	hljs.registerLanguage('javascript', requireJavascript());
	hljs.registerLanguage('json', requireJson());
	hljs.registerLanguage('kotlin', requireKotlin());
	hljs.registerLanguage('less', requireLess());
	hljs.registerLanguage('lua', requireLua());
	hljs.registerLanguage('makefile', requireMakefile());
	hljs.registerLanguage('perl', requirePerl());
	hljs.registerLanguage('objectivec', requireObjectivec());
	hljs.registerLanguage('php', requirePhp());
	hljs.registerLanguage('php-template', requirePhpTemplate());
	hljs.registerLanguage('plaintext', requirePlaintext());
	hljs.registerLanguage('python', requirePython());
	hljs.registerLanguage('python-repl', requirePythonRepl());
	hljs.registerLanguage('r', requireR());
	hljs.registerLanguage('rust', requireRust());
	hljs.registerLanguage('scss', requireScss());
	hljs.registerLanguage('shell', requireShell());
	hljs.registerLanguage('sql', requireSql());
	hljs.registerLanguage('swift', requireSwift());
	hljs.registerLanguage('yaml', requireYaml());
	hljs.registerLanguage('typescript', requireTypescript());
	hljs.registerLanguage('vbnet', requireVbnet());
	hljs.registerLanguage('wasm', requireWasm());

	hljs.HighlightJS = hljs;
	hljs.default = hljs;
	var common = hljs;

	/**https://github.com/observablehq/stdlib/blob/924d8f801075d29e595eb72fede8d2736f4da550/src/template.js */
	function template(render, wrapper) {
	    return function (strings, ..._args) {
	        var string = strings[0], parts = [], part, root = null, node, nodes, walker, i, n, j, m, k = -1;
	        // Concatenate the text using comments as placeholders.
	        for (i = 1, n = arguments.length; i < n; ++i) {
	            part = arguments[i];
	            if (part instanceof Node) {
	                parts[++k] = part;
	                string += '<!--o:' + k + '-->';
	            }
	            else if (Array.isArray(part)) {
	                for (j = 0, m = part.length; j < m; ++j) {
	                    node = part[j];
	                    if (node instanceof Node) {
	                        if (root === null) {
	                            parts[++k] = root = document.createDocumentFragment();
	                            string += '<!--o:' + k + '-->';
	                        }
	                        root.appendChild(node);
	                    }
	                    else {
	                        root = null;
	                        string += node;
	                    }
	                }
	                root = null;
	            }
	            else {
	                string += part;
	            }
	            string += strings[i];
	        }
	        // Render the text.
	        root = render(string);
	        // Walk the rendered content to replace comment placeholders.
	        if (++k > 0) {
	            nodes = new Array(k);
	            walker = document.createTreeWalker(root, NodeFilter.SHOW_COMMENT, null, false);
	            while (walker.nextNode()) {
	                node = walker.currentNode;
	                if (/^o:/.test(node.nodeValue)) {
	                    nodes[+node.nodeValue.slice(2)] = node;
	                }
	            }
	            for (i = 0; i < k; ++i) {
	                if ((node = nodes[i])) {
	                    node.parentNode.replaceChild(parts[i], node);
	                }
	            }
	        }
	        // Is the rendered content
	        // … a parent of a single child? Detach and return the child.
	        // … a document fragment? Replace the fragment with an element.
	        // … some other node? Return it.
	        return root.childNodes.length === 1
	            ? root.removeChild(root.firstChild)
	            : root.nodeType === 11
	                ? ((node = wrapper()).appendChild(root), node)
	                : root;
	    };
	}

	// import 'highlight.js/styles/github.css';
	const options = {
	    highlight: function (code, language) {
	        return common.highlight(code, { language }).value;
	    },
	    langPrefix: 'hljs language-',
	};
	marked.setOptions(options);
	const md = template(function (string) {
	    const root = document.createElement('div');
	    root.innerHTML = marked.parse(string).trim();
	    return root;
	}, function () {
	    return document.createElement('div');
	});
	const mdi = template(function (string) {
	    const root = document.createElement('div');
	    root.innerHTML = marked.parseInline(string).trim();
	    return root;
	}, function () {
	    return document.createElement('div');
	});

	/**
	 * Lexing or parsing positional information for error reporting.
	 * This object is immutable.
	 */
	class SourceLocation {
	  // The + prefix indicates that these fields aren't writeable
	  // Lexer holding the input string.
	  // Start offset, zero-based inclusive.
	  // End offset, zero-based exclusive.
	  constructor(lexer, start, end) {
	    this.lexer = void 0;
	    this.start = void 0;
	    this.end = void 0;
	    this.lexer = lexer;
	    this.start = start;
	    this.end = end;
	  }
	  /**
	   * Merges two `SourceLocation`s from location providers, given they are
	   * provided in order of appearance.
	   * - Returns the first one's location if only the first is provided.
	   * - Returns a merged range of the first and the last if both are provided
	   *   and their lexers match.
	   * - Otherwise, returns null.
	   */


	  static range(first, second) {
	    if (!second) {
	      return first && first.loc;
	    } else if (!first || !first.loc || !second.loc || first.loc.lexer !== second.loc.lexer) {
	      return null;
	    } else {
	      return new SourceLocation(first.loc.lexer, first.loc.start, second.loc.end);
	    }
	  }

	}

	/**
	 * Interface required to break circular dependency between Token, Lexer, and
	 * ParseError.
	 */

	/**
	 * The resulting token returned from `lex`.
	 *
	 * It consists of the token text plus some position information.
	 * The position information is essentially a range in an input string,
	 * but instead of referencing the bare input string, we refer to the lexer.
	 * That way it is possible to attach extra metadata to the input string,
	 * like for example a file name or similar.
	 *
	 * The position information is optional, so it is OK to construct synthetic
	 * tokens if appropriate. Not providing available position information may
	 * lead to degraded error reporting, though.
	 */
	class Token {
	  // don't expand the token
	  // used in \noexpand
	  constructor(text, // the text of this token
	  loc) {
	    this.text = void 0;
	    this.loc = void 0;
	    this.noexpand = void 0;
	    this.treatAsRelax = void 0;
	    this.text = text;
	    this.loc = loc;
	  }
	  /**
	   * Given a pair of tokens (this and endToken), compute a `Token` encompassing
	   * the whole input range enclosed by these two.
	   */


	  range(endToken, // last token of the range, inclusive
	  text // the text of the newly constructed token
	  ) {
	    return new Token(text, SourceLocation.range(this, endToken));
	  }

	}

	/**
	 * This is the ParseError class, which is the main error thrown by KaTeX
	 * functions when something has gone wrong. This is used to distinguish internal
	 * errors from errors in the expression that the user provided.
	 *
	 * If possible, a caller should provide a Token or ParseNode with information
	 * about where in the source string the problem occurred.
	 */
	class ParseError {
	  // Error position based on passed-in Token or ParseNode.
	  constructor(message, // The error message
	  token // An object providing position information
	  ) {
	    this.position = void 0;
	    var error = "KaTeX parse error: " + message;
	    var start;
	    var loc = token && token.loc;

	    if (loc && loc.start <= loc.end) {
	      // If we have the input and a position, make the error a bit fancier
	      // Get the input
	      var input = loc.lexer.input; // Prepend some information

	      start = loc.start;
	      var end = loc.end;

	      if (start === input.length) {
	        error += " at end of input: ";
	      } else {
	        error += " at position " + (start + 1) + ": ";
	      } // Underline token in question using combining underscores


	      var underlined = input.slice(start, end).replace(/[^]/g, "$&\u0332"); // Extract some context from the input and add it to the error

	      var left;

	      if (start > 15) {
	        left = "…" + input.slice(start - 15, start);
	      } else {
	        left = input.slice(0, start);
	      }

	      var right;

	      if (end + 15 < input.length) {
	        right = input.slice(end, end + 15) + "…";
	      } else {
	        right = input.slice(end);
	      }

	      error += left + underlined + right;
	    } // Some hackery to make ParseError a prototype of Error
	    // See http://stackoverflow.com/a/8460753


	    var self = new Error(error);
	    self.name = "ParseError"; // $FlowFixMe

	    self.__proto__ = ParseError.prototype; // $FlowFixMe

	    self.position = start;
	    return self;
	  }

	} // $FlowFixMe More hackery


	ParseError.prototype.__proto__ = Error.prototype;

	/**
	 * This file contains a list of utility functions which are useful in other
	 * files.
	 */

	/**
	 * Return whether an element is contained in a list
	 */
	var contains = function contains(list, elem) {
	  return list.indexOf(elem) !== -1;
	};
	/**
	 * Provide a default value if a setting is undefined
	 * NOTE: Couldn't use `T` as the output type due to facebook/flow#5022.
	 */


	var deflt = function deflt(setting, defaultIfUndefined) {
	  return setting === undefined ? defaultIfUndefined : setting;
	}; // hyphenate and escape adapted from Facebook's React under Apache 2 license


	var uppercase = /([A-Z])/g;

	var hyphenate = function hyphenate(str) {
	  return str.replace(uppercase, "-$1").toLowerCase();
	};

	var ESCAPE_LOOKUP = {
	  "&": "&amp;",
	  ">": "&gt;",
	  "<": "&lt;",
	  "\"": "&quot;",
	  "'": "&#x27;"
	};
	var ESCAPE_REGEX = /[&><"']/g;
	/**
	 * Escapes text to prevent scripting attacks.
	 */

	function escape(text) {
	  return String(text).replace(ESCAPE_REGEX, match => ESCAPE_LOOKUP[match]);
	}
	/**
	 * Sometimes we want to pull out the innermost element of a group. In most
	 * cases, this will just be the group itself, but when ordgroups and colors have
	 * a single element, we want to pull that out.
	 */


	var getBaseElem = function getBaseElem(group) {
	  if (group.type === "ordgroup") {
	    if (group.body.length === 1) {
	      return getBaseElem(group.body[0]);
	    } else {
	      return group;
	    }
	  } else if (group.type === "color") {
	    if (group.body.length === 1) {
	      return getBaseElem(group.body[0]);
	    } else {
	      return group;
	    }
	  } else if (group.type === "font") {
	    return getBaseElem(group.body);
	  } else {
	    return group;
	  }
	};
	/**
	 * TeXbook algorithms often reference "character boxes", which are simply groups
	 * with a single character in them. To decide if something is a character box,
	 * we find its innermost group, and see if it is a single character.
	 */


	var isCharacterBox = function isCharacterBox(group) {
	  var baseElem = getBaseElem(group); // These are all they types of groups which hold single characters

	  return baseElem.type === "mathord" || baseElem.type === "textord" || baseElem.type === "atom";
	};

	var assert = function assert(value) {
	  if (!value) {
	    throw new Error('Expected non-null, but got ' + String(value));
	  }

	  return value;
	};
	/**
	 * Return the protocol of a URL, or "_relative" if the URL does not specify a
	 * protocol (and thus is relative).
	 */

	var protocolFromUrl = function protocolFromUrl(url) {
	  var protocol = /^\s*([^\\/#]*?)(?::|&#0*58|&#x0*3a)/i.exec(url);
	  return protocol != null ? protocol[1] : "_relative";
	};
	var utils = {
	  contains,
	  deflt,
	  escape,
	  hyphenate,
	  getBaseElem,
	  isCharacterBox,
	  protocolFromUrl
	};

	/* eslint no-console:0 */
	// TODO: automatically generate documentation
	// TODO: check all properties on Settings exist
	// TODO: check the type of a property on Settings matches
	var SETTINGS_SCHEMA = {
	  displayMode: {
	    type: "boolean",
	    description: "Render math in display mode, which puts the math in " + "display style (so \\int and \\sum are large, for example), and " + "centers the math on the page on its own line.",
	    cli: "-d, --display-mode"
	  },
	  output: {
	    type: {
	      enum: ["htmlAndMathml", "html", "mathml"]
	    },
	    description: "Determines the markup language of the output.",
	    cli: "-F, --format <type>"
	  },
	  leqno: {
	    type: "boolean",
	    description: "Render display math in leqno style (left-justified tags)."
	  },
	  fleqn: {
	    type: "boolean",
	    description: "Render display math flush left."
	  },
	  throwOnError: {
	    type: "boolean",
	    default: true,
	    cli: "-t, --no-throw-on-error",
	    cliDescription: "Render errors (in the color given by --error-color) ins" + "tead of throwing a ParseError exception when encountering an error."
	  },
	  errorColor: {
	    type: "string",
	    default: "#cc0000",
	    cli: "-c, --error-color <color>",
	    cliDescription: "A color string given in the format 'rgb' or 'rrggbb' " + "(no #). This option determines the color of errors rendered by the " + "-t option.",
	    cliProcessor: color => "#" + color
	  },
	  macros: {
	    type: "object",
	    cli: "-m, --macro <def>",
	    cliDescription: "Define custom macro of the form '\\foo:expansion' (use " + "multiple -m arguments for multiple macros).",
	    cliDefault: [],
	    cliProcessor: (def, defs) => {
	      defs.push(def);
	      return defs;
	    }
	  },
	  minRuleThickness: {
	    type: "number",
	    description: "Specifies a minimum thickness, in ems, for fraction lines," + " `\\sqrt` top lines, `{array}` vertical lines, `\\hline`, " + "`\\hdashline`, `\\underline`, `\\overline`, and the borders of " + "`\\fbox`, `\\boxed`, and `\\fcolorbox`.",
	    processor: t => Math.max(0, t),
	    cli: "--min-rule-thickness <size>",
	    cliProcessor: parseFloat
	  },
	  colorIsTextColor: {
	    type: "boolean",
	    description: "Makes \\color behave like LaTeX's 2-argument \\textcolor, " + "instead of LaTeX's one-argument \\color mode change.",
	    cli: "-b, --color-is-text-color"
	  },
	  strict: {
	    type: [{
	      enum: ["warn", "ignore", "error"]
	    }, "boolean", "function"],
	    description: "Turn on strict / LaTeX faithfulness mode, which throws an " + "error if the input uses features that are not supported by LaTeX.",
	    cli: "-S, --strict",
	    cliDefault: false
	  },
	  trust: {
	    type: ["boolean", "function"],
	    description: "Trust the input, enabling all HTML features such as \\url.",
	    cli: "-T, --trust"
	  },
	  maxSize: {
	    type: "number",
	    default: Infinity,
	    description: "If non-zero, all user-specified sizes, e.g. in " + "\\rule{500em}{500em}, will be capped to maxSize ems. Otherwise, " + "elements and spaces can be arbitrarily large",
	    processor: s => Math.max(0, s),
	    cli: "-s, --max-size <n>",
	    cliProcessor: parseInt
	  },
	  maxExpand: {
	    type: "number",
	    default: 1000,
	    description: "Limit the number of macro expansions to the specified " + "number, to prevent e.g. infinite macro loops. If set to Infinity, " + "the macro expander will try to fully expand as in LaTeX.",
	    processor: n => Math.max(0, n),
	    cli: "-e, --max-expand <n>",
	    cliProcessor: n => n === "Infinity" ? Infinity : parseInt(n)
	  },
	  globalGroup: {
	    type: "boolean",
	    cli: false
	  }
	};

	function getDefaultValue(schema) {
	  if (schema.default) {
	    return schema.default;
	  }

	  var type = schema.type;
	  var defaultType = Array.isArray(type) ? type[0] : type;

	  if (typeof defaultType !== 'string') {
	    return defaultType.enum[0];
	  }

	  switch (defaultType) {
	    case 'boolean':
	      return false;

	    case 'string':
	      return '';

	    case 'number':
	      return 0;

	    case 'object':
	      return {};
	  }
	}
	/**
	 * The main Settings object
	 *
	 * The current options stored are:
	 *  - displayMode: Whether the expression should be typeset as inline math
	 *                 (false, the default), meaning that the math starts in
	 *                 \textstyle and is placed in an inline-block); or as display
	 *                 math (true), meaning that the math starts in \displaystyle
	 *                 and is placed in a block with vertical margin.
	 */


	class Settings {
	  constructor(options) {
	    this.displayMode = void 0;
	    this.output = void 0;
	    this.leqno = void 0;
	    this.fleqn = void 0;
	    this.throwOnError = void 0;
	    this.errorColor = void 0;
	    this.macros = void 0;
	    this.minRuleThickness = void 0;
	    this.colorIsTextColor = void 0;
	    this.strict = void 0;
	    this.trust = void 0;
	    this.maxSize = void 0;
	    this.maxExpand = void 0;
	    this.globalGroup = void 0;
	    // allow null options
	    options = options || {};

	    for (var prop in SETTINGS_SCHEMA) {
	      if (SETTINGS_SCHEMA.hasOwnProperty(prop)) {
	        // $FlowFixMe
	        var schema = SETTINGS_SCHEMA[prop]; // TODO: validate options
	        // $FlowFixMe

	        this[prop] = options[prop] !== undefined ? schema.processor ? schema.processor(options[prop]) : options[prop] : getDefaultValue(schema);
	      }
	    }
	  }
	  /**
	   * Report nonstrict (non-LaTeX-compatible) input.
	   * Can safely not be called if `this.strict` is false in JavaScript.
	   */


	  reportNonstrict(errorCode, errorMsg, token) {
	    var strict = this.strict;

	    if (typeof strict === "function") {
	      // Allow return value of strict function to be boolean or string
	      // (or null/undefined, meaning no further processing).
	      strict = strict(errorCode, errorMsg, token);
	    }

	    if (!strict || strict === "ignore") {
	      return;
	    } else if (strict === true || strict === "error") {
	      throw new ParseError("LaTeX-incompatible input and strict mode is set to 'error': " + (errorMsg + " [" + errorCode + "]"), token);
	    } else if (strict === "warn") {
	      typeof console !== "undefined" && console.warn("LaTeX-incompatible input and strict mode is set to 'warn': " + (errorMsg + " [" + errorCode + "]"));
	    } else {
	      // won't happen in type-safe code
	      typeof console !== "undefined" && console.warn("LaTeX-incompatible input and strict mode is set to " + ("unrecognized '" + strict + "': " + errorMsg + " [" + errorCode + "]"));
	    }
	  }
	  /**
	   * Check whether to apply strict (LaTeX-adhering) behavior for unusual
	   * input (like `\\`).  Unlike `nonstrict`, will not throw an error;
	   * instead, "error" translates to a return value of `true`, while "ignore"
	   * translates to a return value of `false`.  May still print a warning:
	   * "warn" prints a warning and returns `false`.
	   * This is for the second category of `errorCode`s listed in the README.
	   */


	  useStrictBehavior(errorCode, errorMsg, token) {
	    var strict = this.strict;

	    if (typeof strict === "function") {
	      // Allow return value of strict function to be boolean or string
	      // (or null/undefined, meaning no further processing).
	      // But catch any exceptions thrown by function, treating them
	      // like "error".
	      try {
	        strict = strict(errorCode, errorMsg, token);
	      } catch (error) {
	        strict = "error";
	      }
	    }

	    if (!strict || strict === "ignore") {
	      return false;
	    } else if (strict === true || strict === "error") {
	      return true;
	    } else if (strict === "warn") {
	      typeof console !== "undefined" && console.warn("LaTeX-incompatible input and strict mode is set to 'warn': " + (errorMsg + " [" + errorCode + "]"));
	      return false;
	    } else {
	      // won't happen in type-safe code
	      typeof console !== "undefined" && console.warn("LaTeX-incompatible input and strict mode is set to " + ("unrecognized '" + strict + "': " + errorMsg + " [" + errorCode + "]"));
	      return false;
	    }
	  }
	  /**
	   * Check whether to test potentially dangerous input, and return
	   * `true` (trusted) or `false` (untrusted).  The sole argument `context`
	   * should be an object with `command` field specifying the relevant LaTeX
	   * command (as a string starting with `\`), and any other arguments, etc.
	   * If `context` has a `url` field, a `protocol` field will automatically
	   * get added by this function (changing the specified object).
	   */


	  isTrusted(context) {
	    if (context.url && !context.protocol) {
	      context.protocol = utils.protocolFromUrl(context.url);
	    }

	    var trust = typeof this.trust === "function" ? this.trust(context) : this.trust;
	    return Boolean(trust);
	  }

	}

	/**
	 * This file contains information and classes for the various kinds of styles
	 * used in TeX. It provides a generic `Style` class, which holds information
	 * about a specific style. It then provides instances of all the different kinds
	 * of styles possible, and provides functions to move between them and get
	 * information about them.
	 */

	/**
	 * The main style class. Contains a unique id for the style, a size (which is
	 * the same for cramped and uncramped version of a style), and a cramped flag.
	 */
	class Style {
	  constructor(id, size, cramped) {
	    this.id = void 0;
	    this.size = void 0;
	    this.cramped = void 0;
	    this.id = id;
	    this.size = size;
	    this.cramped = cramped;
	  }
	  /**
	   * Get the style of a superscript given a base in the current style.
	   */


	  sup() {
	    return styles[sup[this.id]];
	  }
	  /**
	   * Get the style of a subscript given a base in the current style.
	   */


	  sub() {
	    return styles[sub[this.id]];
	  }
	  /**
	   * Get the style of a fraction numerator given the fraction in the current
	   * style.
	   */


	  fracNum() {
	    return styles[fracNum[this.id]];
	  }
	  /**
	   * Get the style of a fraction denominator given the fraction in the current
	   * style.
	   */


	  fracDen() {
	    return styles[fracDen[this.id]];
	  }
	  /**
	   * Get the cramped version of a style (in particular, cramping a cramped style
	   * doesn't change the style).
	   */


	  cramp() {
	    return styles[cramp[this.id]];
	  }
	  /**
	   * Get a text or display version of this style.
	   */


	  text() {
	    return styles[text$1[this.id]];
	  }
	  /**
	   * Return true if this style is tightly spaced (scriptstyle/scriptscriptstyle)
	   */


	  isTight() {
	    return this.size >= 2;
	  }

	} // Export an interface for type checking, but don't expose the implementation.
	// This way, no more styles can be generated.


	// IDs of the different styles
	var D = 0;
	var Dc = 1;
	var T = 2;
	var Tc = 3;
	var S = 4;
	var Sc = 5;
	var SS = 6;
	var SSc = 7; // Instances of the different styles

	var styles = [new Style(D, 0, false), new Style(Dc, 0, true), new Style(T, 1, false), new Style(Tc, 1, true), new Style(S, 2, false), new Style(Sc, 2, true), new Style(SS, 3, false), new Style(SSc, 3, true)]; // Lookup tables for switching from one style to another

	var sup = [S, Sc, S, Sc, SS, SSc, SS, SSc];
	var sub = [Sc, Sc, Sc, Sc, SSc, SSc, SSc, SSc];
	var fracNum = [T, Tc, S, Sc, SS, SSc, SS, SSc];
	var fracDen = [Tc, Tc, Sc, Sc, SSc, SSc, SSc, SSc];
	var cramp = [Dc, Dc, Tc, Tc, Sc, Sc, SSc, SSc];
	var text$1 = [D, Dc, T, Tc, T, Tc, T, Tc]; // We only export some of the styles.

	var Style$1 = {
	  DISPLAY: styles[D],
	  TEXT: styles[T],
	  SCRIPT: styles[S],
	  SCRIPTSCRIPT: styles[SS]
	};

	/*
	 * This file defines the Unicode scripts and script families that we
	 * support. To add new scripts or families, just add a new entry to the
	 * scriptData array below. Adding scripts to the scriptData array allows
	 * characters from that script to appear in \text{} environments.
	 */

	/**
	 * Each script or script family has a name and an array of blocks.
	 * Each block is an array of two numbers which specify the start and
	 * end points (inclusive) of a block of Unicode codepoints.
	 */

	/**
	 * Unicode block data for the families of scripts we support in \text{}.
	 * Scripts only need to appear here if they do not have font metrics.
	 */
	var scriptData = [{
	  // Latin characters beyond the Latin-1 characters we have metrics for.
	  // Needed for Czech, Hungarian and Turkish text, for example.
	  name: 'latin',
	  blocks: [[0x0100, 0x024f], // Latin Extended-A and Latin Extended-B
	  [0x0300, 0x036f] // Combining Diacritical marks
	  ]
	}, {
	  // The Cyrillic script used by Russian and related languages.
	  // A Cyrillic subset used to be supported as explicitly defined
	  // symbols in symbols.js
	  name: 'cyrillic',
	  blocks: [[0x0400, 0x04ff]]
	}, {
	  // Armenian
	  name: 'armenian',
	  blocks: [[0x0530, 0x058F]]
	}, {
	  // The Brahmic scripts of South and Southeast Asia
	  // Devanagari (0900–097F)
	  // Bengali (0980–09FF)
	  // Gurmukhi (0A00–0A7F)
	  // Gujarati (0A80–0AFF)
	  // Oriya (0B00–0B7F)
	  // Tamil (0B80–0BFF)
	  // Telugu (0C00–0C7F)
	  // Kannada (0C80–0CFF)
	  // Malayalam (0D00–0D7F)
	  // Sinhala (0D80–0DFF)
	  // Thai (0E00–0E7F)
	  // Lao (0E80–0EFF)
	  // Tibetan (0F00–0FFF)
	  // Myanmar (1000–109F)
	  name: 'brahmic',
	  blocks: [[0x0900, 0x109F]]
	}, {
	  name: 'georgian',
	  blocks: [[0x10A0, 0x10ff]]
	}, {
	  // Chinese and Japanese.
	  // The "k" in cjk is for Korean, but we've separated Korean out
	  name: "cjk",
	  blocks: [[0x3000, 0x30FF], // CJK symbols and punctuation, Hiragana, Katakana
	  [0x4E00, 0x9FAF], // CJK ideograms
	  [0xFF00, 0xFF60] // Fullwidth punctuation
	  // TODO: add halfwidth Katakana and Romanji glyphs
	  ]
	}, {
	  // Korean
	  name: 'hangul',
	  blocks: [[0xAC00, 0xD7AF]]
	}];
	/**
	 * Given a codepoint, return the name of the script or script family
	 * it is from, or null if it is not part of a known block
	 */

	function scriptFromCodepoint(codepoint) {
	  for (var i = 0; i < scriptData.length; i++) {
	    var script = scriptData[i];

	    for (var _i = 0; _i < script.blocks.length; _i++) {
	      var block = script.blocks[_i];

	      if (codepoint >= block[0] && codepoint <= block[1]) {
	        return script.name;
	      }
	    }
	  }

	  return null;
	}
	/**
	 * A flattened version of all the supported blocks in a single array.
	 * This is an optimization to make supportedCodepoint() fast.
	 */

	var allBlocks = [];
	scriptData.forEach(s => s.blocks.forEach(b => allBlocks.push(...b)));
	/**
	 * Given a codepoint, return true if it falls within one of the
	 * scripts or script families defined above and false otherwise.
	 *
	 * Micro benchmarks shows that this is faster than
	 * /[\u3000-\u30FF\u4E00-\u9FAF\uFF00-\uFF60\uAC00-\uD7AF\u0900-\u109F]/.test()
	 * in Firefox, Chrome and Node.
	 */

	function supportedCodepoint(codepoint) {
	  for (var i = 0; i < allBlocks.length; i += 2) {
	    if (codepoint >= allBlocks[i] && codepoint <= allBlocks[i + 1]) {
	      return true;
	    }
	  }

	  return false;
	}

	/**
	 * This file provides support to domTree.js and delimiter.js.
	 * It's a storehouse of path geometry for SVG images.
	 */
	// In all paths below, the viewBox-to-em scale is 1000:1.
	var hLinePad = 80; // padding above a sqrt viniculum. Prevents image cropping.
	// The viniculum of a \sqrt can be made thicker by a KaTeX rendering option.
	// Think of variable extraViniculum as two detours in the SVG path.
	// The detour begins at the lower left of the area labeled extraViniculum below.
	// The detour proceeds one extraViniculum distance up and slightly to the right,
	// displacing the radiused corner between surd and viniculum. The radius is
	// traversed as usual, then the detour resumes. It goes right, to the end of
	// the very long viniculumn, then down one extraViniculum distance,
	// after which it resumes regular path geometry for the radical.

	/*                                                  viniculum
	                                                   /
	         /▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒←extraViniculum
	        / █████████████████████←0.04em (40 unit) std viniculum thickness
	       / /
	      / /
	     / /\
	    / / surd
	*/

	var sqrtMain = function sqrtMain(extraViniculum, hLinePad) {
	  // sqrtMain path geometry is from glyph U221A in the font KaTeX Main
	  return "M95," + (622 + extraViniculum + hLinePad) + "\nc-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14\nc0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54\nc44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10\ns173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429\nc69,-144,104.5,-217.7,106.5,-221\nl" + extraViniculum / 2.075 + " -" + extraViniculum + "\nc5.3,-9.3,12,-14,20,-14\nH400000v" + (40 + extraViniculum) + "H845.2724\ns-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7\nc-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z\nM" + (834 + extraViniculum) + " " + hLinePad + "h400000v" + (40 + extraViniculum) + "h-400000z";
	};

	var sqrtSize1 = function sqrtSize1(extraViniculum, hLinePad) {
	  // size1 is from glyph U221A in the font KaTeX_Size1-Regular
	  return "M263," + (601 + extraViniculum + hLinePad) + "c0.7,0,18,39.7,52,119\nc34,79.3,68.167,158.7,102.5,238c34.3,79.3,51.8,119.3,52.5,120\nc340,-704.7,510.7,-1060.3,512,-1067\nl" + extraViniculum / 2.084 + " -" + extraViniculum + "\nc4.7,-7.3,11,-11,19,-11\nH40000v" + (40 + extraViniculum) + "H1012.3\ns-271.3,567,-271.3,567c-38.7,80.7,-84,175,-136,283c-52,108,-89.167,185.3,-111.5,232\nc-22.3,46.7,-33.8,70.3,-34.5,71c-4.7,4.7,-12.3,7,-23,7s-12,-1,-12,-1\ns-109,-253,-109,-253c-72.7,-168,-109.3,-252,-110,-252c-10.7,8,-22,16.7,-34,26\nc-22,17.3,-33.3,26,-34,26s-26,-26,-26,-26s76,-59,76,-59s76,-60,76,-60z\nM" + (1001 + extraViniculum) + " " + hLinePad + "h400000v" + (40 + extraViniculum) + "h-400000z";
	};

	var sqrtSize2 = function sqrtSize2(extraViniculum, hLinePad) {
	  // size2 is from glyph U221A in the font KaTeX_Size2-Regular
	  return "M983 " + (10 + extraViniculum + hLinePad) + "\nl" + extraViniculum / 3.13 + " -" + extraViniculum + "\nc4,-6.7,10,-10,18,-10 H400000v" + (40 + extraViniculum) + "\nH1013.1s-83.4,268,-264.1,840c-180.7,572,-277,876.3,-289,913c-4.7,4.7,-12.7,7,-24,7\ns-12,0,-12,0c-1.3,-3.3,-3.7,-11.7,-7,-25c-35.3,-125.3,-106.7,-373.3,-214,-744\nc-10,12,-21,25,-33,39s-32,39,-32,39c-6,-5.3,-15,-14,-27,-26s25,-30,25,-30\nc26.7,-32.7,52,-63,76,-91s52,-60,52,-60s208,722,208,722\nc56,-175.3,126.3,-397.3,211,-666c84.7,-268.7,153.8,-488.2,207.5,-658.5\nc53.7,-170.3,84.5,-266.8,92.5,-289.5z\nM" + (1001 + extraViniculum) + " " + hLinePad + "h400000v" + (40 + extraViniculum) + "h-400000z";
	};

	var sqrtSize3 = function sqrtSize3(extraViniculum, hLinePad) {
	  // size3 is from glyph U221A in the font KaTeX_Size3-Regular
	  return "M424," + (2398 + extraViniculum + hLinePad) + "\nc-1.3,-0.7,-38.5,-172,-111.5,-514c-73,-342,-109.8,-513.3,-110.5,-514\nc0,-2,-10.7,14.3,-32,49c-4.7,7.3,-9.8,15.7,-15.5,25c-5.7,9.3,-9.8,16,-12.5,20\ns-5,7,-5,7c-4,-3.3,-8.3,-7.7,-13,-13s-13,-13,-13,-13s76,-122,76,-122s77,-121,77,-121\ns209,968,209,968c0,-2,84.7,-361.7,254,-1079c169.3,-717.3,254.7,-1077.7,256,-1081\nl" + extraViniculum / 4.223 + " -" + extraViniculum + "c4,-6.7,10,-10,18,-10 H400000\nv" + (40 + extraViniculum) + "H1014.6\ns-87.3,378.7,-272.6,1166c-185.3,787.3,-279.3,1182.3,-282,1185\nc-2,6,-10,9,-24,9\nc-8,0,-12,-0.7,-12,-2z M" + (1001 + extraViniculum) + " " + hLinePad + "\nh400000v" + (40 + extraViniculum) + "h-400000z";
	};

	var sqrtSize4 = function sqrtSize4(extraViniculum, hLinePad) {
	  // size4 is from glyph U221A in the font KaTeX_Size4-Regular
	  return "M473," + (2713 + extraViniculum + hLinePad) + "\nc339.3,-1799.3,509.3,-2700,510,-2702 l" + extraViniculum / 5.298 + " -" + extraViniculum + "\nc3.3,-7.3,9.3,-11,18,-11 H400000v" + (40 + extraViniculum) + "H1017.7\ns-90.5,478,-276.2,1466c-185.7,988,-279.5,1483,-281.5,1485c-2,6,-10,9,-24,9\nc-8,0,-12,-0.7,-12,-2c0,-1.3,-5.3,-32,-16,-92c-50.7,-293.3,-119.7,-693.3,-207,-1200\nc0,-1.3,-5.3,8.7,-16,30c-10.7,21.3,-21.3,42.7,-32,64s-16,33,-16,33s-26,-26,-26,-26\ns76,-153,76,-153s77,-151,77,-151c0.7,0.7,35.7,202,105,604c67.3,400.7,102,602.7,104,\n606zM" + (1001 + extraViniculum) + " " + hLinePad + "h400000v" + (40 + extraViniculum) + "H1017.7z";
	};

	var phasePath = function phasePath(y) {
	  var x = y / 2; // x coordinate at top of angle

	  return "M400000 " + y + " H0 L" + x + " 0 l65 45 L145 " + (y - 80) + " H400000z";
	};

	var sqrtTall = function sqrtTall(extraViniculum, hLinePad, viewBoxHeight) {
	  // sqrtTall is from glyph U23B7 in the font KaTeX_Size4-Regular
	  // One path edge has a variable length. It runs vertically from the viniculumn
	  // to a point near (14 units) the bottom of the surd. The viniculum
	  // is normally 40 units thick. So the length of the line in question is:
	  var vertSegment = viewBoxHeight - 54 - hLinePad - extraViniculum;
	  return "M702 " + (extraViniculum + hLinePad) + "H400000" + (40 + extraViniculum) + "\nH742v" + vertSegment + "l-4 4-4 4c-.667.7 -2 1.5-4 2.5s-4.167 1.833-6.5 2.5-5.5 1-9.5 1\nh-12l-28-84c-16.667-52-96.667 -294.333-240-727l-212 -643 -85 170\nc-4-3.333-8.333-7.667-13 -13l-13-13l77-155 77-156c66 199.333 139 419.667\n219 661 l218 661zM702 " + hLinePad + "H400000v" + (40 + extraViniculum) + "H742z";
	};

	var sqrtPath = function sqrtPath(size, extraViniculum, viewBoxHeight) {
	  extraViniculum = 1000 * extraViniculum; // Convert from document ems to viewBox.

	  var path = "";

	  switch (size) {
	    case "sqrtMain":
	      path = sqrtMain(extraViniculum, hLinePad);
	      break;

	    case "sqrtSize1":
	      path = sqrtSize1(extraViniculum, hLinePad);
	      break;

	    case "sqrtSize2":
	      path = sqrtSize2(extraViniculum, hLinePad);
	      break;

	    case "sqrtSize3":
	      path = sqrtSize3(extraViniculum, hLinePad);
	      break;

	    case "sqrtSize4":
	      path = sqrtSize4(extraViniculum, hLinePad);
	      break;

	    case "sqrtTall":
	      path = sqrtTall(extraViniculum, hLinePad, viewBoxHeight);
	  }

	  return path;
	};
	var innerPath = function innerPath(name, height) {
	  // The inner part of stretchy tall delimiters
	  switch (name) {
	    case "\u239c":
	      return "M291 0 H417 V" + height + " H291z M291 0 H417 V" + height + " H291z";

	    case "\u2223":
	      return "M145 0 H188 V" + height + " H145z M145 0 H188 V" + height + " H145z";

	    case "\u2225":
	      return "M145 0 H188 V" + height + " H145z M145 0 H188 V" + height + " H145z" + ("M367 0 H410 V" + height + " H367z M367 0 H410 V" + height + " H367z");

	    case "\u239f":
	      return "M457 0 H583 V" + height + " H457z M457 0 H583 V" + height + " H457z";

	    case "\u23a2":
	      return "M319 0 H403 V" + height + " H319z M319 0 H403 V" + height + " H319z";

	    case "\u23a5":
	      return "M263 0 H347 V" + height + " H263z M263 0 H347 V" + height + " H263z";

	    case "\u23aa":
	      return "M384 0 H504 V" + height + " H384z M384 0 H504 V" + height + " H384z";

	    case "\u23d0":
	      return "M312 0 H355 V" + height + " H312z M312 0 H355 V" + height + " H312z";

	    case "\u2016":
	      return "M257 0 H300 V" + height + " H257z M257 0 H300 V" + height + " H257z" + ("M478 0 H521 V" + height + " H478z M478 0 H521 V" + height + " H478z");

	    default:
	      return "";
	  }
	};
	var path = {
	  // The doubleleftarrow geometry is from glyph U+21D0 in the font KaTeX Main
	  doubleleftarrow: "M262 157\nl10-10c34-36 62.7-77 86-123 3.3-8 5-13.3 5-16 0-5.3-6.7-8-20-8-7.3\n 0-12.2.5-14.5 1.5-2.3 1-4.8 4.5-7.5 10.5-49.3 97.3-121.7 169.3-217 216-28\n 14-57.3 25-88 33-6.7 2-11 3.8-13 5.5-2 1.7-3 4.2-3 7.5s1 5.8 3 7.5\nc2 1.7 6.3 3.5 13 5.5 68 17.3 128.2 47.8 180.5 91.5 52.3 43.7 93.8 96.2 124.5\n 157.5 9.3 8 15.3 12.3 18 13h6c12-.7 18-4 18-10 0-2-1.7-7-5-15-23.3-46-52-87\n-86-123l-10-10h399738v-40H218c328 0 0 0 0 0l-10-8c-26.7-20-65.7-43-117-69 2.7\n-2 6-3.7 10-5 36.7-16 72.3-37.3 107-64l10-8h399782v-40z\nm8 0v40h399730v-40zm0 194v40h399730v-40z",
	  // doublerightarrow is from glyph U+21D2 in font KaTeX Main
	  doublerightarrow: "M399738 392l\n-10 10c-34 36-62.7 77-86 123-3.3 8-5 13.3-5 16 0 5.3 6.7 8 20 8 7.3 0 12.2-.5\n 14.5-1.5 2.3-1 4.8-4.5 7.5-10.5 49.3-97.3 121.7-169.3 217-216 28-14 57.3-25 88\n-33 6.7-2 11-3.8 13-5.5 2-1.7 3-4.2 3-7.5s-1-5.8-3-7.5c-2-1.7-6.3-3.5-13-5.5-68\n-17.3-128.2-47.8-180.5-91.5-52.3-43.7-93.8-96.2-124.5-157.5-9.3-8-15.3-12.3-18\n-13h-6c-12 .7-18 4-18 10 0 2 1.7 7 5 15 23.3 46 52 87 86 123l10 10H0v40h399782\nc-328 0 0 0 0 0l10 8c26.7 20 65.7 43 117 69-2.7 2-6 3.7-10 5-36.7 16-72.3 37.3\n-107 64l-10 8H0v40zM0 157v40h399730v-40zm0 194v40h399730v-40z",
	  // leftarrow is from glyph U+2190 in font KaTeX Main
	  leftarrow: "M400000 241H110l3-3c68.7-52.7 113.7-120\n 135-202 4-14.7 6-23 6-25 0-7.3-7-11-21-11-8 0-13.2.8-15.5 2.5-2.3 1.7-4.2 5.8\n-5.5 12.5-1.3 4.7-2.7 10.3-4 17-12 48.7-34.8 92-68.5 130S65.3 228.3 18 247\nc-10 4-16 7.7-18 11 0 8.7 6 14.3 18 17 47.3 18.7 87.8 47 121.5 85S196 441.3 208\n 490c.7 2 1.3 5 2 9s1.2 6.7 1.5 8c.3 1.3 1 3.3 2 6s2.2 4.5 3.5 5.5c1.3 1 3.3\n 1.8 6 2.5s6 1 10 1c14 0 21-3.7 21-11 0-2-2-10.3-6-25-20-79.3-65-146.7-135-202\n l-3-3h399890zM100 241v40h399900v-40z",
	  // overbrace is from glyphs U+23A9/23A8/23A7 in font KaTeX_Size4-Regular
	  leftbrace: "M6 548l-6-6v-35l6-11c56-104 135.3-181.3 238-232 57.3-28.7 117\n-45 179-50h399577v120H403c-43.3 7-81 15-113 26-100.7 33-179.7 91-237 174-2.7\n 5-6 9-10 13-.7 1-7.3 1-20 1H6z",
	  leftbraceunder: "M0 6l6-6h17c12.688 0 19.313.3 20 1 4 4 7.313 8.3 10 13\n 35.313 51.3 80.813 93.8 136.5 127.5 55.688 33.7 117.188 55.8 184.5 66.5.688\n 0 2 .3 4 1 18.688 2.7 76 4.3 172 5h399450v120H429l-6-1c-124.688-8-235-61.7\n-331-161C60.687 138.7 32.312 99.3 7 54L0 41V6z",
	  // overgroup is from the MnSymbol package (public domain)
	  leftgroup: "M400000 80\nH435C64 80 168.3 229.4 21 260c-5.9 1.2-18 0-18 0-2 0-3-1-3-3v-38C76 61 257 0\n 435 0h399565z",
	  leftgroupunder: "M400000 262\nH435C64 262 168.3 112.6 21 82c-5.9-1.2-18 0-18 0-2 0-3 1-3 3v38c76 158 257 219\n 435 219h399565z",
	  // Harpoons are from glyph U+21BD in font KaTeX Main
	  leftharpoon: "M0 267c.7 5.3 3 10 7 14h399993v-40H93c3.3\n-3.3 10.2-9.5 20.5-18.5s17.8-15.8 22.5-20.5c50.7-52 88-110.3 112-175 4-11.3 5\n-18.3 3-21-1.3-4-7.3-6-18-6-8 0-13 .7-15 2s-4.7 6.7-8 16c-42 98.7-107.3 174.7\n-196 228-6.7 4.7-10.7 8-12 10-1.3 2-2 5.7-2 11zm100-26v40h399900v-40z",
	  leftharpoonplus: "M0 267c.7 5.3 3 10 7 14h399993v-40H93c3.3-3.3 10.2-9.5\n 20.5-18.5s17.8-15.8 22.5-20.5c50.7-52 88-110.3 112-175 4-11.3 5-18.3 3-21-1.3\n-4-7.3-6-18-6-8 0-13 .7-15 2s-4.7 6.7-8 16c-42 98.7-107.3 174.7-196 228-6.7 4.7\n-10.7 8-12 10-1.3 2-2 5.7-2 11zm100-26v40h399900v-40zM0 435v40h400000v-40z\nm0 0v40h400000v-40z",
	  leftharpoondown: "M7 241c-4 4-6.333 8.667-7 14 0 5.333.667 9 2 11s5.333\n 5.333 12 10c90.667 54 156 130 196 228 3.333 10.667 6.333 16.333 9 17 2 .667 5\n 1 9 1h5c10.667 0 16.667-2 18-6 2-2.667 1-9.667-3-21-32-87.333-82.667-157.667\n-152-211l-3-3h399907v-40zM93 281 H400000 v-40L7 241z",
	  leftharpoondownplus: "M7 435c-4 4-6.3 8.7-7 14 0 5.3.7 9 2 11s5.3 5.3 12\n 10c90.7 54 156 130 196 228 3.3 10.7 6.3 16.3 9 17 2 .7 5 1 9 1h5c10.7 0 16.7\n-2 18-6 2-2.7 1-9.7-3-21-32-87.3-82.7-157.7-152-211l-3-3h399907v-40H7zm93 0\nv40h399900v-40zM0 241v40h399900v-40zm0 0v40h399900v-40z",
	  // hook is from glyph U+21A9 in font KaTeX Main
	  lefthook: "M400000 281 H103s-33-11.2-61-33.5S0 197.3 0 164s14.2-61.2 42.5\n-83.5C70.8 58.2 104 47 142 47 c16.7 0 25 6.7 25 20 0 12-8.7 18.7-26 20-40 3.3\n-68.7 15.7-86 37-10 12-15 25.3-15 40 0 22.7 9.8 40.7 29.5 54 19.7 13.3 43.5 21\n 71.5 23h399859zM103 281v-40h399897v40z",
	  leftlinesegment: "M40 281 V428 H0 V94 H40 V241 H400000 v40z\nM40 281 V428 H0 V94 H40 V241 H400000 v40z",
	  leftmapsto: "M40 281 V448H0V74H40V241H400000v40z\nM40 281 V448H0V74H40V241H400000v40z",
	  // tofrom is from glyph U+21C4 in font KaTeX AMS Regular
	  leftToFrom: "M0 147h400000v40H0zm0 214c68 40 115.7 95.7 143 167h22c15.3 0 23\n-.3 23-1 0-1.3-5.3-13.7-16-37-18-35.3-41.3-69-70-101l-7-8h399905v-40H95l7-8\nc28.7-32 52-65.7 70-101 10.7-23.3 16-35.7 16-37 0-.7-7.7-1-23-1h-22C115.7 265.3\n 68 321 0 361zm0-174v-40h399900v40zm100 154v40h399900v-40z",
	  longequal: "M0 50 h400000 v40H0z m0 194h40000v40H0z\nM0 50 h400000 v40H0z m0 194h40000v40H0z",
	  midbrace: "M200428 334\nc-100.7-8.3-195.3-44-280-108-55.3-42-101.7-93-139-153l-9-14c-2.7 4-5.7 8.7-9 14\n-53.3 86.7-123.7 153-211 199-66.7 36-137.3 56.3-212 62H0V214h199568c178.3-11.7\n 311.7-78.3 403-201 6-8 9.7-12 11-12 .7-.7 6.7-1 18-1s17.3.3 18 1c1.3 0 5 4 11\n 12 44.7 59.3 101.3 106.3 170 141s145.3 54.3 229 60h199572v120z",
	  midbraceunder: "M199572 214\nc100.7 8.3 195.3 44 280 108 55.3 42 101.7 93 139 153l9 14c2.7-4 5.7-8.7 9-14\n 53.3-86.7 123.7-153 211-199 66.7-36 137.3-56.3 212-62h199568v120H200432c-178.3\n 11.7-311.7 78.3-403 201-6 8-9.7 12-11 12-.7.7-6.7 1-18 1s-17.3-.3-18-1c-1.3 0\n-5-4-11-12-44.7-59.3-101.3-106.3-170-141s-145.3-54.3-229-60H0V214z",
	  oiintSize1: "M512.6 71.6c272.6 0 320.3 106.8 320.3 178.2 0 70.8-47.7 177.6\n-320.3 177.6S193.1 320.6 193.1 249.8c0-71.4 46.9-178.2 319.5-178.2z\nm368.1 178.2c0-86.4-60.9-215.4-368.1-215.4-306.4 0-367.3 129-367.3 215.4 0 85.8\n60.9 214.8 367.3 214.8 307.2 0 368.1-129 368.1-214.8z",
	  oiintSize2: "M757.8 100.1c384.7 0 451.1 137.6 451.1 230 0 91.3-66.4 228.8\n-451.1 228.8-386.3 0-452.7-137.5-452.7-228.8 0-92.4 66.4-230 452.7-230z\nm502.4 230c0-111.2-82.4-277.2-502.4-277.2s-504 166-504 277.2\nc0 110 84 276 504 276s502.4-166 502.4-276z",
	  oiiintSize1: "M681.4 71.6c408.9 0 480.5 106.8 480.5 178.2 0 70.8-71.6 177.6\n-480.5 177.6S202.1 320.6 202.1 249.8c0-71.4 70.5-178.2 479.3-178.2z\nm525.8 178.2c0-86.4-86.8-215.4-525.7-215.4-437.9 0-524.7 129-524.7 215.4 0\n85.8 86.8 214.8 524.7 214.8 438.9 0 525.7-129 525.7-214.8z",
	  oiiintSize2: "M1021.2 53c603.6 0 707.8 165.8 707.8 277.2 0 110-104.2 275.8\n-707.8 275.8-606 0-710.2-165.8-710.2-275.8C311 218.8 415.2 53 1021.2 53z\nm770.4 277.1c0-131.2-126.4-327.6-770.5-327.6S248.4 198.9 248.4 330.1\nc0 130 128.8 326.4 772.7 326.4s770.5-196.4 770.5-326.4z",
	  rightarrow: "M0 241v40h399891c-47.3 35.3-84 78-110 128\n-16.7 32-27.7 63.7-33 95 0 1.3-.2 2.7-.5 4-.3 1.3-.5 2.3-.5 3 0 7.3 6.7 11 20\n 11 8 0 13.2-.8 15.5-2.5 2.3-1.7 4.2-5.5 5.5-11.5 2-13.3 5.7-27 11-41 14.7-44.7\n 39-84.5 73-119.5s73.7-60.2 119-75.5c6-2 9-5.7 9-11s-3-9-9-11c-45.3-15.3-85\n-40.5-119-75.5s-58.3-74.8-73-119.5c-4.7-14-8.3-27.3-11-40-1.3-6.7-3.2-10.8-5.5\n-12.5-2.3-1.7-7.5-2.5-15.5-2.5-14 0-21 3.7-21 11 0 2 2 10.3 6 25 20.7 83.3 67\n 151.7 139 205zm0 0v40h399900v-40z",
	  rightbrace: "M400000 542l\n-6 6h-17c-12.7 0-19.3-.3-20-1-4-4-7.3-8.3-10-13-35.3-51.3-80.8-93.8-136.5-127.5\ns-117.2-55.8-184.5-66.5c-.7 0-2-.3-4-1-18.7-2.7-76-4.3-172-5H0V214h399571l6 1\nc124.7 8 235 61.7 331 161 31.3 33.3 59.7 72.7 85 118l7 13v35z",
	  rightbraceunder: "M399994 0l6 6v35l-6 11c-56 104-135.3 181.3-238 232-57.3\n 28.7-117 45-179 50H-300V214h399897c43.3-7 81-15 113-26 100.7-33 179.7-91 237\n-174 2.7-5 6-9 10-13 .7-1 7.3-1 20-1h17z",
	  rightgroup: "M0 80h399565c371 0 266.7 149.4 414 180 5.9 1.2 18 0 18 0 2 0\n 3-1 3-3v-38c-76-158-257-219-435-219H0z",
	  rightgroupunder: "M0 262h399565c371 0 266.7-149.4 414-180 5.9-1.2 18 0 18\n 0 2 0 3 1 3 3v38c-76 158-257 219-435 219H0z",
	  rightharpoon: "M0 241v40h399993c4.7-4.7 7-9.3 7-14 0-9.3\n-3.7-15.3-11-18-92.7-56.7-159-133.7-199-231-3.3-9.3-6-14.7-8-16-2-1.3-7-2-15-2\n-10.7 0-16.7 2-18 6-2 2.7-1 9.7 3 21 15.3 42 36.7 81.8 64 119.5 27.3 37.7 58\n 69.2 92 94.5zm0 0v40h399900v-40z",
	  rightharpoonplus: "M0 241v40h399993c4.7-4.7 7-9.3 7-14 0-9.3-3.7-15.3-11\n-18-92.7-56.7-159-133.7-199-231-3.3-9.3-6-14.7-8-16-2-1.3-7-2-15-2-10.7 0-16.7\n 2-18 6-2 2.7-1 9.7 3 21 15.3 42 36.7 81.8 64 119.5 27.3 37.7 58 69.2 92 94.5z\nm0 0v40h399900v-40z m100 194v40h399900v-40zm0 0v40h399900v-40z",
	  rightharpoondown: "M399747 511c0 7.3 6.7 11 20 11 8 0 13-.8 15-2.5s4.7-6.8\n 8-15.5c40-94 99.3-166.3 178-217 13.3-8 20.3-12.3 21-13 5.3-3.3 8.5-5.8 9.5\n-7.5 1-1.7 1.5-5.2 1.5-10.5s-2.3-10.3-7-15H0v40h399908c-34 25.3-64.7 57-92 95\n-27.3 38-48.7 77.7-64 119-3.3 8.7-5 14-5 16zM0 241v40h399900v-40z",
	  rightharpoondownplus: "M399747 705c0 7.3 6.7 11 20 11 8 0 13-.8\n 15-2.5s4.7-6.8 8-15.5c40-94 99.3-166.3 178-217 13.3-8 20.3-12.3 21-13 5.3-3.3\n 8.5-5.8 9.5-7.5 1-1.7 1.5-5.2 1.5-10.5s-2.3-10.3-7-15H0v40h399908c-34 25.3\n-64.7 57-92 95-27.3 38-48.7 77.7-64 119-3.3 8.7-5 14-5 16zM0 435v40h399900v-40z\nm0-194v40h400000v-40zm0 0v40h400000v-40z",
	  righthook: "M399859 241c-764 0 0 0 0 0 40-3.3 68.7-15.7 86-37 10-12 15-25.3\n 15-40 0-22.7-9.8-40.7-29.5-54-19.7-13.3-43.5-21-71.5-23-17.3-1.3-26-8-26-20 0\n-13.3 8.7-20 26-20 38 0 71 11.2 99 33.5 0 0 7 5.6 21 16.7 14 11.2 21 33.5 21\n 66.8s-14 61.2-42 83.5c-28 22.3-61 33.5-99 33.5L0 241z M0 281v-40h399859v40z",
	  rightlinesegment: "M399960 241 V94 h40 V428 h-40 V281 H0 v-40z\nM399960 241 V94 h40 V428 h-40 V281 H0 v-40z",
	  rightToFrom: "M400000 167c-70.7-42-118-97.7-142-167h-23c-15.3 0-23 .3-23\n 1 0 1.3 5.3 13.7 16 37 18 35.3 41.3 69 70 101l7 8H0v40h399905l-7 8c-28.7 32\n-52 65.7-70 101-10.7 23.3-16 35.7-16 37 0 .7 7.7 1 23 1h23c24-69.3 71.3-125 142\n-167z M100 147v40h399900v-40zM0 341v40h399900v-40z",
	  // twoheadleftarrow is from glyph U+219E in font KaTeX AMS Regular
	  twoheadleftarrow: "M0 167c68 40\n 115.7 95.7 143 167h22c15.3 0 23-.3 23-1 0-1.3-5.3-13.7-16-37-18-35.3-41.3-69\n-70-101l-7-8h125l9 7c50.7 39.3 85 86 103 140h46c0-4.7-6.3-18.7-19-42-18-35.3\n-40-67.3-66-96l-9-9h399716v-40H284l9-9c26-28.7 48-60.7 66-96 12.7-23.333 19\n-37.333 19-42h-46c-18 54-52.3 100.7-103 140l-9 7H95l7-8c28.7-32 52-65.7 70-101\n 10.7-23.333 16-35.7 16-37 0-.7-7.7-1-23-1h-22C115.7 71.3 68 127 0 167z",
	  twoheadrightarrow: "M400000 167\nc-68-40-115.7-95.7-143-167h-22c-15.3 0-23 .3-23 1 0 1.3 5.3 13.7 16 37 18 35.3\n 41.3 69 70 101l7 8h-125l-9-7c-50.7-39.3-85-86-103-140h-46c0 4.7 6.3 18.7 19 42\n 18 35.3 40 67.3 66 96l9 9H0v40h399716l-9 9c-26 28.7-48 60.7-66 96-12.7 23.333\n-19 37.333-19 42h46c18-54 52.3-100.7 103-140l9-7h125l-7 8c-28.7 32-52 65.7-70\n 101-10.7 23.333-16 35.7-16 37 0 .7 7.7 1 23 1h22c27.3-71.3 75-127 143-167z",
	  // tilde1 is a modified version of a glyph from the MnSymbol package
	  tilde1: "M200 55.538c-77 0-168 73.953-177 73.953-3 0-7\n-2.175-9-5.437L2 97c-1-2-2-4-2-6 0-4 2-7 5-9l20-12C116 12 171 0 207 0c86 0\n 114 68 191 68 78 0 168-68 177-68 4 0 7 2 9 5l12 19c1 2.175 2 4.35 2 6.525 0\n 4.35-2 7.613-5 9.788l-19 13.05c-92 63.077-116.937 75.308-183 76.128\n-68.267.847-113-73.952-191-73.952z",
	  // ditto tilde2, tilde3, & tilde4
	  tilde2: "M344 55.266c-142 0-300.638 81.316-311.5 86.418\n-8.01 3.762-22.5 10.91-23.5 5.562L1 120c-1-2-1-3-1-4 0-5 3-9 8-10l18.4-9C160.9\n 31.9 283 0 358 0c148 0 188 122 331 122s314-97 326-97c4 0 8 2 10 7l7 21.114\nc1 2.14 1 3.21 1 4.28 0 5.347-3 9.626-7 10.696l-22.3 12.622C852.6 158.372 751\n 181.476 676 181.476c-149 0-189-126.21-332-126.21z",
	  tilde3: "M786 59C457 59 32 175.242 13 175.242c-6 0-10-3.457\n-11-10.37L.15 138c-1-7 3-12 10-13l19.2-6.4C378.4 40.7 634.3 0 804.3 0c337 0\n 411.8 157 746.8 157 328 0 754-112 773-112 5 0 10 3 11 9l1 14.075c1 8.066-.697\n 16.595-6.697 17.492l-21.052 7.31c-367.9 98.146-609.15 122.696-778.15 122.696\n -338 0-409-156.573-744-156.573z",
	  tilde4: "M786 58C457 58 32 177.487 13 177.487c-6 0-10-3.345\n-11-10.035L.15 143c-1-7 3-12 10-13l22-6.7C381.2 35 637.15 0 807.15 0c337 0 409\n 177 744 177 328 0 754-127 773-127 5 0 10 3 11 9l1 14.794c1 7.805-3 13.38-9\n 14.495l-20.7 5.574c-366.85 99.79-607.3 139.372-776.3 139.372-338 0-409\n -175.236-744-175.236z",
	  // vec is from glyph U+20D7 in font KaTeX Main
	  vec: "M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 5\n3.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 11\n10.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63\n-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1\n-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59\nH213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359\nc-16-25.333-24-45-24-59z",
	  // widehat1 is a modified version of a glyph from the MnSymbol package
	  widehat1: "M529 0h5l519 115c5 1 9 5 9 10 0 1-1 2-1 3l-4 22\nc-1 5-5 9-11 9h-2L532 67 19 159h-2c-5 0-9-4-11-9l-5-22c-1-6 2-12 8-13z",
	  // ditto widehat2, widehat3, & widehat4
	  widehat2: "M1181 0h2l1171 176c6 0 10 5 10 11l-2 23c-1 6-5 10\n-11 10h-1L1182 67 15 220h-1c-6 0-10-4-11-10l-2-23c-1-6 4-11 10-11z",
	  widehat3: "M1181 0h2l1171 236c6 0 10 5 10 11l-2 23c-1 6-5 10\n-11 10h-1L1182 67 15 280h-1c-6 0-10-4-11-10l-2-23c-1-6 4-11 10-11z",
	  widehat4: "M1181 0h2l1171 296c6 0 10 5 10 11l-2 23c-1 6-5 10\n-11 10h-1L1182 67 15 340h-1c-6 0-10-4-11-10l-2-23c-1-6 4-11 10-11z",
	  // widecheck paths are all inverted versions of widehat
	  widecheck1: "M529,159h5l519,-115c5,-1,9,-5,9,-10c0,-1,-1,-2,-1,-3l-4,-22c-1,\n-5,-5,-9,-11,-9h-2l-512,92l-513,-92h-2c-5,0,-9,4,-11,9l-5,22c-1,6,2,12,8,13z",
	  widecheck2: "M1181,220h2l1171,-176c6,0,10,-5,10,-11l-2,-23c-1,-6,-5,-10,\n-11,-10h-1l-1168,153l-1167,-153h-1c-6,0,-10,4,-11,10l-2,23c-1,6,4,11,10,11z",
	  widecheck3: "M1181,280h2l1171,-236c6,0,10,-5,10,-11l-2,-23c-1,-6,-5,-10,\n-11,-10h-1l-1168,213l-1167,-213h-1c-6,0,-10,4,-11,10l-2,23c-1,6,4,11,10,11z",
	  widecheck4: "M1181,340h2l1171,-296c6,0,10,-5,10,-11l-2,-23c-1,-6,-5,-10,\n-11,-10h-1l-1168,273l-1167,-273h-1c-6,0,-10,4,-11,10l-2,23c-1,6,4,11,10,11z",
	  // The next ten paths support reaction arrows from the mhchem package.
	  // Arrows for \ce{<-->} are offset from xAxis by 0.22ex, per mhchem in LaTeX
	  // baraboveleftarrow is mostly from from glyph U+2190 in font KaTeX Main
	  baraboveleftarrow: "M400000 620h-399890l3 -3c68.7 -52.7 113.7 -120 135 -202\nc4 -14.7 6 -23 6 -25c0 -7.3 -7 -11 -21 -11c-8 0 -13.2 0.8 -15.5 2.5\nc-2.3 1.7 -4.2 5.8 -5.5 12.5c-1.3 4.7 -2.7 10.3 -4 17c-12 48.7 -34.8 92 -68.5 130\ns-74.2 66.3 -121.5 85c-10 4 -16 7.7 -18 11c0 8.7 6 14.3 18 17c47.3 18.7 87.8 47\n121.5 85s56.5 81.3 68.5 130c0.7 2 1.3 5 2 9s1.2 6.7 1.5 8c0.3 1.3 1 3.3 2 6\ns2.2 4.5 3.5 5.5c1.3 1 3.3 1.8 6 2.5s6 1 10 1c14 0 21 -3.7 21 -11\nc0 -2 -2 -10.3 -6 -25c-20 -79.3 -65 -146.7 -135 -202l-3 -3h399890z\nM100 620v40h399900v-40z M0 241v40h399900v-40zM0 241v40h399900v-40z",
	  // rightarrowabovebar is mostly from glyph U+2192, KaTeX Main
	  rightarrowabovebar: "M0 241v40h399891c-47.3 35.3-84 78-110 128-16.7 32\n-27.7 63.7-33 95 0 1.3-.2 2.7-.5 4-.3 1.3-.5 2.3-.5 3 0 7.3 6.7 11 20 11 8 0\n13.2-.8 15.5-2.5 2.3-1.7 4.2-5.5 5.5-11.5 2-13.3 5.7-27 11-41 14.7-44.7 39\n-84.5 73-119.5s73.7-60.2 119-75.5c6-2 9-5.7 9-11s-3-9-9-11c-45.3-15.3-85-40.5\n-119-75.5s-58.3-74.8-73-119.5c-4.7-14-8.3-27.3-11-40-1.3-6.7-3.2-10.8-5.5\n-12.5-2.3-1.7-7.5-2.5-15.5-2.5-14 0-21 3.7-21 11 0 2 2 10.3 6 25 20.7 83.3 67\n151.7 139 205zm96 379h399894v40H0zm0 0h399904v40H0z",
	  // The short left harpoon has 0.5em (i.e. 500 units) kern on the left end.
	  // Ref from mhchem.sty: \rlap{\raisebox{-.22ex}{$\kern0.5em
	  baraboveshortleftharpoon: "M507,435c-4,4,-6.3,8.7,-7,14c0,5.3,0.7,9,2,11\nc1.3,2,5.3,5.3,12,10c90.7,54,156,130,196,228c3.3,10.7,6.3,16.3,9,17\nc2,0.7,5,1,9,1c0,0,5,0,5,0c10.7,0,16.7,-2,18,-6c2,-2.7,1,-9.7,-3,-21\nc-32,-87.3,-82.7,-157.7,-152,-211c0,0,-3,-3,-3,-3l399351,0l0,-40\nc-398570,0,-399437,0,-399437,0z M593 435 v40 H399500 v-40z\nM0 281 v-40 H399908 v40z M0 281 v-40 H399908 v40z",
	  rightharpoonaboveshortbar: "M0,241 l0,40c399126,0,399993,0,399993,0\nc4.7,-4.7,7,-9.3,7,-14c0,-9.3,-3.7,-15.3,-11,-18c-92.7,-56.7,-159,-133.7,-199,\n-231c-3.3,-9.3,-6,-14.7,-8,-16c-2,-1.3,-7,-2,-15,-2c-10.7,0,-16.7,2,-18,6\nc-2,2.7,-1,9.7,3,21c15.3,42,36.7,81.8,64,119.5c27.3,37.7,58,69.2,92,94.5z\nM0 241 v40 H399908 v-40z M0 475 v-40 H399500 v40z M0 475 v-40 H399500 v40z",
	  shortbaraboveleftharpoon: "M7,435c-4,4,-6.3,8.7,-7,14c0,5.3,0.7,9,2,11\nc1.3,2,5.3,5.3,12,10c90.7,54,156,130,196,228c3.3,10.7,6.3,16.3,9,17c2,0.7,5,1,9,\n1c0,0,5,0,5,0c10.7,0,16.7,-2,18,-6c2,-2.7,1,-9.7,-3,-21c-32,-87.3,-82.7,-157.7,\n-152,-211c0,0,-3,-3,-3,-3l399907,0l0,-40c-399126,0,-399993,0,-399993,0z\nM93 435 v40 H400000 v-40z M500 241 v40 H400000 v-40z M500 241 v40 H400000 v-40z",
	  shortrightharpoonabovebar: "M53,241l0,40c398570,0,399437,0,399437,0\nc4.7,-4.7,7,-9.3,7,-14c0,-9.3,-3.7,-15.3,-11,-18c-92.7,-56.7,-159,-133.7,-199,\n-231c-3.3,-9.3,-6,-14.7,-8,-16c-2,-1.3,-7,-2,-15,-2c-10.7,0,-16.7,2,-18,6\nc-2,2.7,-1,9.7,3,21c15.3,42,36.7,81.8,64,119.5c27.3,37.7,58,69.2,92,94.5z\nM500 241 v40 H399408 v-40z M500 435 v40 H400000 v-40z"
	};

	/**
	 * This node represents a document fragment, which contains elements, but when
	 * placed into the DOM doesn't have any representation itself. It only contains
	 * children and doesn't have any DOM node properties.
	 */
	class DocumentFragment$1 {
	  // HtmlDomNode
	  // Never used; needed for satisfying interface.
	  constructor(children) {
	    this.children = void 0;
	    this.classes = void 0;
	    this.height = void 0;
	    this.depth = void 0;
	    this.maxFontSize = void 0;
	    this.style = void 0;
	    this.children = children;
	    this.classes = [];
	    this.height = 0;
	    this.depth = 0;
	    this.maxFontSize = 0;
	    this.style = {};
	  }

	  hasClass(className) {
	    return utils.contains(this.classes, className);
	  }
	  /** Convert the fragment into a node. */


	  toNode() {
	    var frag = document.createDocumentFragment();

	    for (var i = 0; i < this.children.length; i++) {
	      frag.appendChild(this.children[i].toNode());
	    }

	    return frag;
	  }
	  /** Convert the fragment into HTML markup. */


	  toMarkup() {
	    var markup = ""; // Simply concatenate the markup for the children together.

	    for (var i = 0; i < this.children.length; i++) {
	      markup += this.children[i].toMarkup();
	    }

	    return markup;
	  }
	  /**
	   * Converts the math node into a string, similar to innerText. Applies to
	   * MathDomNode's only.
	   */


	  toText() {
	    // To avoid this, we would subclass documentFragment separately for
	    // MathML, but polyfills for subclassing is expensive per PR 1469.
	    // $FlowFixMe: Only works for ChildType = MathDomNode.
	    var toText = child => child.toText();

	    return this.children.map(toText).join("");
	  }

	}

	// This file is GENERATED by buildMetrics.sh. DO NOT MODIFY.
	var fontMetricsData = {
	  "AMS-Regular": {
	    "32": [0, 0, 0, 0, 0.25],
	    "65": [0, 0.68889, 0, 0, 0.72222],
	    "66": [0, 0.68889, 0, 0, 0.66667],
	    "67": [0, 0.68889, 0, 0, 0.72222],
	    "68": [0, 0.68889, 0, 0, 0.72222],
	    "69": [0, 0.68889, 0, 0, 0.66667],
	    "70": [0, 0.68889, 0, 0, 0.61111],
	    "71": [0, 0.68889, 0, 0, 0.77778],
	    "72": [0, 0.68889, 0, 0, 0.77778],
	    "73": [0, 0.68889, 0, 0, 0.38889],
	    "74": [0.16667, 0.68889, 0, 0, 0.5],
	    "75": [0, 0.68889, 0, 0, 0.77778],
	    "76": [0, 0.68889, 0, 0, 0.66667],
	    "77": [0, 0.68889, 0, 0, 0.94445],
	    "78": [0, 0.68889, 0, 0, 0.72222],
	    "79": [0.16667, 0.68889, 0, 0, 0.77778],
	    "80": [0, 0.68889, 0, 0, 0.61111],
	    "81": [0.16667, 0.68889, 0, 0, 0.77778],
	    "82": [0, 0.68889, 0, 0, 0.72222],
	    "83": [0, 0.68889, 0, 0, 0.55556],
	    "84": [0, 0.68889, 0, 0, 0.66667],
	    "85": [0, 0.68889, 0, 0, 0.72222],
	    "86": [0, 0.68889, 0, 0, 0.72222],
	    "87": [0, 0.68889, 0, 0, 1.0],
	    "88": [0, 0.68889, 0, 0, 0.72222],
	    "89": [0, 0.68889, 0, 0, 0.72222],
	    "90": [0, 0.68889, 0, 0, 0.66667],
	    "107": [0, 0.68889, 0, 0, 0.55556],
	    "160": [0, 0, 0, 0, 0.25],
	    "165": [0, 0.675, 0.025, 0, 0.75],
	    "174": [0.15559, 0.69224, 0, 0, 0.94666],
	    "240": [0, 0.68889, 0, 0, 0.55556],
	    "295": [0, 0.68889, 0, 0, 0.54028],
	    "710": [0, 0.825, 0, 0, 2.33334],
	    "732": [0, 0.9, 0, 0, 2.33334],
	    "770": [0, 0.825, 0, 0, 2.33334],
	    "771": [0, 0.9, 0, 0, 2.33334],
	    "989": [0.08167, 0.58167, 0, 0, 0.77778],
	    "1008": [0, 0.43056, 0.04028, 0, 0.66667],
	    "8245": [0, 0.54986, 0, 0, 0.275],
	    "8463": [0, 0.68889, 0, 0, 0.54028],
	    "8487": [0, 0.68889, 0, 0, 0.72222],
	    "8498": [0, 0.68889, 0, 0, 0.55556],
	    "8502": [0, 0.68889, 0, 0, 0.66667],
	    "8503": [0, 0.68889, 0, 0, 0.44445],
	    "8504": [0, 0.68889, 0, 0, 0.66667],
	    "8513": [0, 0.68889, 0, 0, 0.63889],
	    "8592": [-0.03598, 0.46402, 0, 0, 0.5],
	    "8594": [-0.03598, 0.46402, 0, 0, 0.5],
	    "8602": [-0.13313, 0.36687, 0, 0, 1.0],
	    "8603": [-0.13313, 0.36687, 0, 0, 1.0],
	    "8606": [0.01354, 0.52239, 0, 0, 1.0],
	    "8608": [0.01354, 0.52239, 0, 0, 1.0],
	    "8610": [0.01354, 0.52239, 0, 0, 1.11111],
	    "8611": [0.01354, 0.52239, 0, 0, 1.11111],
	    "8619": [0, 0.54986, 0, 0, 1.0],
	    "8620": [0, 0.54986, 0, 0, 1.0],
	    "8621": [-0.13313, 0.37788, 0, 0, 1.38889],
	    "8622": [-0.13313, 0.36687, 0, 0, 1.0],
	    "8624": [0, 0.69224, 0, 0, 0.5],
	    "8625": [0, 0.69224, 0, 0, 0.5],
	    "8630": [0, 0.43056, 0, 0, 1.0],
	    "8631": [0, 0.43056, 0, 0, 1.0],
	    "8634": [0.08198, 0.58198, 0, 0, 0.77778],
	    "8635": [0.08198, 0.58198, 0, 0, 0.77778],
	    "8638": [0.19444, 0.69224, 0, 0, 0.41667],
	    "8639": [0.19444, 0.69224, 0, 0, 0.41667],
	    "8642": [0.19444, 0.69224, 0, 0, 0.41667],
	    "8643": [0.19444, 0.69224, 0, 0, 0.41667],
	    "8644": [0.1808, 0.675, 0, 0, 1.0],
	    "8646": [0.1808, 0.675, 0, 0, 1.0],
	    "8647": [0.1808, 0.675, 0, 0, 1.0],
	    "8648": [0.19444, 0.69224, 0, 0, 0.83334],
	    "8649": [0.1808, 0.675, 0, 0, 1.0],
	    "8650": [0.19444, 0.69224, 0, 0, 0.83334],
	    "8651": [0.01354, 0.52239, 0, 0, 1.0],
	    "8652": [0.01354, 0.52239, 0, 0, 1.0],
	    "8653": [-0.13313, 0.36687, 0, 0, 1.0],
	    "8654": [-0.13313, 0.36687, 0, 0, 1.0],
	    "8655": [-0.13313, 0.36687, 0, 0, 1.0],
	    "8666": [0.13667, 0.63667, 0, 0, 1.0],
	    "8667": [0.13667, 0.63667, 0, 0, 1.0],
	    "8669": [-0.13313, 0.37788, 0, 0, 1.0],
	    "8672": [-0.064, 0.437, 0, 0, 1.334],
	    "8674": [-0.064, 0.437, 0, 0, 1.334],
	    "8705": [0, 0.825, 0, 0, 0.5],
	    "8708": [0, 0.68889, 0, 0, 0.55556],
	    "8709": [0.08167, 0.58167, 0, 0, 0.77778],
	    "8717": [0, 0.43056, 0, 0, 0.42917],
	    "8722": [-0.03598, 0.46402, 0, 0, 0.5],
	    "8724": [0.08198, 0.69224, 0, 0, 0.77778],
	    "8726": [0.08167, 0.58167, 0, 0, 0.77778],
	    "8733": [0, 0.69224, 0, 0, 0.77778],
	    "8736": [0, 0.69224, 0, 0, 0.72222],
	    "8737": [0, 0.69224, 0, 0, 0.72222],
	    "8738": [0.03517, 0.52239, 0, 0, 0.72222],
	    "8739": [0.08167, 0.58167, 0, 0, 0.22222],
	    "8740": [0.25142, 0.74111, 0, 0, 0.27778],
	    "8741": [0.08167, 0.58167, 0, 0, 0.38889],
	    "8742": [0.25142, 0.74111, 0, 0, 0.5],
	    "8756": [0, 0.69224, 0, 0, 0.66667],
	    "8757": [0, 0.69224, 0, 0, 0.66667],
	    "8764": [-0.13313, 0.36687, 0, 0, 0.77778],
	    "8765": [-0.13313, 0.37788, 0, 0, 0.77778],
	    "8769": [-0.13313, 0.36687, 0, 0, 0.77778],
	    "8770": [-0.03625, 0.46375, 0, 0, 0.77778],
	    "8774": [0.30274, 0.79383, 0, 0, 0.77778],
	    "8776": [-0.01688, 0.48312, 0, 0, 0.77778],
	    "8778": [0.08167, 0.58167, 0, 0, 0.77778],
	    "8782": [0.06062, 0.54986, 0, 0, 0.77778],
	    "8783": [0.06062, 0.54986, 0, 0, 0.77778],
	    "8785": [0.08198, 0.58198, 0, 0, 0.77778],
	    "8786": [0.08198, 0.58198, 0, 0, 0.77778],
	    "8787": [0.08198, 0.58198, 0, 0, 0.77778],
	    "8790": [0, 0.69224, 0, 0, 0.77778],
	    "8791": [0.22958, 0.72958, 0, 0, 0.77778],
	    "8796": [0.08198, 0.91667, 0, 0, 0.77778],
	    "8806": [0.25583, 0.75583, 0, 0, 0.77778],
	    "8807": [0.25583, 0.75583, 0, 0, 0.77778],
	    "8808": [0.25142, 0.75726, 0, 0, 0.77778],
	    "8809": [0.25142, 0.75726, 0, 0, 0.77778],
	    "8812": [0.25583, 0.75583, 0, 0, 0.5],
	    "8814": [0.20576, 0.70576, 0, 0, 0.77778],
	    "8815": [0.20576, 0.70576, 0, 0, 0.77778],
	    "8816": [0.30274, 0.79383, 0, 0, 0.77778],
	    "8817": [0.30274, 0.79383, 0, 0, 0.77778],
	    "8818": [0.22958, 0.72958, 0, 0, 0.77778],
	    "8819": [0.22958, 0.72958, 0, 0, 0.77778],
	    "8822": [0.1808, 0.675, 0, 0, 0.77778],
	    "8823": [0.1808, 0.675, 0, 0, 0.77778],
	    "8828": [0.13667, 0.63667, 0, 0, 0.77778],
	    "8829": [0.13667, 0.63667, 0, 0, 0.77778],
	    "8830": [0.22958, 0.72958, 0, 0, 0.77778],
	    "8831": [0.22958, 0.72958, 0, 0, 0.77778],
	    "8832": [0.20576, 0.70576, 0, 0, 0.77778],
	    "8833": [0.20576, 0.70576, 0, 0, 0.77778],
	    "8840": [0.30274, 0.79383, 0, 0, 0.77778],
	    "8841": [0.30274, 0.79383, 0, 0, 0.77778],
	    "8842": [0.13597, 0.63597, 0, 0, 0.77778],
	    "8843": [0.13597, 0.63597, 0, 0, 0.77778],
	    "8847": [0.03517, 0.54986, 0, 0, 0.77778],
	    "8848": [0.03517, 0.54986, 0, 0, 0.77778],
	    "8858": [0.08198, 0.58198, 0, 0, 0.77778],
	    "8859": [0.08198, 0.58198, 0, 0, 0.77778],
	    "8861": [0.08198, 0.58198, 0, 0, 0.77778],
	    "8862": [0, 0.675, 0, 0, 0.77778],
	    "8863": [0, 0.675, 0, 0, 0.77778],
	    "8864": [0, 0.675, 0, 0, 0.77778],
	    "8865": [0, 0.675, 0, 0, 0.77778],
	    "8872": [0, 0.69224, 0, 0, 0.61111],
	    "8873": [0, 0.69224, 0, 0, 0.72222],
	    "8874": [0, 0.69224, 0, 0, 0.88889],
	    "8876": [0, 0.68889, 0, 0, 0.61111],
	    "8877": [0, 0.68889, 0, 0, 0.61111],
	    "8878": [0, 0.68889, 0, 0, 0.72222],
	    "8879": [0, 0.68889, 0, 0, 0.72222],
	    "8882": [0.03517, 0.54986, 0, 0, 0.77778],
	    "8883": [0.03517, 0.54986, 0, 0, 0.77778],
	    "8884": [0.13667, 0.63667, 0, 0, 0.77778],
	    "8885": [0.13667, 0.63667, 0, 0, 0.77778],
	    "8888": [0, 0.54986, 0, 0, 1.11111],
	    "8890": [0.19444, 0.43056, 0, 0, 0.55556],
	    "8891": [0.19444, 0.69224, 0, 0, 0.61111],
	    "8892": [0.19444, 0.69224, 0, 0, 0.61111],
	    "8901": [0, 0.54986, 0, 0, 0.27778],
	    "8903": [0.08167, 0.58167, 0, 0, 0.77778],
	    "8905": [0.08167, 0.58167, 0, 0, 0.77778],
	    "8906": [0.08167, 0.58167, 0, 0, 0.77778],
	    "8907": [0, 0.69224, 0, 0, 0.77778],
	    "8908": [0, 0.69224, 0, 0, 0.77778],
	    "8909": [-0.03598, 0.46402, 0, 0, 0.77778],
	    "8910": [0, 0.54986, 0, 0, 0.76042],
	    "8911": [0, 0.54986, 0, 0, 0.76042],
	    "8912": [0.03517, 0.54986, 0, 0, 0.77778],
	    "8913": [0.03517, 0.54986, 0, 0, 0.77778],
	    "8914": [0, 0.54986, 0, 0, 0.66667],
	    "8915": [0, 0.54986, 0, 0, 0.66667],
	    "8916": [0, 0.69224, 0, 0, 0.66667],
	    "8918": [0.0391, 0.5391, 0, 0, 0.77778],
	    "8919": [0.0391, 0.5391, 0, 0, 0.77778],
	    "8920": [0.03517, 0.54986, 0, 0, 1.33334],
	    "8921": [0.03517, 0.54986, 0, 0, 1.33334],
	    "8922": [0.38569, 0.88569, 0, 0, 0.77778],
	    "8923": [0.38569, 0.88569, 0, 0, 0.77778],
	    "8926": [0.13667, 0.63667, 0, 0, 0.77778],
	    "8927": [0.13667, 0.63667, 0, 0, 0.77778],
	    "8928": [0.30274, 0.79383, 0, 0, 0.77778],
	    "8929": [0.30274, 0.79383, 0, 0, 0.77778],
	    "8934": [0.23222, 0.74111, 0, 0, 0.77778],
	    "8935": [0.23222, 0.74111, 0, 0, 0.77778],
	    "8936": [0.23222, 0.74111, 0, 0, 0.77778],
	    "8937": [0.23222, 0.74111, 0, 0, 0.77778],
	    "8938": [0.20576, 0.70576, 0, 0, 0.77778],
	    "8939": [0.20576, 0.70576, 0, 0, 0.77778],
	    "8940": [0.30274, 0.79383, 0, 0, 0.77778],
	    "8941": [0.30274, 0.79383, 0, 0, 0.77778],
	    "8994": [0.19444, 0.69224, 0, 0, 0.77778],
	    "8995": [0.19444, 0.69224, 0, 0, 0.77778],
	    "9416": [0.15559, 0.69224, 0, 0, 0.90222],
	    "9484": [0, 0.69224, 0, 0, 0.5],
	    "9488": [0, 0.69224, 0, 0, 0.5],
	    "9492": [0, 0.37788, 0, 0, 0.5],
	    "9496": [0, 0.37788, 0, 0, 0.5],
	    "9585": [0.19444, 0.68889, 0, 0, 0.88889],
	    "9586": [0.19444, 0.74111, 0, 0, 0.88889],
	    "9632": [0, 0.675, 0, 0, 0.77778],
	    "9633": [0, 0.675, 0, 0, 0.77778],
	    "9650": [0, 0.54986, 0, 0, 0.72222],
	    "9651": [0, 0.54986, 0, 0, 0.72222],
	    "9654": [0.03517, 0.54986, 0, 0, 0.77778],
	    "9660": [0, 0.54986, 0, 0, 0.72222],
	    "9661": [0, 0.54986, 0, 0, 0.72222],
	    "9664": [0.03517, 0.54986, 0, 0, 0.77778],
	    "9674": [0.11111, 0.69224, 0, 0, 0.66667],
	    "9733": [0.19444, 0.69224, 0, 0, 0.94445],
	    "10003": [0, 0.69224, 0, 0, 0.83334],
	    "10016": [0, 0.69224, 0, 0, 0.83334],
	    "10731": [0.11111, 0.69224, 0, 0, 0.66667],
	    "10846": [0.19444, 0.75583, 0, 0, 0.61111],
	    "10877": [0.13667, 0.63667, 0, 0, 0.77778],
	    "10878": [0.13667, 0.63667, 0, 0, 0.77778],
	    "10885": [0.25583, 0.75583, 0, 0, 0.77778],
	    "10886": [0.25583, 0.75583, 0, 0, 0.77778],
	    "10887": [0.13597, 0.63597, 0, 0, 0.77778],
	    "10888": [0.13597, 0.63597, 0, 0, 0.77778],
	    "10889": [0.26167, 0.75726, 0, 0, 0.77778],
	    "10890": [0.26167, 0.75726, 0, 0, 0.77778],
	    "10891": [0.48256, 0.98256, 0, 0, 0.77778],
	    "10892": [0.48256, 0.98256, 0, 0, 0.77778],
	    "10901": [0.13667, 0.63667, 0, 0, 0.77778],
	    "10902": [0.13667, 0.63667, 0, 0, 0.77778],
	    "10933": [0.25142, 0.75726, 0, 0, 0.77778],
	    "10934": [0.25142, 0.75726, 0, 0, 0.77778],
	    "10935": [0.26167, 0.75726, 0, 0, 0.77778],
	    "10936": [0.26167, 0.75726, 0, 0, 0.77778],
	    "10937": [0.26167, 0.75726, 0, 0, 0.77778],
	    "10938": [0.26167, 0.75726, 0, 0, 0.77778],
	    "10949": [0.25583, 0.75583, 0, 0, 0.77778],
	    "10950": [0.25583, 0.75583, 0, 0, 0.77778],
	    "10955": [0.28481, 0.79383, 0, 0, 0.77778],
	    "10956": [0.28481, 0.79383, 0, 0, 0.77778],
	    "57350": [0.08167, 0.58167, 0, 0, 0.22222],
	    "57351": [0.08167, 0.58167, 0, 0, 0.38889],
	    "57352": [0.08167, 0.58167, 0, 0, 0.77778],
	    "57353": [0, 0.43056, 0.04028, 0, 0.66667],
	    "57356": [0.25142, 0.75726, 0, 0, 0.77778],
	    "57357": [0.25142, 0.75726, 0, 0, 0.77778],
	    "57358": [0.41951, 0.91951, 0, 0, 0.77778],
	    "57359": [0.30274, 0.79383, 0, 0, 0.77778],
	    "57360": [0.30274, 0.79383, 0, 0, 0.77778],
	    "57361": [0.41951, 0.91951, 0, 0, 0.77778],
	    "57366": [0.25142, 0.75726, 0, 0, 0.77778],
	    "57367": [0.25142, 0.75726, 0, 0, 0.77778],
	    "57368": [0.25142, 0.75726, 0, 0, 0.77778],
	    "57369": [0.25142, 0.75726, 0, 0, 0.77778],
	    "57370": [0.13597, 0.63597, 0, 0, 0.77778],
	    "57371": [0.13597, 0.63597, 0, 0, 0.77778]
	  },
	  "Caligraphic-Regular": {
	    "32": [0, 0, 0, 0, 0.25],
	    "65": [0, 0.68333, 0, 0.19445, 0.79847],
	    "66": [0, 0.68333, 0.03041, 0.13889, 0.65681],
	    "67": [0, 0.68333, 0.05834, 0.13889, 0.52653],
	    "68": [0, 0.68333, 0.02778, 0.08334, 0.77139],
	    "69": [0, 0.68333, 0.08944, 0.11111, 0.52778],
	    "70": [0, 0.68333, 0.09931, 0.11111, 0.71875],
	    "71": [0.09722, 0.68333, 0.0593, 0.11111, 0.59487],
	    "72": [0, 0.68333, 0.00965, 0.11111, 0.84452],
	    "73": [0, 0.68333, 0.07382, 0, 0.54452],
	    "74": [0.09722, 0.68333, 0.18472, 0.16667, 0.67778],
	    "75": [0, 0.68333, 0.01445, 0.05556, 0.76195],
	    "76": [0, 0.68333, 0, 0.13889, 0.68972],
	    "77": [0, 0.68333, 0, 0.13889, 1.2009],
	    "78": [0, 0.68333, 0.14736, 0.08334, 0.82049],
	    "79": [0, 0.68333, 0.02778, 0.11111, 0.79611],
	    "80": [0, 0.68333, 0.08222, 0.08334, 0.69556],
	    "81": [0.09722, 0.68333, 0, 0.11111, 0.81667],
	    "82": [0, 0.68333, 0, 0.08334, 0.8475],
	    "83": [0, 0.68333, 0.075, 0.13889, 0.60556],
	    "84": [0, 0.68333, 0.25417, 0, 0.54464],
	    "85": [0, 0.68333, 0.09931, 0.08334, 0.62583],
	    "86": [0, 0.68333, 0.08222, 0, 0.61278],
	    "87": [0, 0.68333, 0.08222, 0.08334, 0.98778],
	    "88": [0, 0.68333, 0.14643, 0.13889, 0.7133],
	    "89": [0.09722, 0.68333, 0.08222, 0.08334, 0.66834],
	    "90": [0, 0.68333, 0.07944, 0.13889, 0.72473],
	    "160": [0, 0, 0, 0, 0.25]
	  },
	  "Fraktur-Regular": {
	    "32": [0, 0, 0, 0, 0.25],
	    "33": [0, 0.69141, 0, 0, 0.29574],
	    "34": [0, 0.69141, 0, 0, 0.21471],
	    "38": [0, 0.69141, 0, 0, 0.73786],
	    "39": [0, 0.69141, 0, 0, 0.21201],
	    "40": [0.24982, 0.74947, 0, 0, 0.38865],
	    "41": [0.24982, 0.74947, 0, 0, 0.38865],
	    "42": [0, 0.62119, 0, 0, 0.27764],
	    "43": [0.08319, 0.58283, 0, 0, 0.75623],
	    "44": [0, 0.10803, 0, 0, 0.27764],
	    "45": [0.08319, 0.58283, 0, 0, 0.75623],
	    "46": [0, 0.10803, 0, 0, 0.27764],
	    "47": [0.24982, 0.74947, 0, 0, 0.50181],
	    "48": [0, 0.47534, 0, 0, 0.50181],
	    "49": [0, 0.47534, 0, 0, 0.50181],
	    "50": [0, 0.47534, 0, 0, 0.50181],
	    "51": [0.18906, 0.47534, 0, 0, 0.50181],
	    "52": [0.18906, 0.47534, 0, 0, 0.50181],
	    "53": [0.18906, 0.47534, 0, 0, 0.50181],
	    "54": [0, 0.69141, 0, 0, 0.50181],
	    "55": [0.18906, 0.47534, 0, 0, 0.50181],
	    "56": [0, 0.69141, 0, 0, 0.50181],
	    "57": [0.18906, 0.47534, 0, 0, 0.50181],
	    "58": [0, 0.47534, 0, 0, 0.21606],
	    "59": [0.12604, 0.47534, 0, 0, 0.21606],
	    "61": [-0.13099, 0.36866, 0, 0, 0.75623],
	    "63": [0, 0.69141, 0, 0, 0.36245],
	    "65": [0, 0.69141, 0, 0, 0.7176],
	    "66": [0, 0.69141, 0, 0, 0.88397],
	    "67": [0, 0.69141, 0, 0, 0.61254],
	    "68": [0, 0.69141, 0, 0, 0.83158],
	    "69": [0, 0.69141, 0, 0, 0.66278],
	    "70": [0.12604, 0.69141, 0, 0, 0.61119],
	    "71": [0, 0.69141, 0, 0, 0.78539],
	    "72": [0.06302, 0.69141, 0, 0, 0.7203],
	    "73": [0, 0.69141, 0, 0, 0.55448],
	    "74": [0.12604, 0.69141, 0, 0, 0.55231],
	    "75": [0, 0.69141, 0, 0, 0.66845],
	    "76": [0, 0.69141, 0, 0, 0.66602],
	    "77": [0, 0.69141, 0, 0, 1.04953],
	    "78": [0, 0.69141, 0, 0, 0.83212],
	    "79": [0, 0.69141, 0, 0, 0.82699],
	    "80": [0.18906, 0.69141, 0, 0, 0.82753],
	    "81": [0.03781, 0.69141, 0, 0, 0.82699],
	    "82": [0, 0.69141, 0, 0, 0.82807],
	    "83": [0, 0.69141, 0, 0, 0.82861],
	    "84": [0, 0.69141, 0, 0, 0.66899],
	    "85": [0, 0.69141, 0, 0, 0.64576],
	    "86": [0, 0.69141, 0, 0, 0.83131],
	    "87": [0, 0.69141, 0, 0, 1.04602],
	    "88": [0, 0.69141, 0, 0, 0.71922],
	    "89": [0.18906, 0.69141, 0, 0, 0.83293],
	    "90": [0.12604, 0.69141, 0, 0, 0.60201],
	    "91": [0.24982, 0.74947, 0, 0, 0.27764],
	    "93": [0.24982, 0.74947, 0, 0, 0.27764],
	    "94": [0, 0.69141, 0, 0, 0.49965],
	    "97": [0, 0.47534, 0, 0, 0.50046],
	    "98": [0, 0.69141, 0, 0, 0.51315],
	    "99": [0, 0.47534, 0, 0, 0.38946],
	    "100": [0, 0.62119, 0, 0, 0.49857],
	    "101": [0, 0.47534, 0, 0, 0.40053],
	    "102": [0.18906, 0.69141, 0, 0, 0.32626],
	    "103": [0.18906, 0.47534, 0, 0, 0.5037],
	    "104": [0.18906, 0.69141, 0, 0, 0.52126],
	    "105": [0, 0.69141, 0, 0, 0.27899],
	    "106": [0, 0.69141, 0, 0, 0.28088],
	    "107": [0, 0.69141, 0, 0, 0.38946],
	    "108": [0, 0.69141, 0, 0, 0.27953],
	    "109": [0, 0.47534, 0, 0, 0.76676],
	    "110": [0, 0.47534, 0, 0, 0.52666],
	    "111": [0, 0.47534, 0, 0, 0.48885],
	    "112": [0.18906, 0.52396, 0, 0, 0.50046],
	    "113": [0.18906, 0.47534, 0, 0, 0.48912],
	    "114": [0, 0.47534, 0, 0, 0.38919],
	    "115": [0, 0.47534, 0, 0, 0.44266],
	    "116": [0, 0.62119, 0, 0, 0.33301],
	    "117": [0, 0.47534, 0, 0, 0.5172],
	    "118": [0, 0.52396, 0, 0, 0.5118],
	    "119": [0, 0.52396, 0, 0, 0.77351],
	    "120": [0.18906, 0.47534, 0, 0, 0.38865],
	    "121": [0.18906, 0.47534, 0, 0, 0.49884],
	    "122": [0.18906, 0.47534, 0, 0, 0.39054],
	    "160": [0, 0, 0, 0, 0.25],
	    "8216": [0, 0.69141, 0, 0, 0.21471],
	    "8217": [0, 0.69141, 0, 0, 0.21471],
	    "58112": [0, 0.62119, 0, 0, 0.49749],
	    "58113": [0, 0.62119, 0, 0, 0.4983],
	    "58114": [0.18906, 0.69141, 0, 0, 0.33328],
	    "58115": [0.18906, 0.69141, 0, 0, 0.32923],
	    "58116": [0.18906, 0.47534, 0, 0, 0.50343],
	    "58117": [0, 0.69141, 0, 0, 0.33301],
	    "58118": [0, 0.62119, 0, 0, 0.33409],
	    "58119": [0, 0.47534, 0, 0, 0.50073]
	  },
	  "Main-Bold": {
	    "32": [0, 0, 0, 0, 0.25],
	    "33": [0, 0.69444, 0, 0, 0.35],
	    "34": [0, 0.69444, 0, 0, 0.60278],
	    "35": [0.19444, 0.69444, 0, 0, 0.95833],
	    "36": [0.05556, 0.75, 0, 0, 0.575],
	    "37": [0.05556, 0.75, 0, 0, 0.95833],
	    "38": [0, 0.69444, 0, 0, 0.89444],
	    "39": [0, 0.69444, 0, 0, 0.31944],
	    "40": [0.25, 0.75, 0, 0, 0.44722],
	    "41": [0.25, 0.75, 0, 0, 0.44722],
	    "42": [0, 0.75, 0, 0, 0.575],
	    "43": [0.13333, 0.63333, 0, 0, 0.89444],
	    "44": [0.19444, 0.15556, 0, 0, 0.31944],
	    "45": [0, 0.44444, 0, 0, 0.38333],
	    "46": [0, 0.15556, 0, 0, 0.31944],
	    "47": [0.25, 0.75, 0, 0, 0.575],
	    "48": [0, 0.64444, 0, 0, 0.575],
	    "49": [0, 0.64444, 0, 0, 0.575],
	    "50": [0, 0.64444, 0, 0, 0.575],
	    "51": [0, 0.64444, 0, 0, 0.575],
	    "52": [0, 0.64444, 0, 0, 0.575],
	    "53": [0, 0.64444, 0, 0, 0.575],
	    "54": [0, 0.64444, 0, 0, 0.575],
	    "55": [0, 0.64444, 0, 0, 0.575],
	    "56": [0, 0.64444, 0, 0, 0.575],
	    "57": [0, 0.64444, 0, 0, 0.575],
	    "58": [0, 0.44444, 0, 0, 0.31944],
	    "59": [0.19444, 0.44444, 0, 0, 0.31944],
	    "60": [0.08556, 0.58556, 0, 0, 0.89444],
	    "61": [-0.10889, 0.39111, 0, 0, 0.89444],
	    "62": [0.08556, 0.58556, 0, 0, 0.89444],
	    "63": [0, 0.69444, 0, 0, 0.54305],
	    "64": [0, 0.69444, 0, 0, 0.89444],
	    "65": [0, 0.68611, 0, 0, 0.86944],
	    "66": [0, 0.68611, 0, 0, 0.81805],
	    "67": [0, 0.68611, 0, 0, 0.83055],
	    "68": [0, 0.68611, 0, 0, 0.88194],
	    "69": [0, 0.68611, 0, 0, 0.75555],
	    "70": [0, 0.68611, 0, 0, 0.72361],
	    "71": [0, 0.68611, 0, 0, 0.90416],
	    "72": [0, 0.68611, 0, 0, 0.9],
	    "73": [0, 0.68611, 0, 0, 0.43611],
	    "74": [0, 0.68611, 0, 0, 0.59444],
	    "75": [0, 0.68611, 0, 0, 0.90138],
	    "76": [0, 0.68611, 0, 0, 0.69166],
	    "77": [0, 0.68611, 0, 0, 1.09166],
	    "78": [0, 0.68611, 0, 0, 0.9],
	    "79": [0, 0.68611, 0, 0, 0.86388],
	    "80": [0, 0.68611, 0, 0, 0.78611],
	    "81": [0.19444, 0.68611, 0, 0, 0.86388],
	    "82": [0, 0.68611, 0, 0, 0.8625],
	    "83": [0, 0.68611, 0, 0, 0.63889],
	    "84": [0, 0.68611, 0, 0, 0.8],
	    "85": [0, 0.68611, 0, 0, 0.88472],
	    "86": [0, 0.68611, 0.01597, 0, 0.86944],
	    "87": [0, 0.68611, 0.01597, 0, 1.18888],
	    "88": [0, 0.68611, 0, 0, 0.86944],
	    "89": [0, 0.68611, 0.02875, 0, 0.86944],
	    "90": [0, 0.68611, 0, 0, 0.70277],
	    "91": [0.25, 0.75, 0, 0, 0.31944],
	    "92": [0.25, 0.75, 0, 0, 0.575],
	    "93": [0.25, 0.75, 0, 0, 0.31944],
	    "94": [0, 0.69444, 0, 0, 0.575],
	    "95": [0.31, 0.13444, 0.03194, 0, 0.575],
	    "97": [0, 0.44444, 0, 0, 0.55902],
	    "98": [0, 0.69444, 0, 0, 0.63889],
	    "99": [0, 0.44444, 0, 0, 0.51111],
	    "100": [0, 0.69444, 0, 0, 0.63889],
	    "101": [0, 0.44444, 0, 0, 0.52708],
	    "102": [0, 0.69444, 0.10903, 0, 0.35139],
	    "103": [0.19444, 0.44444, 0.01597, 0, 0.575],
	    "104": [0, 0.69444, 0, 0, 0.63889],
	    "105": [0, 0.69444, 0, 0, 0.31944],
	    "106": [0.19444, 0.69444, 0, 0, 0.35139],
	    "107": [0, 0.69444, 0, 0, 0.60694],
	    "108": [0, 0.69444, 0, 0, 0.31944],
	    "109": [0, 0.44444, 0, 0, 0.95833],
	    "110": [0, 0.44444, 0, 0, 0.63889],
	    "111": [0, 0.44444, 0, 0, 0.575],
	    "112": [0.19444, 0.44444, 0, 0, 0.63889],
	    "113": [0.19444, 0.44444, 0, 0, 0.60694],
	    "114": [0, 0.44444, 0, 0, 0.47361],
	    "115": [0, 0.44444, 0, 0, 0.45361],
	    "116": [0, 0.63492, 0, 0, 0.44722],
	    "117": [0, 0.44444, 0, 0, 0.63889],
	    "118": [0, 0.44444, 0.01597, 0, 0.60694],
	    "119": [0, 0.44444, 0.01597, 0, 0.83055],
	    "120": [0, 0.44444, 0, 0, 0.60694],
	    "121": [0.19444, 0.44444, 0.01597, 0, 0.60694],
	    "122": [0, 0.44444, 0, 0, 0.51111],
	    "123": [0.25, 0.75, 0, 0, 0.575],
	    "124": [0.25, 0.75, 0, 0, 0.31944],
	    "125": [0.25, 0.75, 0, 0, 0.575],
	    "126": [0.35, 0.34444, 0, 0, 0.575],
	    "160": [0, 0, 0, 0, 0.25],
	    "163": [0, 0.69444, 0, 0, 0.86853],
	    "168": [0, 0.69444, 0, 0, 0.575],
	    "172": [0, 0.44444, 0, 0, 0.76666],
	    "176": [0, 0.69444, 0, 0, 0.86944],
	    "177": [0.13333, 0.63333, 0, 0, 0.89444],
	    "184": [0.17014, 0, 0, 0, 0.51111],
	    "198": [0, 0.68611, 0, 0, 1.04166],
	    "215": [0.13333, 0.63333, 0, 0, 0.89444],
	    "216": [0.04861, 0.73472, 0, 0, 0.89444],
	    "223": [0, 0.69444, 0, 0, 0.59722],
	    "230": [0, 0.44444, 0, 0, 0.83055],
	    "247": [0.13333, 0.63333, 0, 0, 0.89444],
	    "248": [0.09722, 0.54167, 0, 0, 0.575],
	    "305": [0, 0.44444, 0, 0, 0.31944],
	    "338": [0, 0.68611, 0, 0, 1.16944],
	    "339": [0, 0.44444, 0, 0, 0.89444],
	    "567": [0.19444, 0.44444, 0, 0, 0.35139],
	    "710": [0, 0.69444, 0, 0, 0.575],
	    "711": [0, 0.63194, 0, 0, 0.575],
	    "713": [0, 0.59611, 0, 0, 0.575],
	    "714": [0, 0.69444, 0, 0, 0.575],
	    "715": [0, 0.69444, 0, 0, 0.575],
	    "728": [0, 0.69444, 0, 0, 0.575],
	    "729": [0, 0.69444, 0, 0, 0.31944],
	    "730": [0, 0.69444, 0, 0, 0.86944],
	    "732": [0, 0.69444, 0, 0, 0.575],
	    "733": [0, 0.69444, 0, 0, 0.575],
	    "915": [0, 0.68611, 0, 0, 0.69166],
	    "916": [0, 0.68611, 0, 0, 0.95833],
	    "920": [0, 0.68611, 0, 0, 0.89444],
	    "923": [0, 0.68611, 0, 0, 0.80555],
	    "926": [0, 0.68611, 0, 0, 0.76666],
	    "928": [0, 0.68611, 0, 0, 0.9],
	    "931": [0, 0.68611, 0, 0, 0.83055],
	    "933": [0, 0.68611, 0, 0, 0.89444],
	    "934": [0, 0.68611, 0, 0, 0.83055],
	    "936": [0, 0.68611, 0, 0, 0.89444],
	    "937": [0, 0.68611, 0, 0, 0.83055],
	    "8211": [0, 0.44444, 0.03194, 0, 0.575],
	    "8212": [0, 0.44444, 0.03194, 0, 1.14999],
	    "8216": [0, 0.69444, 0, 0, 0.31944],
	    "8217": [0, 0.69444, 0, 0, 0.31944],
	    "8220": [0, 0.69444, 0, 0, 0.60278],
	    "8221": [0, 0.69444, 0, 0, 0.60278],
	    "8224": [0.19444, 0.69444, 0, 0, 0.51111],
	    "8225": [0.19444, 0.69444, 0, 0, 0.51111],
	    "8242": [0, 0.55556, 0, 0, 0.34444],
	    "8407": [0, 0.72444, 0.15486, 0, 0.575],
	    "8463": [0, 0.69444, 0, 0, 0.66759],
	    "8465": [0, 0.69444, 0, 0, 0.83055],
	    "8467": [0, 0.69444, 0, 0, 0.47361],
	    "8472": [0.19444, 0.44444, 0, 0, 0.74027],
	    "8476": [0, 0.69444, 0, 0, 0.83055],
	    "8501": [0, 0.69444, 0, 0, 0.70277],
	    "8592": [-0.10889, 0.39111, 0, 0, 1.14999],
	    "8593": [0.19444, 0.69444, 0, 0, 0.575],
	    "8594": [-0.10889, 0.39111, 0, 0, 1.14999],
	    "8595": [0.19444, 0.69444, 0, 0, 0.575],
	    "8596": [-0.10889, 0.39111, 0, 0, 1.14999],
	    "8597": [0.25, 0.75, 0, 0, 0.575],
	    "8598": [0.19444, 0.69444, 0, 0, 1.14999],
	    "8599": [0.19444, 0.69444, 0, 0, 1.14999],
	    "8600": [0.19444, 0.69444, 0, 0, 1.14999],
	    "8601": [0.19444, 0.69444, 0, 0, 1.14999],
	    "8636": [-0.10889, 0.39111, 0, 0, 1.14999],
	    "8637": [-0.10889, 0.39111, 0, 0, 1.14999],
	    "8640": [-0.10889, 0.39111, 0, 0, 1.14999],
	    "8641": [-0.10889, 0.39111, 0, 0, 1.14999],
	    "8656": [-0.10889, 0.39111, 0, 0, 1.14999],
	    "8657": [0.19444, 0.69444, 0, 0, 0.70277],
	    "8658": [-0.10889, 0.39111, 0, 0, 1.14999],
	    "8659": [0.19444, 0.69444, 0, 0, 0.70277],
	    "8660": [-0.10889, 0.39111, 0, 0, 1.14999],
	    "8661": [0.25, 0.75, 0, 0, 0.70277],
	    "8704": [0, 0.69444, 0, 0, 0.63889],
	    "8706": [0, 0.69444, 0.06389, 0, 0.62847],
	    "8707": [0, 0.69444, 0, 0, 0.63889],
	    "8709": [0.05556, 0.75, 0, 0, 0.575],
	    "8711": [0, 0.68611, 0, 0, 0.95833],
	    "8712": [0.08556, 0.58556, 0, 0, 0.76666],
	    "8715": [0.08556, 0.58556, 0, 0, 0.76666],
	    "8722": [0.13333, 0.63333, 0, 0, 0.89444],
	    "8723": [0.13333, 0.63333, 0, 0, 0.89444],
	    "8725": [0.25, 0.75, 0, 0, 0.575],
	    "8726": [0.25, 0.75, 0, 0, 0.575],
	    "8727": [-0.02778, 0.47222, 0, 0, 0.575],
	    "8728": [-0.02639, 0.47361, 0, 0, 0.575],
	    "8729": [-0.02639, 0.47361, 0, 0, 0.575],
	    "8730": [0.18, 0.82, 0, 0, 0.95833],
	    "8733": [0, 0.44444, 0, 0, 0.89444],
	    "8734": [0, 0.44444, 0, 0, 1.14999],
	    "8736": [0, 0.69224, 0, 0, 0.72222],
	    "8739": [0.25, 0.75, 0, 0, 0.31944],
	    "8741": [0.25, 0.75, 0, 0, 0.575],
	    "8743": [0, 0.55556, 0, 0, 0.76666],
	    "8744": [0, 0.55556, 0, 0, 0.76666],
	    "8745": [0, 0.55556, 0, 0, 0.76666],
	    "8746": [0, 0.55556, 0, 0, 0.76666],
	    "8747": [0.19444, 0.69444, 0.12778, 0, 0.56875],
	    "8764": [-0.10889, 0.39111, 0, 0, 0.89444],
	    "8768": [0.19444, 0.69444, 0, 0, 0.31944],
	    "8771": [0.00222, 0.50222, 0, 0, 0.89444],
	    "8773": [0.027, 0.638, 0, 0, 0.894],
	    "8776": [0.02444, 0.52444, 0, 0, 0.89444],
	    "8781": [0.00222, 0.50222, 0, 0, 0.89444],
	    "8801": [0.00222, 0.50222, 0, 0, 0.89444],
	    "8804": [0.19667, 0.69667, 0, 0, 0.89444],
	    "8805": [0.19667, 0.69667, 0, 0, 0.89444],
	    "8810": [0.08556, 0.58556, 0, 0, 1.14999],
	    "8811": [0.08556, 0.58556, 0, 0, 1.14999],
	    "8826": [0.08556, 0.58556, 0, 0, 0.89444],
	    "8827": [0.08556, 0.58556, 0, 0, 0.89444],
	    "8834": [0.08556, 0.58556, 0, 0, 0.89444],
	    "8835": [0.08556, 0.58556, 0, 0, 0.89444],
	    "8838": [0.19667, 0.69667, 0, 0, 0.89444],
	    "8839": [0.19667, 0.69667, 0, 0, 0.89444],
	    "8846": [0, 0.55556, 0, 0, 0.76666],
	    "8849": [0.19667, 0.69667, 0, 0, 0.89444],
	    "8850": [0.19667, 0.69667, 0, 0, 0.89444],
	    "8851": [0, 0.55556, 0, 0, 0.76666],
	    "8852": [0, 0.55556, 0, 0, 0.76666],
	    "8853": [0.13333, 0.63333, 0, 0, 0.89444],
	    "8854": [0.13333, 0.63333, 0, 0, 0.89444],
	    "8855": [0.13333, 0.63333, 0, 0, 0.89444],
	    "8856": [0.13333, 0.63333, 0, 0, 0.89444],
	    "8857": [0.13333, 0.63333, 0, 0, 0.89444],
	    "8866": [0, 0.69444, 0, 0, 0.70277],
	    "8867": [0, 0.69444, 0, 0, 0.70277],
	    "8868": [0, 0.69444, 0, 0, 0.89444],
	    "8869": [0, 0.69444, 0, 0, 0.89444],
	    "8900": [-0.02639, 0.47361, 0, 0, 0.575],
	    "8901": [-0.02639, 0.47361, 0, 0, 0.31944],
	    "8902": [-0.02778, 0.47222, 0, 0, 0.575],
	    "8968": [0.25, 0.75, 0, 0, 0.51111],
	    "8969": [0.25, 0.75, 0, 0, 0.51111],
	    "8970": [0.25, 0.75, 0, 0, 0.51111],
	    "8971": [0.25, 0.75, 0, 0, 0.51111],
	    "8994": [-0.13889, 0.36111, 0, 0, 1.14999],
	    "8995": [-0.13889, 0.36111, 0, 0, 1.14999],
	    "9651": [0.19444, 0.69444, 0, 0, 1.02222],
	    "9657": [-0.02778, 0.47222, 0, 0, 0.575],
	    "9661": [0.19444, 0.69444, 0, 0, 1.02222],
	    "9667": [-0.02778, 0.47222, 0, 0, 0.575],
	    "9711": [0.19444, 0.69444, 0, 0, 1.14999],
	    "9824": [0.12963, 0.69444, 0, 0, 0.89444],
	    "9825": [0.12963, 0.69444, 0, 0, 0.89444],
	    "9826": [0.12963, 0.69444, 0, 0, 0.89444],
	    "9827": [0.12963, 0.69444, 0, 0, 0.89444],
	    "9837": [0, 0.75, 0, 0, 0.44722],
	    "9838": [0.19444, 0.69444, 0, 0, 0.44722],
	    "9839": [0.19444, 0.69444, 0, 0, 0.44722],
	    "10216": [0.25, 0.75, 0, 0, 0.44722],
	    "10217": [0.25, 0.75, 0, 0, 0.44722],
	    "10815": [0, 0.68611, 0, 0, 0.9],
	    "10927": [0.19667, 0.69667, 0, 0, 0.89444],
	    "10928": [0.19667, 0.69667, 0, 0, 0.89444],
	    "57376": [0.19444, 0.69444, 0, 0, 0]
	  },
	  "Main-BoldItalic": {
	    "32": [0, 0, 0, 0, 0.25],
	    "33": [0, 0.69444, 0.11417, 0, 0.38611],
	    "34": [0, 0.69444, 0.07939, 0, 0.62055],
	    "35": [0.19444, 0.69444, 0.06833, 0, 0.94444],
	    "37": [0.05556, 0.75, 0.12861, 0, 0.94444],
	    "38": [0, 0.69444, 0.08528, 0, 0.88555],
	    "39": [0, 0.69444, 0.12945, 0, 0.35555],
	    "40": [0.25, 0.75, 0.15806, 0, 0.47333],
	    "41": [0.25, 0.75, 0.03306, 0, 0.47333],
	    "42": [0, 0.75, 0.14333, 0, 0.59111],
	    "43": [0.10333, 0.60333, 0.03306, 0, 0.88555],
	    "44": [0.19444, 0.14722, 0, 0, 0.35555],
	    "45": [0, 0.44444, 0.02611, 0, 0.41444],
	    "46": [0, 0.14722, 0, 0, 0.35555],
	    "47": [0.25, 0.75, 0.15806, 0, 0.59111],
	    "48": [0, 0.64444, 0.13167, 0, 0.59111],
	    "49": [0, 0.64444, 0.13167, 0, 0.59111],
	    "50": [0, 0.64444, 0.13167, 0, 0.59111],
	    "51": [0, 0.64444, 0.13167, 0, 0.59111],
	    "52": [0.19444, 0.64444, 0.13167, 0, 0.59111],
	    "53": [0, 0.64444, 0.13167, 0, 0.59111],
	    "54": [0, 0.64444, 0.13167, 0, 0.59111],
	    "55": [0.19444, 0.64444, 0.13167, 0, 0.59111],
	    "56": [0, 0.64444, 0.13167, 0, 0.59111],
	    "57": [0, 0.64444, 0.13167, 0, 0.59111],
	    "58": [0, 0.44444, 0.06695, 0, 0.35555],
	    "59": [0.19444, 0.44444, 0.06695, 0, 0.35555],
	    "61": [-0.10889, 0.39111, 0.06833, 0, 0.88555],
	    "63": [0, 0.69444, 0.11472, 0, 0.59111],
	    "64": [0, 0.69444, 0.09208, 0, 0.88555],
	    "65": [0, 0.68611, 0, 0, 0.86555],
	    "66": [0, 0.68611, 0.0992, 0, 0.81666],
	    "67": [0, 0.68611, 0.14208, 0, 0.82666],
	    "68": [0, 0.68611, 0.09062, 0, 0.87555],
	    "69": [0, 0.68611, 0.11431, 0, 0.75666],
	    "70": [0, 0.68611, 0.12903, 0, 0.72722],
	    "71": [0, 0.68611, 0.07347, 0, 0.89527],
	    "72": [0, 0.68611, 0.17208, 0, 0.8961],
	    "73": [0, 0.68611, 0.15681, 0, 0.47166],
	    "74": [0, 0.68611, 0.145, 0, 0.61055],
	    "75": [0, 0.68611, 0.14208, 0, 0.89499],
	    "76": [0, 0.68611, 0, 0, 0.69777],
	    "77": [0, 0.68611, 0.17208, 0, 1.07277],
	    "78": [0, 0.68611, 0.17208, 0, 0.8961],
	    "79": [0, 0.68611, 0.09062, 0, 0.85499],
	    "80": [0, 0.68611, 0.0992, 0, 0.78721],
	    "81": [0.19444, 0.68611, 0.09062, 0, 0.85499],
	    "82": [0, 0.68611, 0.02559, 0, 0.85944],
	    "83": [0, 0.68611, 0.11264, 0, 0.64999],
	    "84": [0, 0.68611, 0.12903, 0, 0.7961],
	    "85": [0, 0.68611, 0.17208, 0, 0.88083],
	    "86": [0, 0.68611, 0.18625, 0, 0.86555],
	    "87": [0, 0.68611, 0.18625, 0, 1.15999],
	    "88": [0, 0.68611, 0.15681, 0, 0.86555],
	    "89": [0, 0.68611, 0.19803, 0, 0.86555],
	    "90": [0, 0.68611, 0.14208, 0, 0.70888],
	    "91": [0.25, 0.75, 0.1875, 0, 0.35611],
	    "93": [0.25, 0.75, 0.09972, 0, 0.35611],
	    "94": [0, 0.69444, 0.06709, 0, 0.59111],
	    "95": [0.31, 0.13444, 0.09811, 0, 0.59111],
	    "97": [0, 0.44444, 0.09426, 0, 0.59111],
	    "98": [0, 0.69444, 0.07861, 0, 0.53222],
	    "99": [0, 0.44444, 0.05222, 0, 0.53222],
	    "100": [0, 0.69444, 0.10861, 0, 0.59111],
	    "101": [0, 0.44444, 0.085, 0, 0.53222],
	    "102": [0.19444, 0.69444, 0.21778, 0, 0.4],
	    "103": [0.19444, 0.44444, 0.105, 0, 0.53222],
	    "104": [0, 0.69444, 0.09426, 0, 0.59111],
	    "105": [0, 0.69326, 0.11387, 0, 0.35555],
	    "106": [0.19444, 0.69326, 0.1672, 0, 0.35555],
	    "107": [0, 0.69444, 0.11111, 0, 0.53222],
	    "108": [0, 0.69444, 0.10861, 0, 0.29666],
	    "109": [0, 0.44444, 0.09426, 0, 0.94444],
	    "110": [0, 0.44444, 0.09426, 0, 0.64999],
	    "111": [0, 0.44444, 0.07861, 0, 0.59111],
	    "112": [0.19444, 0.44444, 0.07861, 0, 0.59111],
	    "113": [0.19444, 0.44444, 0.105, 0, 0.53222],
	    "114": [0, 0.44444, 0.11111, 0, 0.50167],
	    "115": [0, 0.44444, 0.08167, 0, 0.48694],
	    "116": [0, 0.63492, 0.09639, 0, 0.385],
	    "117": [0, 0.44444, 0.09426, 0, 0.62055],
	    "118": [0, 0.44444, 0.11111, 0, 0.53222],
	    "119": [0, 0.44444, 0.11111, 0, 0.76777],
	    "120": [0, 0.44444, 0.12583, 0, 0.56055],
	    "121": [0.19444, 0.44444, 0.105, 0, 0.56166],
	    "122": [0, 0.44444, 0.13889, 0, 0.49055],
	    "126": [0.35, 0.34444, 0.11472, 0, 0.59111],
	    "160": [0, 0, 0, 0, 0.25],
	    "168": [0, 0.69444, 0.11473, 0, 0.59111],
	    "176": [0, 0.69444, 0, 0, 0.94888],
	    "184": [0.17014, 0, 0, 0, 0.53222],
	    "198": [0, 0.68611, 0.11431, 0, 1.02277],
	    "216": [0.04861, 0.73472, 0.09062, 0, 0.88555],
	    "223": [0.19444, 0.69444, 0.09736, 0, 0.665],
	    "230": [0, 0.44444, 0.085, 0, 0.82666],
	    "248": [0.09722, 0.54167, 0.09458, 0, 0.59111],
	    "305": [0, 0.44444, 0.09426, 0, 0.35555],
	    "338": [0, 0.68611, 0.11431, 0, 1.14054],
	    "339": [0, 0.44444, 0.085, 0, 0.82666],
	    "567": [0.19444, 0.44444, 0.04611, 0, 0.385],
	    "710": [0, 0.69444, 0.06709, 0, 0.59111],
	    "711": [0, 0.63194, 0.08271, 0, 0.59111],
	    "713": [0, 0.59444, 0.10444, 0, 0.59111],
	    "714": [0, 0.69444, 0.08528, 0, 0.59111],
	    "715": [0, 0.69444, 0, 0, 0.59111],
	    "728": [0, 0.69444, 0.10333, 0, 0.59111],
	    "729": [0, 0.69444, 0.12945, 0, 0.35555],
	    "730": [0, 0.69444, 0, 0, 0.94888],
	    "732": [0, 0.69444, 0.11472, 0, 0.59111],
	    "733": [0, 0.69444, 0.11472, 0, 0.59111],
	    "915": [0, 0.68611, 0.12903, 0, 0.69777],
	    "916": [0, 0.68611, 0, 0, 0.94444],
	    "920": [0, 0.68611, 0.09062, 0, 0.88555],
	    "923": [0, 0.68611, 0, 0, 0.80666],
	    "926": [0, 0.68611, 0.15092, 0, 0.76777],
	    "928": [0, 0.68611, 0.17208, 0, 0.8961],
	    "931": [0, 0.68611, 0.11431, 0, 0.82666],
	    "933": [0, 0.68611, 0.10778, 0, 0.88555],
	    "934": [0, 0.68611, 0.05632, 0, 0.82666],
	    "936": [0, 0.68611, 0.10778, 0, 0.88555],
	    "937": [0, 0.68611, 0.0992, 0, 0.82666],
	    "8211": [0, 0.44444, 0.09811, 0, 0.59111],
	    "8212": [0, 0.44444, 0.09811, 0, 1.18221],
	    "8216": [0, 0.69444, 0.12945, 0, 0.35555],
	    "8217": [0, 0.69444, 0.12945, 0, 0.35555],
	    "8220": [0, 0.69444, 0.16772, 0, 0.62055],
	    "8221": [0, 0.69444, 0.07939, 0, 0.62055]
	  },
	  "Main-Italic": {
	    "32": [0, 0, 0, 0, 0.25],
	    "33": [0, 0.69444, 0.12417, 0, 0.30667],
	    "34": [0, 0.69444, 0.06961, 0, 0.51444],
	    "35": [0.19444, 0.69444, 0.06616, 0, 0.81777],
	    "37": [0.05556, 0.75, 0.13639, 0, 0.81777],
	    "38": [0, 0.69444, 0.09694, 0, 0.76666],
	    "39": [0, 0.69444, 0.12417, 0, 0.30667],
	    "40": [0.25, 0.75, 0.16194, 0, 0.40889],
	    "41": [0.25, 0.75, 0.03694, 0, 0.40889],
	    "42": [0, 0.75, 0.14917, 0, 0.51111],
	    "43": [0.05667, 0.56167, 0.03694, 0, 0.76666],
	    "44": [0.19444, 0.10556, 0, 0, 0.30667],
	    "45": [0, 0.43056, 0.02826, 0, 0.35778],
	    "46": [0, 0.10556, 0, 0, 0.30667],
	    "47": [0.25, 0.75, 0.16194, 0, 0.51111],
	    "48": [0, 0.64444, 0.13556, 0, 0.51111],
	    "49": [0, 0.64444, 0.13556, 0, 0.51111],
	    "50": [0, 0.64444, 0.13556, 0, 0.51111],
	    "51": [0, 0.64444, 0.13556, 0, 0.51111],
	    "52": [0.19444, 0.64444, 0.13556, 0, 0.51111],
	    "53": [0, 0.64444, 0.13556, 0, 0.51111],
	    "54": [0, 0.64444, 0.13556, 0, 0.51111],
	    "55": [0.19444, 0.64444, 0.13556, 0, 0.51111],
	    "56": [0, 0.64444, 0.13556, 0, 0.51111],
	    "57": [0, 0.64444, 0.13556, 0, 0.51111],
	    "58": [0, 0.43056, 0.0582, 0, 0.30667],
	    "59": [0.19444, 0.43056, 0.0582, 0, 0.30667],
	    "61": [-0.13313, 0.36687, 0.06616, 0, 0.76666],
	    "63": [0, 0.69444, 0.1225, 0, 0.51111],
	    "64": [0, 0.69444, 0.09597, 0, 0.76666],
	    "65": [0, 0.68333, 0, 0, 0.74333],
	    "66": [0, 0.68333, 0.10257, 0, 0.70389],
	    "67": [0, 0.68333, 0.14528, 0, 0.71555],
	    "68": [0, 0.68333, 0.09403, 0, 0.755],
	    "69": [0, 0.68333, 0.12028, 0, 0.67833],
	    "70": [0, 0.68333, 0.13305, 0, 0.65277],
	    "71": [0, 0.68333, 0.08722, 0, 0.77361],
	    "72": [0, 0.68333, 0.16389, 0, 0.74333],
	    "73": [0, 0.68333, 0.15806, 0, 0.38555],
	    "74": [0, 0.68333, 0.14028, 0, 0.525],
	    "75": [0, 0.68333, 0.14528, 0, 0.76888],
	    "76": [0, 0.68333, 0, 0, 0.62722],
	    "77": [0, 0.68333, 0.16389, 0, 0.89666],
	    "78": [0, 0.68333, 0.16389, 0, 0.74333],
	    "79": [0, 0.68333, 0.09403, 0, 0.76666],
	    "80": [0, 0.68333, 0.10257, 0, 0.67833],
	    "81": [0.19444, 0.68333, 0.09403, 0, 0.76666],
	    "82": [0, 0.68333, 0.03868, 0, 0.72944],
	    "83": [0, 0.68333, 0.11972, 0, 0.56222],
	    "84": [0, 0.68333, 0.13305, 0, 0.71555],
	    "85": [0, 0.68333, 0.16389, 0, 0.74333],
	    "86": [0, 0.68333, 0.18361, 0, 0.74333],
	    "87": [0, 0.68333, 0.18361, 0, 0.99888],
	    "88": [0, 0.68333, 0.15806, 0, 0.74333],
	    "89": [0, 0.68333, 0.19383, 0, 0.74333],
	    "90": [0, 0.68333, 0.14528, 0, 0.61333],
	    "91": [0.25, 0.75, 0.1875, 0, 0.30667],
	    "93": [0.25, 0.75, 0.10528, 0, 0.30667],
	    "94": [0, 0.69444, 0.06646, 0, 0.51111],
	    "95": [0.31, 0.12056, 0.09208, 0, 0.51111],
	    "97": [0, 0.43056, 0.07671, 0, 0.51111],
	    "98": [0, 0.69444, 0.06312, 0, 0.46],
	    "99": [0, 0.43056, 0.05653, 0, 0.46],
	    "100": [0, 0.69444, 0.10333, 0, 0.51111],
	    "101": [0, 0.43056, 0.07514, 0, 0.46],
	    "102": [0.19444, 0.69444, 0.21194, 0, 0.30667],
	    "103": [0.19444, 0.43056, 0.08847, 0, 0.46],
	    "104": [0, 0.69444, 0.07671, 0, 0.51111],
	    "105": [0, 0.65536, 0.1019, 0, 0.30667],
	    "106": [0.19444, 0.65536, 0.14467, 0, 0.30667],
	    "107": [0, 0.69444, 0.10764, 0, 0.46],
	    "108": [0, 0.69444, 0.10333, 0, 0.25555],
	    "109": [0, 0.43056, 0.07671, 0, 0.81777],
	    "110": [0, 0.43056, 0.07671, 0, 0.56222],
	    "111": [0, 0.43056, 0.06312, 0, 0.51111],
	    "112": [0.19444, 0.43056, 0.06312, 0, 0.51111],
	    "113": [0.19444, 0.43056, 0.08847, 0, 0.46],
	    "114": [0, 0.43056, 0.10764, 0, 0.42166],
	    "115": [0, 0.43056, 0.08208, 0, 0.40889],
	    "116": [0, 0.61508, 0.09486, 0, 0.33222],
	    "117": [0, 0.43056, 0.07671, 0, 0.53666],
	    "118": [0, 0.43056, 0.10764, 0, 0.46],
	    "119": [0, 0.43056, 0.10764, 0, 0.66444],
	    "120": [0, 0.43056, 0.12042, 0, 0.46389],
	    "121": [0.19444, 0.43056, 0.08847, 0, 0.48555],
	    "122": [0, 0.43056, 0.12292, 0, 0.40889],
	    "126": [0.35, 0.31786, 0.11585, 0, 0.51111],
	    "160": [0, 0, 0, 0, 0.25],
	    "168": [0, 0.66786, 0.10474, 0, 0.51111],
	    "176": [0, 0.69444, 0, 0, 0.83129],
	    "184": [0.17014, 0, 0, 0, 0.46],
	    "198": [0, 0.68333, 0.12028, 0, 0.88277],
	    "216": [0.04861, 0.73194, 0.09403, 0, 0.76666],
	    "223": [0.19444, 0.69444, 0.10514, 0, 0.53666],
	    "230": [0, 0.43056, 0.07514, 0, 0.71555],
	    "248": [0.09722, 0.52778, 0.09194, 0, 0.51111],
	    "338": [0, 0.68333, 0.12028, 0, 0.98499],
	    "339": [0, 0.43056, 0.07514, 0, 0.71555],
	    "710": [0, 0.69444, 0.06646, 0, 0.51111],
	    "711": [0, 0.62847, 0.08295, 0, 0.51111],
	    "713": [0, 0.56167, 0.10333, 0, 0.51111],
	    "714": [0, 0.69444, 0.09694, 0, 0.51111],
	    "715": [0, 0.69444, 0, 0, 0.51111],
	    "728": [0, 0.69444, 0.10806, 0, 0.51111],
	    "729": [0, 0.66786, 0.11752, 0, 0.30667],
	    "730": [0, 0.69444, 0, 0, 0.83129],
	    "732": [0, 0.66786, 0.11585, 0, 0.51111],
	    "733": [0, 0.69444, 0.1225, 0, 0.51111],
	    "915": [0, 0.68333, 0.13305, 0, 0.62722],
	    "916": [0, 0.68333, 0, 0, 0.81777],
	    "920": [0, 0.68333, 0.09403, 0, 0.76666],
	    "923": [0, 0.68333, 0, 0, 0.69222],
	    "926": [0, 0.68333, 0.15294, 0, 0.66444],
	    "928": [0, 0.68333, 0.16389, 0, 0.74333],
	    "931": [0, 0.68333, 0.12028, 0, 0.71555],
	    "933": [0, 0.68333, 0.11111, 0, 0.76666],
	    "934": [0, 0.68333, 0.05986, 0, 0.71555],
	    "936": [0, 0.68333, 0.11111, 0, 0.76666],
	    "937": [0, 0.68333, 0.10257, 0, 0.71555],
	    "8211": [0, 0.43056, 0.09208, 0, 0.51111],
	    "8212": [0, 0.43056, 0.09208, 0, 1.02222],
	    "8216": [0, 0.69444, 0.12417, 0, 0.30667],
	    "8217": [0, 0.69444, 0.12417, 0, 0.30667],
	    "8220": [0, 0.69444, 0.1685, 0, 0.51444],
	    "8221": [0, 0.69444, 0.06961, 0, 0.51444],
	    "8463": [0, 0.68889, 0, 0, 0.54028]
	  },
	  "Main-Regular": {
	    "32": [0, 0, 0, 0, 0.25],
	    "33": [0, 0.69444, 0, 0, 0.27778],
	    "34": [0, 0.69444, 0, 0, 0.5],
	    "35": [0.19444, 0.69444, 0, 0, 0.83334],
	    "36": [0.05556, 0.75, 0, 0, 0.5],
	    "37": [0.05556, 0.75, 0, 0, 0.83334],
	    "38": [0, 0.69444, 0, 0, 0.77778],
	    "39": [0, 0.69444, 0, 0, 0.27778],
	    "40": [0.25, 0.75, 0, 0, 0.38889],
	    "41": [0.25, 0.75, 0, 0, 0.38889],
	    "42": [0, 0.75, 0, 0, 0.5],
	    "43": [0.08333, 0.58333, 0, 0, 0.77778],
	    "44": [0.19444, 0.10556, 0, 0, 0.27778],
	    "45": [0, 0.43056, 0, 0, 0.33333],
	    "46": [0, 0.10556, 0, 0, 0.27778],
	    "47": [0.25, 0.75, 0, 0, 0.5],
	    "48": [0, 0.64444, 0, 0, 0.5],
	    "49": [0, 0.64444, 0, 0, 0.5],
	    "50": [0, 0.64444, 0, 0, 0.5],
	    "51": [0, 0.64444, 0, 0, 0.5],
	    "52": [0, 0.64444, 0, 0, 0.5],
	    "53": [0, 0.64444, 0, 0, 0.5],
	    "54": [0, 0.64444, 0, 0, 0.5],
	    "55": [0, 0.64444, 0, 0, 0.5],
	    "56": [0, 0.64444, 0, 0, 0.5],
	    "57": [0, 0.64444, 0, 0, 0.5],
	    "58": [0, 0.43056, 0, 0, 0.27778],
	    "59": [0.19444, 0.43056, 0, 0, 0.27778],
	    "60": [0.0391, 0.5391, 0, 0, 0.77778],
	    "61": [-0.13313, 0.36687, 0, 0, 0.77778],
	    "62": [0.0391, 0.5391, 0, 0, 0.77778],
	    "63": [0, 0.69444, 0, 0, 0.47222],
	    "64": [0, 0.69444, 0, 0, 0.77778],
	    "65": [0, 0.68333, 0, 0, 0.75],
	    "66": [0, 0.68333, 0, 0, 0.70834],
	    "67": [0, 0.68333, 0, 0, 0.72222],
	    "68": [0, 0.68333, 0, 0, 0.76389],
	    "69": [0, 0.68333, 0, 0, 0.68056],
	    "70": [0, 0.68333, 0, 0, 0.65278],
	    "71": [0, 0.68333, 0, 0, 0.78472],
	    "72": [0, 0.68333, 0, 0, 0.75],
	    "73": [0, 0.68333, 0, 0, 0.36111],
	    "74": [0, 0.68333, 0, 0, 0.51389],
	    "75": [0, 0.68333, 0, 0, 0.77778],
	    "76": [0, 0.68333, 0, 0, 0.625],
	    "77": [0, 0.68333, 0, 0, 0.91667],
	    "78": [0, 0.68333, 0, 0, 0.75],
	    "79": [0, 0.68333, 0, 0, 0.77778],
	    "80": [0, 0.68333, 0, 0, 0.68056],
	    "81": [0.19444, 0.68333, 0, 0, 0.77778],
	    "82": [0, 0.68333, 0, 0, 0.73611],
	    "83": [0, 0.68333, 0, 0, 0.55556],
	    "84": [0, 0.68333, 0, 0, 0.72222],
	    "85": [0, 0.68333, 0, 0, 0.75],
	    "86": [0, 0.68333, 0.01389, 0, 0.75],
	    "87": [0, 0.68333, 0.01389, 0, 1.02778],
	    "88": [0, 0.68333, 0, 0, 0.75],
	    "89": [0, 0.68333, 0.025, 0, 0.75],
	    "90": [0, 0.68333, 0, 0, 0.61111],
	    "91": [0.25, 0.75, 0, 0, 0.27778],
	    "92": [0.25, 0.75, 0, 0, 0.5],
	    "93": [0.25, 0.75, 0, 0, 0.27778],
	    "94": [0, 0.69444, 0, 0, 0.5],
	    "95": [0.31, 0.12056, 0.02778, 0, 0.5],
	    "97": [0, 0.43056, 0, 0, 0.5],
	    "98": [0, 0.69444, 0, 0, 0.55556],
	    "99": [0, 0.43056, 0, 0, 0.44445],
	    "100": [0, 0.69444, 0, 0, 0.55556],
	    "101": [0, 0.43056, 0, 0, 0.44445],
	    "102": [0, 0.69444, 0.07778, 0, 0.30556],
	    "103": [0.19444, 0.43056, 0.01389, 0, 0.5],
	    "104": [0, 0.69444, 0, 0, 0.55556],
	    "105": [0, 0.66786, 0, 0, 0.27778],
	    "106": [0.19444, 0.66786, 0, 0, 0.30556],
	    "107": [0, 0.69444, 0, 0, 0.52778],
	    "108": [0, 0.69444, 0, 0, 0.27778],
	    "109": [0, 0.43056, 0, 0, 0.83334],
	    "110": [0, 0.43056, 0, 0, 0.55556],
	    "111": [0, 0.43056, 0, 0, 0.5],
	    "112": [0.19444, 0.43056, 0, 0, 0.55556],
	    "113": [0.19444, 0.43056, 0, 0, 0.52778],
	    "114": [0, 0.43056, 0, 0, 0.39167],
	    "115": [0, 0.43056, 0, 0, 0.39445],
	    "116": [0, 0.61508, 0, 0, 0.38889],
	    "117": [0, 0.43056, 0, 0, 0.55556],
	    "118": [0, 0.43056, 0.01389, 0, 0.52778],
	    "119": [0, 0.43056, 0.01389, 0, 0.72222],
	    "120": [0, 0.43056, 0, 0, 0.52778],
	    "121": [0.19444, 0.43056, 0.01389, 0, 0.52778],
	    "122": [0, 0.43056, 0, 0, 0.44445],
	    "123": [0.25, 0.75, 0, 0, 0.5],
	    "124": [0.25, 0.75, 0, 0, 0.27778],
	    "125": [0.25, 0.75, 0, 0, 0.5],
	    "126": [0.35, 0.31786, 0, 0, 0.5],
	    "160": [0, 0, 0, 0, 0.25],
	    "163": [0, 0.69444, 0, 0, 0.76909],
	    "167": [0.19444, 0.69444, 0, 0, 0.44445],
	    "168": [0, 0.66786, 0, 0, 0.5],
	    "172": [0, 0.43056, 0, 0, 0.66667],
	    "176": [0, 0.69444, 0, 0, 0.75],
	    "177": [0.08333, 0.58333, 0, 0, 0.77778],
	    "182": [0.19444, 0.69444, 0, 0, 0.61111],
	    "184": [0.17014, 0, 0, 0, 0.44445],
	    "198": [0, 0.68333, 0, 0, 0.90278],
	    "215": [0.08333, 0.58333, 0, 0, 0.77778],
	    "216": [0.04861, 0.73194, 0, 0, 0.77778],
	    "223": [0, 0.69444, 0, 0, 0.5],
	    "230": [0, 0.43056, 0, 0, 0.72222],
	    "247": [0.08333, 0.58333, 0, 0, 0.77778],
	    "248": [0.09722, 0.52778, 0, 0, 0.5],
	    "305": [0, 0.43056, 0, 0, 0.27778],
	    "338": [0, 0.68333, 0, 0, 1.01389],
	    "339": [0, 0.43056, 0, 0, 0.77778],
	    "567": [0.19444, 0.43056, 0, 0, 0.30556],
	    "710": [0, 0.69444, 0, 0, 0.5],
	    "711": [0, 0.62847, 0, 0, 0.5],
	    "713": [0, 0.56778, 0, 0, 0.5],
	    "714": [0, 0.69444, 0, 0, 0.5],
	    "715": [0, 0.69444, 0, 0, 0.5],
	    "728": [0, 0.69444, 0, 0, 0.5],
	    "729": [0, 0.66786, 0, 0, 0.27778],
	    "730": [0, 0.69444, 0, 0, 0.75],
	    "732": [0, 0.66786, 0, 0, 0.5],
	    "733": [0, 0.69444, 0, 0, 0.5],
	    "915": [0, 0.68333, 0, 0, 0.625],
	    "916": [0, 0.68333, 0, 0, 0.83334],
	    "920": [0, 0.68333, 0, 0, 0.77778],
	    "923": [0, 0.68333, 0, 0, 0.69445],
	    "926": [0, 0.68333, 0, 0, 0.66667],
	    "928": [0, 0.68333, 0, 0, 0.75],
	    "931": [0, 0.68333, 0, 0, 0.72222],
	    "933": [0, 0.68333, 0, 0, 0.77778],
	    "934": [0, 0.68333, 0, 0, 0.72222],
	    "936": [0, 0.68333, 0, 0, 0.77778],
	    "937": [0, 0.68333, 0, 0, 0.72222],
	    "8211": [0, 0.43056, 0.02778, 0, 0.5],
	    "8212": [0, 0.43056, 0.02778, 0, 1.0],
	    "8216": [0, 0.69444, 0, 0, 0.27778],
	    "8217": [0, 0.69444, 0, 0, 0.27778],
	    "8220": [0, 0.69444, 0, 0, 0.5],
	    "8221": [0, 0.69444, 0, 0, 0.5],
	    "8224": [0.19444, 0.69444, 0, 0, 0.44445],
	    "8225": [0.19444, 0.69444, 0, 0, 0.44445],
	    "8230": [0, 0.123, 0, 0, 1.172],
	    "8242": [0, 0.55556, 0, 0, 0.275],
	    "8407": [0, 0.71444, 0.15382, 0, 0.5],
	    "8463": [0, 0.68889, 0, 0, 0.54028],
	    "8465": [0, 0.69444, 0, 0, 0.72222],
	    "8467": [0, 0.69444, 0, 0.11111, 0.41667],
	    "8472": [0.19444, 0.43056, 0, 0.11111, 0.63646],
	    "8476": [0, 0.69444, 0, 0, 0.72222],
	    "8501": [0, 0.69444, 0, 0, 0.61111],
	    "8592": [-0.13313, 0.36687, 0, 0, 1.0],
	    "8593": [0.19444, 0.69444, 0, 0, 0.5],
	    "8594": [-0.13313, 0.36687, 0, 0, 1.0],
	    "8595": [0.19444, 0.69444, 0, 0, 0.5],
	    "8596": [-0.13313, 0.36687, 0, 0, 1.0],
	    "8597": [0.25, 0.75, 0, 0, 0.5],
	    "8598": [0.19444, 0.69444, 0, 0, 1.0],
	    "8599": [0.19444, 0.69444, 0, 0, 1.0],
	    "8600": [0.19444, 0.69444, 0, 0, 1.0],
	    "8601": [0.19444, 0.69444, 0, 0, 1.0],
	    "8614": [0.011, 0.511, 0, 0, 1.0],
	    "8617": [0.011, 0.511, 0, 0, 1.126],
	    "8618": [0.011, 0.511, 0, 0, 1.126],
	    "8636": [-0.13313, 0.36687, 0, 0, 1.0],
	    "8637": [-0.13313, 0.36687, 0, 0, 1.0],
	    "8640": [-0.13313, 0.36687, 0, 0, 1.0],
	    "8641": [-0.13313, 0.36687, 0, 0, 1.0],
	    "8652": [0.011, 0.671, 0, 0, 1.0],
	    "8656": [-0.13313, 0.36687, 0, 0, 1.0],
	    "8657": [0.19444, 0.69444, 0, 0, 0.61111],
	    "8658": [-0.13313, 0.36687, 0, 0, 1.0],
	    "8659": [0.19444, 0.69444, 0, 0, 0.61111],
	    "8660": [-0.13313, 0.36687, 0, 0, 1.0],
	    "8661": [0.25, 0.75, 0, 0, 0.61111],
	    "8704": [0, 0.69444, 0, 0, 0.55556],
	    "8706": [0, 0.69444, 0.05556, 0.08334, 0.5309],
	    "8707": [0, 0.69444, 0, 0, 0.55556],
	    "8709": [0.05556, 0.75, 0, 0, 0.5],
	    "8711": [0, 0.68333, 0, 0, 0.83334],
	    "8712": [0.0391, 0.5391, 0, 0, 0.66667],
	    "8715": [0.0391, 0.5391, 0, 0, 0.66667],
	    "8722": [0.08333, 0.58333, 0, 0, 0.77778],
	    "8723": [0.08333, 0.58333, 0, 0, 0.77778],
	    "8725": [0.25, 0.75, 0, 0, 0.5],
	    "8726": [0.25, 0.75, 0, 0, 0.5],
	    "8727": [-0.03472, 0.46528, 0, 0, 0.5],
	    "8728": [-0.05555, 0.44445, 0, 0, 0.5],
	    "8729": [-0.05555, 0.44445, 0, 0, 0.5],
	    "8730": [0.2, 0.8, 0, 0, 0.83334],
	    "8733": [0, 0.43056, 0, 0, 0.77778],
	    "8734": [0, 0.43056, 0, 0, 1.0],
	    "8736": [0, 0.69224, 0, 0, 0.72222],
	    "8739": [0.25, 0.75, 0, 0, 0.27778],
	    "8741": [0.25, 0.75, 0, 0, 0.5],
	    "8743": [0, 0.55556, 0, 0, 0.66667],
	    "8744": [0, 0.55556, 0, 0, 0.66667],
	    "8745": [0, 0.55556, 0, 0, 0.66667],
	    "8746": [0, 0.55556, 0, 0, 0.66667],
	    "8747": [0.19444, 0.69444, 0.11111, 0, 0.41667],
	    "8764": [-0.13313, 0.36687, 0, 0, 0.77778],
	    "8768": [0.19444, 0.69444, 0, 0, 0.27778],
	    "8771": [-0.03625, 0.46375, 0, 0, 0.77778],
	    "8773": [-0.022, 0.589, 0, 0, 0.778],
	    "8776": [-0.01688, 0.48312, 0, 0, 0.77778],
	    "8781": [-0.03625, 0.46375, 0, 0, 0.77778],
	    "8784": [-0.133, 0.673, 0, 0, 0.778],
	    "8801": [-0.03625, 0.46375, 0, 0, 0.77778],
	    "8804": [0.13597, 0.63597, 0, 0, 0.77778],
	    "8805": [0.13597, 0.63597, 0, 0, 0.77778],
	    "8810": [0.0391, 0.5391, 0, 0, 1.0],
	    "8811": [0.0391, 0.5391, 0, 0, 1.0],
	    "8826": [0.0391, 0.5391, 0, 0, 0.77778],
	    "8827": [0.0391, 0.5391, 0, 0, 0.77778],
	    "8834": [0.0391, 0.5391, 0, 0, 0.77778],
	    "8835": [0.0391, 0.5391, 0, 0, 0.77778],
	    "8838": [0.13597, 0.63597, 0, 0, 0.77778],
	    "8839": [0.13597, 0.63597, 0, 0, 0.77778],
	    "8846": [0, 0.55556, 0, 0, 0.66667],
	    "8849": [0.13597, 0.63597, 0, 0, 0.77778],
	    "8850": [0.13597, 0.63597, 0, 0, 0.77778],
	    "8851": [0, 0.55556, 0, 0, 0.66667],
	    "8852": [0, 0.55556, 0, 0, 0.66667],
	    "8853": [0.08333, 0.58333, 0, 0, 0.77778],
	    "8854": [0.08333, 0.58333, 0, 0, 0.77778],
	    "8855": [0.08333, 0.58333, 0, 0, 0.77778],
	    "8856": [0.08333, 0.58333, 0, 0, 0.77778],
	    "8857": [0.08333, 0.58333, 0, 0, 0.77778],
	    "8866": [0, 0.69444, 0, 0, 0.61111],
	    "8867": [0, 0.69444, 0, 0, 0.61111],
	    "8868": [0, 0.69444, 0, 0, 0.77778],
	    "8869": [0, 0.69444, 0, 0, 0.77778],
	    "8872": [0.249, 0.75, 0, 0, 0.867],
	    "8900": [-0.05555, 0.44445, 0, 0, 0.5],
	    "8901": [-0.05555, 0.44445, 0, 0, 0.27778],
	    "8902": [-0.03472, 0.46528, 0, 0, 0.5],
	    "8904": [0.005, 0.505, 0, 0, 0.9],
	    "8942": [0.03, 0.903, 0, 0, 0.278],
	    "8943": [-0.19, 0.313, 0, 0, 1.172],
	    "8945": [-0.1, 0.823, 0, 0, 1.282],
	    "8968": [0.25, 0.75, 0, 0, 0.44445],
	    "8969": [0.25, 0.75, 0, 0, 0.44445],
	    "8970": [0.25, 0.75, 0, 0, 0.44445],
	    "8971": [0.25, 0.75, 0, 0, 0.44445],
	    "8994": [-0.14236, 0.35764, 0, 0, 1.0],
	    "8995": [-0.14236, 0.35764, 0, 0, 1.0],
	    "9136": [0.244, 0.744, 0, 0, 0.412],
	    "9137": [0.244, 0.745, 0, 0, 0.412],
	    "9651": [0.19444, 0.69444, 0, 0, 0.88889],
	    "9657": [-0.03472, 0.46528, 0, 0, 0.5],
	    "9661": [0.19444, 0.69444, 0, 0, 0.88889],
	    "9667": [-0.03472, 0.46528, 0, 0, 0.5],
	    "9711": [0.19444, 0.69444, 0, 0, 1.0],
	    "9824": [0.12963, 0.69444, 0, 0, 0.77778],
	    "9825": [0.12963, 0.69444, 0, 0, 0.77778],
	    "9826": [0.12963, 0.69444, 0, 0, 0.77778],
	    "9827": [0.12963, 0.69444, 0, 0, 0.77778],
	    "9837": [0, 0.75, 0, 0, 0.38889],
	    "9838": [0.19444, 0.69444, 0, 0, 0.38889],
	    "9839": [0.19444, 0.69444, 0, 0, 0.38889],
	    "10216": [0.25, 0.75, 0, 0, 0.38889],
	    "10217": [0.25, 0.75, 0, 0, 0.38889],
	    "10222": [0.244, 0.744, 0, 0, 0.412],
	    "10223": [0.244, 0.745, 0, 0, 0.412],
	    "10229": [0.011, 0.511, 0, 0, 1.609],
	    "10230": [0.011, 0.511, 0, 0, 1.638],
	    "10231": [0.011, 0.511, 0, 0, 1.859],
	    "10232": [0.024, 0.525, 0, 0, 1.609],
	    "10233": [0.024, 0.525, 0, 0, 1.638],
	    "10234": [0.024, 0.525, 0, 0, 1.858],
	    "10236": [0.011, 0.511, 0, 0, 1.638],
	    "10815": [0, 0.68333, 0, 0, 0.75],
	    "10927": [0.13597, 0.63597, 0, 0, 0.77778],
	    "10928": [0.13597, 0.63597, 0, 0, 0.77778],
	    "57376": [0.19444, 0.69444, 0, 0, 0]
	  },
	  "Math-BoldItalic": {
	    "32": [0, 0, 0, 0, 0.25],
	    "48": [0, 0.44444, 0, 0, 0.575],
	    "49": [0, 0.44444, 0, 0, 0.575],
	    "50": [0, 0.44444, 0, 0, 0.575],
	    "51": [0.19444, 0.44444, 0, 0, 0.575],
	    "52": [0.19444, 0.44444, 0, 0, 0.575],
	    "53": [0.19444, 0.44444, 0, 0, 0.575],
	    "54": [0, 0.64444, 0, 0, 0.575],
	    "55": [0.19444, 0.44444, 0, 0, 0.575],
	    "56": [0, 0.64444, 0, 0, 0.575],
	    "57": [0.19444, 0.44444, 0, 0, 0.575],
	    "65": [0, 0.68611, 0, 0, 0.86944],
	    "66": [0, 0.68611, 0.04835, 0, 0.8664],
	    "67": [0, 0.68611, 0.06979, 0, 0.81694],
	    "68": [0, 0.68611, 0.03194, 0, 0.93812],
	    "69": [0, 0.68611, 0.05451, 0, 0.81007],
	    "70": [0, 0.68611, 0.15972, 0, 0.68889],
	    "71": [0, 0.68611, 0, 0, 0.88673],
	    "72": [0, 0.68611, 0.08229, 0, 0.98229],
	    "73": [0, 0.68611, 0.07778, 0, 0.51111],
	    "74": [0, 0.68611, 0.10069, 0, 0.63125],
	    "75": [0, 0.68611, 0.06979, 0, 0.97118],
	    "76": [0, 0.68611, 0, 0, 0.75555],
	    "77": [0, 0.68611, 0.11424, 0, 1.14201],
	    "78": [0, 0.68611, 0.11424, 0, 0.95034],
	    "79": [0, 0.68611, 0.03194, 0, 0.83666],
	    "80": [0, 0.68611, 0.15972, 0, 0.72309],
	    "81": [0.19444, 0.68611, 0, 0, 0.86861],
	    "82": [0, 0.68611, 0.00421, 0, 0.87235],
	    "83": [0, 0.68611, 0.05382, 0, 0.69271],
	    "84": [0, 0.68611, 0.15972, 0, 0.63663],
	    "85": [0, 0.68611, 0.11424, 0, 0.80027],
	    "86": [0, 0.68611, 0.25555, 0, 0.67778],
	    "87": [0, 0.68611, 0.15972, 0, 1.09305],
	    "88": [0, 0.68611, 0.07778, 0, 0.94722],
	    "89": [0, 0.68611, 0.25555, 0, 0.67458],
	    "90": [0, 0.68611, 0.06979, 0, 0.77257],
	    "97": [0, 0.44444, 0, 0, 0.63287],
	    "98": [0, 0.69444, 0, 0, 0.52083],
	    "99": [0, 0.44444, 0, 0, 0.51342],
	    "100": [0, 0.69444, 0, 0, 0.60972],
	    "101": [0, 0.44444, 0, 0, 0.55361],
	    "102": [0.19444, 0.69444, 0.11042, 0, 0.56806],
	    "103": [0.19444, 0.44444, 0.03704, 0, 0.5449],
	    "104": [0, 0.69444, 0, 0, 0.66759],
	    "105": [0, 0.69326, 0, 0, 0.4048],
	    "106": [0.19444, 0.69326, 0.0622, 0, 0.47083],
	    "107": [0, 0.69444, 0.01852, 0, 0.6037],
	    "108": [0, 0.69444, 0.0088, 0, 0.34815],
	    "109": [0, 0.44444, 0, 0, 1.0324],
	    "110": [0, 0.44444, 0, 0, 0.71296],
	    "111": [0, 0.44444, 0, 0, 0.58472],
	    "112": [0.19444, 0.44444, 0, 0, 0.60092],
	    "113": [0.19444, 0.44444, 0.03704, 0, 0.54213],
	    "114": [0, 0.44444, 0.03194, 0, 0.5287],
	    "115": [0, 0.44444, 0, 0, 0.53125],
	    "116": [0, 0.63492, 0, 0, 0.41528],
	    "117": [0, 0.44444, 0, 0, 0.68102],
	    "118": [0, 0.44444, 0.03704, 0, 0.56666],
	    "119": [0, 0.44444, 0.02778, 0, 0.83148],
	    "120": [0, 0.44444, 0, 0, 0.65903],
	    "121": [0.19444, 0.44444, 0.03704, 0, 0.59028],
	    "122": [0, 0.44444, 0.04213, 0, 0.55509],
	    "160": [0, 0, 0, 0, 0.25],
	    "915": [0, 0.68611, 0.15972, 0, 0.65694],
	    "916": [0, 0.68611, 0, 0, 0.95833],
	    "920": [0, 0.68611, 0.03194, 0, 0.86722],
	    "923": [0, 0.68611, 0, 0, 0.80555],
	    "926": [0, 0.68611, 0.07458, 0, 0.84125],
	    "928": [0, 0.68611, 0.08229, 0, 0.98229],
	    "931": [0, 0.68611, 0.05451, 0, 0.88507],
	    "933": [0, 0.68611, 0.15972, 0, 0.67083],
	    "934": [0, 0.68611, 0, 0, 0.76666],
	    "936": [0, 0.68611, 0.11653, 0, 0.71402],
	    "937": [0, 0.68611, 0.04835, 0, 0.8789],
	    "945": [0, 0.44444, 0, 0, 0.76064],
	    "946": [0.19444, 0.69444, 0.03403, 0, 0.65972],
	    "947": [0.19444, 0.44444, 0.06389, 0, 0.59003],
	    "948": [0, 0.69444, 0.03819, 0, 0.52222],
	    "949": [0, 0.44444, 0, 0, 0.52882],
	    "950": [0.19444, 0.69444, 0.06215, 0, 0.50833],
	    "951": [0.19444, 0.44444, 0.03704, 0, 0.6],
	    "952": [0, 0.69444, 0.03194, 0, 0.5618],
	    "953": [0, 0.44444, 0, 0, 0.41204],
	    "954": [0, 0.44444, 0, 0, 0.66759],
	    "955": [0, 0.69444, 0, 0, 0.67083],
	    "956": [0.19444, 0.44444, 0, 0, 0.70787],
	    "957": [0, 0.44444, 0.06898, 0, 0.57685],
	    "958": [0.19444, 0.69444, 0.03021, 0, 0.50833],
	    "959": [0, 0.44444, 0, 0, 0.58472],
	    "960": [0, 0.44444, 0.03704, 0, 0.68241],
	    "961": [0.19444, 0.44444, 0, 0, 0.6118],
	    "962": [0.09722, 0.44444, 0.07917, 0, 0.42361],
	    "963": [0, 0.44444, 0.03704, 0, 0.68588],
	    "964": [0, 0.44444, 0.13472, 0, 0.52083],
	    "965": [0, 0.44444, 0.03704, 0, 0.63055],
	    "966": [0.19444, 0.44444, 0, 0, 0.74722],
	    "967": [0.19444, 0.44444, 0, 0, 0.71805],
	    "968": [0.19444, 0.69444, 0.03704, 0, 0.75833],
	    "969": [0, 0.44444, 0.03704, 0, 0.71782],
	    "977": [0, 0.69444, 0, 0, 0.69155],
	    "981": [0.19444, 0.69444, 0, 0, 0.7125],
	    "982": [0, 0.44444, 0.03194, 0, 0.975],
	    "1009": [0.19444, 0.44444, 0, 0, 0.6118],
	    "1013": [0, 0.44444, 0, 0, 0.48333],
	    "57649": [0, 0.44444, 0, 0, 0.39352],
	    "57911": [0.19444, 0.44444, 0, 0, 0.43889]
	  },
	  "Math-Italic": {
	    "32": [0, 0, 0, 0, 0.25],
	    "48": [0, 0.43056, 0, 0, 0.5],
	    "49": [0, 0.43056, 0, 0, 0.5],
	    "50": [0, 0.43056, 0, 0, 0.5],
	    "51": [0.19444, 0.43056, 0, 0, 0.5],
	    "52": [0.19444, 0.43056, 0, 0, 0.5],
	    "53": [0.19444, 0.43056, 0, 0, 0.5],
	    "54": [0, 0.64444, 0, 0, 0.5],
	    "55": [0.19444, 0.43056, 0, 0, 0.5],
	    "56": [0, 0.64444, 0, 0, 0.5],
	    "57": [0.19444, 0.43056, 0, 0, 0.5],
	    "65": [0, 0.68333, 0, 0.13889, 0.75],
	    "66": [0, 0.68333, 0.05017, 0.08334, 0.75851],
	    "67": [0, 0.68333, 0.07153, 0.08334, 0.71472],
	    "68": [0, 0.68333, 0.02778, 0.05556, 0.82792],
	    "69": [0, 0.68333, 0.05764, 0.08334, 0.7382],
	    "70": [0, 0.68333, 0.13889, 0.08334, 0.64306],
	    "71": [0, 0.68333, 0, 0.08334, 0.78625],
	    "72": [0, 0.68333, 0.08125, 0.05556, 0.83125],
	    "73": [0, 0.68333, 0.07847, 0.11111, 0.43958],
	    "74": [0, 0.68333, 0.09618, 0.16667, 0.55451],
	    "75": [0, 0.68333, 0.07153, 0.05556, 0.84931],
	    "76": [0, 0.68333, 0, 0.02778, 0.68056],
	    "77": [0, 0.68333, 0.10903, 0.08334, 0.97014],
	    "78": [0, 0.68333, 0.10903, 0.08334, 0.80347],
	    "79": [0, 0.68333, 0.02778, 0.08334, 0.76278],
	    "80": [0, 0.68333, 0.13889, 0.08334, 0.64201],
	    "81": [0.19444, 0.68333, 0, 0.08334, 0.79056],
	    "82": [0, 0.68333, 0.00773, 0.08334, 0.75929],
	    "83": [0, 0.68333, 0.05764, 0.08334, 0.6132],
	    "84": [0, 0.68333, 0.13889, 0.08334, 0.58438],
	    "85": [0, 0.68333, 0.10903, 0.02778, 0.68278],
	    "86": [0, 0.68333, 0.22222, 0, 0.58333],
	    "87": [0, 0.68333, 0.13889, 0, 0.94445],
	    "88": [0, 0.68333, 0.07847, 0.08334, 0.82847],
	    "89": [0, 0.68333, 0.22222, 0, 0.58056],
	    "90": [0, 0.68333, 0.07153, 0.08334, 0.68264],
	    "97": [0, 0.43056, 0, 0, 0.52859],
	    "98": [0, 0.69444, 0, 0, 0.42917],
	    "99": [0, 0.43056, 0, 0.05556, 0.43276],
	    "100": [0, 0.69444, 0, 0.16667, 0.52049],
	    "101": [0, 0.43056, 0, 0.05556, 0.46563],
	    "102": [0.19444, 0.69444, 0.10764, 0.16667, 0.48959],
	    "103": [0.19444, 0.43056, 0.03588, 0.02778, 0.47697],
	    "104": [0, 0.69444, 0, 0, 0.57616],
	    "105": [0, 0.65952, 0, 0, 0.34451],
	    "106": [0.19444, 0.65952, 0.05724, 0, 0.41181],
	    "107": [0, 0.69444, 0.03148, 0, 0.5206],
	    "108": [0, 0.69444, 0.01968, 0.08334, 0.29838],
	    "109": [0, 0.43056, 0, 0, 0.87801],
	    "110": [0, 0.43056, 0, 0, 0.60023],
	    "111": [0, 0.43056, 0, 0.05556, 0.48472],
	    "112": [0.19444, 0.43056, 0, 0.08334, 0.50313],
	    "113": [0.19444, 0.43056, 0.03588, 0.08334, 0.44641],
	    "114": [0, 0.43056, 0.02778, 0.05556, 0.45116],
	    "115": [0, 0.43056, 0, 0.05556, 0.46875],
	    "116": [0, 0.61508, 0, 0.08334, 0.36111],
	    "117": [0, 0.43056, 0, 0.02778, 0.57246],
	    "118": [0, 0.43056, 0.03588, 0.02778, 0.48472],
	    "119": [0, 0.43056, 0.02691, 0.08334, 0.71592],
	    "120": [0, 0.43056, 0, 0.02778, 0.57153],
	    "121": [0.19444, 0.43056, 0.03588, 0.05556, 0.49028],
	    "122": [0, 0.43056, 0.04398, 0.05556, 0.46505],
	    "160": [0, 0, 0, 0, 0.25],
	    "915": [0, 0.68333, 0.13889, 0.08334, 0.61528],
	    "916": [0, 0.68333, 0, 0.16667, 0.83334],
	    "920": [0, 0.68333, 0.02778, 0.08334, 0.76278],
	    "923": [0, 0.68333, 0, 0.16667, 0.69445],
	    "926": [0, 0.68333, 0.07569, 0.08334, 0.74236],
	    "928": [0, 0.68333, 0.08125, 0.05556, 0.83125],
	    "931": [0, 0.68333, 0.05764, 0.08334, 0.77986],
	    "933": [0, 0.68333, 0.13889, 0.05556, 0.58333],
	    "934": [0, 0.68333, 0, 0.08334, 0.66667],
	    "936": [0, 0.68333, 0.11, 0.05556, 0.61222],
	    "937": [0, 0.68333, 0.05017, 0.08334, 0.7724],
	    "945": [0, 0.43056, 0.0037, 0.02778, 0.6397],
	    "946": [0.19444, 0.69444, 0.05278, 0.08334, 0.56563],
	    "947": [0.19444, 0.43056, 0.05556, 0, 0.51773],
	    "948": [0, 0.69444, 0.03785, 0.05556, 0.44444],
	    "949": [0, 0.43056, 0, 0.08334, 0.46632],
	    "950": [0.19444, 0.69444, 0.07378, 0.08334, 0.4375],
	    "951": [0.19444, 0.43056, 0.03588, 0.05556, 0.49653],
	    "952": [0, 0.69444, 0.02778, 0.08334, 0.46944],
	    "953": [0, 0.43056, 0, 0.05556, 0.35394],
	    "954": [0, 0.43056, 0, 0, 0.57616],
	    "955": [0, 0.69444, 0, 0, 0.58334],
	    "956": [0.19444, 0.43056, 0, 0.02778, 0.60255],
	    "957": [0, 0.43056, 0.06366, 0.02778, 0.49398],
	    "958": [0.19444, 0.69444, 0.04601, 0.11111, 0.4375],
	    "959": [0, 0.43056, 0, 0.05556, 0.48472],
	    "960": [0, 0.43056, 0.03588, 0, 0.57003],
	    "961": [0.19444, 0.43056, 0, 0.08334, 0.51702],
	    "962": [0.09722, 0.43056, 0.07986, 0.08334, 0.36285],
	    "963": [0, 0.43056, 0.03588, 0, 0.57141],
	    "964": [0, 0.43056, 0.1132, 0.02778, 0.43715],
	    "965": [0, 0.43056, 0.03588, 0.02778, 0.54028],
	    "966": [0.19444, 0.43056, 0, 0.08334, 0.65417],
	    "967": [0.19444, 0.43056, 0, 0.05556, 0.62569],
	    "968": [0.19444, 0.69444, 0.03588, 0.11111, 0.65139],
	    "969": [0, 0.43056, 0.03588, 0, 0.62245],
	    "977": [0, 0.69444, 0, 0.08334, 0.59144],
	    "981": [0.19444, 0.69444, 0, 0.08334, 0.59583],
	    "982": [0, 0.43056, 0.02778, 0, 0.82813],
	    "1009": [0.19444, 0.43056, 0, 0.08334, 0.51702],
	    "1013": [0, 0.43056, 0, 0.05556, 0.4059],
	    "57649": [0, 0.43056, 0, 0.02778, 0.32246],
	    "57911": [0.19444, 0.43056, 0, 0.08334, 0.38403]
	  },
	  "SansSerif-Bold": {
	    "32": [0, 0, 0, 0, 0.25],
	    "33": [0, 0.69444, 0, 0, 0.36667],
	    "34": [0, 0.69444, 0, 0, 0.55834],
	    "35": [0.19444, 0.69444, 0, 0, 0.91667],
	    "36": [0.05556, 0.75, 0, 0, 0.55],
	    "37": [0.05556, 0.75, 0, 0, 1.02912],
	    "38": [0, 0.69444, 0, 0, 0.83056],
	    "39": [0, 0.69444, 0, 0, 0.30556],
	    "40": [0.25, 0.75, 0, 0, 0.42778],
	    "41": [0.25, 0.75, 0, 0, 0.42778],
	    "42": [0, 0.75, 0, 0, 0.55],
	    "43": [0.11667, 0.61667, 0, 0, 0.85556],
	    "44": [0.10556, 0.13056, 0, 0, 0.30556],
	    "45": [0, 0.45833, 0, 0, 0.36667],
	    "46": [0, 0.13056, 0, 0, 0.30556],
	    "47": [0.25, 0.75, 0, 0, 0.55],
	    "48": [0, 0.69444, 0, 0, 0.55],
	    "49": [0, 0.69444, 0, 0, 0.55],
	    "50": [0, 0.69444, 0, 0, 0.55],
	    "51": [0, 0.69444, 0, 0, 0.55],
	    "52": [0, 0.69444, 0, 0, 0.55],
	    "53": [0, 0.69444, 0, 0, 0.55],
	    "54": [0, 0.69444, 0, 0, 0.55],
	    "55": [0, 0.69444, 0, 0, 0.55],
	    "56": [0, 0.69444, 0, 0, 0.55],
	    "57": [0, 0.69444, 0, 0, 0.55],
	    "58": [0, 0.45833, 0, 0, 0.30556],
	    "59": [0.10556, 0.45833, 0, 0, 0.30556],
	    "61": [-0.09375, 0.40625, 0, 0, 0.85556],
	    "63": [0, 0.69444, 0, 0, 0.51945],
	    "64": [0, 0.69444, 0, 0, 0.73334],
	    "65": [0, 0.69444, 0, 0, 0.73334],
	    "66": [0, 0.69444, 0, 0, 0.73334],
	    "67": [0, 0.69444, 0, 0, 0.70278],
	    "68": [0, 0.69444, 0, 0, 0.79445],
	    "69": [0, 0.69444, 0, 0, 0.64167],
	    "70": [0, 0.69444, 0, 0, 0.61111],
	    "71": [0, 0.69444, 0, 0, 0.73334],
	    "72": [0, 0.69444, 0, 0, 0.79445],
	    "73": [0, 0.69444, 0, 0, 0.33056],
	    "74": [0, 0.69444, 0, 0, 0.51945],
	    "75": [0, 0.69444, 0, 0, 0.76389],
	    "76": [0, 0.69444, 0, 0, 0.58056],
	    "77": [0, 0.69444, 0, 0, 0.97778],
	    "78": [0, 0.69444, 0, 0, 0.79445],
	    "79": [0, 0.69444, 0, 0, 0.79445],
	    "80": [0, 0.69444, 0, 0, 0.70278],
	    "81": [0.10556, 0.69444, 0, 0, 0.79445],
	    "82": [0, 0.69444, 0, 0, 0.70278],
	    "83": [0, 0.69444, 0, 0, 0.61111],
	    "84": [0, 0.69444, 0, 0, 0.73334],
	    "85": [0, 0.69444, 0, 0, 0.76389],
	    "86": [0, 0.69444, 0.01528, 0, 0.73334],
	    "87": [0, 0.69444, 0.01528, 0, 1.03889],
	    "88": [0, 0.69444, 0, 0, 0.73334],
	    "89": [0, 0.69444, 0.0275, 0, 0.73334],
	    "90": [0, 0.69444, 0, 0, 0.67223],
	    "91": [0.25, 0.75, 0, 0, 0.34306],
	    "93": [0.25, 0.75, 0, 0, 0.34306],
	    "94": [0, 0.69444, 0, 0, 0.55],
	    "95": [0.35, 0.10833, 0.03056, 0, 0.55],
	    "97": [0, 0.45833, 0, 0, 0.525],
	    "98": [0, 0.69444, 0, 0, 0.56111],
	    "99": [0, 0.45833, 0, 0, 0.48889],
	    "100": [0, 0.69444, 0, 0, 0.56111],
	    "101": [0, 0.45833, 0, 0, 0.51111],
	    "102": [0, 0.69444, 0.07639, 0, 0.33611],
	    "103": [0.19444, 0.45833, 0.01528, 0, 0.55],
	    "104": [0, 0.69444, 0, 0, 0.56111],
	    "105": [0, 0.69444, 0, 0, 0.25556],
	    "106": [0.19444, 0.69444, 0, 0, 0.28611],
	    "107": [0, 0.69444, 0, 0, 0.53056],
	    "108": [0, 0.69444, 0, 0, 0.25556],
	    "109": [0, 0.45833, 0, 0, 0.86667],
	    "110": [0, 0.45833, 0, 0, 0.56111],
	    "111": [0, 0.45833, 0, 0, 0.55],
	    "112": [0.19444, 0.45833, 0, 0, 0.56111],
	    "113": [0.19444, 0.45833, 0, 0, 0.56111],
	    "114": [0, 0.45833, 0.01528, 0, 0.37222],
	    "115": [0, 0.45833, 0, 0, 0.42167],
	    "116": [0, 0.58929, 0, 0, 0.40417],
	    "117": [0, 0.45833, 0, 0, 0.56111],
	    "118": [0, 0.45833, 0.01528, 0, 0.5],
	    "119": [0, 0.45833, 0.01528, 0, 0.74445],
	    "120": [0, 0.45833, 0, 0, 0.5],
	    "121": [0.19444, 0.45833, 0.01528, 0, 0.5],
	    "122": [0, 0.45833, 0, 0, 0.47639],
	    "126": [0.35, 0.34444, 0, 0, 0.55],
	    "160": [0, 0, 0, 0, 0.25],
	    "168": [0, 0.69444, 0, 0, 0.55],
	    "176": [0, 0.69444, 0, 0, 0.73334],
	    "180": [0, 0.69444, 0, 0, 0.55],
	    "184": [0.17014, 0, 0, 0, 0.48889],
	    "305": [0, 0.45833, 0, 0, 0.25556],
	    "567": [0.19444, 0.45833, 0, 0, 0.28611],
	    "710": [0, 0.69444, 0, 0, 0.55],
	    "711": [0, 0.63542, 0, 0, 0.55],
	    "713": [0, 0.63778, 0, 0, 0.55],
	    "728": [0, 0.69444, 0, 0, 0.55],
	    "729": [0, 0.69444, 0, 0, 0.30556],
	    "730": [0, 0.69444, 0, 0, 0.73334],
	    "732": [0, 0.69444, 0, 0, 0.55],
	    "733": [0, 0.69444, 0, 0, 0.55],
	    "915": [0, 0.69444, 0, 0, 0.58056],
	    "916": [0, 0.69444, 0, 0, 0.91667],
	    "920": [0, 0.69444, 0, 0, 0.85556],
	    "923": [0, 0.69444, 0, 0, 0.67223],
	    "926": [0, 0.69444, 0, 0, 0.73334],
	    "928": [0, 0.69444, 0, 0, 0.79445],
	    "931": [0, 0.69444, 0, 0, 0.79445],
	    "933": [0, 0.69444, 0, 0, 0.85556],
	    "934": [0, 0.69444, 0, 0, 0.79445],
	    "936": [0, 0.69444, 0, 0, 0.85556],
	    "937": [0, 0.69444, 0, 0, 0.79445],
	    "8211": [0, 0.45833, 0.03056, 0, 0.55],
	    "8212": [0, 0.45833, 0.03056, 0, 1.10001],
	    "8216": [0, 0.69444, 0, 0, 0.30556],
	    "8217": [0, 0.69444, 0, 0, 0.30556],
	    "8220": [0, 0.69444, 0, 0, 0.55834],
	    "8221": [0, 0.69444, 0, 0, 0.55834]
	  },
	  "SansSerif-Italic": {
	    "32": [0, 0, 0, 0, 0.25],
	    "33": [0, 0.69444, 0.05733, 0, 0.31945],
	    "34": [0, 0.69444, 0.00316, 0, 0.5],
	    "35": [0.19444, 0.69444, 0.05087, 0, 0.83334],
	    "36": [0.05556, 0.75, 0.11156, 0, 0.5],
	    "37": [0.05556, 0.75, 0.03126, 0, 0.83334],
	    "38": [0, 0.69444, 0.03058, 0, 0.75834],
	    "39": [0, 0.69444, 0.07816, 0, 0.27778],
	    "40": [0.25, 0.75, 0.13164, 0, 0.38889],
	    "41": [0.25, 0.75, 0.02536, 0, 0.38889],
	    "42": [0, 0.75, 0.11775, 0, 0.5],
	    "43": [0.08333, 0.58333, 0.02536, 0, 0.77778],
	    "44": [0.125, 0.08333, 0, 0, 0.27778],
	    "45": [0, 0.44444, 0.01946, 0, 0.33333],
	    "46": [0, 0.08333, 0, 0, 0.27778],
	    "47": [0.25, 0.75, 0.13164, 0, 0.5],
	    "48": [0, 0.65556, 0.11156, 0, 0.5],
	    "49": [0, 0.65556, 0.11156, 0, 0.5],
	    "50": [0, 0.65556, 0.11156, 0, 0.5],
	    "51": [0, 0.65556, 0.11156, 0, 0.5],
	    "52": [0, 0.65556, 0.11156, 0, 0.5],
	    "53": [0, 0.65556, 0.11156, 0, 0.5],
	    "54": [0, 0.65556, 0.11156, 0, 0.5],
	    "55": [0, 0.65556, 0.11156, 0, 0.5],
	    "56": [0, 0.65556, 0.11156, 0, 0.5],
	    "57": [0, 0.65556, 0.11156, 0, 0.5],
	    "58": [0, 0.44444, 0.02502, 0, 0.27778],
	    "59": [0.125, 0.44444, 0.02502, 0, 0.27778],
	    "61": [-0.13, 0.37, 0.05087, 0, 0.77778],
	    "63": [0, 0.69444, 0.11809, 0, 0.47222],
	    "64": [0, 0.69444, 0.07555, 0, 0.66667],
	    "65": [0, 0.69444, 0, 0, 0.66667],
	    "66": [0, 0.69444, 0.08293, 0, 0.66667],
	    "67": [0, 0.69444, 0.11983, 0, 0.63889],
	    "68": [0, 0.69444, 0.07555, 0, 0.72223],
	    "69": [0, 0.69444, 0.11983, 0, 0.59722],
	    "70": [0, 0.69444, 0.13372, 0, 0.56945],
	    "71": [0, 0.69444, 0.11983, 0, 0.66667],
	    "72": [0, 0.69444, 0.08094, 0, 0.70834],
	    "73": [0, 0.69444, 0.13372, 0, 0.27778],
	    "74": [0, 0.69444, 0.08094, 0, 0.47222],
	    "75": [0, 0.69444, 0.11983, 0, 0.69445],
	    "76": [0, 0.69444, 0, 0, 0.54167],
	    "77": [0, 0.69444, 0.08094, 0, 0.875],
	    "78": [0, 0.69444, 0.08094, 0, 0.70834],
	    "79": [0, 0.69444, 0.07555, 0, 0.73611],
	    "80": [0, 0.69444, 0.08293, 0, 0.63889],
	    "81": [0.125, 0.69444, 0.07555, 0, 0.73611],
	    "82": [0, 0.69444, 0.08293, 0, 0.64584],
	    "83": [0, 0.69444, 0.09205, 0, 0.55556],
	    "84": [0, 0.69444, 0.13372, 0, 0.68056],
	    "85": [0, 0.69444, 0.08094, 0, 0.6875],
	    "86": [0, 0.69444, 0.1615, 0, 0.66667],
	    "87": [0, 0.69444, 0.1615, 0, 0.94445],
	    "88": [0, 0.69444, 0.13372, 0, 0.66667],
	    "89": [0, 0.69444, 0.17261, 0, 0.66667],
	    "90": [0, 0.69444, 0.11983, 0, 0.61111],
	    "91": [0.25, 0.75, 0.15942, 0, 0.28889],
	    "93": [0.25, 0.75, 0.08719, 0, 0.28889],
	    "94": [0, 0.69444, 0.0799, 0, 0.5],
	    "95": [0.35, 0.09444, 0.08616, 0, 0.5],
	    "97": [0, 0.44444, 0.00981, 0, 0.48056],
	    "98": [0, 0.69444, 0.03057, 0, 0.51667],
	    "99": [0, 0.44444, 0.08336, 0, 0.44445],
	    "100": [0, 0.69444, 0.09483, 0, 0.51667],
	    "101": [0, 0.44444, 0.06778, 0, 0.44445],
	    "102": [0, 0.69444, 0.21705, 0, 0.30556],
	    "103": [0.19444, 0.44444, 0.10836, 0, 0.5],
	    "104": [0, 0.69444, 0.01778, 0, 0.51667],
	    "105": [0, 0.67937, 0.09718, 0, 0.23889],
	    "106": [0.19444, 0.67937, 0.09162, 0, 0.26667],
	    "107": [0, 0.69444, 0.08336, 0, 0.48889],
	    "108": [0, 0.69444, 0.09483, 0, 0.23889],
	    "109": [0, 0.44444, 0.01778, 0, 0.79445],
	    "110": [0, 0.44444, 0.01778, 0, 0.51667],
	    "111": [0, 0.44444, 0.06613, 0, 0.5],
	    "112": [0.19444, 0.44444, 0.0389, 0, 0.51667],
	    "113": [0.19444, 0.44444, 0.04169, 0, 0.51667],
	    "114": [0, 0.44444, 0.10836, 0, 0.34167],
	    "115": [0, 0.44444, 0.0778, 0, 0.38333],
	    "116": [0, 0.57143, 0.07225, 0, 0.36111],
	    "117": [0, 0.44444, 0.04169, 0, 0.51667],
	    "118": [0, 0.44444, 0.10836, 0, 0.46111],
	    "119": [0, 0.44444, 0.10836, 0, 0.68334],
	    "120": [0, 0.44444, 0.09169, 0, 0.46111],
	    "121": [0.19444, 0.44444, 0.10836, 0, 0.46111],
	    "122": [0, 0.44444, 0.08752, 0, 0.43472],
	    "126": [0.35, 0.32659, 0.08826, 0, 0.5],
	    "160": [0, 0, 0, 0, 0.25],
	    "168": [0, 0.67937, 0.06385, 0, 0.5],
	    "176": [0, 0.69444, 0, 0, 0.73752],
	    "184": [0.17014, 0, 0, 0, 0.44445],
	    "305": [0, 0.44444, 0.04169, 0, 0.23889],
	    "567": [0.19444, 0.44444, 0.04169, 0, 0.26667],
	    "710": [0, 0.69444, 0.0799, 0, 0.5],
	    "711": [0, 0.63194, 0.08432, 0, 0.5],
	    "713": [0, 0.60889, 0.08776, 0, 0.5],
	    "714": [0, 0.69444, 0.09205, 0, 0.5],
	    "715": [0, 0.69444, 0, 0, 0.5],
	    "728": [0, 0.69444, 0.09483, 0, 0.5],
	    "729": [0, 0.67937, 0.07774, 0, 0.27778],
	    "730": [0, 0.69444, 0, 0, 0.73752],
	    "732": [0, 0.67659, 0.08826, 0, 0.5],
	    "733": [0, 0.69444, 0.09205, 0, 0.5],
	    "915": [0, 0.69444, 0.13372, 0, 0.54167],
	    "916": [0, 0.69444, 0, 0, 0.83334],
	    "920": [0, 0.69444, 0.07555, 0, 0.77778],
	    "923": [0, 0.69444, 0, 0, 0.61111],
	    "926": [0, 0.69444, 0.12816, 0, 0.66667],
	    "928": [0, 0.69444, 0.08094, 0, 0.70834],
	    "931": [0, 0.69444, 0.11983, 0, 0.72222],
	    "933": [0, 0.69444, 0.09031, 0, 0.77778],
	    "934": [0, 0.69444, 0.04603, 0, 0.72222],
	    "936": [0, 0.69444, 0.09031, 0, 0.77778],
	    "937": [0, 0.69444, 0.08293, 0, 0.72222],
	    "8211": [0, 0.44444, 0.08616, 0, 0.5],
	    "8212": [0, 0.44444, 0.08616, 0, 1.0],
	    "8216": [0, 0.69444, 0.07816, 0, 0.27778],
	    "8217": [0, 0.69444, 0.07816, 0, 0.27778],
	    "8220": [0, 0.69444, 0.14205, 0, 0.5],
	    "8221": [0, 0.69444, 0.00316, 0, 0.5]
	  },
	  "SansSerif-Regular": {
	    "32": [0, 0, 0, 0, 0.25],
	    "33": [0, 0.69444, 0, 0, 0.31945],
	    "34": [0, 0.69444, 0, 0, 0.5],
	    "35": [0.19444, 0.69444, 0, 0, 0.83334],
	    "36": [0.05556, 0.75, 0, 0, 0.5],
	    "37": [0.05556, 0.75, 0, 0, 0.83334],
	    "38": [0, 0.69444, 0, 0, 0.75834],
	    "39": [0, 0.69444, 0, 0, 0.27778],
	    "40": [0.25, 0.75, 0, 0, 0.38889],
	    "41": [0.25, 0.75, 0, 0, 0.38889],
	    "42": [0, 0.75, 0, 0, 0.5],
	    "43": [0.08333, 0.58333, 0, 0, 0.77778],
	    "44": [0.125, 0.08333, 0, 0, 0.27778],
	    "45": [0, 0.44444, 0, 0, 0.33333],
	    "46": [0, 0.08333, 0, 0, 0.27778],
	    "47": [0.25, 0.75, 0, 0, 0.5],
	    "48": [0, 0.65556, 0, 0, 0.5],
	    "49": [0, 0.65556, 0, 0, 0.5],
	    "50": [0, 0.65556, 0, 0, 0.5],
	    "51": [0, 0.65556, 0, 0, 0.5],
	    "52": [0, 0.65556, 0, 0, 0.5],
	    "53": [0, 0.65556, 0, 0, 0.5],
	    "54": [0, 0.65556, 0, 0, 0.5],
	    "55": [0, 0.65556, 0, 0, 0.5],
	    "56": [0, 0.65556, 0, 0, 0.5],
	    "57": [0, 0.65556, 0, 0, 0.5],
	    "58": [0, 0.44444, 0, 0, 0.27778],
	    "59": [0.125, 0.44444, 0, 0, 0.27778],
	    "61": [-0.13, 0.37, 0, 0, 0.77778],
	    "63": [0, 0.69444, 0, 0, 0.47222],
	    "64": [0, 0.69444, 0, 0, 0.66667],
	    "65": [0, 0.69444, 0, 0, 0.66667],
	    "66": [0, 0.69444, 0, 0, 0.66667],
	    "67": [0, 0.69444, 0, 0, 0.63889],
	    "68": [0, 0.69444, 0, 0, 0.72223],
	    "69": [0, 0.69444, 0, 0, 0.59722],
	    "70": [0, 0.69444, 0, 0, 0.56945],
	    "71": [0, 0.69444, 0, 0, 0.66667],
	    "72": [0, 0.69444, 0, 0, 0.70834],
	    "73": [0, 0.69444, 0, 0, 0.27778],
	    "74": [0, 0.69444, 0, 0, 0.47222],
	    "75": [0, 0.69444, 0, 0, 0.69445],
	    "76": [0, 0.69444, 0, 0, 0.54167],
	    "77": [0, 0.69444, 0, 0, 0.875],
	    "78": [0, 0.69444, 0, 0, 0.70834],
	    "79": [0, 0.69444, 0, 0, 0.73611],
	    "80": [0, 0.69444, 0, 0, 0.63889],
	    "81": [0.125, 0.69444, 0, 0, 0.73611],
	    "82": [0, 0.69444, 0, 0, 0.64584],
	    "83": [0, 0.69444, 0, 0, 0.55556],
	    "84": [0, 0.69444, 0, 0, 0.68056],
	    "85": [0, 0.69444, 0, 0, 0.6875],
	    "86": [0, 0.69444, 0.01389, 0, 0.66667],
	    "87": [0, 0.69444, 0.01389, 0, 0.94445],
	    "88": [0, 0.69444, 0, 0, 0.66667],
	    "89": [0, 0.69444, 0.025, 0, 0.66667],
	    "90": [0, 0.69444, 0, 0, 0.61111],
	    "91": [0.25, 0.75, 0, 0, 0.28889],
	    "93": [0.25, 0.75, 0, 0, 0.28889],
	    "94": [0, 0.69444, 0, 0, 0.5],
	    "95": [0.35, 0.09444, 0.02778, 0, 0.5],
	    "97": [0, 0.44444, 0, 0, 0.48056],
	    "98": [0, 0.69444, 0, 0, 0.51667],
	    "99": [0, 0.44444, 0, 0, 0.44445],
	    "100": [0, 0.69444, 0, 0, 0.51667],
	    "101": [0, 0.44444, 0, 0, 0.44445],
	    "102": [0, 0.69444, 0.06944, 0, 0.30556],
	    "103": [0.19444, 0.44444, 0.01389, 0, 0.5],
	    "104": [0, 0.69444, 0, 0, 0.51667],
	    "105": [0, 0.67937, 0, 0, 0.23889],
	    "106": [0.19444, 0.67937, 0, 0, 0.26667],
	    "107": [0, 0.69444, 0, 0, 0.48889],
	    "108": [0, 0.69444, 0, 0, 0.23889],
	    "109": [0, 0.44444, 0, 0, 0.79445],
	    "110": [0, 0.44444, 0, 0, 0.51667],
	    "111": [0, 0.44444, 0, 0, 0.5],
	    "112": [0.19444, 0.44444, 0, 0, 0.51667],
	    "113": [0.19444, 0.44444, 0, 0, 0.51667],
	    "114": [0, 0.44444, 0.01389, 0, 0.34167],
	    "115": [0, 0.44444, 0, 0, 0.38333],
	    "116": [0, 0.57143, 0, 0, 0.36111],
	    "117": [0, 0.44444, 0, 0, 0.51667],
	    "118": [0, 0.44444, 0.01389, 0, 0.46111],
	    "119": [0, 0.44444, 0.01389, 0, 0.68334],
	    "120": [0, 0.44444, 0, 0, 0.46111],
	    "121": [0.19444, 0.44444, 0.01389, 0, 0.46111],
	    "122": [0, 0.44444, 0, 0, 0.43472],
	    "126": [0.35, 0.32659, 0, 0, 0.5],
	    "160": [0, 0, 0, 0, 0.25],
	    "168": [0, 0.67937, 0, 0, 0.5],
	    "176": [0, 0.69444, 0, 0, 0.66667],
	    "184": [0.17014, 0, 0, 0, 0.44445],
	    "305": [0, 0.44444, 0, 0, 0.23889],
	    "567": [0.19444, 0.44444, 0, 0, 0.26667],
	    "710": [0, 0.69444, 0, 0, 0.5],
	    "711": [0, 0.63194, 0, 0, 0.5],
	    "713": [0, 0.60889, 0, 0, 0.5],
	    "714": [0, 0.69444, 0, 0, 0.5],
	    "715": [0, 0.69444, 0, 0, 0.5],
	    "728": [0, 0.69444, 0, 0, 0.5],
	    "729": [0, 0.67937, 0, 0, 0.27778],
	    "730": [0, 0.69444, 0, 0, 0.66667],
	    "732": [0, 0.67659, 0, 0, 0.5],
	    "733": [0, 0.69444, 0, 0, 0.5],
	    "915": [0, 0.69444, 0, 0, 0.54167],
	    "916": [0, 0.69444, 0, 0, 0.83334],
	    "920": [0, 0.69444, 0, 0, 0.77778],
	    "923": [0, 0.69444, 0, 0, 0.61111],
	    "926": [0, 0.69444, 0, 0, 0.66667],
	    "928": [0, 0.69444, 0, 0, 0.70834],
	    "931": [0, 0.69444, 0, 0, 0.72222],
	    "933": [0, 0.69444, 0, 0, 0.77778],
	    "934": [0, 0.69444, 0, 0, 0.72222],
	    "936": [0, 0.69444, 0, 0, 0.77778],
	    "937": [0, 0.69444, 0, 0, 0.72222],
	    "8211": [0, 0.44444, 0.02778, 0, 0.5],
	    "8212": [0, 0.44444, 0.02778, 0, 1.0],
	    "8216": [0, 0.69444, 0, 0, 0.27778],
	    "8217": [0, 0.69444, 0, 0, 0.27778],
	    "8220": [0, 0.69444, 0, 0, 0.5],
	    "8221": [0, 0.69444, 0, 0, 0.5]
	  },
	  "Script-Regular": {
	    "32": [0, 0, 0, 0, 0.25],
	    "65": [0, 0.7, 0.22925, 0, 0.80253],
	    "66": [0, 0.7, 0.04087, 0, 0.90757],
	    "67": [0, 0.7, 0.1689, 0, 0.66619],
	    "68": [0, 0.7, 0.09371, 0, 0.77443],
	    "69": [0, 0.7, 0.18583, 0, 0.56162],
	    "70": [0, 0.7, 0.13634, 0, 0.89544],
	    "71": [0, 0.7, 0.17322, 0, 0.60961],
	    "72": [0, 0.7, 0.29694, 0, 0.96919],
	    "73": [0, 0.7, 0.19189, 0, 0.80907],
	    "74": [0.27778, 0.7, 0.19189, 0, 1.05159],
	    "75": [0, 0.7, 0.31259, 0, 0.91364],
	    "76": [0, 0.7, 0.19189, 0, 0.87373],
	    "77": [0, 0.7, 0.15981, 0, 1.08031],
	    "78": [0, 0.7, 0.3525, 0, 0.9015],
	    "79": [0, 0.7, 0.08078, 0, 0.73787],
	    "80": [0, 0.7, 0.08078, 0, 1.01262],
	    "81": [0, 0.7, 0.03305, 0, 0.88282],
	    "82": [0, 0.7, 0.06259, 0, 0.85],
	    "83": [0, 0.7, 0.19189, 0, 0.86767],
	    "84": [0, 0.7, 0.29087, 0, 0.74697],
	    "85": [0, 0.7, 0.25815, 0, 0.79996],
	    "86": [0, 0.7, 0.27523, 0, 0.62204],
	    "87": [0, 0.7, 0.27523, 0, 0.80532],
	    "88": [0, 0.7, 0.26006, 0, 0.94445],
	    "89": [0, 0.7, 0.2939, 0, 0.70961],
	    "90": [0, 0.7, 0.24037, 0, 0.8212],
	    "160": [0, 0, 0, 0, 0.25]
	  },
	  "Size1-Regular": {
	    "32": [0, 0, 0, 0, 0.25],
	    "40": [0.35001, 0.85, 0, 0, 0.45834],
	    "41": [0.35001, 0.85, 0, 0, 0.45834],
	    "47": [0.35001, 0.85, 0, 0, 0.57778],
	    "91": [0.35001, 0.85, 0, 0, 0.41667],
	    "92": [0.35001, 0.85, 0, 0, 0.57778],
	    "93": [0.35001, 0.85, 0, 0, 0.41667],
	    "123": [0.35001, 0.85, 0, 0, 0.58334],
	    "125": [0.35001, 0.85, 0, 0, 0.58334],
	    "160": [0, 0, 0, 0, 0.25],
	    "710": [0, 0.72222, 0, 0, 0.55556],
	    "732": [0, 0.72222, 0, 0, 0.55556],
	    "770": [0, 0.72222, 0, 0, 0.55556],
	    "771": [0, 0.72222, 0, 0, 0.55556],
	    "8214": [-0.00099, 0.601, 0, 0, 0.77778],
	    "8593": [1e-05, 0.6, 0, 0, 0.66667],
	    "8595": [1e-05, 0.6, 0, 0, 0.66667],
	    "8657": [1e-05, 0.6, 0, 0, 0.77778],
	    "8659": [1e-05, 0.6, 0, 0, 0.77778],
	    "8719": [0.25001, 0.75, 0, 0, 0.94445],
	    "8720": [0.25001, 0.75, 0, 0, 0.94445],
	    "8721": [0.25001, 0.75, 0, 0, 1.05556],
	    "8730": [0.35001, 0.85, 0, 0, 1.0],
	    "8739": [-0.00599, 0.606, 0, 0, 0.33333],
	    "8741": [-0.00599, 0.606, 0, 0, 0.55556],
	    "8747": [0.30612, 0.805, 0.19445, 0, 0.47222],
	    "8748": [0.306, 0.805, 0.19445, 0, 0.47222],
	    "8749": [0.306, 0.805, 0.19445, 0, 0.47222],
	    "8750": [0.30612, 0.805, 0.19445, 0, 0.47222],
	    "8896": [0.25001, 0.75, 0, 0, 0.83334],
	    "8897": [0.25001, 0.75, 0, 0, 0.83334],
	    "8898": [0.25001, 0.75, 0, 0, 0.83334],
	    "8899": [0.25001, 0.75, 0, 0, 0.83334],
	    "8968": [0.35001, 0.85, 0, 0, 0.47222],
	    "8969": [0.35001, 0.85, 0, 0, 0.47222],
	    "8970": [0.35001, 0.85, 0, 0, 0.47222],
	    "8971": [0.35001, 0.85, 0, 0, 0.47222],
	    "9168": [-0.00099, 0.601, 0, 0, 0.66667],
	    "10216": [0.35001, 0.85, 0, 0, 0.47222],
	    "10217": [0.35001, 0.85, 0, 0, 0.47222],
	    "10752": [0.25001, 0.75, 0, 0, 1.11111],
	    "10753": [0.25001, 0.75, 0, 0, 1.11111],
	    "10754": [0.25001, 0.75, 0, 0, 1.11111],
	    "10756": [0.25001, 0.75, 0, 0, 0.83334],
	    "10758": [0.25001, 0.75, 0, 0, 0.83334]
	  },
	  "Size2-Regular": {
	    "32": [0, 0, 0, 0, 0.25],
	    "40": [0.65002, 1.15, 0, 0, 0.59722],
	    "41": [0.65002, 1.15, 0, 0, 0.59722],
	    "47": [0.65002, 1.15, 0, 0, 0.81111],
	    "91": [0.65002, 1.15, 0, 0, 0.47222],
	    "92": [0.65002, 1.15, 0, 0, 0.81111],
	    "93": [0.65002, 1.15, 0, 0, 0.47222],
	    "123": [0.65002, 1.15, 0, 0, 0.66667],
	    "125": [0.65002, 1.15, 0, 0, 0.66667],
	    "160": [0, 0, 0, 0, 0.25],
	    "710": [0, 0.75, 0, 0, 1.0],
	    "732": [0, 0.75, 0, 0, 1.0],
	    "770": [0, 0.75, 0, 0, 1.0],
	    "771": [0, 0.75, 0, 0, 1.0],
	    "8719": [0.55001, 1.05, 0, 0, 1.27778],
	    "8720": [0.55001, 1.05, 0, 0, 1.27778],
	    "8721": [0.55001, 1.05, 0, 0, 1.44445],
	    "8730": [0.65002, 1.15, 0, 0, 1.0],
	    "8747": [0.86225, 1.36, 0.44445, 0, 0.55556],
	    "8748": [0.862, 1.36, 0.44445, 0, 0.55556],
	    "8749": [0.862, 1.36, 0.44445, 0, 0.55556],
	    "8750": [0.86225, 1.36, 0.44445, 0, 0.55556],
	    "8896": [0.55001, 1.05, 0, 0, 1.11111],
	    "8897": [0.55001, 1.05, 0, 0, 1.11111],
	    "8898": [0.55001, 1.05, 0, 0, 1.11111],
	    "8899": [0.55001, 1.05, 0, 0, 1.11111],
	    "8968": [0.65002, 1.15, 0, 0, 0.52778],
	    "8969": [0.65002, 1.15, 0, 0, 0.52778],
	    "8970": [0.65002, 1.15, 0, 0, 0.52778],
	    "8971": [0.65002, 1.15, 0, 0, 0.52778],
	    "10216": [0.65002, 1.15, 0, 0, 0.61111],
	    "10217": [0.65002, 1.15, 0, 0, 0.61111],
	    "10752": [0.55001, 1.05, 0, 0, 1.51112],
	    "10753": [0.55001, 1.05, 0, 0, 1.51112],
	    "10754": [0.55001, 1.05, 0, 0, 1.51112],
	    "10756": [0.55001, 1.05, 0, 0, 1.11111],
	    "10758": [0.55001, 1.05, 0, 0, 1.11111]
	  },
	  "Size3-Regular": {
	    "32": [0, 0, 0, 0, 0.25],
	    "40": [0.95003, 1.45, 0, 0, 0.73611],
	    "41": [0.95003, 1.45, 0, 0, 0.73611],
	    "47": [0.95003, 1.45, 0, 0, 1.04445],
	    "91": [0.95003, 1.45, 0, 0, 0.52778],
	    "92": [0.95003, 1.45, 0, 0, 1.04445],
	    "93": [0.95003, 1.45, 0, 0, 0.52778],
	    "123": [0.95003, 1.45, 0, 0, 0.75],
	    "125": [0.95003, 1.45, 0, 0, 0.75],
	    "160": [0, 0, 0, 0, 0.25],
	    "710": [0, 0.75, 0, 0, 1.44445],
	    "732": [0, 0.75, 0, 0, 1.44445],
	    "770": [0, 0.75, 0, 0, 1.44445],
	    "771": [0, 0.75, 0, 0, 1.44445],
	    "8730": [0.95003, 1.45, 0, 0, 1.0],
	    "8968": [0.95003, 1.45, 0, 0, 0.58334],
	    "8969": [0.95003, 1.45, 0, 0, 0.58334],
	    "8970": [0.95003, 1.45, 0, 0, 0.58334],
	    "8971": [0.95003, 1.45, 0, 0, 0.58334],
	    "10216": [0.95003, 1.45, 0, 0, 0.75],
	    "10217": [0.95003, 1.45, 0, 0, 0.75]
	  },
	  "Size4-Regular": {
	    "32": [0, 0, 0, 0, 0.25],
	    "40": [1.25003, 1.75, 0, 0, 0.79167],
	    "41": [1.25003, 1.75, 0, 0, 0.79167],
	    "47": [1.25003, 1.75, 0, 0, 1.27778],
	    "91": [1.25003, 1.75, 0, 0, 0.58334],
	    "92": [1.25003, 1.75, 0, 0, 1.27778],
	    "93": [1.25003, 1.75, 0, 0, 0.58334],
	    "123": [1.25003, 1.75, 0, 0, 0.80556],
	    "125": [1.25003, 1.75, 0, 0, 0.80556],
	    "160": [0, 0, 0, 0, 0.25],
	    "710": [0, 0.825, 0, 0, 1.8889],
	    "732": [0, 0.825, 0, 0, 1.8889],
	    "770": [0, 0.825, 0, 0, 1.8889],
	    "771": [0, 0.825, 0, 0, 1.8889],
	    "8730": [1.25003, 1.75, 0, 0, 1.0],
	    "8968": [1.25003, 1.75, 0, 0, 0.63889],
	    "8969": [1.25003, 1.75, 0, 0, 0.63889],
	    "8970": [1.25003, 1.75, 0, 0, 0.63889],
	    "8971": [1.25003, 1.75, 0, 0, 0.63889],
	    "9115": [0.64502, 1.155, 0, 0, 0.875],
	    "9116": [1e-05, 0.6, 0, 0, 0.875],
	    "9117": [0.64502, 1.155, 0, 0, 0.875],
	    "9118": [0.64502, 1.155, 0, 0, 0.875],
	    "9119": [1e-05, 0.6, 0, 0, 0.875],
	    "9120": [0.64502, 1.155, 0, 0, 0.875],
	    "9121": [0.64502, 1.155, 0, 0, 0.66667],
	    "9122": [-0.00099, 0.601, 0, 0, 0.66667],
	    "9123": [0.64502, 1.155, 0, 0, 0.66667],
	    "9124": [0.64502, 1.155, 0, 0, 0.66667],
	    "9125": [-0.00099, 0.601, 0, 0, 0.66667],
	    "9126": [0.64502, 1.155, 0, 0, 0.66667],
	    "9127": [1e-05, 0.9, 0, 0, 0.88889],
	    "9128": [0.65002, 1.15, 0, 0, 0.88889],
	    "9129": [0.90001, 0, 0, 0, 0.88889],
	    "9130": [0, 0.3, 0, 0, 0.88889],
	    "9131": [1e-05, 0.9, 0, 0, 0.88889],
	    "9132": [0.65002, 1.15, 0, 0, 0.88889],
	    "9133": [0.90001, 0, 0, 0, 0.88889],
	    "9143": [0.88502, 0.915, 0, 0, 1.05556],
	    "10216": [1.25003, 1.75, 0, 0, 0.80556],
	    "10217": [1.25003, 1.75, 0, 0, 0.80556],
	    "57344": [-0.00499, 0.605, 0, 0, 1.05556],
	    "57345": [-0.00499, 0.605, 0, 0, 1.05556],
	    "57680": [0, 0.12, 0, 0, 0.45],
	    "57681": [0, 0.12, 0, 0, 0.45],
	    "57682": [0, 0.12, 0, 0, 0.45],
	    "57683": [0, 0.12, 0, 0, 0.45]
	  },
	  "Typewriter-Regular": {
	    "32": [0, 0, 0, 0, 0.525],
	    "33": [0, 0.61111, 0, 0, 0.525],
	    "34": [0, 0.61111, 0, 0, 0.525],
	    "35": [0, 0.61111, 0, 0, 0.525],
	    "36": [0.08333, 0.69444, 0, 0, 0.525],
	    "37": [0.08333, 0.69444, 0, 0, 0.525],
	    "38": [0, 0.61111, 0, 0, 0.525],
	    "39": [0, 0.61111, 0, 0, 0.525],
	    "40": [0.08333, 0.69444, 0, 0, 0.525],
	    "41": [0.08333, 0.69444, 0, 0, 0.525],
	    "42": [0, 0.52083, 0, 0, 0.525],
	    "43": [-0.08056, 0.53055, 0, 0, 0.525],
	    "44": [0.13889, 0.125, 0, 0, 0.525],
	    "45": [-0.08056, 0.53055, 0, 0, 0.525],
	    "46": [0, 0.125, 0, 0, 0.525],
	    "47": [0.08333, 0.69444, 0, 0, 0.525],
	    "48": [0, 0.61111, 0, 0, 0.525],
	    "49": [0, 0.61111, 0, 0, 0.525],
	    "50": [0, 0.61111, 0, 0, 0.525],
	    "51": [0, 0.61111, 0, 0, 0.525],
	    "52": [0, 0.61111, 0, 0, 0.525],
	    "53": [0, 0.61111, 0, 0, 0.525],
	    "54": [0, 0.61111, 0, 0, 0.525],
	    "55": [0, 0.61111, 0, 0, 0.525],
	    "56": [0, 0.61111, 0, 0, 0.525],
	    "57": [0, 0.61111, 0, 0, 0.525],
	    "58": [0, 0.43056, 0, 0, 0.525],
	    "59": [0.13889, 0.43056, 0, 0, 0.525],
	    "60": [-0.05556, 0.55556, 0, 0, 0.525],
	    "61": [-0.19549, 0.41562, 0, 0, 0.525],
	    "62": [-0.05556, 0.55556, 0, 0, 0.525],
	    "63": [0, 0.61111, 0, 0, 0.525],
	    "64": [0, 0.61111, 0, 0, 0.525],
	    "65": [0, 0.61111, 0, 0, 0.525],
	    "66": [0, 0.61111, 0, 0, 0.525],
	    "67": [0, 0.61111, 0, 0, 0.525],
	    "68": [0, 0.61111, 0, 0, 0.525],
	    "69": [0, 0.61111, 0, 0, 0.525],
	    "70": [0, 0.61111, 0, 0, 0.525],
	    "71": [0, 0.61111, 0, 0, 0.525],
	    "72": [0, 0.61111, 0, 0, 0.525],
	    "73": [0, 0.61111, 0, 0, 0.525],
	    "74": [0, 0.61111, 0, 0, 0.525],
	    "75": [0, 0.61111, 0, 0, 0.525],
	    "76": [0, 0.61111, 0, 0, 0.525],
	    "77": [0, 0.61111, 0, 0, 0.525],
	    "78": [0, 0.61111, 0, 0, 0.525],
	    "79": [0, 0.61111, 0, 0, 0.525],
	    "80": [0, 0.61111, 0, 0, 0.525],
	    "81": [0.13889, 0.61111, 0, 0, 0.525],
	    "82": [0, 0.61111, 0, 0, 0.525],
	    "83": [0, 0.61111, 0, 0, 0.525],
	    "84": [0, 0.61111, 0, 0, 0.525],
	    "85": [0, 0.61111, 0, 0, 0.525],
	    "86": [0, 0.61111, 0, 0, 0.525],
	    "87": [0, 0.61111, 0, 0, 0.525],
	    "88": [0, 0.61111, 0, 0, 0.525],
	    "89": [0, 0.61111, 0, 0, 0.525],
	    "90": [0, 0.61111, 0, 0, 0.525],
	    "91": [0.08333, 0.69444, 0, 0, 0.525],
	    "92": [0.08333, 0.69444, 0, 0, 0.525],
	    "93": [0.08333, 0.69444, 0, 0, 0.525],
	    "94": [0, 0.61111, 0, 0, 0.525],
	    "95": [0.09514, 0, 0, 0, 0.525],
	    "96": [0, 0.61111, 0, 0, 0.525],
	    "97": [0, 0.43056, 0, 0, 0.525],
	    "98": [0, 0.61111, 0, 0, 0.525],
	    "99": [0, 0.43056, 0, 0, 0.525],
	    "100": [0, 0.61111, 0, 0, 0.525],
	    "101": [0, 0.43056, 0, 0, 0.525],
	    "102": [0, 0.61111, 0, 0, 0.525],
	    "103": [0.22222, 0.43056, 0, 0, 0.525],
	    "104": [0, 0.61111, 0, 0, 0.525],
	    "105": [0, 0.61111, 0, 0, 0.525],
	    "106": [0.22222, 0.61111, 0, 0, 0.525],
	    "107": [0, 0.61111, 0, 0, 0.525],
	    "108": [0, 0.61111, 0, 0, 0.525],
	    "109": [0, 0.43056, 0, 0, 0.525],
	    "110": [0, 0.43056, 0, 0, 0.525],
	    "111": [0, 0.43056, 0, 0, 0.525],
	    "112": [0.22222, 0.43056, 0, 0, 0.525],
	    "113": [0.22222, 0.43056, 0, 0, 0.525],
	    "114": [0, 0.43056, 0, 0, 0.525],
	    "115": [0, 0.43056, 0, 0, 0.525],
	    "116": [0, 0.55358, 0, 0, 0.525],
	    "117": [0, 0.43056, 0, 0, 0.525],
	    "118": [0, 0.43056, 0, 0, 0.525],
	    "119": [0, 0.43056, 0, 0, 0.525],
	    "120": [0, 0.43056, 0, 0, 0.525],
	    "121": [0.22222, 0.43056, 0, 0, 0.525],
	    "122": [0, 0.43056, 0, 0, 0.525],
	    "123": [0.08333, 0.69444, 0, 0, 0.525],
	    "124": [0.08333, 0.69444, 0, 0, 0.525],
	    "125": [0.08333, 0.69444, 0, 0, 0.525],
	    "126": [0, 0.61111, 0, 0, 0.525],
	    "127": [0, 0.61111, 0, 0, 0.525],
	    "160": [0, 0, 0, 0, 0.525],
	    "176": [0, 0.61111, 0, 0, 0.525],
	    "184": [0.19445, 0, 0, 0, 0.525],
	    "305": [0, 0.43056, 0, 0, 0.525],
	    "567": [0.22222, 0.43056, 0, 0, 0.525],
	    "711": [0, 0.56597, 0, 0, 0.525],
	    "713": [0, 0.56555, 0, 0, 0.525],
	    "714": [0, 0.61111, 0, 0, 0.525],
	    "715": [0, 0.61111, 0, 0, 0.525],
	    "728": [0, 0.61111, 0, 0, 0.525],
	    "730": [0, 0.61111, 0, 0, 0.525],
	    "770": [0, 0.61111, 0, 0, 0.525],
	    "771": [0, 0.61111, 0, 0, 0.525],
	    "776": [0, 0.61111, 0, 0, 0.525],
	    "915": [0, 0.61111, 0, 0, 0.525],
	    "916": [0, 0.61111, 0, 0, 0.525],
	    "920": [0, 0.61111, 0, 0, 0.525],
	    "923": [0, 0.61111, 0, 0, 0.525],
	    "926": [0, 0.61111, 0, 0, 0.525],
	    "928": [0, 0.61111, 0, 0, 0.525],
	    "931": [0, 0.61111, 0, 0, 0.525],
	    "933": [0, 0.61111, 0, 0, 0.525],
	    "934": [0, 0.61111, 0, 0, 0.525],
	    "936": [0, 0.61111, 0, 0, 0.525],
	    "937": [0, 0.61111, 0, 0, 0.525],
	    "8216": [0, 0.61111, 0, 0, 0.525],
	    "8217": [0, 0.61111, 0, 0, 0.525],
	    "8242": [0, 0.61111, 0, 0, 0.525],
	    "9251": [0.11111, 0.21944, 0, 0, 0.525]
	  }
	};

	/**
	 * This file contains metrics regarding fonts and individual symbols. The sigma
	 * and xi variables, as well as the metricMap map contain data extracted from
	 * TeX, TeX font metrics, and the TTF files. These data are then exposed via the
	 * `metrics` variable and the getCharacterMetrics function.
	 */
	// In TeX, there are actually three sets of dimensions, one for each of
	// textstyle (size index 5 and higher: >=9pt), scriptstyle (size index 3 and 4:
	// 7-8pt), and scriptscriptstyle (size index 1 and 2: 5-6pt).  These are
	// provided in the the arrays below, in that order.
	//
	// The font metrics are stored in fonts cmsy10, cmsy7, and cmsy5 respsectively.
	// This was determined by running the following script:
	//
	//     latex -interaction=nonstopmode \
	//     '\documentclass{article}\usepackage{amsmath}\begin{document}' \
	//     '$a$ \expandafter\show\the\textfont2' \
	//     '\expandafter\show\the\scriptfont2' \
	//     '\expandafter\show\the\scriptscriptfont2' \
	//     '\stop'
	//
	// The metrics themselves were retreived using the following commands:
	//
	//     tftopl cmsy10
	//     tftopl cmsy7
	//     tftopl cmsy5
	//
	// The output of each of these commands is quite lengthy.  The only part we
	// care about is the FONTDIMEN section. Each value is measured in EMs.
	var sigmasAndXis = {
	  slant: [0.250, 0.250, 0.250],
	  // sigma1
	  space: [0.000, 0.000, 0.000],
	  // sigma2
	  stretch: [0.000, 0.000, 0.000],
	  // sigma3
	  shrink: [0.000, 0.000, 0.000],
	  // sigma4
	  xHeight: [0.431, 0.431, 0.431],
	  // sigma5
	  quad: [1.000, 1.171, 1.472],
	  // sigma6
	  extraSpace: [0.000, 0.000, 0.000],
	  // sigma7
	  num1: [0.677, 0.732, 0.925],
	  // sigma8
	  num2: [0.394, 0.384, 0.387],
	  // sigma9
	  num3: [0.444, 0.471, 0.504],
	  // sigma10
	  denom1: [0.686, 0.752, 1.025],
	  // sigma11
	  denom2: [0.345, 0.344, 0.532],
	  // sigma12
	  sup1: [0.413, 0.503, 0.504],
	  // sigma13
	  sup2: [0.363, 0.431, 0.404],
	  // sigma14
	  sup3: [0.289, 0.286, 0.294],
	  // sigma15
	  sub1: [0.150, 0.143, 0.200],
	  // sigma16
	  sub2: [0.247, 0.286, 0.400],
	  // sigma17
	  supDrop: [0.386, 0.353, 0.494],
	  // sigma18
	  subDrop: [0.050, 0.071, 0.100],
	  // sigma19
	  delim1: [2.390, 1.700, 1.980],
	  // sigma20
	  delim2: [1.010, 1.157, 1.420],
	  // sigma21
	  axisHeight: [0.250, 0.250, 0.250],
	  // sigma22
	  // These font metrics are extracted from TeX by using tftopl on cmex10.tfm;
	  // they correspond to the font parameters of the extension fonts (family 3).
	  // See the TeXbook, page 441. In AMSTeX, the extension fonts scale; to
	  // match cmex7, we'd use cmex7.tfm values for script and scriptscript
	  // values.
	  defaultRuleThickness: [0.04, 0.049, 0.049],
	  // xi8; cmex7: 0.049
	  bigOpSpacing1: [0.111, 0.111, 0.111],
	  // xi9
	  bigOpSpacing2: [0.166, 0.166, 0.166],
	  // xi10
	  bigOpSpacing3: [0.2, 0.2, 0.2],
	  // xi11
	  bigOpSpacing4: [0.6, 0.611, 0.611],
	  // xi12; cmex7: 0.611
	  bigOpSpacing5: [0.1, 0.143, 0.143],
	  // xi13; cmex7: 0.143
	  // The \sqrt rule width is taken from the height of the surd character.
	  // Since we use the same font at all sizes, this thickness doesn't scale.
	  sqrtRuleThickness: [0.04, 0.04, 0.04],
	  // This value determines how large a pt is, for metrics which are defined
	  // in terms of pts.
	  // This value is also used in katex.less; if you change it make sure the
	  // values match.
	  ptPerEm: [10.0, 10.0, 10.0],
	  // The space between adjacent `|` columns in an array definition. From
	  // `\showthe\doublerulesep` in LaTeX. Equals 2.0 / ptPerEm.
	  doubleRuleSep: [0.2, 0.2, 0.2],
	  // The width of separator lines in {array} environments. From
	  // `\showthe\arrayrulewidth` in LaTeX. Equals 0.4 / ptPerEm.
	  arrayRuleWidth: [0.04, 0.04, 0.04],
	  // Two values from LaTeX source2e:
	  fboxsep: [0.3, 0.3, 0.3],
	  //        3 pt / ptPerEm
	  fboxrule: [0.04, 0.04, 0.04] // 0.4 pt / ptPerEm

	}; // This map contains a mapping from font name and character code to character
	// should have Latin-1 and Cyrillic characters, but may not depending on the
	// operating system.  The metrics do not account for extra height from the
	// accents.  In the case of Cyrillic characters which have both ascenders and
	// descenders we prefer approximations with ascenders, primarily to prevent
	// the fraction bar or root line from intersecting the glyph.
	// TODO(kevinb) allow union of multiple glyph metrics for better accuracy.

	var extraCharacterMap = {
	  // Latin-1
	  'Å': 'A',
	  'Ð': 'D',
	  'Þ': 'o',
	  'å': 'a',
	  'ð': 'd',
	  'þ': 'o',
	  // Cyrillic
	  'А': 'A',
	  'Б': 'B',
	  'В': 'B',
	  'Г': 'F',
	  'Д': 'A',
	  'Е': 'E',
	  'Ж': 'K',
	  'З': '3',
	  'И': 'N',
	  'Й': 'N',
	  'К': 'K',
	  'Л': 'N',
	  'М': 'M',
	  'Н': 'H',
	  'О': 'O',
	  'П': 'N',
	  'Р': 'P',
	  'С': 'C',
	  'Т': 'T',
	  'У': 'y',
	  'Ф': 'O',
	  'Х': 'X',
	  'Ц': 'U',
	  'Ч': 'h',
	  'Ш': 'W',
	  'Щ': 'W',
	  'Ъ': 'B',
	  'Ы': 'X',
	  'Ь': 'B',
	  'Э': '3',
	  'Ю': 'X',
	  'Я': 'R',
	  'а': 'a',
	  'б': 'b',
	  'в': 'a',
	  'г': 'r',
	  'д': 'y',
	  'е': 'e',
	  'ж': 'm',
	  'з': 'e',
	  'и': 'n',
	  'й': 'n',
	  'к': 'n',
	  'л': 'n',
	  'м': 'm',
	  'н': 'n',
	  'о': 'o',
	  'п': 'n',
	  'р': 'p',
	  'с': 'c',
	  'т': 'o',
	  'у': 'y',
	  'ф': 'b',
	  'х': 'x',
	  'ц': 'n',
	  'ч': 'n',
	  'ш': 'w',
	  'щ': 'w',
	  'ъ': 'a',
	  'ы': 'm',
	  'ь': 'a',
	  'э': 'e',
	  'ю': 'm',
	  'я': 'r'
	};

	/**
	 * This function adds new font metrics to default metricMap
	 * It can also override existing metrics
	 */
	function setFontMetrics(fontName, metrics) {
	  fontMetricsData[fontName] = metrics;
	}
	/**
	 * This function is a convenience function for looking up information in the
	 * metricMap table. It takes a character as a string, and a font.
	 *
	 * Note: the `width` property may be undefined if fontMetricsData.js wasn't
	 * built using `Make extended_metrics`.
	 */

	function getCharacterMetrics(character, font, mode) {
	  if (!fontMetricsData[font]) {
	    throw new Error("Font metrics not found for font: " + font + ".");
	  }

	  var ch = character.charCodeAt(0);
	  var metrics = fontMetricsData[font][ch];

	  if (!metrics && character[0] in extraCharacterMap) {
	    ch = extraCharacterMap[character[0]].charCodeAt(0);
	    metrics = fontMetricsData[font][ch];
	  }

	  if (!metrics && mode === 'text') {
	    // We don't typically have font metrics for Asian scripts.
	    // But since we support them in text mode, we need to return
	    // some sort of metrics.
	    // So if the character is in a script we support but we
	    // don't have metrics for it, just use the metrics for
	    // the Latin capital letter M. This is close enough because
	    // we (currently) only care about the height of the glpyh
	    // not its width.
	    if (supportedCodepoint(ch)) {
	      metrics = fontMetricsData[font][77]; // 77 is the charcode for 'M'
	    }
	  }

	  if (metrics) {
	    return {
	      depth: metrics[0],
	      height: metrics[1],
	      italic: metrics[2],
	      skew: metrics[3],
	      width: metrics[4]
	    };
	  }
	}
	var fontMetricsBySizeIndex = {};
	/**
	 * Get the font metrics for a given size.
	 */

	function getGlobalMetrics(size) {
	  var sizeIndex;

	  if (size >= 5) {
	    sizeIndex = 0;
	  } else if (size >= 3) {
	    sizeIndex = 1;
	  } else {
	    sizeIndex = 2;
	  }

	  if (!fontMetricsBySizeIndex[sizeIndex]) {
	    var metrics = fontMetricsBySizeIndex[sizeIndex] = {
	      cssEmPerMu: sigmasAndXis.quad[sizeIndex] / 18
	    };

	    for (var key in sigmasAndXis) {
	      if (sigmasAndXis.hasOwnProperty(key)) {
	        metrics[key] = sigmasAndXis[key][sizeIndex];
	      }
	    }
	  }

	  return fontMetricsBySizeIndex[sizeIndex];
	}

	/**
	 * This file contains information about the options that the Parser carries
	 * around with it while parsing. Data is held in an `Options` object, and when
	 * recursing, a new `Options` object can be created with the `.with*` and
	 * `.reset` functions.
	 */
	var sizeStyleMap = [// Each element contains [textsize, scriptsize, scriptscriptsize].
	// The size mappings are taken from TeX with \normalsize=10pt.
	[1, 1, 1], // size1: [5, 5, 5]              \tiny
	[2, 1, 1], // size2: [6, 5, 5]
	[3, 1, 1], // size3: [7, 5, 5]              \scriptsize
	[4, 2, 1], // size4: [8, 6, 5]              \footnotesize
	[5, 2, 1], // size5: [9, 6, 5]              \small
	[6, 3, 1], // size6: [10, 7, 5]             \normalsize
	[7, 4, 2], // size7: [12, 8, 6]             \large
	[8, 6, 3], // size8: [14.4, 10, 7]          \Large
	[9, 7, 6], // size9: [17.28, 12, 10]        \LARGE
	[10, 8, 7], // size10: [20.74, 14.4, 12]     \huge
	[11, 10, 9] // size11: [24.88, 20.74, 17.28] \HUGE
	];
	var sizeMultipliers = [// fontMetrics.js:getGlobalMetrics also uses size indexes, so if
	// you change size indexes, change that function.
	0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.2, 1.44, 1.728, 2.074, 2.488];

	var sizeAtStyle = function sizeAtStyle(size, style) {
	  return style.size < 2 ? size : sizeStyleMap[size - 1][style.size - 1];
	}; // In these types, "" (empty string) means "no change".


	/**
	 * This is the main options class. It contains the current style, size, color,
	 * and font.
	 *
	 * Options objects should not be modified. To create a new Options with
	 * different properties, call a `.having*` method.
	 */
	class Options {
	  // A font family applies to a group of fonts (i.e. SansSerif), while a font
	  // represents a specific font (i.e. SansSerif Bold).
	  // See: https://tex.stackexchange.com/questions/22350/difference-between-textrm-and-mathrm

	  /**
	   * The base size index.
	   */
	  constructor(data) {
	    this.style = void 0;
	    this.color = void 0;
	    this.size = void 0;
	    this.textSize = void 0;
	    this.phantom = void 0;
	    this.font = void 0;
	    this.fontFamily = void 0;
	    this.fontWeight = void 0;
	    this.fontShape = void 0;
	    this.sizeMultiplier = void 0;
	    this.maxSize = void 0;
	    this.minRuleThickness = void 0;
	    this._fontMetrics = void 0;
	    this.style = data.style;
	    this.color = data.color;
	    this.size = data.size || Options.BASESIZE;
	    this.textSize = data.textSize || this.size;
	    this.phantom = !!data.phantom;
	    this.font = data.font || "";
	    this.fontFamily = data.fontFamily || "";
	    this.fontWeight = data.fontWeight || '';
	    this.fontShape = data.fontShape || '';
	    this.sizeMultiplier = sizeMultipliers[this.size - 1];
	    this.maxSize = data.maxSize;
	    this.minRuleThickness = data.minRuleThickness;
	    this._fontMetrics = undefined;
	  }
	  /**
	   * Returns a new options object with the same properties as "this".  Properties
	   * from "extension" will be copied to the new options object.
	   */


	  extend(extension) {
	    var data = {
	      style: this.style,
	      size: this.size,
	      textSize: this.textSize,
	      color: this.color,
	      phantom: this.phantom,
	      font: this.font,
	      fontFamily: this.fontFamily,
	      fontWeight: this.fontWeight,
	      fontShape: this.fontShape,
	      maxSize: this.maxSize,
	      minRuleThickness: this.minRuleThickness
	    };

	    for (var key in extension) {
	      if (extension.hasOwnProperty(key)) {
	        data[key] = extension[key];
	      }
	    }

	    return new Options(data);
	  }
	  /**
	   * Return an options object with the given style. If `this.style === style`,
	   * returns `this`.
	   */


	  havingStyle(style) {
	    if (this.style === style) {
	      return this;
	    } else {
	      return this.extend({
	        style: style,
	        size: sizeAtStyle(this.textSize, style)
	      });
	    }
	  }
	  /**
	   * Return an options object with a cramped version of the current style. If
	   * the current style is cramped, returns `this`.
	   */


	  havingCrampedStyle() {
	    return this.havingStyle(this.style.cramp());
	  }
	  /**
	   * Return an options object with the given size and in at least `\textstyle`.
	   * Returns `this` if appropriate.
	   */


	  havingSize(size) {
	    if (this.size === size && this.textSize === size) {
	      return this;
	    } else {
	      return this.extend({
	        style: this.style.text(),
	        size: size,
	        textSize: size,
	        sizeMultiplier: sizeMultipliers[size - 1]
	      });
	    }
	  }
	  /**
	   * Like `this.havingSize(BASESIZE).havingStyle(style)`. If `style` is omitted,
	   * changes to at least `\textstyle`.
	   */


	  havingBaseStyle(style) {
	    style = style || this.style.text();
	    var wantSize = sizeAtStyle(Options.BASESIZE, style);

	    if (this.size === wantSize && this.textSize === Options.BASESIZE && this.style === style) {
	      return this;
	    } else {
	      return this.extend({
	        style: style,
	        size: wantSize
	      });
	    }
	  }
	  /**
	   * Remove the effect of sizing changes such as \Huge.
	   * Keep the effect of the current style, such as \scriptstyle.
	   */


	  havingBaseSizing() {
	    var size;

	    switch (this.style.id) {
	      case 4:
	      case 5:
	        size = 3; // normalsize in scriptstyle

	        break;

	      case 6:
	      case 7:
	        size = 1; // normalsize in scriptscriptstyle

	        break;

	      default:
	        size = 6;
	      // normalsize in textstyle or displaystyle
	    }

	    return this.extend({
	      style: this.style.text(),
	      size: size
	    });
	  }
	  /**
	   * Create a new options object with the given color.
	   */


	  withColor(color) {
	    return this.extend({
	      color: color
	    });
	  }
	  /**
	   * Create a new options object with "phantom" set to true.
	   */


	  withPhantom() {
	    return this.extend({
	      phantom: true
	    });
	  }
	  /**
	   * Creates a new options object with the given math font or old text font.
	   * @type {[type]}
	   */


	  withFont(font) {
	    return this.extend({
	      font
	    });
	  }
	  /**
	   * Create a new options objects with the given fontFamily.
	   */


	  withTextFontFamily(fontFamily) {
	    return this.extend({
	      fontFamily,
	      font: ""
	    });
	  }
	  /**
	   * Creates a new options object with the given font weight
	   */


	  withTextFontWeight(fontWeight) {
	    return this.extend({
	      fontWeight,
	      font: ""
	    });
	  }
	  /**
	   * Creates a new options object with the given font weight
	   */


	  withTextFontShape(fontShape) {
	    return this.extend({
	      fontShape,
	      font: ""
	    });
	  }
	  /**
	   * Return the CSS sizing classes required to switch from enclosing options
	   * `oldOptions` to `this`. Returns an array of classes.
	   */


	  sizingClasses(oldOptions) {
	    if (oldOptions.size !== this.size) {
	      return ["sizing", "reset-size" + oldOptions.size, "size" + this.size];
	    } else {
	      return [];
	    }
	  }
	  /**
	   * Return the CSS sizing classes required to switch to the base size. Like
	   * `this.havingSize(BASESIZE).sizingClasses(this)`.
	   */


	  baseSizingClasses() {
	    if (this.size !== Options.BASESIZE) {
	      return ["sizing", "reset-size" + this.size, "size" + Options.BASESIZE];
	    } else {
	      return [];
	    }
	  }
	  /**
	   * Return the font metrics for this size.
	   */


	  fontMetrics() {
	    if (!this._fontMetrics) {
	      this._fontMetrics = getGlobalMetrics(this.size);
	    }

	    return this._fontMetrics;
	  }
	  /**
	   * Gets the CSS color of the current options object
	   */


	  getColor() {
	    if (this.phantom) {
	      return "transparent";
	    } else {
	      return this.color;
	    }
	  }

	}

	Options.BASESIZE = 6;

	/**
	 * This file does conversion between units.  In particular, it provides
	 * calculateSize to convert other units into ems.
	 */
	// Thus, multiplying a length by this number converts the length from units
	// into pts.  Dividing the result by ptPerEm gives the number of ems
	// *assuming* a font size of ptPerEm (normal size, normal style).

	var ptPerUnit = {
	  // https://en.wikibooks.org/wiki/LaTeX/Lengths and
	  // https://tex.stackexchange.com/a/8263
	  "pt": 1,
	  // TeX point
	  "mm": 7227 / 2540,
	  // millimeter
	  "cm": 7227 / 254,
	  // centimeter
	  "in": 72.27,
	  // inch
	  "bp": 803 / 800,
	  // big (PostScript) points
	  "pc": 12,
	  // pica
	  "dd": 1238 / 1157,
	  // didot
	  "cc": 14856 / 1157,
	  // cicero (12 didot)
	  "nd": 685 / 642,
	  // new didot
	  "nc": 1370 / 107,
	  // new cicero (12 new didot)
	  "sp": 1 / 65536,
	  // scaled point (TeX's internal smallest unit)
	  // https://tex.stackexchange.com/a/41371
	  "px": 803 / 800 // \pdfpxdimen defaults to 1 bp in pdfTeX and LuaTeX

	}; // Dictionary of relative units, for fast validity testing.

	var relativeUnit = {
	  "ex": true,
	  "em": true,
	  "mu": true
	};

	/**
	 * Determine whether the specified unit (either a string defining the unit
	 * or a "size" parse node containing a unit field) is valid.
	 */
	var validUnit = function validUnit(unit) {
	  if (typeof unit !== "string") {
	    unit = unit.unit;
	  }

	  return unit in ptPerUnit || unit in relativeUnit || unit === "ex";
	};
	/*
	 * Convert a "size" parse node (with numeric "number" and string "unit" fields,
	 * as parsed by functions.js argType "size") into a CSS em value for the
	 * current style/scale.  `options` gives the current options.
	 */

	var calculateSize = function calculateSize(sizeValue, options) {
	  var scale;

	  if (sizeValue.unit in ptPerUnit) {
	    // Absolute units
	    scale = ptPerUnit[sizeValue.unit] // Convert unit to pt
	    / options.fontMetrics().ptPerEm // Convert pt to CSS em
	    / options.sizeMultiplier; // Unscale to make absolute units
	  } else if (sizeValue.unit === "mu") {
	    // `mu` units scale with scriptstyle/scriptscriptstyle.
	    scale = options.fontMetrics().cssEmPerMu;
	  } else {
	    // Other relative units always refer to the *textstyle* font
	    // in the current size.
	    var unitOptions;

	    if (options.style.isTight()) {
	      // isTight() means current style is script/scriptscript.
	      unitOptions = options.havingStyle(options.style.text());
	    } else {
	      unitOptions = options;
	    } // TODO: In TeX these units are relative to the quad of the current
	    // *text* font, e.g. cmr10. KaTeX instead uses values from the
	    // comparably-sized *Computer Modern symbol* font. At 10pt, these
	    // match. At 7pt and 5pt, they differ: cmr7=1.138894, cmsy7=1.170641;
	    // cmr5=1.361133, cmsy5=1.472241. Consider $\scriptsize a\kern1emb$.
	    // TeX \showlists shows a kern of 1.13889 * fontsize;
	    // KaTeX shows a kern of 1.171 * fontsize.


	    if (sizeValue.unit === "ex") {
	      scale = unitOptions.fontMetrics().xHeight;
	    } else if (sizeValue.unit === "em") {
	      scale = unitOptions.fontMetrics().quad;
	    } else {
	      throw new ParseError("Invalid unit: '" + sizeValue.unit + "'");
	    }

	    if (unitOptions !== options) {
	      scale *= unitOptions.sizeMultiplier / options.sizeMultiplier;
	    }
	  }

	  return Math.min(sizeValue.number * scale, options.maxSize);
	};
	/**
	 * Round `n` to 4 decimal places, or to the nearest 1/10,000th em. See
	 * https://github.com/KaTeX/KaTeX/pull/2460.
	 */

	var makeEm = function makeEm(n) {
	  return +n.toFixed(4) + "em";
	};

	/**
	 * These objects store the data about the DOM nodes we create, as well as some
	 * extra data. They can then be transformed into real DOM nodes with the
	 * `toNode` function or HTML markup using `toMarkup`. They are useful for both
	 * storing extra properties on the nodes, as well as providing a way to easily
	 * work with the DOM.
	 *
	 * Similar functions for working with MathML nodes exist in mathMLTree.js.
	 *
	 * TODO: refactor `span` and `anchor` into common superclass when
	 * target environments support class inheritance
	 */

	/**
	 * Create an HTML className based on a list of classes. In addition to joining
	 * with spaces, we also remove empty classes.
	 */
	var createClass = function createClass(classes) {
	  return classes.filter(cls => cls).join(" ");
	};

	var initNode = function initNode(classes, options, style) {
	  this.classes = classes || [];
	  this.attributes = {};
	  this.height = 0;
	  this.depth = 0;
	  this.maxFontSize = 0;
	  this.style = style || {};

	  if (options) {
	    if (options.style.isTight()) {
	      this.classes.push("mtight");
	    }

	    var color = options.getColor();

	    if (color) {
	      this.style.color = color;
	    }
	  }
	};
	/**
	 * Convert into an HTML node
	 */


	var toNode = function toNode(tagName) {
	  var node = document.createElement(tagName); // Apply the class

	  node.className = createClass(this.classes); // Apply inline styles

	  for (var style in this.style) {
	    if (this.style.hasOwnProperty(style)) {
	      // $FlowFixMe Flow doesn't seem to understand span.style's type.
	      node.style[style] = this.style[style];
	    }
	  } // Apply attributes


	  for (var attr in this.attributes) {
	    if (this.attributes.hasOwnProperty(attr)) {
	      node.setAttribute(attr, this.attributes[attr]);
	    }
	  } // Append the children, also as HTML nodes


	  for (var i = 0; i < this.children.length; i++) {
	    node.appendChild(this.children[i].toNode());
	  }

	  return node;
	};
	/**
	 * Convert into an HTML markup string
	 */


	var toMarkup = function toMarkup(tagName) {
	  var markup = "<" + tagName; // Add the class

	  if (this.classes.length) {
	    markup += " class=\"" + utils.escape(createClass(this.classes)) + "\"";
	  }

	  var styles = ""; // Add the styles, after hyphenation

	  for (var style in this.style) {
	    if (this.style.hasOwnProperty(style)) {
	      styles += utils.hyphenate(style) + ":" + this.style[style] + ";";
	    }
	  }

	  if (styles) {
	    markup += " style=\"" + utils.escape(styles) + "\"";
	  } // Add the attributes


	  for (var attr in this.attributes) {
	    if (this.attributes.hasOwnProperty(attr)) {
	      markup += " " + attr + "=\"" + utils.escape(this.attributes[attr]) + "\"";
	    }
	  }

	  markup += ">"; // Add the markup of the children, also as markup

	  for (var i = 0; i < this.children.length; i++) {
	    markup += this.children[i].toMarkup();
	  }

	  markup += "</" + tagName + ">";
	  return markup;
	}; // Making the type below exact with all optional fields doesn't work due to
	// - https://github.com/facebook/flow/issues/4582
	// - https://github.com/facebook/flow/issues/5688
	// However, since *all* fields are optional, $Shape<> works as suggested in 5688
	// above.
	// This type does not include all CSS properties. Additional properties should
	// be added as needed.


	/**
	 * This node represents a span node, with a className, a list of children, and
	 * an inline style. It also contains information about its height, depth, and
	 * maxFontSize.
	 *
	 * Represents two types with different uses: SvgSpan to wrap an SVG and DomSpan
	 * otherwise. This typesafety is important when HTML builders access a span's
	 * children.
	 */
	class Span {
	  constructor(classes, children, options, style) {
	    this.children = void 0;
	    this.attributes = void 0;
	    this.classes = void 0;
	    this.height = void 0;
	    this.depth = void 0;
	    this.width = void 0;
	    this.maxFontSize = void 0;
	    this.style = void 0;
	    initNode.call(this, classes, options, style);
	    this.children = children || [];
	  }
	  /**
	   * Sets an arbitrary attribute on the span. Warning: use this wisely. Not
	   * all browsers support attributes the same, and having too many custom
	   * attributes is probably bad.
	   */


	  setAttribute(attribute, value) {
	    this.attributes[attribute] = value;
	  }

	  hasClass(className) {
	    return utils.contains(this.classes, className);
	  }

	  toNode() {
	    return toNode.call(this, "span");
	  }

	  toMarkup() {
	    return toMarkup.call(this, "span");
	  }

	}
	/**
	 * This node represents an anchor (<a>) element with a hyperlink.  See `span`
	 * for further details.
	 */

	class Anchor {
	  constructor(href, classes, children, options) {
	    this.children = void 0;
	    this.attributes = void 0;
	    this.classes = void 0;
	    this.height = void 0;
	    this.depth = void 0;
	    this.maxFontSize = void 0;
	    this.style = void 0;
	    initNode.call(this, classes, options);
	    this.children = children || [];
	    this.setAttribute('href', href);
	  }

	  setAttribute(attribute, value) {
	    this.attributes[attribute] = value;
	  }

	  hasClass(className) {
	    return utils.contains(this.classes, className);
	  }

	  toNode() {
	    return toNode.call(this, "a");
	  }

	  toMarkup() {
	    return toMarkup.call(this, "a");
	  }

	}
	/**
	 * This node represents an image embed (<img>) element.
	 */

	class Img {
	  constructor(src, alt, style) {
	    this.src = void 0;
	    this.alt = void 0;
	    this.classes = void 0;
	    this.height = void 0;
	    this.depth = void 0;
	    this.maxFontSize = void 0;
	    this.style = void 0;
	    this.alt = alt;
	    this.src = src;
	    this.classes = ["mord"];
	    this.style = style;
	  }

	  hasClass(className) {
	    return utils.contains(this.classes, className);
	  }

	  toNode() {
	    var node = document.createElement("img");
	    node.src = this.src;
	    node.alt = this.alt;
	    node.className = "mord"; // Apply inline styles

	    for (var style in this.style) {
	      if (this.style.hasOwnProperty(style)) {
	        // $FlowFixMe
	        node.style[style] = this.style[style];
	      }
	    }

	    return node;
	  }

	  toMarkup() {
	    var markup = "<img  src='" + this.src + " 'alt='" + this.alt + "' "; // Add the styles, after hyphenation

	    var styles = "";

	    for (var style in this.style) {
	      if (this.style.hasOwnProperty(style)) {
	        styles += utils.hyphenate(style) + ":" + this.style[style] + ";";
	      }
	    }

	    if (styles) {
	      markup += " style=\"" + utils.escape(styles) + "\"";
	    }

	    markup += "'/>";
	    return markup;
	  }

	}
	var iCombinations = {
	  'î': '\u0131\u0302',
	  'ï': '\u0131\u0308',
	  'í': '\u0131\u0301',
	  // 'ī': '\u0131\u0304', // enable when we add Extended Latin
	  'ì': '\u0131\u0300'
	};
	/**
	 * A symbol node contains information about a single symbol. It either renders
	 * to a single text node, or a span with a single text node in it, depending on
	 * whether it has CSS classes, styles, or needs italic correction.
	 */

	class SymbolNode {
	  constructor(text, height, depth, italic, skew, width, classes, style) {
	    this.text = void 0;
	    this.height = void 0;
	    this.depth = void 0;
	    this.italic = void 0;
	    this.skew = void 0;
	    this.width = void 0;
	    this.maxFontSize = void 0;
	    this.classes = void 0;
	    this.style = void 0;
	    this.text = text;
	    this.height = height || 0;
	    this.depth = depth || 0;
	    this.italic = italic || 0;
	    this.skew = skew || 0;
	    this.width = width || 0;
	    this.classes = classes || [];
	    this.style = style || {};
	    this.maxFontSize = 0; // Mark text from non-Latin scripts with specific classes so that we
	    // can specify which fonts to use.  This allows us to render these
	    // characters with a serif font in situations where the browser would
	    // either default to a sans serif or render a placeholder character.
	    // We use CSS class names like cjk_fallback, hangul_fallback and
	    // brahmic_fallback. See ./unicodeScripts.js for the set of possible
	    // script names

	    var script = scriptFromCodepoint(this.text.charCodeAt(0));

	    if (script) {
	      this.classes.push(script + "_fallback");
	    }

	    if (/[îïíì]/.test(this.text)) {
	      // add ī when we add Extended Latin
	      this.text = iCombinations[this.text];
	    }
	  }

	  hasClass(className) {
	    return utils.contains(this.classes, className);
	  }
	  /**
	   * Creates a text node or span from a symbol node. Note that a span is only
	   * created if it is needed.
	   */


	  toNode() {
	    var node = document.createTextNode(this.text);
	    var span = null;

	    if (this.italic > 0) {
	      span = document.createElement("span");
	      span.style.marginRight = makeEm(this.italic);
	    }

	    if (this.classes.length > 0) {
	      span = span || document.createElement("span");
	      span.className = createClass(this.classes);
	    }

	    for (var style in this.style) {
	      if (this.style.hasOwnProperty(style)) {
	        span = span || document.createElement("span"); // $FlowFixMe Flow doesn't seem to understand span.style's type.

	        span.style[style] = this.style[style];
	      }
	    }

	    if (span) {
	      span.appendChild(node);
	      return span;
	    } else {
	      return node;
	    }
	  }
	  /**
	   * Creates markup for a symbol node.
	   */


	  toMarkup() {
	    // TODO(alpert): More duplication than I'd like from
	    // span.prototype.toMarkup and symbolNode.prototype.toNode...
	    var needsSpan = false;
	    var markup = "<span";

	    if (this.classes.length) {
	      needsSpan = true;
	      markup += " class=\"";
	      markup += utils.escape(createClass(this.classes));
	      markup += "\"";
	    }

	    var styles = "";

	    if (this.italic > 0) {
	      styles += "margin-right:" + this.italic + "em;";
	    }

	    for (var style in this.style) {
	      if (this.style.hasOwnProperty(style)) {
	        styles += utils.hyphenate(style) + ":" + this.style[style] + ";";
	      }
	    }

	    if (styles) {
	      needsSpan = true;
	      markup += " style=\"" + utils.escape(styles) + "\"";
	    }

	    var escaped = utils.escape(this.text);

	    if (needsSpan) {
	      markup += ">";
	      markup += escaped;
	      markup += "</span>";
	      return markup;
	    } else {
	      return escaped;
	    }
	  }

	}
	/**
	 * SVG nodes are used to render stretchy wide elements.
	 */

	class SvgNode {
	  constructor(children, attributes) {
	    this.children = void 0;
	    this.attributes = void 0;
	    this.children = children || [];
	    this.attributes = attributes || {};
	  }

	  toNode() {
	    var svgNS = "http://www.w3.org/2000/svg";
	    var node = document.createElementNS(svgNS, "svg"); // Apply attributes

	    for (var attr in this.attributes) {
	      if (Object.prototype.hasOwnProperty.call(this.attributes, attr)) {
	        node.setAttribute(attr, this.attributes[attr]);
	      }
	    }

	    for (var i = 0; i < this.children.length; i++) {
	      node.appendChild(this.children[i].toNode());
	    }

	    return node;
	  }

	  toMarkup() {
	    var markup = "<svg xmlns=\"http://www.w3.org/2000/svg\""; // Apply attributes

	    for (var attr in this.attributes) {
	      if (Object.prototype.hasOwnProperty.call(this.attributes, attr)) {
	        markup += " " + attr + "='" + this.attributes[attr] + "'";
	      }
	    }

	    markup += ">";

	    for (var i = 0; i < this.children.length; i++) {
	      markup += this.children[i].toMarkup();
	    }

	    markup += "</svg>";
	    return markup;
	  }

	}
	class PathNode {
	  constructor(pathName, alternate) {
	    this.pathName = void 0;
	    this.alternate = void 0;
	    this.pathName = pathName;
	    this.alternate = alternate; // Used only for \sqrt, \phase, & tall delims
	  }

	  toNode() {
	    var svgNS = "http://www.w3.org/2000/svg";
	    var node = document.createElementNS(svgNS, "path");

	    if (this.alternate) {
	      node.setAttribute("d", this.alternate);
	    } else {
	      node.setAttribute("d", path[this.pathName]);
	    }

	    return node;
	  }

	  toMarkup() {
	    if (this.alternate) {
	      return "<path d='" + this.alternate + "'/>";
	    } else {
	      return "<path d='" + path[this.pathName] + "'/>";
	    }
	  }

	}
	class LineNode {
	  constructor(attributes) {
	    this.attributes = void 0;
	    this.attributes = attributes || {};
	  }

	  toNode() {
	    var svgNS = "http://www.w3.org/2000/svg";
	    var node = document.createElementNS(svgNS, "line"); // Apply attributes

	    for (var attr in this.attributes) {
	      if (Object.prototype.hasOwnProperty.call(this.attributes, attr)) {
	        node.setAttribute(attr, this.attributes[attr]);
	      }
	    }

	    return node;
	  }

	  toMarkup() {
	    var markup = "<line";

	    for (var attr in this.attributes) {
	      if (Object.prototype.hasOwnProperty.call(this.attributes, attr)) {
	        markup += " " + attr + "='" + this.attributes[attr] + "'";
	      }
	    }

	    markup += "/>";
	    return markup;
	  }

	}
	function assertSymbolDomNode(group) {
	  if (group instanceof SymbolNode) {
	    return group;
	  } else {
	    throw new Error("Expected symbolNode but got " + String(group) + ".");
	  }
	}
	function assertSpan(group) {
	  if (group instanceof Span) {
	    return group;
	  } else {
	    throw new Error("Expected span<HtmlDomNode> but got " + String(group) + ".");
	  }
	}

	/**
	 * This file holds a list of all no-argument functions and single-character
	 * symbols (like 'a' or ';').
	 *
	 * For each of the symbols, there are three properties they can have:
	 * - font (required): the font to be used for this symbol. Either "main" (the
	     normal font), or "ams" (the ams fonts).
	 * - group (required): the ParseNode group type the symbol should have (i.e.
	     "textord", "mathord", etc).
	     See https://github.com/KaTeX/KaTeX/wiki/Examining-TeX#group-types
	 * - replace: the character that this symbol or function should be
	 *   replaced with (i.e. "\phi" has a replace value of "\u03d5", the phi
	 *   character in the main font).
	 *
	 * The outermost map in the table indicates what mode the symbols should be
	 * accepted in (e.g. "math" or "text").
	 */
	// Some of these have a "-token" suffix since these are also used as `ParseNode`
	// types for raw text tokens, and we want to avoid conflicts with higher-level
	// `ParseNode` types. These `ParseNode`s are constructed within `Parser` by
	// looking up the `symbols` map.
	var ATOMS = {
	  "bin": 1,
	  "close": 1,
	  "inner": 1,
	  "open": 1,
	  "punct": 1,
	  "rel": 1
	};
	var NON_ATOMS = {
	  "accent-token": 1,
	  "mathord": 1,
	  "op-token": 1,
	  "spacing": 1,
	  "textord": 1
	};
	var symbols = {
	  "math": {},
	  "text": {}
	};
	/** `acceptUnicodeChar = true` is only applicable if `replace` is set. */

	function defineSymbol(mode, font, group, replace, name, acceptUnicodeChar) {
	  symbols[mode][name] = {
	    font,
	    group,
	    replace
	  };

	  if (acceptUnicodeChar && replace) {
	    symbols[mode][replace] = symbols[mode][name];
	  }
	} // Some abbreviations for commonly used strings.
	// This helps minify the code, and also spotting typos using jshint.
	// modes:

	var math = "math";
	var text = "text"; // fonts:

	var main = "main";
	var ams = "ams"; // groups:

	var accent = "accent-token";
	var bin = "bin";
	var close = "close";
	var inner = "inner";
	var mathord = "mathord";
	var op = "op-token";
	var open = "open";
	var punct = "punct";
	var rel = "rel";
	var spacing = "spacing";
	var textord = "textord"; // Now comes the symbol table
	// Relation Symbols

	defineSymbol(math, main, rel, "\u2261", "\\equiv", true);
	defineSymbol(math, main, rel, "\u227a", "\\prec", true);
	defineSymbol(math, main, rel, "\u227b", "\\succ", true);
	defineSymbol(math, main, rel, "\u223c", "\\sim", true);
	defineSymbol(math, main, rel, "\u22a5", "\\perp");
	defineSymbol(math, main, rel, "\u2aaf", "\\preceq", true);
	defineSymbol(math, main, rel, "\u2ab0", "\\succeq", true);
	defineSymbol(math, main, rel, "\u2243", "\\simeq", true);
	defineSymbol(math, main, rel, "\u2223", "\\mid", true);
	defineSymbol(math, main, rel, "\u226a", "\\ll", true);
	defineSymbol(math, main, rel, "\u226b", "\\gg", true);
	defineSymbol(math, main, rel, "\u224d", "\\asymp", true);
	defineSymbol(math, main, rel, "\u2225", "\\parallel");
	defineSymbol(math, main, rel, "\u22c8", "\\bowtie", true);
	defineSymbol(math, main, rel, "\u2323", "\\smile", true);
	defineSymbol(math, main, rel, "\u2291", "\\sqsubseteq", true);
	defineSymbol(math, main, rel, "\u2292", "\\sqsupseteq", true);
	defineSymbol(math, main, rel, "\u2250", "\\doteq", true);
	defineSymbol(math, main, rel, "\u2322", "\\frown", true);
	defineSymbol(math, main, rel, "\u220b", "\\ni", true);
	defineSymbol(math, main, rel, "\u221d", "\\propto", true);
	defineSymbol(math, main, rel, "\u22a2", "\\vdash", true);
	defineSymbol(math, main, rel, "\u22a3", "\\dashv", true);
	defineSymbol(math, main, rel, "\u220b", "\\owns"); // Punctuation

	defineSymbol(math, main, punct, "\u002e", "\\ldotp");
	defineSymbol(math, main, punct, "\u22c5", "\\cdotp"); // Misc Symbols

	defineSymbol(math, main, textord, "\u0023", "\\#");
	defineSymbol(text, main, textord, "\u0023", "\\#");
	defineSymbol(math, main, textord, "\u0026", "\\&");
	defineSymbol(text, main, textord, "\u0026", "\\&");
	defineSymbol(math, main, textord, "\u2135", "\\aleph", true);
	defineSymbol(math, main, textord, "\u2200", "\\forall", true);
	defineSymbol(math, main, textord, "\u210f", "\\hbar", true);
	defineSymbol(math, main, textord, "\u2203", "\\exists", true);
	defineSymbol(math, main, textord, "\u2207", "\\nabla", true);
	defineSymbol(math, main, textord, "\u266d", "\\flat", true);
	defineSymbol(math, main, textord, "\u2113", "\\ell", true);
	defineSymbol(math, main, textord, "\u266e", "\\natural", true);
	defineSymbol(math, main, textord, "\u2663", "\\clubsuit", true);
	defineSymbol(math, main, textord, "\u2118", "\\wp", true);
	defineSymbol(math, main, textord, "\u266f", "\\sharp", true);
	defineSymbol(math, main, textord, "\u2662", "\\diamondsuit", true);
	defineSymbol(math, main, textord, "\u211c", "\\Re", true);
	defineSymbol(math, main, textord, "\u2661", "\\heartsuit", true);
	defineSymbol(math, main, textord, "\u2111", "\\Im", true);
	defineSymbol(math, main, textord, "\u2660", "\\spadesuit", true);
	defineSymbol(math, main, textord, "\u00a7", "\\S", true);
	defineSymbol(text, main, textord, "\u00a7", "\\S");
	defineSymbol(math, main, textord, "\u00b6", "\\P", true);
	defineSymbol(text, main, textord, "\u00b6", "\\P"); // Math and Text

	defineSymbol(math, main, textord, "\u2020", "\\dag");
	defineSymbol(text, main, textord, "\u2020", "\\dag");
	defineSymbol(text, main, textord, "\u2020", "\\textdagger");
	defineSymbol(math, main, textord, "\u2021", "\\ddag");
	defineSymbol(text, main, textord, "\u2021", "\\ddag");
	defineSymbol(text, main, textord, "\u2021", "\\textdaggerdbl"); // Large Delimiters

	defineSymbol(math, main, close, "\u23b1", "\\rmoustache", true);
	defineSymbol(math, main, open, "\u23b0", "\\lmoustache", true);
	defineSymbol(math, main, close, "\u27ef", "\\rgroup", true);
	defineSymbol(math, main, open, "\u27ee", "\\lgroup", true); // Binary Operators

	defineSymbol(math, main, bin, "\u2213", "\\mp", true);
	defineSymbol(math, main, bin, "\u2296", "\\ominus", true);
	defineSymbol(math, main, bin, "\u228e", "\\uplus", true);
	defineSymbol(math, main, bin, "\u2293", "\\sqcap", true);
	defineSymbol(math, main, bin, "\u2217", "\\ast");
	defineSymbol(math, main, bin, "\u2294", "\\sqcup", true);
	defineSymbol(math, main, bin, "\u25ef", "\\bigcirc", true);
	defineSymbol(math, main, bin, "\u2219", "\\bullet", true);
	defineSymbol(math, main, bin, "\u2021", "\\ddagger");
	defineSymbol(math, main, bin, "\u2240", "\\wr", true);
	defineSymbol(math, main, bin, "\u2a3f", "\\amalg");
	defineSymbol(math, main, bin, "\u0026", "\\And"); // from amsmath
	// Arrow Symbols

	defineSymbol(math, main, rel, "\u27f5", "\\longleftarrow", true);
	defineSymbol(math, main, rel, "\u21d0", "\\Leftarrow", true);
	defineSymbol(math, main, rel, "\u27f8", "\\Longleftarrow", true);
	defineSymbol(math, main, rel, "\u27f6", "\\longrightarrow", true);
	defineSymbol(math, main, rel, "\u21d2", "\\Rightarrow", true);
	defineSymbol(math, main, rel, "\u27f9", "\\Longrightarrow", true);
	defineSymbol(math, main, rel, "\u2194", "\\leftrightarrow", true);
	defineSymbol(math, main, rel, "\u27f7", "\\longleftrightarrow", true);
	defineSymbol(math, main, rel, "\u21d4", "\\Leftrightarrow", true);
	defineSymbol(math, main, rel, "\u27fa", "\\Longleftrightarrow", true);
	defineSymbol(math, main, rel, "\u21a6", "\\mapsto", true);
	defineSymbol(math, main, rel, "\u27fc", "\\longmapsto", true);
	defineSymbol(math, main, rel, "\u2197", "\\nearrow", true);
	defineSymbol(math, main, rel, "\u21a9", "\\hookleftarrow", true);
	defineSymbol(math, main, rel, "\u21aa", "\\hookrightarrow", true);
	defineSymbol(math, main, rel, "\u2198", "\\searrow", true);
	defineSymbol(math, main, rel, "\u21bc", "\\leftharpoonup", true);
	defineSymbol(math, main, rel, "\u21c0", "\\rightharpoonup", true);
	defineSymbol(math, main, rel, "\u2199", "\\swarrow", true);
	defineSymbol(math, main, rel, "\u21bd", "\\leftharpoondown", true);
	defineSymbol(math, main, rel, "\u21c1", "\\rightharpoondown", true);
	defineSymbol(math, main, rel, "\u2196", "\\nwarrow", true);
	defineSymbol(math, main, rel, "\u21cc", "\\rightleftharpoons", true); // AMS Negated Binary Relations

	defineSymbol(math, ams, rel, "\u226e", "\\nless", true); // Symbol names preceeded by "@" each have a corresponding macro.

	defineSymbol(math, ams, rel, "\ue010", "\\@nleqslant");
	defineSymbol(math, ams, rel, "\ue011", "\\@nleqq");
	defineSymbol(math, ams, rel, "\u2a87", "\\lneq", true);
	defineSymbol(math, ams, rel, "\u2268", "\\lneqq", true);
	defineSymbol(math, ams, rel, "\ue00c", "\\@lvertneqq");
	defineSymbol(math, ams, rel, "\u22e6", "\\lnsim", true);
	defineSymbol(math, ams, rel, "\u2a89", "\\lnapprox", true);
	defineSymbol(math, ams, rel, "\u2280", "\\nprec", true); // unicode-math maps \u22e0 to \npreccurlyeq. We'll use the AMS synonym.

	defineSymbol(math, ams, rel, "\u22e0", "\\npreceq", true);
	defineSymbol(math, ams, rel, "\u22e8", "\\precnsim", true);
	defineSymbol(math, ams, rel, "\u2ab9", "\\precnapprox", true);
	defineSymbol(math, ams, rel, "\u2241", "\\nsim", true);
	defineSymbol(math, ams, rel, "\ue006", "\\@nshortmid");
	defineSymbol(math, ams, rel, "\u2224", "\\nmid", true);
	defineSymbol(math, ams, rel, "\u22ac", "\\nvdash", true);
	defineSymbol(math, ams, rel, "\u22ad", "\\nvDash", true);
	defineSymbol(math, ams, rel, "\u22ea", "\\ntriangleleft");
	defineSymbol(math, ams, rel, "\u22ec", "\\ntrianglelefteq", true);
	defineSymbol(math, ams, rel, "\u228a", "\\subsetneq", true);
	defineSymbol(math, ams, rel, "\ue01a", "\\@varsubsetneq");
	defineSymbol(math, ams, rel, "\u2acb", "\\subsetneqq", true);
	defineSymbol(math, ams, rel, "\ue017", "\\@varsubsetneqq");
	defineSymbol(math, ams, rel, "\u226f", "\\ngtr", true);
	defineSymbol(math, ams, rel, "\ue00f", "\\@ngeqslant");
	defineSymbol(math, ams, rel, "\ue00e", "\\@ngeqq");
	defineSymbol(math, ams, rel, "\u2a88", "\\gneq", true);
	defineSymbol(math, ams, rel, "\u2269", "\\gneqq", true);
	defineSymbol(math, ams, rel, "\ue00d", "\\@gvertneqq");
	defineSymbol(math, ams, rel, "\u22e7", "\\gnsim", true);
	defineSymbol(math, ams, rel, "\u2a8a", "\\gnapprox", true);
	defineSymbol(math, ams, rel, "\u2281", "\\nsucc", true); // unicode-math maps \u22e1 to \nsucccurlyeq. We'll use the AMS synonym.

	defineSymbol(math, ams, rel, "\u22e1", "\\nsucceq", true);
	defineSymbol(math, ams, rel, "\u22e9", "\\succnsim", true);
	defineSymbol(math, ams, rel, "\u2aba", "\\succnapprox", true); // unicode-math maps \u2246 to \simneqq. We'll use the AMS synonym.

	defineSymbol(math, ams, rel, "\u2246", "\\ncong", true);
	defineSymbol(math, ams, rel, "\ue007", "\\@nshortparallel");
	defineSymbol(math, ams, rel, "\u2226", "\\nparallel", true);
	defineSymbol(math, ams, rel, "\u22af", "\\nVDash", true);
	defineSymbol(math, ams, rel, "\u22eb", "\\ntriangleright");
	defineSymbol(math, ams, rel, "\u22ed", "\\ntrianglerighteq", true);
	defineSymbol(math, ams, rel, "\ue018", "\\@nsupseteqq");
	defineSymbol(math, ams, rel, "\u228b", "\\supsetneq", true);
	defineSymbol(math, ams, rel, "\ue01b", "\\@varsupsetneq");
	defineSymbol(math, ams, rel, "\u2acc", "\\supsetneqq", true);
	defineSymbol(math, ams, rel, "\ue019", "\\@varsupsetneqq");
	defineSymbol(math, ams, rel, "\u22ae", "\\nVdash", true);
	defineSymbol(math, ams, rel, "\u2ab5", "\\precneqq", true);
	defineSymbol(math, ams, rel, "\u2ab6", "\\succneqq", true);
	defineSymbol(math, ams, rel, "\ue016", "\\@nsubseteqq");
	defineSymbol(math, ams, bin, "\u22b4", "\\unlhd");
	defineSymbol(math, ams, bin, "\u22b5", "\\unrhd"); // AMS Negated Arrows

	defineSymbol(math, ams, rel, "\u219a", "\\nleftarrow", true);
	defineSymbol(math, ams, rel, "\u219b", "\\nrightarrow", true);
	defineSymbol(math, ams, rel, "\u21cd", "\\nLeftarrow", true);
	defineSymbol(math, ams, rel, "\u21cf", "\\nRightarrow", true);
	defineSymbol(math, ams, rel, "\u21ae", "\\nleftrightarrow", true);
	defineSymbol(math, ams, rel, "\u21ce", "\\nLeftrightarrow", true); // AMS Misc

	defineSymbol(math, ams, rel, "\u25b3", "\\vartriangle");
	defineSymbol(math, ams, textord, "\u210f", "\\hslash");
	defineSymbol(math, ams, textord, "\u25bd", "\\triangledown");
	defineSymbol(math, ams, textord, "\u25ca", "\\lozenge");
	defineSymbol(math, ams, textord, "\u24c8", "\\circledS");
	defineSymbol(math, ams, textord, "\u00ae", "\\circledR");
	defineSymbol(text, ams, textord, "\u00ae", "\\circledR");
	defineSymbol(math, ams, textord, "\u2221", "\\measuredangle", true);
	defineSymbol(math, ams, textord, "\u2204", "\\nexists");
	defineSymbol(math, ams, textord, "\u2127", "\\mho");
	defineSymbol(math, ams, textord, "\u2132", "\\Finv", true);
	defineSymbol(math, ams, textord, "\u2141", "\\Game", true);
	defineSymbol(math, ams, textord, "\u2035", "\\backprime");
	defineSymbol(math, ams, textord, "\u25b2", "\\blacktriangle");
	defineSymbol(math, ams, textord, "\u25bc", "\\blacktriangledown");
	defineSymbol(math, ams, textord, "\u25a0", "\\blacksquare");
	defineSymbol(math, ams, textord, "\u29eb", "\\blacklozenge");
	defineSymbol(math, ams, textord, "\u2605", "\\bigstar");
	defineSymbol(math, ams, textord, "\u2222", "\\sphericalangle", true);
	defineSymbol(math, ams, textord, "\u2201", "\\complement", true); // unicode-math maps U+F0 to \matheth. We map to AMS function \eth

	defineSymbol(math, ams, textord, "\u00f0", "\\eth", true);
	defineSymbol(text, main, textord, "\u00f0", "\u00f0");
	defineSymbol(math, ams, textord, "\u2571", "\\diagup");
	defineSymbol(math, ams, textord, "\u2572", "\\diagdown");
	defineSymbol(math, ams, textord, "\u25a1", "\\square");
	defineSymbol(math, ams, textord, "\u25a1", "\\Box");
	defineSymbol(math, ams, textord, "\u25ca", "\\Diamond"); // unicode-math maps U+A5 to \mathyen. We map to AMS function \yen

	defineSymbol(math, ams, textord, "\u00a5", "\\yen", true);
	defineSymbol(text, ams, textord, "\u00a5", "\\yen", true);
	defineSymbol(math, ams, textord, "\u2713", "\\checkmark", true);
	defineSymbol(text, ams, textord, "\u2713", "\\checkmark"); // AMS Hebrew

	defineSymbol(math, ams, textord, "\u2136", "\\beth", true);
	defineSymbol(math, ams, textord, "\u2138", "\\daleth", true);
	defineSymbol(math, ams, textord, "\u2137", "\\gimel", true); // AMS Greek

	defineSymbol(math, ams, textord, "\u03dd", "\\digamma", true);
	defineSymbol(math, ams, textord, "\u03f0", "\\varkappa"); // AMS Delimiters

	defineSymbol(math, ams, open, "\u250c", "\\@ulcorner", true);
	defineSymbol(math, ams, close, "\u2510", "\\@urcorner", true);
	defineSymbol(math, ams, open, "\u2514", "\\@llcorner", true);
	defineSymbol(math, ams, close, "\u2518", "\\@lrcorner", true); // AMS Binary Relations

	defineSymbol(math, ams, rel, "\u2266", "\\leqq", true);
	defineSymbol(math, ams, rel, "\u2a7d", "\\leqslant", true);
	defineSymbol(math, ams, rel, "\u2a95", "\\eqslantless", true);
	defineSymbol(math, ams, rel, "\u2272", "\\lesssim", true);
	defineSymbol(math, ams, rel, "\u2a85", "\\lessapprox", true);
	defineSymbol(math, ams, rel, "\u224a", "\\approxeq", true);
	defineSymbol(math, ams, bin, "\u22d6", "\\lessdot");
	defineSymbol(math, ams, rel, "\u22d8", "\\lll", true);
	defineSymbol(math, ams, rel, "\u2276", "\\lessgtr", true);
	defineSymbol(math, ams, rel, "\u22da", "\\lesseqgtr", true);
	defineSymbol(math, ams, rel, "\u2a8b", "\\lesseqqgtr", true);
	defineSymbol(math, ams, rel, "\u2251", "\\doteqdot");
	defineSymbol(math, ams, rel, "\u2253", "\\risingdotseq", true);
	defineSymbol(math, ams, rel, "\u2252", "\\fallingdotseq", true);
	defineSymbol(math, ams, rel, "\u223d", "\\backsim", true);
	defineSymbol(math, ams, rel, "\u22cd", "\\backsimeq", true);
	defineSymbol(math, ams, rel, "\u2ac5", "\\subseteqq", true);
	defineSymbol(math, ams, rel, "\u22d0", "\\Subset", true);
	defineSymbol(math, ams, rel, "\u228f", "\\sqsubset", true);
	defineSymbol(math, ams, rel, "\u227c", "\\preccurlyeq", true);
	defineSymbol(math, ams, rel, "\u22de", "\\curlyeqprec", true);
	defineSymbol(math, ams, rel, "\u227e", "\\precsim", true);
	defineSymbol(math, ams, rel, "\u2ab7", "\\precapprox", true);
	defineSymbol(math, ams, rel, "\u22b2", "\\vartriangleleft");
	defineSymbol(math, ams, rel, "\u22b4", "\\trianglelefteq");
	defineSymbol(math, ams, rel, "\u22a8", "\\vDash", true);
	defineSymbol(math, ams, rel, "\u22aa", "\\Vvdash", true);
	defineSymbol(math, ams, rel, "\u2323", "\\smallsmile");
	defineSymbol(math, ams, rel, "\u2322", "\\smallfrown");
	defineSymbol(math, ams, rel, "\u224f", "\\bumpeq", true);
	defineSymbol(math, ams, rel, "\u224e", "\\Bumpeq", true);
	defineSymbol(math, ams, rel, "\u2267", "\\geqq", true);
	defineSymbol(math, ams, rel, "\u2a7e", "\\geqslant", true);
	defineSymbol(math, ams, rel, "\u2a96", "\\eqslantgtr", true);
	defineSymbol(math, ams, rel, "\u2273", "\\gtrsim", true);
	defineSymbol(math, ams, rel, "\u2a86", "\\gtrapprox", true);
	defineSymbol(math, ams, bin, "\u22d7", "\\gtrdot");
	defineSymbol(math, ams, rel, "\u22d9", "\\ggg", true);
	defineSymbol(math, ams, rel, "\u2277", "\\gtrless", true);
	defineSymbol(math, ams, rel, "\u22db", "\\gtreqless", true);
	defineSymbol(math, ams, rel, "\u2a8c", "\\gtreqqless", true);
	defineSymbol(math, ams, rel, "\u2256", "\\eqcirc", true);
	defineSymbol(math, ams, rel, "\u2257", "\\circeq", true);
	defineSymbol(math, ams, rel, "\u225c", "\\triangleq", true);
	defineSymbol(math, ams, rel, "\u223c", "\\thicksim");
	defineSymbol(math, ams, rel, "\u2248", "\\thickapprox");
	defineSymbol(math, ams, rel, "\u2ac6", "\\supseteqq", true);
	defineSymbol(math, ams, rel, "\u22d1", "\\Supset", true);
	defineSymbol(math, ams, rel, "\u2290", "\\sqsupset", true);
	defineSymbol(math, ams, rel, "\u227d", "\\succcurlyeq", true);
	defineSymbol(math, ams, rel, "\u22df", "\\curlyeqsucc", true);
	defineSymbol(math, ams, rel, "\u227f", "\\succsim", true);
	defineSymbol(math, ams, rel, "\u2ab8", "\\succapprox", true);
	defineSymbol(math, ams, rel, "\u22b3", "\\vartriangleright");
	defineSymbol(math, ams, rel, "\u22b5", "\\trianglerighteq");
	defineSymbol(math, ams, rel, "\u22a9", "\\Vdash", true);
	defineSymbol(math, ams, rel, "\u2223", "\\shortmid");
	defineSymbol(math, ams, rel, "\u2225", "\\shortparallel");
	defineSymbol(math, ams, rel, "\u226c", "\\between", true);
	defineSymbol(math, ams, rel, "\u22d4", "\\pitchfork", true);
	defineSymbol(math, ams, rel, "\u221d", "\\varpropto");
	defineSymbol(math, ams, rel, "\u25c0", "\\blacktriangleleft"); // unicode-math says that \therefore is a mathord atom.
	// We kept the amssymb atom type, which is rel.

	defineSymbol(math, ams, rel, "\u2234", "\\therefore", true);
	defineSymbol(math, ams, rel, "\u220d", "\\backepsilon");
	defineSymbol(math, ams, rel, "\u25b6", "\\blacktriangleright"); // unicode-math says that \because is a mathord atom.
	// We kept the amssymb atom type, which is rel.

	defineSymbol(math, ams, rel, "\u2235", "\\because", true);
	defineSymbol(math, ams, rel, "\u22d8", "\\llless");
	defineSymbol(math, ams, rel, "\u22d9", "\\gggtr");
	defineSymbol(math, ams, bin, "\u22b2", "\\lhd");
	defineSymbol(math, ams, bin, "\u22b3", "\\rhd");
	defineSymbol(math, ams, rel, "\u2242", "\\eqsim", true);
	defineSymbol(math, main, rel, "\u22c8", "\\Join");
	defineSymbol(math, ams, rel, "\u2251", "\\Doteq", true); // AMS Binary Operators

	defineSymbol(math, ams, bin, "\u2214", "\\dotplus", true);
	defineSymbol(math, ams, bin, "\u2216", "\\smallsetminus");
	defineSymbol(math, ams, bin, "\u22d2", "\\Cap", true);
	defineSymbol(math, ams, bin, "\u22d3", "\\Cup", true);
	defineSymbol(math, ams, bin, "\u2a5e", "\\doublebarwedge", true);
	defineSymbol(math, ams, bin, "\u229f", "\\boxminus", true);
	defineSymbol(math, ams, bin, "\u229e", "\\boxplus", true);
	defineSymbol(math, ams, bin, "\u22c7", "\\divideontimes", true);
	defineSymbol(math, ams, bin, "\u22c9", "\\ltimes", true);
	defineSymbol(math, ams, bin, "\u22ca", "\\rtimes", true);
	defineSymbol(math, ams, bin, "\u22cb", "\\leftthreetimes", true);
	defineSymbol(math, ams, bin, "\u22cc", "\\rightthreetimes", true);
	defineSymbol(math, ams, bin, "\u22cf", "\\curlywedge", true);
	defineSymbol(math, ams, bin, "\u22ce", "\\curlyvee", true);
	defineSymbol(math, ams, bin, "\u229d", "\\circleddash", true);
	defineSymbol(math, ams, bin, "\u229b", "\\circledast", true);
	defineSymbol(math, ams, bin, "\u22c5", "\\centerdot");
	defineSymbol(math, ams, bin, "\u22ba", "\\intercal", true);
	defineSymbol(math, ams, bin, "\u22d2", "\\doublecap");
	defineSymbol(math, ams, bin, "\u22d3", "\\doublecup");
	defineSymbol(math, ams, bin, "\u22a0", "\\boxtimes", true); // AMS Arrows
	// Note: unicode-math maps \u21e2 to their own function \rightdasharrow.
	// We'll map it to AMS function \dashrightarrow. It produces the same atom.

	defineSymbol(math, ams, rel, "\u21e2", "\\dashrightarrow", true); // unicode-math maps \u21e0 to \leftdasharrow. We'll use the AMS synonym.

	defineSymbol(math, ams, rel, "\u21e0", "\\dashleftarrow", true);
	defineSymbol(math, ams, rel, "\u21c7", "\\leftleftarrows", true);
	defineSymbol(math, ams, rel, "\u21c6", "\\leftrightarrows", true);
	defineSymbol(math, ams, rel, "\u21da", "\\Lleftarrow", true);
	defineSymbol(math, ams, rel, "\u219e", "\\twoheadleftarrow", true);
	defineSymbol(math, ams, rel, "\u21a2", "\\leftarrowtail", true);
	defineSymbol(math, ams, rel, "\u21ab", "\\looparrowleft", true);
	defineSymbol(math, ams, rel, "\u21cb", "\\leftrightharpoons", true);
	defineSymbol(math, ams, rel, "\u21b6", "\\curvearrowleft", true); // unicode-math maps \u21ba to \acwopencirclearrow. We'll use the AMS synonym.

	defineSymbol(math, ams, rel, "\u21ba", "\\circlearrowleft", true);
	defineSymbol(math, ams, rel, "\u21b0", "\\Lsh", true);
	defineSymbol(math, ams, rel, "\u21c8", "\\upuparrows", true);
	defineSymbol(math, ams, rel, "\u21bf", "\\upharpoonleft", true);
	defineSymbol(math, ams, rel, "\u21c3", "\\downharpoonleft", true);
	defineSymbol(math, main, rel, "\u22b6", "\\origof", true); // not in font

	defineSymbol(math, main, rel, "\u22b7", "\\imageof", true); // not in font

	defineSymbol(math, ams, rel, "\u22b8", "\\multimap", true);
	defineSymbol(math, ams, rel, "\u21ad", "\\leftrightsquigarrow", true);
	defineSymbol(math, ams, rel, "\u21c9", "\\rightrightarrows", true);
	defineSymbol(math, ams, rel, "\u21c4", "\\rightleftarrows", true);
	defineSymbol(math, ams, rel, "\u21a0", "\\twoheadrightarrow", true);
	defineSymbol(math, ams, rel, "\u21a3", "\\rightarrowtail", true);
	defineSymbol(math, ams, rel, "\u21ac", "\\looparrowright", true);
	defineSymbol(math, ams, rel, "\u21b7", "\\curvearrowright", true); // unicode-math maps \u21bb to \cwopencirclearrow. We'll use the AMS synonym.

	defineSymbol(math, ams, rel, "\u21bb", "\\circlearrowright", true);
	defineSymbol(math, ams, rel, "\u21b1", "\\Rsh", true);
	defineSymbol(math, ams, rel, "\u21ca", "\\downdownarrows", true);
	defineSymbol(math, ams, rel, "\u21be", "\\upharpoonright", true);
	defineSymbol(math, ams, rel, "\u21c2", "\\downharpoonright", true);
	defineSymbol(math, ams, rel, "\u21dd", "\\rightsquigarrow", true);
	defineSymbol(math, ams, rel, "\u21dd", "\\leadsto");
	defineSymbol(math, ams, rel, "\u21db", "\\Rrightarrow", true);
	defineSymbol(math, ams, rel, "\u21be", "\\restriction");
	defineSymbol(math, main, textord, "\u2018", "`");
	defineSymbol(math, main, textord, "$", "\\$");
	defineSymbol(text, main, textord, "$", "\\$");
	defineSymbol(text, main, textord, "$", "\\textdollar");
	defineSymbol(math, main, textord, "%", "\\%");
	defineSymbol(text, main, textord, "%", "\\%");
	defineSymbol(math, main, textord, "_", "\\_");
	defineSymbol(text, main, textord, "_", "\\_");
	defineSymbol(text, main, textord, "_", "\\textunderscore");
	defineSymbol(math, main, textord, "\u2220", "\\angle", true);
	defineSymbol(math, main, textord, "\u221e", "\\infty", true);
	defineSymbol(math, main, textord, "\u2032", "\\prime");
	defineSymbol(math, main, textord, "\u25b3", "\\triangle");
	defineSymbol(math, main, textord, "\u0393", "\\Gamma", true);
	defineSymbol(math, main, textord, "\u0394", "\\Delta", true);
	defineSymbol(math, main, textord, "\u0398", "\\Theta", true);
	defineSymbol(math, main, textord, "\u039b", "\\Lambda", true);
	defineSymbol(math, main, textord, "\u039e", "\\Xi", true);
	defineSymbol(math, main, textord, "\u03a0", "\\Pi", true);
	defineSymbol(math, main, textord, "\u03a3", "\\Sigma", true);
	defineSymbol(math, main, textord, "\u03a5", "\\Upsilon", true);
	defineSymbol(math, main, textord, "\u03a6", "\\Phi", true);
	defineSymbol(math, main, textord, "\u03a8", "\\Psi", true);
	defineSymbol(math, main, textord, "\u03a9", "\\Omega", true);
	defineSymbol(math, main, textord, "A", "\u0391");
	defineSymbol(math, main, textord, "B", "\u0392");
	defineSymbol(math, main, textord, "E", "\u0395");
	defineSymbol(math, main, textord, "Z", "\u0396");
	defineSymbol(math, main, textord, "H", "\u0397");
	defineSymbol(math, main, textord, "I", "\u0399");
	defineSymbol(math, main, textord, "K", "\u039A");
	defineSymbol(math, main, textord, "M", "\u039C");
	defineSymbol(math, main, textord, "N", "\u039D");
	defineSymbol(math, main, textord, "O", "\u039F");
	defineSymbol(math, main, textord, "P", "\u03A1");
	defineSymbol(math, main, textord, "T", "\u03A4");
	defineSymbol(math, main, textord, "X", "\u03A7");
	defineSymbol(math, main, textord, "\u00ac", "\\neg", true);
	defineSymbol(math, main, textord, "\u00ac", "\\lnot");
	defineSymbol(math, main, textord, "\u22a4", "\\top");
	defineSymbol(math, main, textord, "\u22a5", "\\bot");
	defineSymbol(math, main, textord, "\u2205", "\\emptyset");
	defineSymbol(math, ams, textord, "\u2205", "\\varnothing");
	defineSymbol(math, main, mathord, "\u03b1", "\\alpha", true);
	defineSymbol(math, main, mathord, "\u03b2", "\\beta", true);
	defineSymbol(math, main, mathord, "\u03b3", "\\gamma", true);
	defineSymbol(math, main, mathord, "\u03b4", "\\delta", true);
	defineSymbol(math, main, mathord, "\u03f5", "\\epsilon", true);
	defineSymbol(math, main, mathord, "\u03b6", "\\zeta", true);
	defineSymbol(math, main, mathord, "\u03b7", "\\eta", true);
	defineSymbol(math, main, mathord, "\u03b8", "\\theta", true);
	defineSymbol(math, main, mathord, "\u03b9", "\\iota", true);
	defineSymbol(math, main, mathord, "\u03ba", "\\kappa", true);
	defineSymbol(math, main, mathord, "\u03bb", "\\lambda", true);
	defineSymbol(math, main, mathord, "\u03bc", "\\mu", true);
	defineSymbol(math, main, mathord, "\u03bd", "\\nu", true);
	defineSymbol(math, main, mathord, "\u03be", "\\xi", true);
	defineSymbol(math, main, mathord, "\u03bf", "\\omicron", true);
	defineSymbol(math, main, mathord, "\u03c0", "\\pi", true);
	defineSymbol(math, main, mathord, "\u03c1", "\\rho", true);
	defineSymbol(math, main, mathord, "\u03c3", "\\sigma", true);
	defineSymbol(math, main, mathord, "\u03c4", "\\tau", true);
	defineSymbol(math, main, mathord, "\u03c5", "\\upsilon", true);
	defineSymbol(math, main, mathord, "\u03d5", "\\phi", true);
	defineSymbol(math, main, mathord, "\u03c7", "\\chi", true);
	defineSymbol(math, main, mathord, "\u03c8", "\\psi", true);
	defineSymbol(math, main, mathord, "\u03c9", "\\omega", true);
	defineSymbol(math, main, mathord, "\u03b5", "\\varepsilon", true);
	defineSymbol(math, main, mathord, "\u03d1", "\\vartheta", true);
	defineSymbol(math, main, mathord, "\u03d6", "\\varpi", true);
	defineSymbol(math, main, mathord, "\u03f1", "\\varrho", true);
	defineSymbol(math, main, mathord, "\u03c2", "\\varsigma", true);
	defineSymbol(math, main, mathord, "\u03c6", "\\varphi", true);
	defineSymbol(math, main, bin, "\u2217", "*", true);
	defineSymbol(math, main, bin, "+", "+");
	defineSymbol(math, main, bin, "\u2212", "-", true);
	defineSymbol(math, main, bin, "\u22c5", "\\cdot", true);
	defineSymbol(math, main, bin, "\u2218", "\\circ", true);
	defineSymbol(math, main, bin, "\u00f7", "\\div", true);
	defineSymbol(math, main, bin, "\u00b1", "\\pm", true);
	defineSymbol(math, main, bin, "\u00d7", "\\times", true);
	defineSymbol(math, main, bin, "\u2229", "\\cap", true);
	defineSymbol(math, main, bin, "\u222a", "\\cup", true);
	defineSymbol(math, main, bin, "\u2216", "\\setminus", true);
	defineSymbol(math, main, bin, "\u2227", "\\land");
	defineSymbol(math, main, bin, "\u2228", "\\lor");
	defineSymbol(math, main, bin, "\u2227", "\\wedge", true);
	defineSymbol(math, main, bin, "\u2228", "\\vee", true);
	defineSymbol(math, main, textord, "\u221a", "\\surd");
	defineSymbol(math, main, open, "\u27e8", "\\langle", true);
	defineSymbol(math, main, open, "\u2223", "\\lvert");
	defineSymbol(math, main, open, "\u2225", "\\lVert");
	defineSymbol(math, main, close, "?", "?");
	defineSymbol(math, main, close, "!", "!");
	defineSymbol(math, main, close, "\u27e9", "\\rangle", true);
	defineSymbol(math, main, close, "\u2223", "\\rvert");
	defineSymbol(math, main, close, "\u2225", "\\rVert");
	defineSymbol(math, main, rel, "=", "=");
	defineSymbol(math, main, rel, ":", ":");
	defineSymbol(math, main, rel, "\u2248", "\\approx", true);
	defineSymbol(math, main, rel, "\u2245", "\\cong", true);
	defineSymbol(math, main, rel, "\u2265", "\\ge");
	defineSymbol(math, main, rel, "\u2265", "\\geq", true);
	defineSymbol(math, main, rel, "\u2190", "\\gets");
	defineSymbol(math, main, rel, ">", "\\gt", true);
	defineSymbol(math, main, rel, "\u2208", "\\in", true);
	defineSymbol(math, main, rel, "\ue020", "\\@not");
	defineSymbol(math, main, rel, "\u2282", "\\subset", true);
	defineSymbol(math, main, rel, "\u2283", "\\supset", true);
	defineSymbol(math, main, rel, "\u2286", "\\subseteq", true);
	defineSymbol(math, main, rel, "\u2287", "\\supseteq", true);
	defineSymbol(math, ams, rel, "\u2288", "\\nsubseteq", true);
	defineSymbol(math, ams, rel, "\u2289", "\\nsupseteq", true);
	defineSymbol(math, main, rel, "\u22a8", "\\models");
	defineSymbol(math, main, rel, "\u2190", "\\leftarrow", true);
	defineSymbol(math, main, rel, "\u2264", "\\le");
	defineSymbol(math, main, rel, "\u2264", "\\leq", true);
	defineSymbol(math, main, rel, "<", "\\lt", true);
	defineSymbol(math, main, rel, "\u2192", "\\rightarrow", true);
	defineSymbol(math, main, rel, "\u2192", "\\to");
	defineSymbol(math, ams, rel, "\u2271", "\\ngeq", true);
	defineSymbol(math, ams, rel, "\u2270", "\\nleq", true);
	defineSymbol(math, main, spacing, "\u00a0", "\\ ");
	defineSymbol(math, main, spacing, "\u00a0", "\\space"); // Ref: LaTeX Source 2e: \DeclareRobustCommand{\nobreakspace}{%

	defineSymbol(math, main, spacing, "\u00a0", "\\nobreakspace");
	defineSymbol(text, main, spacing, "\u00a0", "\\ ");
	defineSymbol(text, main, spacing, "\u00a0", " ");
	defineSymbol(text, main, spacing, "\u00a0", "\\space");
	defineSymbol(text, main, spacing, "\u00a0", "\\nobreakspace");
	defineSymbol(math, main, spacing, null, "\\nobreak");
	defineSymbol(math, main, spacing, null, "\\allowbreak");
	defineSymbol(math, main, punct, ",", ",");
	defineSymbol(math, main, punct, ";", ";");
	defineSymbol(math, ams, bin, "\u22bc", "\\barwedge", true);
	defineSymbol(math, ams, bin, "\u22bb", "\\veebar", true);
	defineSymbol(math, main, bin, "\u2299", "\\odot", true);
	defineSymbol(math, main, bin, "\u2295", "\\oplus", true);
	defineSymbol(math, main, bin, "\u2297", "\\otimes", true);
	defineSymbol(math, main, textord, "\u2202", "\\partial", true);
	defineSymbol(math, main, bin, "\u2298", "\\oslash", true);
	defineSymbol(math, ams, bin, "\u229a", "\\circledcirc", true);
	defineSymbol(math, ams, bin, "\u22a1", "\\boxdot", true);
	defineSymbol(math, main, bin, "\u25b3", "\\bigtriangleup");
	defineSymbol(math, main, bin, "\u25bd", "\\bigtriangledown");
	defineSymbol(math, main, bin, "\u2020", "\\dagger");
	defineSymbol(math, main, bin, "\u22c4", "\\diamond");
	defineSymbol(math, main, bin, "\u22c6", "\\star");
	defineSymbol(math, main, bin, "\u25c3", "\\triangleleft");
	defineSymbol(math, main, bin, "\u25b9", "\\triangleright");
	defineSymbol(math, main, open, "{", "\\{");
	defineSymbol(text, main, textord, "{", "\\{");
	defineSymbol(text, main, textord, "{", "\\textbraceleft");
	defineSymbol(math, main, close, "}", "\\}");
	defineSymbol(text, main, textord, "}", "\\}");
	defineSymbol(text, main, textord, "}", "\\textbraceright");
	defineSymbol(math, main, open, "{", "\\lbrace");
	defineSymbol(math, main, close, "}", "\\rbrace");
	defineSymbol(math, main, open, "[", "\\lbrack", true);
	defineSymbol(text, main, textord, "[", "\\lbrack", true);
	defineSymbol(math, main, close, "]", "\\rbrack", true);
	defineSymbol(text, main, textord, "]", "\\rbrack", true);
	defineSymbol(math, main, open, "(", "\\lparen", true);
	defineSymbol(math, main, close, ")", "\\rparen", true);
	defineSymbol(text, main, textord, "<", "\\textless", true); // in T1 fontenc

	defineSymbol(text, main, textord, ">", "\\textgreater", true); // in T1 fontenc

	defineSymbol(math, main, open, "\u230a", "\\lfloor", true);
	defineSymbol(math, main, close, "\u230b", "\\rfloor", true);
	defineSymbol(math, main, open, "\u2308", "\\lceil", true);
	defineSymbol(math, main, close, "\u2309", "\\rceil", true);
	defineSymbol(math, main, textord, "\\", "\\backslash");
	defineSymbol(math, main, textord, "\u2223", "|");
	defineSymbol(math, main, textord, "\u2223", "\\vert");
	defineSymbol(text, main, textord, "|", "\\textbar", true); // in T1 fontenc

	defineSymbol(math, main, textord, "\u2225", "\\|");
	defineSymbol(math, main, textord, "\u2225", "\\Vert");
	defineSymbol(text, main, textord, "\u2225", "\\textbardbl");
	defineSymbol(text, main, textord, "~", "\\textasciitilde");
	defineSymbol(text, main, textord, "\\", "\\textbackslash");
	defineSymbol(text, main, textord, "^", "\\textasciicircum");
	defineSymbol(math, main, rel, "\u2191", "\\uparrow", true);
	defineSymbol(math, main, rel, "\u21d1", "\\Uparrow", true);
	defineSymbol(math, main, rel, "\u2193", "\\downarrow", true);
	defineSymbol(math, main, rel, "\u21d3", "\\Downarrow", true);
	defineSymbol(math, main, rel, "\u2195", "\\updownarrow", true);
	defineSymbol(math, main, rel, "\u21d5", "\\Updownarrow", true);
	defineSymbol(math, main, op, "\u2210", "\\coprod");
	defineSymbol(math, main, op, "\u22c1", "\\bigvee");
	defineSymbol(math, main, op, "\u22c0", "\\bigwedge");
	defineSymbol(math, main, op, "\u2a04", "\\biguplus");
	defineSymbol(math, main, op, "\u22c2", "\\bigcap");
	defineSymbol(math, main, op, "\u22c3", "\\bigcup");
	defineSymbol(math, main, op, "\u222b", "\\int");
	defineSymbol(math, main, op, "\u222b", "\\intop");
	defineSymbol(math, main, op, "\u222c", "\\iint");
	defineSymbol(math, main, op, "\u222d", "\\iiint");
	defineSymbol(math, main, op, "\u220f", "\\prod");
	defineSymbol(math, main, op, "\u2211", "\\sum");
	defineSymbol(math, main, op, "\u2a02", "\\bigotimes");
	defineSymbol(math, main, op, "\u2a01", "\\bigoplus");
	defineSymbol(math, main, op, "\u2a00", "\\bigodot");
	defineSymbol(math, main, op, "\u222e", "\\oint");
	defineSymbol(math, main, op, "\u222f", "\\oiint");
	defineSymbol(math, main, op, "\u2230", "\\oiiint");
	defineSymbol(math, main, op, "\u2a06", "\\bigsqcup");
	defineSymbol(math, main, op, "\u222b", "\\smallint");
	defineSymbol(text, main, inner, "\u2026", "\\textellipsis");
	defineSymbol(math, main, inner, "\u2026", "\\mathellipsis");
	defineSymbol(text, main, inner, "\u2026", "\\ldots", true);
	defineSymbol(math, main, inner, "\u2026", "\\ldots", true);
	defineSymbol(math, main, inner, "\u22ef", "\\@cdots", true);
	defineSymbol(math, main, inner, "\u22f1", "\\ddots", true);
	defineSymbol(math, main, textord, "\u22ee", "\\varvdots"); // \vdots is a macro

	defineSymbol(math, main, accent, "\u02ca", "\\acute");
	defineSymbol(math, main, accent, "\u02cb", "\\grave");
	defineSymbol(math, main, accent, "\u00a8", "\\ddot");
	defineSymbol(math, main, accent, "\u007e", "\\tilde");
	defineSymbol(math, main, accent, "\u02c9", "\\bar");
	defineSymbol(math, main, accent, "\u02d8", "\\breve");
	defineSymbol(math, main, accent, "\u02c7", "\\check");
	defineSymbol(math, main, accent, "\u005e", "\\hat");
	defineSymbol(math, main, accent, "\u20d7", "\\vec");
	defineSymbol(math, main, accent, "\u02d9", "\\dot");
	defineSymbol(math, main, accent, "\u02da", "\\mathring"); // \imath and \jmath should be invariant to \mathrm, \mathbf, etc., so use PUA

	defineSymbol(math, main, mathord, "\ue131", "\\@imath");
	defineSymbol(math, main, mathord, "\ue237", "\\@jmath");
	defineSymbol(math, main, textord, "\u0131", "\u0131");
	defineSymbol(math, main, textord, "\u0237", "\u0237");
	defineSymbol(text, main, textord, "\u0131", "\\i", true);
	defineSymbol(text, main, textord, "\u0237", "\\j", true);
	defineSymbol(text, main, textord, "\u00df", "\\ss", true);
	defineSymbol(text, main, textord, "\u00e6", "\\ae", true);
	defineSymbol(text, main, textord, "\u0153", "\\oe", true);
	defineSymbol(text, main, textord, "\u00f8", "\\o", true);
	defineSymbol(text, main, textord, "\u00c6", "\\AE", true);
	defineSymbol(text, main, textord, "\u0152", "\\OE", true);
	defineSymbol(text, main, textord, "\u00d8", "\\O", true);
	defineSymbol(text, main, accent, "\u02ca", "\\'"); // acute

	defineSymbol(text, main, accent, "\u02cb", "\\`"); // grave

	defineSymbol(text, main, accent, "\u02c6", "\\^"); // circumflex

	defineSymbol(text, main, accent, "\u02dc", "\\~"); // tilde

	defineSymbol(text, main, accent, "\u02c9", "\\="); // macron

	defineSymbol(text, main, accent, "\u02d8", "\\u"); // breve

	defineSymbol(text, main, accent, "\u02d9", "\\."); // dot above

	defineSymbol(text, main, accent, "\u00b8", "\\c"); // cedilla

	defineSymbol(text, main, accent, "\u02da", "\\r"); // ring above

	defineSymbol(text, main, accent, "\u02c7", "\\v"); // caron

	defineSymbol(text, main, accent, "\u00a8", '\\"'); // diaresis

	defineSymbol(text, main, accent, "\u02dd", "\\H"); // double acute

	defineSymbol(text, main, accent, "\u25ef", "\\textcircled"); // \bigcirc glyph
	// These ligatures are detected and created in Parser.js's `formLigatures`.

	var ligatures = {
	  "--": true,
	  "---": true,
	  "``": true,
	  "''": true
	};
	defineSymbol(text, main, textord, "\u2013", "--", true);
	defineSymbol(text, main, textord, "\u2013", "\\textendash");
	defineSymbol(text, main, textord, "\u2014", "---", true);
	defineSymbol(text, main, textord, "\u2014", "\\textemdash");
	defineSymbol(text, main, textord, "\u2018", "`", true);
	defineSymbol(text, main, textord, "\u2018", "\\textquoteleft");
	defineSymbol(text, main, textord, "\u2019", "'", true);
	defineSymbol(text, main, textord, "\u2019", "\\textquoteright");
	defineSymbol(text, main, textord, "\u201c", "``", true);
	defineSymbol(text, main, textord, "\u201c", "\\textquotedblleft");
	defineSymbol(text, main, textord, "\u201d", "''", true);
	defineSymbol(text, main, textord, "\u201d", "\\textquotedblright"); //  \degree from gensymb package

	defineSymbol(math, main, textord, "\u00b0", "\\degree", true);
	defineSymbol(text, main, textord, "\u00b0", "\\degree"); // \textdegree from inputenc package

	defineSymbol(text, main, textord, "\u00b0", "\\textdegree", true); // TODO: In LaTeX, \pounds can generate a different character in text and math
	// mode, but among our fonts, only Main-Regular defines this character "163".

	defineSymbol(math, main, textord, "\u00a3", "\\pounds");
	defineSymbol(math, main, textord, "\u00a3", "\\mathsterling", true);
	defineSymbol(text, main, textord, "\u00a3", "\\pounds");
	defineSymbol(text, main, textord, "\u00a3", "\\textsterling", true);
	defineSymbol(math, ams, textord, "\u2720", "\\maltese");
	defineSymbol(text, ams, textord, "\u2720", "\\maltese"); // There are lots of symbols which are the same, so we add them in afterwards.
	// All of these are textords in math mode

	var mathTextSymbols = "0123456789/@.\"";

	for (var i = 0; i < mathTextSymbols.length; i++) {
	  var ch = mathTextSymbols.charAt(i);
	  defineSymbol(math, main, textord, ch, ch);
	} // All of these are textords in text mode


	var textSymbols = "0123456789!@*()-=+\";:?/.,";

	for (var _i = 0; _i < textSymbols.length; _i++) {
	  var _ch = textSymbols.charAt(_i);

	  defineSymbol(text, main, textord, _ch, _ch);
	} // All of these are textords in text mode, and mathords in math mode


	var letters = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";

	for (var _i2 = 0; _i2 < letters.length; _i2++) {
	  var _ch2 = letters.charAt(_i2);

	  defineSymbol(math, main, mathord, _ch2, _ch2);
	  defineSymbol(text, main, textord, _ch2, _ch2);
	} // Blackboard bold and script letters in Unicode range


	defineSymbol(math, ams, textord, "C", "\u2102"); // blackboard bold

	defineSymbol(text, ams, textord, "C", "\u2102");
	defineSymbol(math, ams, textord, "H", "\u210D");
	defineSymbol(text, ams, textord, "H", "\u210D");
	defineSymbol(math, ams, textord, "N", "\u2115");
	defineSymbol(text, ams, textord, "N", "\u2115");
	defineSymbol(math, ams, textord, "P", "\u2119");
	defineSymbol(text, ams, textord, "P", "\u2119");
	defineSymbol(math, ams, textord, "Q", "\u211A");
	defineSymbol(text, ams, textord, "Q", "\u211A");
	defineSymbol(math, ams, textord, "R", "\u211D");
	defineSymbol(text, ams, textord, "R", "\u211D");
	defineSymbol(math, ams, textord, "Z", "\u2124");
	defineSymbol(text, ams, textord, "Z", "\u2124");
	defineSymbol(math, main, mathord, "h", "\u210E"); // italic h, Planck constant

	defineSymbol(text, main, mathord, "h", "\u210E"); // The next loop loads wide (surrogate pair) characters.
	// We support some letters in the Unicode range U+1D400 to U+1D7FF,
	// Mathematical Alphanumeric Symbols.
	// Some editors do not deal well with wide characters. So don't write the
	// string into this file. Instead, create the string from the surrogate pair.

	var wideChar = "";

	for (var _i3 = 0; _i3 < letters.length; _i3++) {
	  var _ch3 = letters.charAt(_i3); // The hex numbers in the next line are a surrogate pair.
	  // 0xD835 is the high surrogate for all letters in the range we support.
	  // 0xDC00 is the low surrogate for bold A.


	  wideChar = String.fromCharCode(0xD835, 0xDC00 + _i3); // A-Z a-z bold

	  defineSymbol(math, main, mathord, _ch3, wideChar);
	  defineSymbol(text, main, textord, _ch3, wideChar);
	  wideChar = String.fromCharCode(0xD835, 0xDC34 + _i3); // A-Z a-z italic

	  defineSymbol(math, main, mathord, _ch3, wideChar);
	  defineSymbol(text, main, textord, _ch3, wideChar);
	  wideChar = String.fromCharCode(0xD835, 0xDC68 + _i3); // A-Z a-z bold italic

	  defineSymbol(math, main, mathord, _ch3, wideChar);
	  defineSymbol(text, main, textord, _ch3, wideChar);
	  wideChar = String.fromCharCode(0xD835, 0xDD04 + _i3); // A-Z a-z Fractur

	  defineSymbol(math, main, mathord, _ch3, wideChar);
	  defineSymbol(text, main, textord, _ch3, wideChar);
	  wideChar = String.fromCharCode(0xD835, 0xDDA0 + _i3); // A-Z a-z sans-serif

	  defineSymbol(math, main, mathord, _ch3, wideChar);
	  defineSymbol(text, main, textord, _ch3, wideChar);
	  wideChar = String.fromCharCode(0xD835, 0xDDD4 + _i3); // A-Z a-z sans bold

	  defineSymbol(math, main, mathord, _ch3, wideChar);
	  defineSymbol(text, main, textord, _ch3, wideChar);
	  wideChar = String.fromCharCode(0xD835, 0xDE08 + _i3); // A-Z a-z sans italic

	  defineSymbol(math, main, mathord, _ch3, wideChar);
	  defineSymbol(text, main, textord, _ch3, wideChar);
	  wideChar = String.fromCharCode(0xD835, 0xDE70 + _i3); // A-Z a-z monospace

	  defineSymbol(math, main, mathord, _ch3, wideChar);
	  defineSymbol(text, main, textord, _ch3, wideChar);

	  if (_i3 < 26) {
	    // KaTeX fonts have only capital letters for blackboard bold and script.
	    // See exception for k below.
	    wideChar = String.fromCharCode(0xD835, 0xDD38 + _i3); // A-Z double struck

	    defineSymbol(math, main, mathord, _ch3, wideChar);
	    defineSymbol(text, main, textord, _ch3, wideChar);
	    wideChar = String.fromCharCode(0xD835, 0xDC9C + _i3); // A-Z script

	    defineSymbol(math, main, mathord, _ch3, wideChar);
	    defineSymbol(text, main, textord, _ch3, wideChar);
	  } // TODO: Add bold script when it is supported by a KaTeX font.

	} // "k" is the only double struck lower case letter in the KaTeX fonts.


	wideChar = String.fromCharCode(0xD835, 0xDD5C); // k double struck

	defineSymbol(math, main, mathord, "k", wideChar);
	defineSymbol(text, main, textord, "k", wideChar); // Next, some wide character numerals

	for (var _i4 = 0; _i4 < 10; _i4++) {
	  var _ch4 = _i4.toString();

	  wideChar = String.fromCharCode(0xD835, 0xDFCE + _i4); // 0-9 bold

	  defineSymbol(math, main, mathord, _ch4, wideChar);
	  defineSymbol(text, main, textord, _ch4, wideChar);
	  wideChar = String.fromCharCode(0xD835, 0xDFE2 + _i4); // 0-9 sans serif

	  defineSymbol(math, main, mathord, _ch4, wideChar);
	  defineSymbol(text, main, textord, _ch4, wideChar);
	  wideChar = String.fromCharCode(0xD835, 0xDFEC + _i4); // 0-9 bold sans

	  defineSymbol(math, main, mathord, _ch4, wideChar);
	  defineSymbol(text, main, textord, _ch4, wideChar);
	  wideChar = String.fromCharCode(0xD835, 0xDFF6 + _i4); // 0-9 monospace

	  defineSymbol(math, main, mathord, _ch4, wideChar);
	  defineSymbol(text, main, textord, _ch4, wideChar);
	} // We add these Latin-1 letters as symbols for backwards-compatibility,
	// but they are not actually in the font, nor are they supported by the
	// Unicode accent mechanism, so they fall back to Times font and look ugly.
	// TODO(edemaine): Fix this.


	var extraLatin = "\u00d0\u00de\u00fe";

	for (var _i5 = 0; _i5 < extraLatin.length; _i5++) {
	  var _ch5 = extraLatin.charAt(_i5);

	  defineSymbol(math, main, mathord, _ch5, _ch5);
	  defineSymbol(text, main, textord, _ch5, _ch5);
	}

	/**
	 * This file provides support for Unicode range U+1D400 to U+1D7FF,
	 * Mathematical Alphanumeric Symbols.
	 *
	 * Function wideCharacterFont takes a wide character as input and returns
	 * the font information necessary to render it properly.
	 */
	/**
	 * Data below is from https://www.unicode.org/charts/PDF/U1D400.pdf
	 * That document sorts characters into groups by font type, say bold or italic.
	 *
	 * In the arrays below, each subarray consists three elements:
	 *      * The CSS class of that group when in math mode.
	 *      * The CSS class of that group when in text mode.
	 *      * The font name, so that KaTeX can get font metrics.
	 */

	var wideLatinLetterData = [["mathbf", "textbf", "Main-Bold"], // A-Z bold upright
	["mathbf", "textbf", "Main-Bold"], // a-z bold upright
	["mathnormal", "textit", "Math-Italic"], // A-Z italic
	["mathnormal", "textit", "Math-Italic"], // a-z italic
	["boldsymbol", "boldsymbol", "Main-BoldItalic"], // A-Z bold italic
	["boldsymbol", "boldsymbol", "Main-BoldItalic"], // a-z bold italic
	// Map fancy A-Z letters to script, not calligraphic.
	// This aligns with unicode-math and math fonts (except Cambria Math).
	["mathscr", "textscr", "Script-Regular"], // A-Z script
	["", "", ""], // a-z script.  No font
	["", "", ""], // A-Z bold script. No font
	["", "", ""], // a-z bold script. No font
	["mathfrak", "textfrak", "Fraktur-Regular"], // A-Z Fraktur
	["mathfrak", "textfrak", "Fraktur-Regular"], // a-z Fraktur
	["mathbb", "textbb", "AMS-Regular"], // A-Z double-struck
	["mathbb", "textbb", "AMS-Regular"], // k double-struck
	["", "", ""], // A-Z bold Fraktur No font metrics
	["", "", ""], // a-z bold Fraktur.   No font.
	["mathsf", "textsf", "SansSerif-Regular"], // A-Z sans-serif
	["mathsf", "textsf", "SansSerif-Regular"], // a-z sans-serif
	["mathboldsf", "textboldsf", "SansSerif-Bold"], // A-Z bold sans-serif
	["mathboldsf", "textboldsf", "SansSerif-Bold"], // a-z bold sans-serif
	["mathitsf", "textitsf", "SansSerif-Italic"], // A-Z italic sans-serif
	["mathitsf", "textitsf", "SansSerif-Italic"], // a-z italic sans-serif
	["", "", ""], // A-Z bold italic sans. No font
	["", "", ""], // a-z bold italic sans. No font
	["mathtt", "texttt", "Typewriter-Regular"], // A-Z monospace
	["mathtt", "texttt", "Typewriter-Regular"] // a-z monospace
	];
	var wideNumeralData = [["mathbf", "textbf", "Main-Bold"], // 0-9 bold
	["", "", ""], // 0-9 double-struck. No KaTeX font.
	["mathsf", "textsf", "SansSerif-Regular"], // 0-9 sans-serif
	["mathboldsf", "textboldsf", "SansSerif-Bold"], // 0-9 bold sans-serif
	["mathtt", "texttt", "Typewriter-Regular"] // 0-9 monospace
	];
	var wideCharacterFont = function wideCharacterFont(wideChar, mode) {
	  // IE doesn't support codePointAt(). So work with the surrogate pair.
	  var H = wideChar.charCodeAt(0); // high surrogate

	  var L = wideChar.charCodeAt(1); // low surrogate

	  var codePoint = (H - 0xD800) * 0x400 + (L - 0xDC00) + 0x10000;
	  var j = mode === "math" ? 0 : 1; // column index for CSS class.

	  if (0x1D400 <= codePoint && codePoint < 0x1D6A4) {
	    // wideLatinLetterData contains exactly 26 chars on each row.
	    // So we can calculate the relevant row. No traverse necessary.
	    var i = Math.floor((codePoint - 0x1D400) / 26);
	    return [wideLatinLetterData[i][2], wideLatinLetterData[i][j]];
	  } else if (0x1D7CE <= codePoint && codePoint <= 0x1D7FF) {
	    // Numerals, ten per row.
	    var _i = Math.floor((codePoint - 0x1D7CE) / 10);

	    return [wideNumeralData[_i][2], wideNumeralData[_i][j]];
	  } else if (codePoint === 0x1D6A5 || codePoint === 0x1D6A6) {
	    // dotless i or j
	    return [wideLatinLetterData[0][2], wideLatinLetterData[0][j]];
	  } else if (0x1D6A6 < codePoint && codePoint < 0x1D7CE) {
	    // Greek letters. Not supported, yet.
	    return ["", ""];
	  } else {
	    // We don't support any wide characters outside 1D400–1D7FF.
	    throw new ParseError("Unsupported character: " + wideChar);
	  }
	};

	/* eslint no-console:0 */

	/**
	 * Looks up the given symbol in fontMetrics, after applying any symbol
	 * replacements defined in symbol.js
	 */
	var lookupSymbol = function lookupSymbol(value, // TODO(#963): Use a union type for this.
	fontName, mode) {
	  // Replace the value with its replaced value from symbol.js
	  if (symbols[mode][value] && symbols[mode][value].replace) {
	    value = symbols[mode][value].replace;
	  }

	  return {
	    value: value,
	    metrics: getCharacterMetrics(value, fontName, mode)
	  };
	};
	/**
	 * Makes a symbolNode after translation via the list of symbols in symbols.js.
	 * Correctly pulls out metrics for the character, and optionally takes a list of
	 * classes to be attached to the node.
	 *
	 * TODO: make argument order closer to makeSpan
	 * TODO: add a separate argument for math class (e.g. `mop`, `mbin`), which
	 * should if present come first in `classes`.
	 * TODO(#953): Make `options` mandatory and always pass it in.
	 */


	var makeSymbol = function makeSymbol(value, fontName, mode, options, classes) {
	  var lookup = lookupSymbol(value, fontName, mode);
	  var metrics = lookup.metrics;
	  value = lookup.value;
	  var symbolNode;

	  if (metrics) {
	    var italic = metrics.italic;

	    if (mode === "text" || options && options.font === "mathit") {
	      italic = 0;
	    }

	    symbolNode = new SymbolNode(value, metrics.height, metrics.depth, italic, metrics.skew, metrics.width, classes);
	  } else {
	    // TODO(emily): Figure out a good way to only print this in development
	    typeof console !== "undefined" && console.warn("No character metrics " + ("for '" + value + "' in style '" + fontName + "' and mode '" + mode + "'"));
	    symbolNode = new SymbolNode(value, 0, 0, 0, 0, 0, classes);
	  }

	  if (options) {
	    symbolNode.maxFontSize = options.sizeMultiplier;

	    if (options.style.isTight()) {
	      symbolNode.classes.push("mtight");
	    }

	    var color = options.getColor();

	    if (color) {
	      symbolNode.style.color = color;
	    }
	  }

	  return symbolNode;
	};
	/**
	 * Makes a symbol in Main-Regular or AMS-Regular.
	 * Used for rel, bin, open, close, inner, and punct.
	 */


	var mathsym = function mathsym(value, mode, options, classes) {
	  if (classes === void 0) {
	    classes = [];
	  }

	  // Decide what font to render the symbol in by its entry in the symbols
	  // table.
	  // Have a special case for when the value = \ because the \ is used as a
	  // textord in unsupported command errors but cannot be parsed as a regular
	  // text ordinal and is therefore not present as a symbol in the symbols
	  // table for text, as well as a special case for boldsymbol because it
	  // can be used for bold + and -
	  if (options.font === "boldsymbol" && lookupSymbol(value, "Main-Bold", mode).metrics) {
	    return makeSymbol(value, "Main-Bold", mode, options, classes.concat(["mathbf"]));
	  } else if (value === "\\" || symbols[mode][value].font === "main") {
	    return makeSymbol(value, "Main-Regular", mode, options, classes);
	  } else {
	    return makeSymbol(value, "AMS-Regular", mode, options, classes.concat(["amsrm"]));
	  }
	};
	/**
	 * Determines which of the two font names (Main-Bold and Math-BoldItalic) and
	 * corresponding style tags (mathbf or boldsymbol) to use for font "boldsymbol",
	 * depending on the symbol.  Use this function instead of fontMap for font
	 * "boldsymbol".
	 */


	var boldsymbol = function boldsymbol(value, mode, options, classes, type) {
	  if (type !== "textord" && lookupSymbol(value, "Math-BoldItalic", mode).metrics) {
	    return {
	      fontName: "Math-BoldItalic",
	      fontClass: "boldsymbol"
	    };
	  } else {
	    // Some glyphs do not exist in Math-BoldItalic so we need to use
	    // Main-Bold instead.
	    return {
	      fontName: "Main-Bold",
	      fontClass: "mathbf"
	    };
	  }
	};
	/**
	 * Makes either a mathord or textord in the correct font and color.
	 */


	var makeOrd = function makeOrd(group, options, type) {
	  var mode = group.mode;
	  var text = group.text;
	  var classes = ["mord"]; // Math mode or Old font (i.e. \rm)

	  var isFont = mode === "math" || mode === "text" && options.font;
	  var fontOrFamily = isFont ? options.font : options.fontFamily;

	  if (text.charCodeAt(0) === 0xD835) {
	    // surrogate pairs get special treatment
	    var [wideFontName, wideFontClass] = wideCharacterFont(text, mode);
	    return makeSymbol(text, wideFontName, mode, options, classes.concat(wideFontClass));
	  } else if (fontOrFamily) {
	    var fontName;
	    var fontClasses;

	    if (fontOrFamily === "boldsymbol") {
	      var fontData = boldsymbol(text, mode, options, classes, type);
	      fontName = fontData.fontName;
	      fontClasses = [fontData.fontClass];
	    } else if (isFont) {
	      fontName = fontMap[fontOrFamily].fontName;
	      fontClasses = [fontOrFamily];
	    } else {
	      fontName = retrieveTextFontName(fontOrFamily, options.fontWeight, options.fontShape);
	      fontClasses = [fontOrFamily, options.fontWeight, options.fontShape];
	    }

	    if (lookupSymbol(text, fontName, mode).metrics) {
	      return makeSymbol(text, fontName, mode, options, classes.concat(fontClasses));
	    } else if (ligatures.hasOwnProperty(text) && fontName.substr(0, 10) === "Typewriter") {
	      // Deconstruct ligatures in monospace fonts (\texttt, \tt).
	      var parts = [];

	      for (var i = 0; i < text.length; i++) {
	        parts.push(makeSymbol(text[i], fontName, mode, options, classes.concat(fontClasses)));
	      }

	      return makeFragment(parts);
	    }
	  } // Makes a symbol in the default font for mathords and textords.


	  if (type === "mathord") {
	    return makeSymbol(text, "Math-Italic", mode, options, classes.concat(["mathnormal"]));
	  } else if (type === "textord") {
	    var font = symbols[mode][text] && symbols[mode][text].font;

	    if (font === "ams") {
	      var _fontName = retrieveTextFontName("amsrm", options.fontWeight, options.fontShape);

	      return makeSymbol(text, _fontName, mode, options, classes.concat("amsrm", options.fontWeight, options.fontShape));
	    } else if (font === "main" || !font) {
	      var _fontName2 = retrieveTextFontName("textrm", options.fontWeight, options.fontShape);

	      return makeSymbol(text, _fontName2, mode, options, classes.concat(options.fontWeight, options.fontShape));
	    } else {
	      // fonts added by plugins
	      var _fontName3 = retrieveTextFontName(font, options.fontWeight, options.fontShape); // We add font name as a css class


	      return makeSymbol(text, _fontName3, mode, options, classes.concat(_fontName3, options.fontWeight, options.fontShape));
	    }
	  } else {
	    throw new Error("unexpected type: " + type + " in makeOrd");
	  }
	};
	/**
	 * Returns true if subsequent symbolNodes have the same classes, skew, maxFont,
	 * and styles.
	 */


	var canCombine = (prev, next) => {
	  if (createClass(prev.classes) !== createClass(next.classes) || prev.skew !== next.skew || prev.maxFontSize !== next.maxFontSize) {
	    return false;
	  } // If prev and next both are just "mbin"s or "mord"s we don't combine them
	  // so that the proper spacing can be preserved.


	  if (prev.classes.length === 1) {
	    var cls = prev.classes[0];

	    if (cls === "mbin" || cls === "mord") {
	      return false;
	    }
	  }

	  for (var style in prev.style) {
	    if (prev.style.hasOwnProperty(style) && prev.style[style] !== next.style[style]) {
	      return false;
	    }
	  }

	  for (var _style in next.style) {
	    if (next.style.hasOwnProperty(_style) && prev.style[_style] !== next.style[_style]) {
	      return false;
	    }
	  }

	  return true;
	};
	/**
	 * Combine consecutive domTree.symbolNodes into a single symbolNode.
	 * Note: this function mutates the argument.
	 */


	var tryCombineChars = chars => {
	  for (var i = 0; i < chars.length - 1; i++) {
	    var prev = chars[i];
	    var next = chars[i + 1];

	    if (prev instanceof SymbolNode && next instanceof SymbolNode && canCombine(prev, next)) {
	      prev.text += next.text;
	      prev.height = Math.max(prev.height, next.height);
	      prev.depth = Math.max(prev.depth, next.depth); // Use the last character's italic correction since we use
	      // it to add padding to the right of the span created from
	      // the combined characters.

	      prev.italic = next.italic;
	      chars.splice(i + 1, 1);
	      i--;
	    }
	  }

	  return chars;
	};
	/**
	 * Calculate the height, depth, and maxFontSize of an element based on its
	 * children.
	 */


	var sizeElementFromChildren = function sizeElementFromChildren(elem) {
	  var height = 0;
	  var depth = 0;
	  var maxFontSize = 0;

	  for (var i = 0; i < elem.children.length; i++) {
	    var child = elem.children[i];

	    if (child.height > height) {
	      height = child.height;
	    }

	    if (child.depth > depth) {
	      depth = child.depth;
	    }

	    if (child.maxFontSize > maxFontSize) {
	      maxFontSize = child.maxFontSize;
	    }
	  }

	  elem.height = height;
	  elem.depth = depth;
	  elem.maxFontSize = maxFontSize;
	};
	/**
	 * Makes a span with the given list of classes, list of children, and options.
	 *
	 * TODO(#953): Ensure that `options` is always provided (currently some call
	 * sites don't pass it) and make the type below mandatory.
	 * TODO: add a separate argument for math class (e.g. `mop`, `mbin`), which
	 * should if present come first in `classes`.
	 */


	var makeSpan$2 = function makeSpan(classes, children, options, style) {
	  var span = new Span(classes, children, options, style);
	  sizeElementFromChildren(span);
	  return span;
	}; // SVG one is simpler -- doesn't require height, depth, max-font setting.
	// This is also a separate method for typesafety.


	var makeSvgSpan = (classes, children, options, style) => new Span(classes, children, options, style);

	var makeLineSpan = function makeLineSpan(className, options, thickness) {
	  var line = makeSpan$2([className], [], options);
	  line.height = Math.max(thickness || options.fontMetrics().defaultRuleThickness, options.minRuleThickness);
	  line.style.borderBottomWidth = makeEm(line.height);
	  line.maxFontSize = 1.0;
	  return line;
	};
	/**
	 * Makes an anchor with the given href, list of classes, list of children,
	 * and options.
	 */


	var makeAnchor = function makeAnchor(href, classes, children, options) {
	  var anchor = new Anchor(href, classes, children, options);
	  sizeElementFromChildren(anchor);
	  return anchor;
	};
	/**
	 * Makes a document fragment with the given list of children.
	 */


	var makeFragment = function makeFragment(children) {
	  var fragment = new DocumentFragment$1(children);
	  sizeElementFromChildren(fragment);
	  return fragment;
	};
	/**
	 * Wraps group in a span if it's a document fragment, allowing to apply classes
	 * and styles
	 */


	var wrapFragment = function wrapFragment(group, options) {
	  if (group instanceof DocumentFragment$1) {
	    return makeSpan$2([], [group], options);
	  }

	  return group;
	}; // These are exact object types to catch typos in the names of the optional fields.


	// Computes the updated `children` list and the overall depth.
	//
	// This helper function for makeVList makes it easier to enforce type safety by
	// allowing early exits (returns) in the logic.
	var getVListChildrenAndDepth = function getVListChildrenAndDepth(params) {
	  if (params.positionType === "individualShift") {
	    var oldChildren = params.children;
	    var children = [oldChildren[0]]; // Add in kerns to the list of params.children to get each element to be
	    // shifted to the correct specified shift

	    var _depth = -oldChildren[0].shift - oldChildren[0].elem.depth;

	    var currPos = _depth;

	    for (var i = 1; i < oldChildren.length; i++) {
	      var diff = -oldChildren[i].shift - currPos - oldChildren[i].elem.depth;
	      var size = diff - (oldChildren[i - 1].elem.height + oldChildren[i - 1].elem.depth);
	      currPos = currPos + diff;
	      children.push({
	        type: "kern",
	        size
	      });
	      children.push(oldChildren[i]);
	    }

	    return {
	      children,
	      depth: _depth
	    };
	  }

	  var depth;

	  if (params.positionType === "top") {
	    // We always start at the bottom, so calculate the bottom by adding up
	    // all the sizes
	    var bottom = params.positionData;

	    for (var _i = 0; _i < params.children.length; _i++) {
	      var child = params.children[_i];
	      bottom -= child.type === "kern" ? child.size : child.elem.height + child.elem.depth;
	    }

	    depth = bottom;
	  } else if (params.positionType === "bottom") {
	    depth = -params.positionData;
	  } else {
	    var firstChild = params.children[0];

	    if (firstChild.type !== "elem") {
	      throw new Error('First child must have type "elem".');
	    }

	    if (params.positionType === "shift") {
	      depth = -firstChild.elem.depth - params.positionData;
	    } else if (params.positionType === "firstBaseline") {
	      depth = -firstChild.elem.depth;
	    } else {
	      throw new Error("Invalid positionType " + params.positionType + ".");
	    }
	  }

	  return {
	    children: params.children,
	    depth
	  };
	};
	/**
	 * Makes a vertical list by stacking elements and kerns on top of each other.
	 * Allows for many different ways of specifying the positioning method.
	 *
	 * See VListParam documentation above.
	 */


	var makeVList = function makeVList(params, options) {
	  var {
	    children,
	    depth
	  } = getVListChildrenAndDepth(params); // Create a strut that is taller than any list item. The strut is added to
	  // each item, where it will determine the item's baseline. Since it has
	  // `overflow:hidden`, the strut's top edge will sit on the item's line box's
	  // top edge and the strut's bottom edge will sit on the item's baseline,
	  // with no additional line-height spacing. This allows the item baseline to
	  // be positioned precisely without worrying about font ascent and
	  // line-height.

	  var pstrutSize = 0;

	  for (var i = 0; i < children.length; i++) {
	    var child = children[i];

	    if (child.type === "elem") {
	      var elem = child.elem;
	      pstrutSize = Math.max(pstrutSize, elem.maxFontSize, elem.height);
	    }
	  }

	  pstrutSize += 2;
	  var pstrut = makeSpan$2(["pstrut"], []);
	  pstrut.style.height = makeEm(pstrutSize); // Create a new list of actual children at the correct offsets

	  var realChildren = [];
	  var minPos = depth;
	  var maxPos = depth;
	  var currPos = depth;

	  for (var _i2 = 0; _i2 < children.length; _i2++) {
	    var _child = children[_i2];

	    if (_child.type === "kern") {
	      currPos += _child.size;
	    } else {
	      var _elem = _child.elem;
	      var classes = _child.wrapperClasses || [];
	      var style = _child.wrapperStyle || {};
	      var childWrap = makeSpan$2(classes, [pstrut, _elem], undefined, style);
	      childWrap.style.top = makeEm(-pstrutSize - currPos - _elem.depth);

	      if (_child.marginLeft) {
	        childWrap.style.marginLeft = _child.marginLeft;
	      }

	      if (_child.marginRight) {
	        childWrap.style.marginRight = _child.marginRight;
	      }

	      realChildren.push(childWrap);
	      currPos += _elem.height + _elem.depth;
	    }

	    minPos = Math.min(minPos, currPos);
	    maxPos = Math.max(maxPos, currPos);
	  } // The vlist contents go in a table-cell with `vertical-align:bottom`.
	  // This cell's bottom edge will determine the containing table's baseline
	  // without overly expanding the containing line-box.


	  var vlist = makeSpan$2(["vlist"], realChildren);
	  vlist.style.height = makeEm(maxPos); // A second row is used if necessary to represent the vlist's depth.

	  var rows;

	  if (minPos < 0) {
	    // We will define depth in an empty span with display: table-cell.
	    // It should render with the height that we define. But Chrome, in
	    // contenteditable mode only, treats that span as if it contains some
	    // text content. And that min-height over-rides our desired height.
	    // So we put another empty span inside the depth strut span.
	    var emptySpan = makeSpan$2([], []);
	    var depthStrut = makeSpan$2(["vlist"], [emptySpan]);
	    depthStrut.style.height = makeEm(-minPos); // Safari wants the first row to have inline content; otherwise it
	    // puts the bottom of the *second* row on the baseline.

	    var topStrut = makeSpan$2(["vlist-s"], [new SymbolNode("\u200b")]);
	    rows = [makeSpan$2(["vlist-r"], [vlist, topStrut]), makeSpan$2(["vlist-r"], [depthStrut])];
	  } else {
	    rows = [makeSpan$2(["vlist-r"], [vlist])];
	  }

	  var vtable = makeSpan$2(["vlist-t"], rows);

	  if (rows.length === 2) {
	    vtable.classes.push("vlist-t2");
	  }

	  vtable.height = maxPos;
	  vtable.depth = -minPos;
	  return vtable;
	}; // Glue is a concept from TeX which is a flexible space between elements in
	// either a vertical or horizontal list. In KaTeX, at least for now, it's
	// static space between elements in a horizontal layout.


	var makeGlue = (measurement, options) => {
	  // Make an empty span for the space
	  var rule = makeSpan$2(["mspace"], [], options);
	  var size = calculateSize(measurement, options);
	  rule.style.marginRight = makeEm(size);
	  return rule;
	}; // Takes font options, and returns the appropriate fontLookup name


	var retrieveTextFontName = function retrieveTextFontName(fontFamily, fontWeight, fontShape) {
	  var baseFontName = "";

	  switch (fontFamily) {
	    case "amsrm":
	      baseFontName = "AMS";
	      break;

	    case "textrm":
	      baseFontName = "Main";
	      break;

	    case "textsf":
	      baseFontName = "SansSerif";
	      break;

	    case "texttt":
	      baseFontName = "Typewriter";
	      break;

	    default:
	      baseFontName = fontFamily;
	    // use fonts added by a plugin
	  }

	  var fontStylesName;

	  if (fontWeight === "textbf" && fontShape === "textit") {
	    fontStylesName = "BoldItalic";
	  } else if (fontWeight === "textbf") {
	    fontStylesName = "Bold";
	  } else if (fontWeight === "textit") {
	    fontStylesName = "Italic";
	  } else {
	    fontStylesName = "Regular";
	  }

	  return baseFontName + "-" + fontStylesName;
	};
	/**
	 * Maps TeX font commands to objects containing:
	 * - variant: string used for "mathvariant" attribute in buildMathML.js
	 * - fontName: the "style" parameter to fontMetrics.getCharacterMetrics
	 */
	// A map between tex font commands an MathML mathvariant attribute values


	var fontMap = {
	  // styles
	  "mathbf": {
	    variant: "bold",
	    fontName: "Main-Bold"
	  },
	  "mathrm": {
	    variant: "normal",
	    fontName: "Main-Regular"
	  },
	  "textit": {
	    variant: "italic",
	    fontName: "Main-Italic"
	  },
	  "mathit": {
	    variant: "italic",
	    fontName: "Main-Italic"
	  },
	  "mathnormal": {
	    variant: "italic",
	    fontName: "Math-Italic"
	  },
	  // "boldsymbol" is missing because they require the use of multiple fonts:
	  // Math-BoldItalic and Main-Bold.  This is handled by a special case in
	  // makeOrd which ends up calling boldsymbol.
	  // families
	  "mathbb": {
	    variant: "double-struck",
	    fontName: "AMS-Regular"
	  },
	  "mathcal": {
	    variant: "script",
	    fontName: "Caligraphic-Regular"
	  },
	  "mathfrak": {
	    variant: "fraktur",
	    fontName: "Fraktur-Regular"
	  },
	  "mathscr": {
	    variant: "script",
	    fontName: "Script-Regular"
	  },
	  "mathsf": {
	    variant: "sans-serif",
	    fontName: "SansSerif-Regular"
	  },
	  "mathtt": {
	    variant: "monospace",
	    fontName: "Typewriter-Regular"
	  }
	};
	var svgData = {
	  //   path, width, height
	  vec: ["vec", 0.471, 0.714],
	  // values from the font glyph
	  oiintSize1: ["oiintSize1", 0.957, 0.499],
	  // oval to overlay the integrand
	  oiintSize2: ["oiintSize2", 1.472, 0.659],
	  oiiintSize1: ["oiiintSize1", 1.304, 0.499],
	  oiiintSize2: ["oiiintSize2", 1.98, 0.659]
	};

	var staticSvg = function staticSvg(value, options) {
	  // Create a span with inline SVG for the element.
	  var [pathName, width, height] = svgData[value];
	  var path = new PathNode(pathName);
	  var svgNode = new SvgNode([path], {
	    "width": makeEm(width),
	    "height": makeEm(height),
	    // Override CSS rule `.katex svg { width: 100% }`
	    "style": "width:" + makeEm(width),
	    "viewBox": "0 0 " + 1000 * width + " " + 1000 * height,
	    "preserveAspectRatio": "xMinYMin"
	  });
	  var span = makeSvgSpan(["overlay"], [svgNode], options);
	  span.height = height;
	  span.style.height = makeEm(height);
	  span.style.width = makeEm(width);
	  return span;
	};

	var buildCommon = {
	  fontMap,
	  makeSymbol,
	  mathsym,
	  makeSpan: makeSpan$2,
	  makeSvgSpan,
	  makeLineSpan,
	  makeAnchor,
	  makeFragment,
	  wrapFragment,
	  makeVList,
	  makeOrd,
	  makeGlue,
	  staticSvg,
	  svgData,
	  tryCombineChars
	};

	/**
	 * Describes spaces between different classes of atoms.
	 */
	var thinspace = {
	  number: 3,
	  unit: "mu"
	};
	var mediumspace = {
	  number: 4,
	  unit: "mu"
	};
	var thickspace = {
	  number: 5,
	  unit: "mu"
	}; // Making the type below exact with all optional fields doesn't work due to
	// - https://github.com/facebook/flow/issues/4582
	// - https://github.com/facebook/flow/issues/5688
	// However, since *all* fields are optional, $Shape<> works as suggested in 5688
	// above.

	// Spacing relationships for display and text styles
	var spacings = {
	  mord: {
	    mop: thinspace,
	    mbin: mediumspace,
	    mrel: thickspace,
	    minner: thinspace
	  },
	  mop: {
	    mord: thinspace,
	    mop: thinspace,
	    mrel: thickspace,
	    minner: thinspace
	  },
	  mbin: {
	    mord: mediumspace,
	    mop: mediumspace,
	    mopen: mediumspace,
	    minner: mediumspace
	  },
	  mrel: {
	    mord: thickspace,
	    mop: thickspace,
	    mopen: thickspace,
	    minner: thickspace
	  },
	  mopen: {},
	  mclose: {
	    mop: thinspace,
	    mbin: mediumspace,
	    mrel: thickspace,
	    minner: thinspace
	  },
	  mpunct: {
	    mord: thinspace,
	    mop: thinspace,
	    mrel: thickspace,
	    mopen: thinspace,
	    mclose: thinspace,
	    mpunct: thinspace,
	    minner: thinspace
	  },
	  minner: {
	    mord: thinspace,
	    mop: thinspace,
	    mbin: mediumspace,
	    mrel: thickspace,
	    mopen: thinspace,
	    mpunct: thinspace,
	    minner: thinspace
	  }
	}; // Spacing relationships for script and scriptscript styles

	var tightSpacings = {
	  mord: {
	    mop: thinspace
	  },
	  mop: {
	    mord: thinspace,
	    mop: thinspace
	  },
	  mbin: {},
	  mrel: {},
	  mopen: {},
	  mclose: {
	    mop: thinspace
	  },
	  mpunct: {},
	  minner: {
	    mop: thinspace
	  }
	};

	/** Context provided to function handlers for error messages. */
	// Note: reverse the order of the return type union will cause a flow error.
	// See https://github.com/facebook/flow/issues/3663.
	// More general version of `HtmlBuilder` for nodes (e.g. \sum, accent types)
	// whose presence impacts super/subscripting. In this case, ParseNode<"supsub">
	// delegates its HTML building to the HtmlBuilder corresponding to these nodes.

	/**
	 * Final function spec for use at parse time.
	 * This is almost identical to `FunctionPropSpec`, except it
	 * 1. includes the function handler, and
	 * 2. requires all arguments except argTypes.
	 * It is generated by `defineFunction()` below.
	 */

	/**
	 * All registered functions.
	 * `functions.js` just exports this same dictionary again and makes it public.
	 * `Parser.js` requires this dictionary.
	 */
	var _functions = {};
	/**
	 * All HTML builders. Should be only used in the `define*` and the `build*ML`
	 * functions.
	 */

	var _htmlGroupBuilders = {};
	/**
	 * All MathML builders. Should be only used in the `define*` and the `build*ML`
	 * functions.
	 */

	var _mathmlGroupBuilders = {};
	function defineFunction(_ref) {
	  var {
	    type,
	    names,
	    props,
	    handler,
	    htmlBuilder,
	    mathmlBuilder
	  } = _ref;
	  // Set default values of functions
	  var data = {
	    type,
	    numArgs: props.numArgs,
	    argTypes: props.argTypes,
	    allowedInArgument: !!props.allowedInArgument,
	    allowedInText: !!props.allowedInText,
	    allowedInMath: props.allowedInMath === undefined ? true : props.allowedInMath,
	    numOptionalArgs: props.numOptionalArgs || 0,
	    infix: !!props.infix,
	    primitive: !!props.primitive,
	    handler: handler
	  };

	  for (var i = 0; i < names.length; ++i) {
	    _functions[names[i]] = data;
	  }

	  if (type) {
	    if (htmlBuilder) {
	      _htmlGroupBuilders[type] = htmlBuilder;
	    }

	    if (mathmlBuilder) {
	      _mathmlGroupBuilders[type] = mathmlBuilder;
	    }
	  }
	}
	/**
	 * Use this to register only the HTML and MathML builders for a function (e.g.
	 * if the function's ParseNode is generated in Parser.js rather than via a
	 * stand-alone handler provided to `defineFunction`).
	 */

	function defineFunctionBuilders(_ref2) {
	  var {
	    type,
	    htmlBuilder,
	    mathmlBuilder
	  } = _ref2;
	  defineFunction({
	    type,
	    names: [],
	    props: {
	      numArgs: 0
	    },

	    handler() {
	      throw new Error('Should never be called.');
	    },

	    htmlBuilder,
	    mathmlBuilder
	  });
	}
	var normalizeArgument = function normalizeArgument(arg) {
	  return arg.type === "ordgroup" && arg.body.length === 1 ? arg.body[0] : arg;
	}; // Since the corresponding buildHTML/buildMathML function expects a
	// list of elements, we normalize for different kinds of arguments

	var ordargument = function ordargument(arg) {
	  return arg.type === "ordgroup" ? arg.body : [arg];
	};

	/**
	 * This file does the main work of building a domTree structure from a parse
	 * tree. The entry point is the `buildHTML` function, which takes a parse tree.
	 * Then, the buildExpression, buildGroup, and various groupBuilders functions
	 * are called, to produce a final HTML tree.
	 */
	var makeSpan$1 = buildCommon.makeSpan; // Binary atoms (first class `mbin`) change into ordinary atoms (`mord`)
	// depending on their surroundings. See TeXbook pg. 442-446, Rules 5 and 6,
	// and the text before Rule 19.

	var binLeftCanceller = ["leftmost", "mbin", "mopen", "mrel", "mop", "mpunct"];
	var binRightCanceller = ["rightmost", "mrel", "mclose", "mpunct"];
	var styleMap$1 = {
	  "display": Style$1.DISPLAY,
	  "text": Style$1.TEXT,
	  "script": Style$1.SCRIPT,
	  "scriptscript": Style$1.SCRIPTSCRIPT
	};
	var DomEnum = {
	  mord: "mord",
	  mop: "mop",
	  mbin: "mbin",
	  mrel: "mrel",
	  mopen: "mopen",
	  mclose: "mclose",
	  mpunct: "mpunct",
	  minner: "minner"
	};

	/**
	 * Take a list of nodes, build them in order, and return a list of the built
	 * nodes. documentFragments are flattened into their contents, so the
	 * returned list contains no fragments. `isRealGroup` is true if `expression`
	 * is a real group (no atoms will be added on either side), as opposed to
	 * a partial group (e.g. one created by \color). `surrounding` is an array
	 * consisting type of nodes that will be added to the left and right.
	 */
	var buildExpression$1 = function buildExpression(expression, options, isRealGroup, surrounding) {
	  if (surrounding === void 0) {
	    surrounding = [null, null];
	  }

	  // Parse expressions into `groups`.
	  var groups = [];

	  for (var i = 0; i < expression.length; i++) {
	    var output = buildGroup$1(expression[i], options);

	    if (output instanceof DocumentFragment$1) {
	      var children = output.children;
	      groups.push(...children);
	    } else {
	      groups.push(output);
	    }
	  } // Combine consecutive domTree.symbolNodes into a single symbolNode.


	  buildCommon.tryCombineChars(groups); // If `expression` is a partial group, let the parent handle spacings
	  // to avoid processing groups multiple times.

	  if (!isRealGroup) {
	    return groups;
	  }

	  var glueOptions = options;

	  if (expression.length === 1) {
	    var node = expression[0];

	    if (node.type === "sizing") {
	      glueOptions = options.havingSize(node.size);
	    } else if (node.type === "styling") {
	      glueOptions = options.havingStyle(styleMap$1[node.style]);
	    }
	  } // Dummy spans for determining spacings between surrounding atoms.
	  // If `expression` has no atoms on the left or right, class "leftmost"
	  // or "rightmost", respectively, is used to indicate it.


	  var dummyPrev = makeSpan$1([surrounding[0] || "leftmost"], [], options);
	  var dummyNext = makeSpan$1([surrounding[1] || "rightmost"], [], options); // TODO: These code assumes that a node's math class is the first element
	  // of its `classes` array. A later cleanup should ensure this, for
	  // instance by changing the signature of `makeSpan`.
	  // Before determining what spaces to insert, perform bin cancellation.
	  // Binary operators change to ordinary symbols in some contexts.

	  var isRoot = isRealGroup === "root";
	  traverseNonSpaceNodes(groups, (node, prev) => {
	    var prevType = prev.classes[0];
	    var type = node.classes[0];

	    if (prevType === "mbin" && utils.contains(binRightCanceller, type)) {
	      prev.classes[0] = "mord";
	    } else if (type === "mbin" && utils.contains(binLeftCanceller, prevType)) {
	      node.classes[0] = "mord";
	    }
	  }, {
	    node: dummyPrev
	  }, dummyNext, isRoot);
	  traverseNonSpaceNodes(groups, (node, prev) => {
	    var prevType = getTypeOfDomTree(prev);
	    var type = getTypeOfDomTree(node); // 'mtight' indicates that the node is script or scriptscript style.

	    var space = prevType && type ? node.hasClass("mtight") ? tightSpacings[prevType][type] : spacings[prevType][type] : null;

	    if (space) {
	      // Insert glue (spacing) after the `prev`.
	      return buildCommon.makeGlue(space, glueOptions);
	    }
	  }, {
	    node: dummyPrev
	  }, dummyNext, isRoot);
	  return groups;
	}; // Depth-first traverse non-space `nodes`, calling `callback` with the current and
	// previous node as arguments, optionally returning a node to insert after the
	// previous node. `prev` is an object with the previous node and `insertAfter`
	// function to insert after it. `next` is a node that will be added to the right.
	// Used for bin cancellation and inserting spacings.

	var traverseNonSpaceNodes = function traverseNonSpaceNodes(nodes, callback, prev, next, isRoot) {
	  if (next) {
	    // temporarily append the right node, if exists
	    nodes.push(next);
	  }

	  var i = 0;

	  for (; i < nodes.length; i++) {
	    var node = nodes[i];
	    var partialGroup = checkPartialGroup(node);

	    if (partialGroup) {
	      // Recursive DFS
	      // $FlowFixMe: make nodes a $ReadOnlyArray by returning a new array
	      traverseNonSpaceNodes(partialGroup.children, callback, prev, null, isRoot);
	      continue;
	    } // Ignore explicit spaces (e.g., \;, \,) when determining what implicit
	    // spacing should go between atoms of different classes


	    var nonspace = !node.hasClass("mspace");

	    if (nonspace) {
	      var result = callback(node, prev.node);

	      if (result) {
	        if (prev.insertAfter) {
	          prev.insertAfter(result);
	        } else {
	          // insert at front
	          nodes.unshift(result);
	          i++;
	        }
	      }
	    }

	    if (nonspace) {
	      prev.node = node;
	    } else if (isRoot && node.hasClass("newline")) {
	      prev.node = makeSpan$1(["leftmost"]); // treat like beginning of line
	    }

	    prev.insertAfter = (index => n => {
	      nodes.splice(index + 1, 0, n);
	      i++;
	    })(i);
	  }

	  if (next) {
	    nodes.pop();
	  }
	}; // Check if given node is a partial group, i.e., does not affect spacing around.


	var checkPartialGroup = function checkPartialGroup(node) {
	  if (node instanceof DocumentFragment$1 || node instanceof Anchor || node instanceof Span && node.hasClass("enclosing")) {
	    return node;
	  }

	  return null;
	}; // Return the outermost node of a domTree.


	var getOutermostNode = function getOutermostNode(node, side) {
	  var partialGroup = checkPartialGroup(node);

	  if (partialGroup) {
	    var children = partialGroup.children;

	    if (children.length) {
	      if (side === "right") {
	        return getOutermostNode(children[children.length - 1], "right");
	      } else if (side === "left") {
	        return getOutermostNode(children[0], "left");
	      }
	    }
	  }

	  return node;
	}; // Return math atom class (mclass) of a domTree.
	// If `side` is given, it will get the type of the outermost node at given side.


	var getTypeOfDomTree = function getTypeOfDomTree(node, side) {
	  if (!node) {
	    return null;
	  }

	  if (side) {
	    node = getOutermostNode(node, side);
	  } // This makes a lot of assumptions as to where the type of atom
	  // appears.  We should do a better job of enforcing this.


	  return DomEnum[node.classes[0]] || null;
	};
	var makeNullDelimiter = function makeNullDelimiter(options, classes) {
	  var moreClasses = ["nulldelimiter"].concat(options.baseSizingClasses());
	  return makeSpan$1(classes.concat(moreClasses));
	};
	/**
	 * buildGroup is the function that takes a group and calls the correct groupType
	 * function for it. It also handles the interaction of size and style changes
	 * between parents and children.
	 */

	var buildGroup$1 = function buildGroup(group, options, baseOptions) {
	  if (!group) {
	    return makeSpan$1();
	  }

	  if (_htmlGroupBuilders[group.type]) {
	    // Call the groupBuilders function
	    // $FlowFixMe
	    var groupNode = _htmlGroupBuilders[group.type](group, options); // If the size changed between the parent and the current group, account
	    // for that size difference.

	    if (baseOptions && options.size !== baseOptions.size) {
	      groupNode = makeSpan$1(options.sizingClasses(baseOptions), [groupNode], options);
	      var multiplier = options.sizeMultiplier / baseOptions.sizeMultiplier;
	      groupNode.height *= multiplier;
	      groupNode.depth *= multiplier;
	    }

	    return groupNode;
	  } else {
	    throw new ParseError("Got group of unknown type: '" + group.type + "'");
	  }
	};
	/**
	 * Combine an array of HTML DOM nodes (e.g., the output of `buildExpression`)
	 * into an unbreakable HTML node of class .base, with proper struts to
	 * guarantee correct vertical extent.  `buildHTML` calls this repeatedly to
	 * make up the entire expression as a sequence of unbreakable units.
	 */

	function buildHTMLUnbreakable(children, options) {
	  // Compute height and depth of this chunk.
	  var body = makeSpan$1(["base"], children, options); // Add strut, which ensures that the top of the HTML element falls at
	  // the height of the expression, and the bottom of the HTML element
	  // falls at the depth of the expression.

	  var strut = makeSpan$1(["strut"]);
	  strut.style.height = makeEm(body.height + body.depth);

	  if (body.depth) {
	    strut.style.verticalAlign = makeEm(-body.depth);
	  }

	  body.children.unshift(strut);
	  return body;
	}
	/**
	 * Take an entire parse tree, and build it into an appropriate set of HTML
	 * nodes.
	 */


	function buildHTML(tree, options) {
	  // Strip off outer tag wrapper for processing below.
	  var tag = null;

	  if (tree.length === 1 && tree[0].type === "tag") {
	    tag = tree[0].tag;
	    tree = tree[0].body;
	  } // Build the expression contained in the tree


	  var expression = buildExpression$1(tree, options, "root");
	  var eqnNum;

	  if (expression.length === 2 && expression[1].hasClass("tag")) {
	    // An environment with automatic equation numbers, e.g. {gather}.
	    eqnNum = expression.pop();
	  }

	  var children = []; // Create one base node for each chunk between potential line breaks.
	  // The TeXBook [p.173] says "A formula will be broken only after a
	  // relation symbol like $=$ or $<$ or $\rightarrow$, or after a binary
	  // operation symbol like $+$ or $-$ or $\times$, where the relation or
	  // binary operation is on the ``outer level'' of the formula (i.e., not
	  // enclosed in {...} and not part of an \over construction)."

	  var parts = [];

	  for (var i = 0; i < expression.length; i++) {
	    parts.push(expression[i]);

	    if (expression[i].hasClass("mbin") || expression[i].hasClass("mrel") || expression[i].hasClass("allowbreak")) {
	      // Put any post-operator glue on same line as operator.
	      // Watch for \nobreak along the way, and stop at \newline.
	      var nobreak = false;

	      while (i < expression.length - 1 && expression[i + 1].hasClass("mspace") && !expression[i + 1].hasClass("newline")) {
	        i++;
	        parts.push(expression[i]);

	        if (expression[i].hasClass("nobreak")) {
	          nobreak = true;
	        }
	      } // Don't allow break if \nobreak among the post-operator glue.


	      if (!nobreak) {
	        children.push(buildHTMLUnbreakable(parts, options));
	        parts = [];
	      }
	    } else if (expression[i].hasClass("newline")) {
	      // Write the line except the newline
	      parts.pop();

	      if (parts.length > 0) {
	        children.push(buildHTMLUnbreakable(parts, options));
	        parts = [];
	      } // Put the newline at the top level


	      children.push(expression[i]);
	    }
	  }

	  if (parts.length > 0) {
	    children.push(buildHTMLUnbreakable(parts, options));
	  } // Now, if there was a tag, build it too and append it as a final child.


	  var tagChild;

	  if (tag) {
	    tagChild = buildHTMLUnbreakable(buildExpression$1(tag, options, true));
	    tagChild.classes = ["tag"];
	    children.push(tagChild);
	  } else if (eqnNum) {
	    children.push(eqnNum);
	  }

	  var htmlNode = makeSpan$1(["katex-html"], children);
	  htmlNode.setAttribute("aria-hidden", "true"); // Adjust the strut of the tag to be the maximum height of all children
	  // (the height of the enclosing htmlNode) for proper vertical alignment.

	  if (tagChild) {
	    var strut = tagChild.children[0];
	    strut.style.height = makeEm(htmlNode.height + htmlNode.depth);

	    if (htmlNode.depth) {
	      strut.style.verticalAlign = makeEm(-htmlNode.depth);
	    }
	  }

	  return htmlNode;
	}

	/**
	 * These objects store data about MathML nodes. This is the MathML equivalent
	 * of the types in domTree.js. Since MathML handles its own rendering, and
	 * since we're mainly using MathML to improve accessibility, we don't manage
	 * any of the styling state that the plain DOM nodes do.
	 *
	 * The `toNode` and `toMarkup` functions work simlarly to how they do in
	 * domTree.js, creating namespaced DOM nodes and HTML text markup respectively.
	 */
	function newDocumentFragment(children) {
	  return new DocumentFragment$1(children);
	}
	/**
	 * This node represents a general purpose MathML node of any type. The
	 * constructor requires the type of node to create (for example, `"mo"` or
	 * `"mspace"`, corresponding to `<mo>` and `<mspace>` tags).
	 */

	class MathNode {
	  constructor(type, children, classes) {
	    this.type = void 0;
	    this.attributes = void 0;
	    this.children = void 0;
	    this.classes = void 0;
	    this.type = type;
	    this.attributes = {};
	    this.children = children || [];
	    this.classes = classes || [];
	  }
	  /**
	   * Sets an attribute on a MathML node. MathML depends on attributes to convey a
	   * semantic content, so this is used heavily.
	   */


	  setAttribute(name, value) {
	    this.attributes[name] = value;
	  }
	  /**
	   * Gets an attribute on a MathML node.
	   */


	  getAttribute(name) {
	    return this.attributes[name];
	  }
	  /**
	   * Converts the math node into a MathML-namespaced DOM element.
	   */


	  toNode() {
	    var node = document.createElementNS("http://www.w3.org/1998/Math/MathML", this.type);

	    for (var attr in this.attributes) {
	      if (Object.prototype.hasOwnProperty.call(this.attributes, attr)) {
	        node.setAttribute(attr, this.attributes[attr]);
	      }
	    }

	    if (this.classes.length > 0) {
	      node.className = createClass(this.classes);
	    }

	    for (var i = 0; i < this.children.length; i++) {
	      node.appendChild(this.children[i].toNode());
	    }

	    return node;
	  }
	  /**
	   * Converts the math node into an HTML markup string.
	   */


	  toMarkup() {
	    var markup = "<" + this.type; // Add the attributes

	    for (var attr in this.attributes) {
	      if (Object.prototype.hasOwnProperty.call(this.attributes, attr)) {
	        markup += " " + attr + "=\"";
	        markup += utils.escape(this.attributes[attr]);
	        markup += "\"";
	      }
	    }

	    if (this.classes.length > 0) {
	      markup += " class =\"" + utils.escape(createClass(this.classes)) + "\"";
	    }

	    markup += ">";

	    for (var i = 0; i < this.children.length; i++) {
	      markup += this.children[i].toMarkup();
	    }

	    markup += "</" + this.type + ">";
	    return markup;
	  }
	  /**
	   * Converts the math node into a string, similar to innerText, but escaped.
	   */


	  toText() {
	    return this.children.map(child => child.toText()).join("");
	  }

	}
	/**
	 * This node represents a piece of text.
	 */

	class TextNode {
	  constructor(text) {
	    this.text = void 0;
	    this.text = text;
	  }
	  /**
	   * Converts the text node into a DOM text node.
	   */


	  toNode() {
	    return document.createTextNode(this.text);
	  }
	  /**
	   * Converts the text node into escaped HTML markup
	   * (representing the text itself).
	   */


	  toMarkup() {
	    return utils.escape(this.toText());
	  }
	  /**
	   * Converts the text node into a string
	   * (representing the text iteself).
	   */


	  toText() {
	    return this.text;
	  }

	}
	/**
	 * This node represents a space, but may render as <mspace.../> or as text,
	 * depending on the width.
	 */

	class SpaceNode {
	  /**
	   * Create a Space node with width given in CSS ems.
	   */
	  constructor(width) {
	    this.width = void 0;
	    this.character = void 0;
	    this.width = width; // See https://www.w3.org/TR/2000/WD-MathML2-20000328/chapter6.html
	    // for a table of space-like characters.  We use Unicode
	    // representations instead of &LongNames; as it's not clear how to
	    // make the latter via document.createTextNode.

	    if (width >= 0.05555 && width <= 0.05556) {
	      this.character = "\u200a"; // &VeryThinSpace;
	    } else if (width >= 0.1666 && width <= 0.1667) {
	      this.character = "\u2009"; // &ThinSpace;
	    } else if (width >= 0.2222 && width <= 0.2223) {
	      this.character = "\u2005"; // &MediumSpace;
	    } else if (width >= 0.2777 && width <= 0.2778) {
	      this.character = "\u2005\u200a"; // &ThickSpace;
	    } else if (width >= -0.05556 && width <= -0.05555) {
	      this.character = "\u200a\u2063"; // &NegativeVeryThinSpace;
	    } else if (width >= -0.1667 && width <= -0.1666) {
	      this.character = "\u2009\u2063"; // &NegativeThinSpace;
	    } else if (width >= -0.2223 && width <= -0.2222) {
	      this.character = "\u205f\u2063"; // &NegativeMediumSpace;
	    } else if (width >= -0.2778 && width <= -0.2777) {
	      this.character = "\u2005\u2063"; // &NegativeThickSpace;
	    } else {
	      this.character = null;
	    }
	  }
	  /**
	   * Converts the math node into a MathML-namespaced DOM element.
	   */


	  toNode() {
	    if (this.character) {
	      return document.createTextNode(this.character);
	    } else {
	      var node = document.createElementNS("http://www.w3.org/1998/Math/MathML", "mspace");
	      node.setAttribute("width", makeEm(this.width));
	      return node;
	    }
	  }
	  /**
	   * Converts the math node into an HTML markup string.
	   */


	  toMarkup() {
	    if (this.character) {
	      return "<mtext>" + this.character + "</mtext>";
	    } else {
	      return "<mspace width=\"" + makeEm(this.width) + "\"/>";
	    }
	  }
	  /**
	   * Converts the math node into a string, similar to innerText.
	   */


	  toText() {
	    if (this.character) {
	      return this.character;
	    } else {
	      return " ";
	    }
	  }

	}

	var mathMLTree = {
	  MathNode,
	  TextNode,
	  SpaceNode,
	  newDocumentFragment
	};

	/**
	 * This file converts a parse tree into a cooresponding MathML tree. The main
	 * entry point is the `buildMathML` function, which takes a parse tree from the
	 * parser.
	 */

	/**
	 * Takes a symbol and converts it into a MathML text node after performing
	 * optional replacement from symbols.js.
	 */
	var makeText = function makeText(text, mode, options) {
	  if (symbols[mode][text] && symbols[mode][text].replace && text.charCodeAt(0) !== 0xD835 && !(ligatures.hasOwnProperty(text) && options && (options.fontFamily && options.fontFamily.substr(4, 2) === "tt" || options.font && options.font.substr(4, 2) === "tt"))) {
	    text = symbols[mode][text].replace;
	  }

	  return new mathMLTree.TextNode(text);
	};
	/**
	 * Wrap the given array of nodes in an <mrow> node if needed, i.e.,
	 * unless the array has length 1.  Always returns a single node.
	 */

	var makeRow = function makeRow(body) {
	  if (body.length === 1) {
	    return body[0];
	  } else {
	    return new mathMLTree.MathNode("mrow", body);
	  }
	};
	/**
	 * Returns the math variant as a string or null if none is required.
	 */

	var getVariant = function getVariant(group, options) {
	  // Handle \text... font specifiers as best we can.
	  // MathML has a limited list of allowable mathvariant specifiers; see
	  // https://www.w3.org/TR/MathML3/chapter3.html#presm.commatt
	  if (options.fontFamily === "texttt") {
	    return "monospace";
	  } else if (options.fontFamily === "textsf") {
	    if (options.fontShape === "textit" && options.fontWeight === "textbf") {
	      return "sans-serif-bold-italic";
	    } else if (options.fontShape === "textit") {
	      return "sans-serif-italic";
	    } else if (options.fontWeight === "textbf") {
	      return "bold-sans-serif";
	    } else {
	      return "sans-serif";
	    }
	  } else if (options.fontShape === "textit" && options.fontWeight === "textbf") {
	    return "bold-italic";
	  } else if (options.fontShape === "textit") {
	    return "italic";
	  } else if (options.fontWeight === "textbf") {
	    return "bold";
	  }

	  var font = options.font;

	  if (!font || font === "mathnormal") {
	    return null;
	  }

	  var mode = group.mode;

	  if (font === "mathit") {
	    return "italic";
	  } else if (font === "boldsymbol") {
	    return group.type === "textord" ? "bold" : "bold-italic";
	  } else if (font === "mathbf") {
	    return "bold";
	  } else if (font === "mathbb") {
	    return "double-struck";
	  } else if (font === "mathfrak") {
	    return "fraktur";
	  } else if (font === "mathscr" || font === "mathcal") {
	    // MathML makes no distinction between script and caligrahpic
	    return "script";
	  } else if (font === "mathsf") {
	    return "sans-serif";
	  } else if (font === "mathtt") {
	    return "monospace";
	  }

	  var text = group.text;

	  if (utils.contains(["\\imath", "\\jmath"], text)) {
	    return null;
	  }

	  if (symbols[mode][text] && symbols[mode][text].replace) {
	    text = symbols[mode][text].replace;
	  }

	  var fontName = buildCommon.fontMap[font].fontName;

	  if (getCharacterMetrics(text, fontName, mode)) {
	    return buildCommon.fontMap[font].variant;
	  }

	  return null;
	};
	/**
	 * Takes a list of nodes, builds them, and returns a list of the generated
	 * MathML nodes.  Also combine consecutive <mtext> outputs into a single
	 * <mtext> tag.
	 */

	var buildExpression = function buildExpression(expression, options, isOrdgroup) {
	  if (expression.length === 1) {
	    var group = buildGroup(expression[0], options);

	    if (isOrdgroup && group instanceof MathNode && group.type === "mo") {
	      // When TeX writers want to suppress spacing on an operator,
	      // they often put the operator by itself inside braces.
	      group.setAttribute("lspace", "0em");
	      group.setAttribute("rspace", "0em");
	    }

	    return [group];
	  }

	  var groups = [];
	  var lastGroup;

	  for (var i = 0; i < expression.length; i++) {
	    var _group = buildGroup(expression[i], options);

	    if (_group instanceof MathNode && lastGroup instanceof MathNode) {
	      // Concatenate adjacent <mtext>s
	      if (_group.type === 'mtext' && lastGroup.type === 'mtext' && _group.getAttribute('mathvariant') === lastGroup.getAttribute('mathvariant')) {
	        lastGroup.children.push(..._group.children);
	        continue; // Concatenate adjacent <mn>s
	      } else if (_group.type === 'mn' && lastGroup.type === 'mn') {
	        lastGroup.children.push(..._group.children);
	        continue; // Concatenate <mn>...</mn> followed by <mi>.</mi>
	      } else if (_group.type === 'mi' && _group.children.length === 1 && lastGroup.type === 'mn') {
	        var child = _group.children[0];

	        if (child instanceof TextNode && child.text === '.') {
	          lastGroup.children.push(..._group.children);
	          continue;
	        }
	      } else if (lastGroup.type === 'mi' && lastGroup.children.length === 1) {
	        var lastChild = lastGroup.children[0];

	        if (lastChild instanceof TextNode && lastChild.text === '\u0338' && (_group.type === 'mo' || _group.type === 'mi' || _group.type === 'mn')) {
	          var _child = _group.children[0];

	          if (_child instanceof TextNode && _child.text.length > 0) {
	            // Overlay with combining character long solidus
	            _child.text = _child.text.slice(0, 1) + "\u0338" + _child.text.slice(1);
	            groups.pop();
	          }
	        }
	      }
	    }

	    groups.push(_group);
	    lastGroup = _group;
	  }

	  return groups;
	};
	/**
	 * Equivalent to buildExpression, but wraps the elements in an <mrow>
	 * if there's more than one.  Returns a single node instead of an array.
	 */

	var buildExpressionRow = function buildExpressionRow(expression, options, isOrdgroup) {
	  return makeRow(buildExpression(expression, options, isOrdgroup));
	};
	/**
	 * Takes a group from the parser and calls the appropriate groupBuilders function
	 * on it to produce a MathML node.
	 */

	var buildGroup = function buildGroup(group, options) {
	  if (!group) {
	    return new mathMLTree.MathNode("mrow");
	  }

	  if (_mathmlGroupBuilders[group.type]) {
	    // Call the groupBuilders function
	    // $FlowFixMe
	    var result = _mathmlGroupBuilders[group.type](group, options); // $FlowFixMe

	    return result;
	  } else {
	    throw new ParseError("Got group of unknown type: '" + group.type + "'");
	  }
	};
	/**
	 * Takes a full parse tree and settings and builds a MathML representation of
	 * it. In particular, we put the elements from building the parse tree into a
	 * <semantics> tag so we can also include that TeX source as an annotation.
	 *
	 * Note that we actually return a domTree element with a `<math>` inside it so
	 * we can do appropriate styling.
	 */

	function buildMathML(tree, texExpression, options, isDisplayMode, forMathmlOnly) {
	  var expression = buildExpression(tree, options); // TODO: Make a pass thru the MathML similar to buildHTML.traverseNonSpaceNodes
	  // and add spacing nodes. This is necessary only adjacent to math operators
	  // like \sin or \lim or to subsup elements that contain math operators.
	  // MathML takes care of the other spacing issues.
	  // Wrap up the expression in an mrow so it is presented in the semantics
	  // tag correctly, unless it's a single <mrow> or <mtable>.

	  var wrapper;

	  if (expression.length === 1 && expression[0] instanceof MathNode && utils.contains(["mrow", "mtable"], expression[0].type)) {
	    wrapper = expression[0];
	  } else {
	    wrapper = new mathMLTree.MathNode("mrow", expression);
	  } // Build a TeX annotation of the source


	  var annotation = new mathMLTree.MathNode("annotation", [new mathMLTree.TextNode(texExpression)]);
	  annotation.setAttribute("encoding", "application/x-tex");
	  var semantics = new mathMLTree.MathNode("semantics", [wrapper, annotation]);
	  var math = new mathMLTree.MathNode("math", [semantics]);
	  math.setAttribute("xmlns", "http://www.w3.org/1998/Math/MathML");

	  if (isDisplayMode) {
	    math.setAttribute("display", "block");
	  } // You can't style <math> nodes, so we wrap the node in a span.
	  // NOTE: The span class is not typed to have <math> nodes as children, and
	  // we don't want to make the children type more generic since the children
	  // of span are expected to have more fields in `buildHtml` contexts.


	  var wrapperClass = forMathmlOnly ? "katex" : "katex-mathml"; // $FlowFixMe

	  return buildCommon.makeSpan([wrapperClass], [math]);
	}

	var optionsFromSettings = function optionsFromSettings(settings) {
	  return new Options({
	    style: settings.displayMode ? Style$1.DISPLAY : Style$1.TEXT,
	    maxSize: settings.maxSize,
	    minRuleThickness: settings.minRuleThickness
	  });
	};

	var displayWrap = function displayWrap(node, settings) {
	  if (settings.displayMode) {
	    var classes = ["katex-display"];

	    if (settings.leqno) {
	      classes.push("leqno");
	    }

	    if (settings.fleqn) {
	      classes.push("fleqn");
	    }

	    node = buildCommon.makeSpan(classes, [node]);
	  }

	  return node;
	};

	var buildTree = function buildTree(tree, expression, settings) {
	  var options = optionsFromSettings(settings);
	  var katexNode;

	  if (settings.output === "mathml") {
	    return buildMathML(tree, expression, options, settings.displayMode, true);
	  } else if (settings.output === "html") {
	    var htmlNode = buildHTML(tree, options);
	    katexNode = buildCommon.makeSpan(["katex"], [htmlNode]);
	  } else {
	    var mathMLNode = buildMathML(tree, expression, options, settings.displayMode, false);

	    var _htmlNode = buildHTML(tree, options);

	    katexNode = buildCommon.makeSpan(["katex"], [mathMLNode, _htmlNode]);
	  }

	  return displayWrap(katexNode, settings);
	};
	var buildHTMLTree = function buildHTMLTree(tree, expression, settings) {
	  var options = optionsFromSettings(settings);
	  var htmlNode = buildHTML(tree, options);
	  var katexNode = buildCommon.makeSpan(["katex"], [htmlNode]);
	  return displayWrap(katexNode, settings);
	};

	/**
	 * This file provides support to buildMathML.js and buildHTML.js
	 * for stretchy wide elements rendered from SVG files
	 * and other CSS trickery.
	 */
	var stretchyCodePoint = {
	  widehat: "^",
	  widecheck: "ˇ",
	  widetilde: "~",
	  utilde: "~",
	  overleftarrow: "\u2190",
	  underleftarrow: "\u2190",
	  xleftarrow: "\u2190",
	  overrightarrow: "\u2192",
	  underrightarrow: "\u2192",
	  xrightarrow: "\u2192",
	  underbrace: "\u23df",
	  overbrace: "\u23de",
	  overgroup: "\u23e0",
	  undergroup: "\u23e1",
	  overleftrightarrow: "\u2194",
	  underleftrightarrow: "\u2194",
	  xleftrightarrow: "\u2194",
	  Overrightarrow: "\u21d2",
	  xRightarrow: "\u21d2",
	  overleftharpoon: "\u21bc",
	  xleftharpoonup: "\u21bc",
	  overrightharpoon: "\u21c0",
	  xrightharpoonup: "\u21c0",
	  xLeftarrow: "\u21d0",
	  xLeftrightarrow: "\u21d4",
	  xhookleftarrow: "\u21a9",
	  xhookrightarrow: "\u21aa",
	  xmapsto: "\u21a6",
	  xrightharpoondown: "\u21c1",
	  xleftharpoondown: "\u21bd",
	  xrightleftharpoons: "\u21cc",
	  xleftrightharpoons: "\u21cb",
	  xtwoheadleftarrow: "\u219e",
	  xtwoheadrightarrow: "\u21a0",
	  xlongequal: "=",
	  xtofrom: "\u21c4",
	  xrightleftarrows: "\u21c4",
	  xrightequilibrium: "\u21cc",
	  // Not a perfect match.
	  xleftequilibrium: "\u21cb",
	  // None better available.
	  "\\cdrightarrow": "\u2192",
	  "\\cdleftarrow": "\u2190",
	  "\\cdlongequal": "="
	};

	var mathMLnode = function mathMLnode(label) {
	  var node = new mathMLTree.MathNode("mo", [new mathMLTree.TextNode(stretchyCodePoint[label.replace(/^\\/, '')])]);
	  node.setAttribute("stretchy", "true");
	  return node;
	}; // Many of the KaTeX SVG images have been adapted from glyphs in KaTeX fonts.
	// Copyright (c) 2009-2010, Design Science, Inc. (<www.mathjax.org>)
	// Copyright (c) 2014-2017 Khan Academy (<www.khanacademy.org>)
	// Licensed under the SIL Open Font License, Version 1.1.
	// See \nhttp://scripts.sil.org/OFL
	// Very Long SVGs
	//    Many of the KaTeX stretchy wide elements use a long SVG image and an
	//    overflow: hidden tactic to achieve a stretchy image while avoiding
	//    distortion of arrowheads or brace corners.
	//    The SVG typically contains a very long (400 em) arrow.
	//    The SVG is in a container span that has overflow: hidden, so the span
	//    acts like a window that exposes only part of the  SVG.
	//    The SVG always has a longer, thinner aspect ratio than the container span.
	//    After the SVG fills 100% of the height of the container span,
	//    there is a long arrow shaft left over. That left-over shaft is not shown.
	//    Instead, it is sliced off because the span's CSS has overflow: hidden.
	//    Thus, the reader sees an arrow that matches the subject matter width
	//    without distortion.
	//    Some functions, such as \cancel, need to vary their aspect ratio. These
	//    functions do not get the overflow SVG treatment.
	// Second Brush Stroke
	//    Low resolution monitors struggle to display images in fine detail.
	//    So browsers apply anti-aliasing. A long straight arrow shaft therefore
	//    will sometimes appear as if it has a blurred edge.
	//    To mitigate this, these SVG files contain a second "brush-stroke" on the
	//    arrow shafts. That is, a second long thin rectangular SVG path has been
	//    written directly on top of each arrow shaft. This reinforcement causes
	//    some of the screen pixels to display as black instead of the anti-aliased
	//    gray pixel that a  single path would generate. So we get arrow shafts
	//    whose edges appear to be sharper.
	// In the katexImagesData object just below, the dimensions all
	// correspond to path geometry inside the relevant SVG.
	// For example, \overrightarrow uses the same arrowhead as glyph U+2192
	// from the KaTeX Main font. The scaling factor is 1000.
	// That is, inside the font, that arrowhead is 522 units tall, which
	// corresponds to 0.522 em inside the document.


	var katexImagesData = {
	  //   path(s), minWidth, height, align
	  overrightarrow: [["rightarrow"], 0.888, 522, "xMaxYMin"],
	  overleftarrow: [["leftarrow"], 0.888, 522, "xMinYMin"],
	  underrightarrow: [["rightarrow"], 0.888, 522, "xMaxYMin"],
	  underleftarrow: [["leftarrow"], 0.888, 522, "xMinYMin"],
	  xrightarrow: [["rightarrow"], 1.469, 522, "xMaxYMin"],
	  "\\cdrightarrow": [["rightarrow"], 3.0, 522, "xMaxYMin"],
	  // CD minwwidth2.5pc
	  xleftarrow: [["leftarrow"], 1.469, 522, "xMinYMin"],
	  "\\cdleftarrow": [["leftarrow"], 3.0, 522, "xMinYMin"],
	  Overrightarrow: [["doublerightarrow"], 0.888, 560, "xMaxYMin"],
	  xRightarrow: [["doublerightarrow"], 1.526, 560, "xMaxYMin"],
	  xLeftarrow: [["doubleleftarrow"], 1.526, 560, "xMinYMin"],
	  overleftharpoon: [["leftharpoon"], 0.888, 522, "xMinYMin"],
	  xleftharpoonup: [["leftharpoon"], 0.888, 522, "xMinYMin"],
	  xleftharpoondown: [["leftharpoondown"], 0.888, 522, "xMinYMin"],
	  overrightharpoon: [["rightharpoon"], 0.888, 522, "xMaxYMin"],
	  xrightharpoonup: [["rightharpoon"], 0.888, 522, "xMaxYMin"],
	  xrightharpoondown: [["rightharpoondown"], 0.888, 522, "xMaxYMin"],
	  xlongequal: [["longequal"], 0.888, 334, "xMinYMin"],
	  "\\cdlongequal": [["longequal"], 3.0, 334, "xMinYMin"],
	  xtwoheadleftarrow: [["twoheadleftarrow"], 0.888, 334, "xMinYMin"],
	  xtwoheadrightarrow: [["twoheadrightarrow"], 0.888, 334, "xMaxYMin"],
	  overleftrightarrow: [["leftarrow", "rightarrow"], 0.888, 522],
	  overbrace: [["leftbrace", "midbrace", "rightbrace"], 1.6, 548],
	  underbrace: [["leftbraceunder", "midbraceunder", "rightbraceunder"], 1.6, 548],
	  underleftrightarrow: [["leftarrow", "rightarrow"], 0.888, 522],
	  xleftrightarrow: [["leftarrow", "rightarrow"], 1.75, 522],
	  xLeftrightarrow: [["doubleleftarrow", "doublerightarrow"], 1.75, 560],
	  xrightleftharpoons: [["leftharpoondownplus", "rightharpoonplus"], 1.75, 716],
	  xleftrightharpoons: [["leftharpoonplus", "rightharpoondownplus"], 1.75, 716],
	  xhookleftarrow: [["leftarrow", "righthook"], 1.08, 522],
	  xhookrightarrow: [["lefthook", "rightarrow"], 1.08, 522],
	  overlinesegment: [["leftlinesegment", "rightlinesegment"], 0.888, 522],
	  underlinesegment: [["leftlinesegment", "rightlinesegment"], 0.888, 522],
	  overgroup: [["leftgroup", "rightgroup"], 0.888, 342],
	  undergroup: [["leftgroupunder", "rightgroupunder"], 0.888, 342],
	  xmapsto: [["leftmapsto", "rightarrow"], 1.5, 522],
	  xtofrom: [["leftToFrom", "rightToFrom"], 1.75, 528],
	  // The next three arrows are from the mhchem package.
	  // In mhchem.sty, min-length is 2.0em. But these arrows might appear in the
	  // document as \xrightarrow or \xrightleftharpoons. Those have
	  // min-length = 1.75em, so we set min-length on these next three to match.
	  xrightleftarrows: [["baraboveleftarrow", "rightarrowabovebar"], 1.75, 901],
	  xrightequilibrium: [["baraboveshortleftharpoon", "rightharpoonaboveshortbar"], 1.75, 716],
	  xleftequilibrium: [["shortbaraboveleftharpoon", "shortrightharpoonabovebar"], 1.75, 716]
	};

	var groupLength = function groupLength(arg) {
	  if (arg.type === "ordgroup") {
	    return arg.body.length;
	  } else {
	    return 1;
	  }
	};

	var svgSpan = function svgSpan(group, options) {
	  // Create a span with inline SVG for the element.
	  function buildSvgSpan_() {
	    var viewBoxWidth = 400000; // default

	    var label = group.label.substr(1);

	    if (utils.contains(["widehat", "widecheck", "widetilde", "utilde"], label)) {
	      // Each type in the `if` statement corresponds to one of the ParseNode
	      // types below. This narrowing is required to access `grp.base`.
	      // $FlowFixMe
	      var grp = group; // There are four SVG images available for each function.
	      // Choose a taller image when there are more characters.

	      var numChars = groupLength(grp.base);
	      var viewBoxHeight;
	      var pathName;

	      var _height;

	      if (numChars > 5) {
	        if (label === "widehat" || label === "widecheck") {
	          viewBoxHeight = 420;
	          viewBoxWidth = 2364;
	          _height = 0.42;
	          pathName = label + "4";
	        } else {
	          viewBoxHeight = 312;
	          viewBoxWidth = 2340;
	          _height = 0.34;
	          pathName = "tilde4";
	        }
	      } else {
	        var imgIndex = [1, 1, 2, 2, 3, 3][numChars];

	        if (label === "widehat" || label === "widecheck") {
	          viewBoxWidth = [0, 1062, 2364, 2364, 2364][imgIndex];
	          viewBoxHeight = [0, 239, 300, 360, 420][imgIndex];
	          _height = [0, 0.24, 0.3, 0.3, 0.36, 0.42][imgIndex];
	          pathName = label + imgIndex;
	        } else {
	          viewBoxWidth = [0, 600, 1033, 2339, 2340][imgIndex];
	          viewBoxHeight = [0, 260, 286, 306, 312][imgIndex];
	          _height = [0, 0.26, 0.286, 0.3, 0.306, 0.34][imgIndex];
	          pathName = "tilde" + imgIndex;
	        }
	      }

	      var path = new PathNode(pathName);
	      var svgNode = new SvgNode([path], {
	        "width": "100%",
	        "height": makeEm(_height),
	        "viewBox": "0 0 " + viewBoxWidth + " " + viewBoxHeight,
	        "preserveAspectRatio": "none"
	      });
	      return {
	        span: buildCommon.makeSvgSpan([], [svgNode], options),
	        minWidth: 0,
	        height: _height
	      };
	    } else {
	      var spans = [];
	      var data = katexImagesData[label];
	      var [paths, _minWidth, _viewBoxHeight] = data;

	      var _height2 = _viewBoxHeight / 1000;

	      var numSvgChildren = paths.length;
	      var widthClasses;
	      var aligns;

	      if (numSvgChildren === 1) {
	        // $FlowFixMe: All these cases must be of the 4-tuple type.
	        var align1 = data[3];
	        widthClasses = ["hide-tail"];
	        aligns = [align1];
	      } else if (numSvgChildren === 2) {
	        widthClasses = ["halfarrow-left", "halfarrow-right"];
	        aligns = ["xMinYMin", "xMaxYMin"];
	      } else if (numSvgChildren === 3) {
	        widthClasses = ["brace-left", "brace-center", "brace-right"];
	        aligns = ["xMinYMin", "xMidYMin", "xMaxYMin"];
	      } else {
	        throw new Error("Correct katexImagesData or update code here to support\n                    " + numSvgChildren + " children.");
	      }

	      for (var i = 0; i < numSvgChildren; i++) {
	        var _path = new PathNode(paths[i]);

	        var _svgNode = new SvgNode([_path], {
	          "width": "400em",
	          "height": makeEm(_height2),
	          "viewBox": "0 0 " + viewBoxWidth + " " + _viewBoxHeight,
	          "preserveAspectRatio": aligns[i] + " slice"
	        });

	        var _span = buildCommon.makeSvgSpan([widthClasses[i]], [_svgNode], options);

	        if (numSvgChildren === 1) {
	          return {
	            span: _span,
	            minWidth: _minWidth,
	            height: _height2
	          };
	        } else {
	          _span.style.height = makeEm(_height2);
	          spans.push(_span);
	        }
	      }

	      return {
	        span: buildCommon.makeSpan(["stretchy"], spans, options),
	        minWidth: _minWidth,
	        height: _height2
	      };
	    }
	  } // buildSvgSpan_()


	  var {
	    span,
	    minWidth,
	    height
	  } = buildSvgSpan_(); // Note that we are returning span.depth = 0.
	  // Any adjustments relative to the baseline must be done in buildHTML.

	  span.height = height;
	  span.style.height = makeEm(height);

	  if (minWidth > 0) {
	    span.style.minWidth = makeEm(minWidth);
	  }

	  return span;
	};

	var encloseSpan = function encloseSpan(inner, label, topPad, bottomPad, options) {
	  // Return an image span for \cancel, \bcancel, \xcancel, \fbox, or \angl
	  var img;
	  var totalHeight = inner.height + inner.depth + topPad + bottomPad;

	  if (/fbox|color|angl/.test(label)) {
	    img = buildCommon.makeSpan(["stretchy", label], [], options);

	    if (label === "fbox") {
	      var color = options.color && options.getColor();

	      if (color) {
	        img.style.borderColor = color;
	      }
	    }
	  } else {
	    // \cancel, \bcancel, or \xcancel
	    // Since \cancel's SVG is inline and it omits the viewBox attribute,
	    // its stroke-width will not vary with span area.
	    var lines = [];

	    if (/^[bx]cancel$/.test(label)) {
	      lines.push(new LineNode({
	        "x1": "0",
	        "y1": "0",
	        "x2": "100%",
	        "y2": "100%",
	        "stroke-width": "0.046em"
	      }));
	    }

	    if (/^x?cancel$/.test(label)) {
	      lines.push(new LineNode({
	        "x1": "0",
	        "y1": "100%",
	        "x2": "100%",
	        "y2": "0",
	        "stroke-width": "0.046em"
	      }));
	    }

	    var svgNode = new SvgNode(lines, {
	      "width": "100%",
	      "height": makeEm(totalHeight)
	    });
	    img = buildCommon.makeSvgSpan([], [svgNode], options);
	  }

	  img.height = totalHeight;
	  img.style.height = makeEm(totalHeight);
	  return img;
	};

	var stretchy = {
	  encloseSpan,
	  mathMLnode,
	  svgSpan
	};

	/**
	 * Asserts that the node is of the given type and returns it with stricter
	 * typing. Throws if the node's type does not match.
	 */
	function assertNodeType(node, type) {
	  if (!node || node.type !== type) {
	    throw new Error("Expected node of type " + type + ", but got " + (node ? "node of type " + node.type : String(node)));
	  } // $FlowFixMe, >=0.125


	  return node;
	}
	/**
	 * Returns the node more strictly typed iff it is of the given type. Otherwise,
	 * returns null.
	 */

	function assertSymbolNodeType(node) {
	  var typedNode = checkSymbolNodeType(node);

	  if (!typedNode) {
	    throw new Error("Expected node of symbol group type, but got " + (node ? "node of type " + node.type : String(node)));
	  }

	  return typedNode;
	}
	/**
	 * Returns the node more strictly typed iff it is of the given type. Otherwise,
	 * returns null.
	 */

	function checkSymbolNodeType(node) {
	  if (node && (node.type === "atom" || NON_ATOMS.hasOwnProperty(node.type))) {
	    // $FlowFixMe
	    return node;
	  }

	  return null;
	}

	// NOTE: Unlike most `htmlBuilder`s, this one handles not only "accent", but
	// also "supsub" since an accent can affect super/subscripting.
	var htmlBuilder$a = (grp, options) => {
	  // Accents are handled in the TeXbook pg. 443, rule 12.
	  var base;
	  var group;
	  var supSubGroup;

	  if (grp && grp.type === "supsub") {
	    // If our base is a character box, and we have superscripts and
	    // subscripts, the supsub will defer to us. In particular, we want
	    // to attach the superscripts and subscripts to the inner body (so
	    // that the position of the superscripts and subscripts won't be
	    // affected by the height of the accent). We accomplish this by
	    // sticking the base of the accent into the base of the supsub, and
	    // rendering that, while keeping track of where the accent is.
	    // The real accent group is the base of the supsub group
	    group = assertNodeType(grp.base, "accent"); // The character box is the base of the accent group

	    base = group.base; // Stick the character box into the base of the supsub group

	    grp.base = base; // Rerender the supsub group with its new base, and store that
	    // result.

	    supSubGroup = assertSpan(buildGroup$1(grp, options)); // reset original base

	    grp.base = group;
	  } else {
	    group = assertNodeType(grp, "accent");
	    base = group.base;
	  } // Build the base group


	  var body = buildGroup$1(base, options.havingCrampedStyle()); // Does the accent need to shift for the skew of a character?

	  var mustShift = group.isShifty && utils.isCharacterBox(base); // Calculate the skew of the accent. This is based on the line "If the
	  // nucleus is not a single character, let s = 0; otherwise set s to the
	  // kern amount for the nucleus followed by the \skewchar of its font."
	  // Note that our skew metrics are just the kern between each character
	  // and the skewchar.

	  var skew = 0;

	  if (mustShift) {
	    // If the base is a character box, then we want the skew of the
	    // innermost character. To do that, we find the innermost character:
	    var baseChar = utils.getBaseElem(base); // Then, we render its group to get the symbol inside it

	    var baseGroup = buildGroup$1(baseChar, options.havingCrampedStyle()); // Finally, we pull the skew off of the symbol.

	    skew = assertSymbolDomNode(baseGroup).skew; // Note that we now throw away baseGroup, because the layers we
	    // removed with getBaseElem might contain things like \color which
	    // we can't get rid of.
	    // TODO(emily): Find a better way to get the skew
	  }

	  var accentBelow = group.label === "\\c"; // calculate the amount of space between the body and the accent

	  var clearance = accentBelow ? body.height + body.depth : Math.min(body.height, options.fontMetrics().xHeight); // Build the accent

	  var accentBody;

	  if (!group.isStretchy) {
	    var accent;
	    var width;

	    if (group.label === "\\vec") {
	      // Before version 0.9, \vec used the combining font glyph U+20D7.
	      // But browsers, especially Safari, are not consistent in how they
	      // render combining characters when not preceded by a character.
	      // So now we use an SVG.
	      // If Safari reforms, we should consider reverting to the glyph.
	      accent = buildCommon.staticSvg("vec", options);
	      width = buildCommon.svgData.vec[1];
	    } else {
	      accent = buildCommon.makeOrd({
	        mode: group.mode,
	        text: group.label
	      }, options, "textord");
	      accent = assertSymbolDomNode(accent); // Remove the italic correction of the accent, because it only serves to
	      // shift the accent over to a place we don't want.

	      accent.italic = 0;
	      width = accent.width;

	      if (accentBelow) {
	        clearance += accent.depth;
	      }
	    }

	    accentBody = buildCommon.makeSpan(["accent-body"], [accent]); // "Full" accents expand the width of the resulting symbol to be
	    // at least the width of the accent, and overlap directly onto the
	    // character without any vertical offset.

	    var accentFull = group.label === "\\textcircled";

	    if (accentFull) {
	      accentBody.classes.push('accent-full');
	      clearance = body.height;
	    } // Shift the accent over by the skew.


	    var left = skew; // CSS defines `.katex .accent .accent-body:not(.accent-full) { width: 0 }`
	    // so that the accent doesn't contribute to the bounding box.
	    // We need to shift the character by its width (effectively half
	    // its width) to compensate.

	    if (!accentFull) {
	      left -= width / 2;
	    }

	    accentBody.style.left = makeEm(left); // \textcircled uses the \bigcirc glyph, so it needs some
	    // vertical adjustment to match LaTeX.

	    if (group.label === "\\textcircled") {
	      accentBody.style.top = ".2em";
	    }

	    accentBody = buildCommon.makeVList({
	      positionType: "firstBaseline",
	      children: [{
	        type: "elem",
	        elem: body
	      }, {
	        type: "kern",
	        size: -clearance
	      }, {
	        type: "elem",
	        elem: accentBody
	      }]
	    }, options);
	  } else {
	    accentBody = stretchy.svgSpan(group, options);
	    accentBody = buildCommon.makeVList({
	      positionType: "firstBaseline",
	      children: [{
	        type: "elem",
	        elem: body
	      }, {
	        type: "elem",
	        elem: accentBody,
	        wrapperClasses: ["svg-align"],
	        wrapperStyle: skew > 0 ? {
	          width: "calc(100% - " + makeEm(2 * skew) + ")",
	          marginLeft: makeEm(2 * skew)
	        } : undefined
	      }]
	    }, options);
	  }

	  var accentWrap = buildCommon.makeSpan(["mord", "accent"], [accentBody], options);

	  if (supSubGroup) {
	    // Here, we replace the "base" child of the supsub with our newly
	    // generated accent.
	    supSubGroup.children[0] = accentWrap; // Since we don't rerun the height calculation after replacing the
	    // accent, we manually recalculate height.

	    supSubGroup.height = Math.max(accentWrap.height, supSubGroup.height); // Accents should always be ords, even when their innards are not.

	    supSubGroup.classes[0] = "mord";
	    return supSubGroup;
	  } else {
	    return accentWrap;
	  }
	};

	var mathmlBuilder$9 = (group, options) => {
	  var accentNode = group.isStretchy ? stretchy.mathMLnode(group.label) : new mathMLTree.MathNode("mo", [makeText(group.label, group.mode)]);
	  var node = new mathMLTree.MathNode("mover", [buildGroup(group.base, options), accentNode]);
	  node.setAttribute("accent", "true");
	  return node;
	};

	var NON_STRETCHY_ACCENT_REGEX = new RegExp(["\\acute", "\\grave", "\\ddot", "\\tilde", "\\bar", "\\breve", "\\check", "\\hat", "\\vec", "\\dot", "\\mathring"].map(accent => "\\" + accent).join("|")); // Accents

	defineFunction({
	  type: "accent",
	  names: ["\\acute", "\\grave", "\\ddot", "\\tilde", "\\bar", "\\breve", "\\check", "\\hat", "\\vec", "\\dot", "\\mathring", "\\widecheck", "\\widehat", "\\widetilde", "\\overrightarrow", "\\overleftarrow", "\\Overrightarrow", "\\overleftrightarrow", "\\overgroup", "\\overlinesegment", "\\overleftharpoon", "\\overrightharpoon"],
	  props: {
	    numArgs: 1
	  },
	  handler: (context, args) => {
	    var base = normalizeArgument(args[0]);
	    var isStretchy = !NON_STRETCHY_ACCENT_REGEX.test(context.funcName);
	    var isShifty = !isStretchy || context.funcName === "\\widehat" || context.funcName === "\\widetilde" || context.funcName === "\\widecheck";
	    return {
	      type: "accent",
	      mode: context.parser.mode,
	      label: context.funcName,
	      isStretchy: isStretchy,
	      isShifty: isShifty,
	      base: base
	    };
	  },
	  htmlBuilder: htmlBuilder$a,
	  mathmlBuilder: mathmlBuilder$9
	}); // Text-mode accents

	defineFunction({
	  type: "accent",
	  names: ["\\'", "\\`", "\\^", "\\~", "\\=", "\\u", "\\.", '\\"', "\\c", "\\r", "\\H", "\\v", "\\textcircled"],
	  props: {
	    numArgs: 1,
	    allowedInText: true,
	    allowedInMath: true,
	    // unless in strict mode
	    argTypes: ["primitive"]
	  },
	  handler: (context, args) => {
	    var base = args[0];
	    var mode = context.parser.mode;

	    if (mode === "math") {
	      context.parser.settings.reportNonstrict("mathVsTextAccents", "LaTeX's accent " + context.funcName + " works only in text mode");
	      mode = "text";
	    }

	    return {
	      type: "accent",
	      mode: mode,
	      label: context.funcName,
	      isStretchy: false,
	      isShifty: true,
	      base: base
	    };
	  },
	  htmlBuilder: htmlBuilder$a,
	  mathmlBuilder: mathmlBuilder$9
	});

	// Horizontal overlap functions
	defineFunction({
	  type: "accentUnder",
	  names: ["\\underleftarrow", "\\underrightarrow", "\\underleftrightarrow", "\\undergroup", "\\underlinesegment", "\\utilde"],
	  props: {
	    numArgs: 1
	  },
	  handler: (_ref, args) => {
	    var {
	      parser,
	      funcName
	    } = _ref;
	    var base = args[0];
	    return {
	      type: "accentUnder",
	      mode: parser.mode,
	      label: funcName,
	      base: base
	    };
	  },
	  htmlBuilder: (group, options) => {
	    // Treat under accents much like underlines.
	    var innerGroup = buildGroup$1(group.base, options);
	    var accentBody = stretchy.svgSpan(group, options);
	    var kern = group.label === "\\utilde" ? 0.12 : 0; // Generate the vlist, with the appropriate kerns

	    var vlist = buildCommon.makeVList({
	      positionType: "top",
	      positionData: innerGroup.height,
	      children: [{
	        type: "elem",
	        elem: accentBody,
	        wrapperClasses: ["svg-align"]
	      }, {
	        type: "kern",
	        size: kern
	      }, {
	        type: "elem",
	        elem: innerGroup
	      }]
	    }, options);
	    return buildCommon.makeSpan(["mord", "accentunder"], [vlist], options);
	  },
	  mathmlBuilder: (group, options) => {
	    var accentNode = stretchy.mathMLnode(group.label);
	    var node = new mathMLTree.MathNode("munder", [buildGroup(group.base, options), accentNode]);
	    node.setAttribute("accentunder", "true");
	    return node;
	  }
	});

	// Helper function
	var paddedNode = group => {
	  var node = new mathMLTree.MathNode("mpadded", group ? [group] : []);
	  node.setAttribute("width", "+0.6em");
	  node.setAttribute("lspace", "0.3em");
	  return node;
	}; // Stretchy arrows with an optional argument


	defineFunction({
	  type: "xArrow",
	  names: ["\\xleftarrow", "\\xrightarrow", "\\xLeftarrow", "\\xRightarrow", "\\xleftrightarrow", "\\xLeftrightarrow", "\\xhookleftarrow", "\\xhookrightarrow", "\\xmapsto", "\\xrightharpoondown", "\\xrightharpoonup", "\\xleftharpoondown", "\\xleftharpoonup", "\\xrightleftharpoons", "\\xleftrightharpoons", "\\xlongequal", "\\xtwoheadrightarrow", "\\xtwoheadleftarrow", "\\xtofrom", // The next 3 functions are here to support the mhchem extension.
	  // Direct use of these functions is discouraged and may break someday.
	  "\\xrightleftarrows", "\\xrightequilibrium", "\\xleftequilibrium", // The next 3 functions are here only to support the {CD} environment.
	  "\\\\cdrightarrow", "\\\\cdleftarrow", "\\\\cdlongequal"],
	  props: {
	    numArgs: 1,
	    numOptionalArgs: 1
	  },

	  handler(_ref, args, optArgs) {
	    var {
	      parser,
	      funcName
	    } = _ref;
	    return {
	      type: "xArrow",
	      mode: parser.mode,
	      label: funcName,
	      body: args[0],
	      below: optArgs[0]
	    };
	  },

	  // Flow is unable to correctly infer the type of `group`, even though it's
	  // unamibiguously determined from the passed-in `type` above.
	  htmlBuilder(group, options) {
	    var style = options.style; // Build the argument groups in the appropriate style.
	    // Ref: amsmath.dtx:   \hbox{$\scriptstyle\mkern#3mu{#6}\mkern#4mu$}%
	    // Some groups can return document fragments.  Handle those by wrapping
	    // them in a span.

	    var newOptions = options.havingStyle(style.sup());
	    var upperGroup = buildCommon.wrapFragment(buildGroup$1(group.body, newOptions, options), options);
	    var arrowPrefix = group.label.slice(0, 2) === "\\x" ? "x" : "cd";
	    upperGroup.classes.push(arrowPrefix + "-arrow-pad");
	    var lowerGroup;

	    if (group.below) {
	      // Build the lower group
	      newOptions = options.havingStyle(style.sub());
	      lowerGroup = buildCommon.wrapFragment(buildGroup$1(group.below, newOptions, options), options);
	      lowerGroup.classes.push(arrowPrefix + "-arrow-pad");
	    }

	    var arrowBody = stretchy.svgSpan(group, options); // Re shift: Note that stretchy.svgSpan returned arrowBody.depth = 0.
	    // The point we want on the math axis is at 0.5 * arrowBody.height.

	    var arrowShift = -options.fontMetrics().axisHeight + 0.5 * arrowBody.height; // 2 mu kern. Ref: amsmath.dtx: #7\if0#2\else\mkern#2mu\fi

	    var upperShift = -options.fontMetrics().axisHeight - 0.5 * arrowBody.height - 0.111; // 0.111 em = 2 mu

	    if (upperGroup.depth > 0.25 || group.label === "\\xleftequilibrium") {
	      upperShift -= upperGroup.depth; // shift up if depth encroaches
	    } // Generate the vlist


	    var vlist;

	    if (lowerGroup) {
	      var lowerShift = -options.fontMetrics().axisHeight + lowerGroup.height + 0.5 * arrowBody.height + 0.111;
	      vlist = buildCommon.makeVList({
	        positionType: "individualShift",
	        children: [{
	          type: "elem",
	          elem: upperGroup,
	          shift: upperShift
	        }, {
	          type: "elem",
	          elem: arrowBody,
	          shift: arrowShift
	        }, {
	          type: "elem",
	          elem: lowerGroup,
	          shift: lowerShift
	        }]
	      }, options);
	    } else {
	      vlist = buildCommon.makeVList({
	        positionType: "individualShift",
	        children: [{
	          type: "elem",
	          elem: upperGroup,
	          shift: upperShift
	        }, {
	          type: "elem",
	          elem: arrowBody,
	          shift: arrowShift
	        }]
	      }, options);
	    } // $FlowFixMe: Replace this with passing "svg-align" into makeVList.


	    vlist.children[0].children[0].children[1].classes.push("svg-align");
	    return buildCommon.makeSpan(["mrel", "x-arrow"], [vlist], options);
	  },

	  mathmlBuilder(group, options) {
	    var arrowNode = stretchy.mathMLnode(group.label);
	    arrowNode.setAttribute("minsize", group.label.charAt(0) === "x" ? "1.75em" : "3.0em");
	    var node;

	    if (group.body) {
	      var upperNode = paddedNode(buildGroup(group.body, options));

	      if (group.below) {
	        var lowerNode = paddedNode(buildGroup(group.below, options));
	        node = new mathMLTree.MathNode("munderover", [arrowNode, lowerNode, upperNode]);
	      } else {
	        node = new mathMLTree.MathNode("mover", [arrowNode, upperNode]);
	      }
	    } else if (group.below) {
	      var _lowerNode = paddedNode(buildGroup(group.below, options));

	      node = new mathMLTree.MathNode("munder", [arrowNode, _lowerNode]);
	    } else {
	      // This should never happen.
	      // Parser.js throws an error if there is no argument.
	      node = paddedNode();
	      node = new mathMLTree.MathNode("mover", [arrowNode, node]);
	    }

	    return node;
	  }

	});

	var cdArrowFunctionName = {
	  ">": "\\\\cdrightarrow",
	  "<": "\\\\cdleftarrow",
	  "=": "\\\\cdlongequal",
	  "A": "\\uparrow",
	  "V": "\\downarrow",
	  "|": "\\Vert",
	  ".": "no arrow"
	};

	var newCell = () => {
	  // Create an empty cell, to be filled below with parse nodes.
	  // The parseTree from this module must be constructed like the
	  // one created by parseArray(), so an empty CD cell must
	  // be a ParseNode<"styling">. And CD is always displaystyle.
	  // So these values are fixed and flow can do implicit typing.
	  return {
	    type: "styling",
	    body: [],
	    mode: "math",
	    style: "display"
	  };
	};

	var isStartOfArrow = node => {
	  return node.type === "textord" && node.text === "@";
	};

	var isLabelEnd = (node, endChar) => {
	  return (node.type === "mathord" || node.type === "atom") && node.text === endChar;
	};

	function cdArrow(arrowChar, labels, parser) {
	  // Return a parse tree of an arrow and its labels.
	  // This acts in a way similar to a macro expansion.
	  var funcName = cdArrowFunctionName[arrowChar];

	  switch (funcName) {
	    case "\\\\cdrightarrow":
	    case "\\\\cdleftarrow":
	      return parser.callFunction(funcName, [labels[0]], [labels[1]]);

	    case "\\uparrow":
	    case "\\downarrow":
	      {
	        var leftLabel = parser.callFunction("\\\\cdleft", [labels[0]], []);
	        var bareArrow = {
	          type: "atom",
	          text: funcName,
	          mode: "math",
	          family: "rel"
	        };
	        var sizedArrow = parser.callFunction("\\Big", [bareArrow], []);
	        var rightLabel = parser.callFunction("\\\\cdright", [labels[1]], []);
	        var arrowGroup = {
	          type: "ordgroup",
	          mode: "math",
	          body: [leftLabel, sizedArrow, rightLabel]
	        };
	        return parser.callFunction("\\\\cdparent", [arrowGroup], []);
	      }

	    case "\\\\cdlongequal":
	      return parser.callFunction("\\\\cdlongequal", [], []);

	    case "\\Vert":
	      {
	        var arrow = {
	          type: "textord",
	          text: "\\Vert",
	          mode: "math"
	        };
	        return parser.callFunction("\\Big", [arrow], []);
	      }

	    default:
	      return {
	        type: "textord",
	        text: " ",
	        mode: "math"
	      };
	  }
	}

	function parseCD(parser) {
	  // Get the array's parse nodes with \\ temporarily mapped to \cr.
	  var parsedRows = [];
	  parser.gullet.beginGroup();
	  parser.gullet.macros.set("\\cr", "\\\\\\relax");
	  parser.gullet.beginGroup();

	  while (true) {
	    // eslint-disable-line no-constant-condition
	    // Get the parse nodes for the next row.
	    parsedRows.push(parser.parseExpression(false, "\\\\"));
	    parser.gullet.endGroup();
	    parser.gullet.beginGroup();
	    var next = parser.fetch().text;

	    if (next === "&" || next === "\\\\") {
	      parser.consume();
	    } else if (next === "\\end") {
	      if (parsedRows[parsedRows.length - 1].length === 0) {
	        parsedRows.pop(); // final row ended in \\
	      }

	      break;
	    } else {
	      throw new ParseError("Expected \\\\ or \\cr or \\end", parser.nextToken);
	    }
	  }

	  var row = [];
	  var body = [row]; // Loop thru the parse nodes. Collect them into cells and arrows.

	  for (var i = 0; i < parsedRows.length; i++) {
	    // Start a new row.
	    var rowNodes = parsedRows[i]; // Create the first cell.

	    var cell = newCell();

	    for (var j = 0; j < rowNodes.length; j++) {
	      if (!isStartOfArrow(rowNodes[j])) {
	        // If a parseNode is not an arrow, it goes into a cell.
	        cell.body.push(rowNodes[j]);
	      } else {
	        // Parse node j is an "@", the start of an arrow.
	        // Before starting on the arrow, push the cell into `row`.
	        row.push(cell); // Now collect parseNodes into an arrow.
	        // The character after "@" defines the arrow type.

	        j += 1;
	        var arrowChar = assertSymbolNodeType(rowNodes[j]).text; // Create two empty label nodes. We may or may not use them.

	        var labels = new Array(2);
	        labels[0] = {
	          type: "ordgroup",
	          mode: "math",
	          body: []
	        };
	        labels[1] = {
	          type: "ordgroup",
	          mode: "math",
	          body: []
	        }; // Process the arrow.

	        if ("=|.".indexOf(arrowChar) > -1) ; else if ("<>AV".indexOf(arrowChar) > -1) {
	          // Four arrows, `@>>>`, `@<<<`, `@AAA`, and `@VVV`, each take
	          // two optional labels. E.g. the right-point arrow syntax is
	          // really:  @>{optional label}>{optional label}>
	          // Collect parseNodes into labels.
	          for (var labelNum = 0; labelNum < 2; labelNum++) {
	            var inLabel = true;

	            for (var k = j + 1; k < rowNodes.length; k++) {
	              if (isLabelEnd(rowNodes[k], arrowChar)) {
	                inLabel = false;
	                j = k;
	                break;
	              }

	              if (isStartOfArrow(rowNodes[k])) {
	                throw new ParseError("Missing a " + arrowChar + " character to complete a CD arrow.", rowNodes[k]);
	              }

	              labels[labelNum].body.push(rowNodes[k]);
	            }

	            if (inLabel) {
	              // isLabelEnd never returned a true.
	              throw new ParseError("Missing a " + arrowChar + " character to complete a CD arrow.", rowNodes[j]);
	            }
	          }
	        } else {
	          throw new ParseError("Expected one of \"<>AV=|.\" after @", rowNodes[j]);
	        } // Now join the arrow to its labels.


	        var arrow = cdArrow(arrowChar, labels, parser); // Wrap the arrow in  ParseNode<"styling">.
	        // This is done to match parseArray() behavior.

	        var wrappedArrow = {
	          type: "styling",
	          body: [arrow],
	          mode: "math",
	          style: "display" // CD is always displaystyle.

	        };
	        row.push(wrappedArrow); // In CD's syntax, cells are implicit. That is, everything that
	        // is not an arrow gets collected into a cell. So create an empty
	        // cell now. It will collect upcoming parseNodes.

	        cell = newCell();
	      }
	    }

	    if (i % 2 === 0) {
	      // Even-numbered rows consist of: cell, arrow, cell, arrow, ... cell
	      // The last cell is not yet pushed into `row`, so:
	      row.push(cell);
	    } else {
	      // Odd-numbered rows consist of: vert arrow, empty cell, ... vert arrow
	      // Remove the empty cell that was placed at the beginning of `row`.
	      row.shift();
	    }

	    row = [];
	    body.push(row);
	  } // End row group


	  parser.gullet.endGroup(); // End array group defining \\

	  parser.gullet.endGroup(); // define column separation.

	  var cols = new Array(body[0].length).fill({
	    type: "align",
	    align: "c",
	    pregap: 0.25,
	    // CD package sets \enskip between columns.
	    postgap: 0.25 // So pre and post each get half an \enskip, i.e. 0.25em.

	  });
	  return {
	    type: "array",
	    mode: "math",
	    body,
	    arraystretch: 1,
	    addJot: true,
	    rowGaps: [null],
	    cols,
	    colSeparationType: "CD",
	    hLinesBeforeRow: new Array(body.length + 1).fill([])
	  };
	} // The functions below are not available for general use.
	// They are here only for internal use by the {CD} environment in placing labels
	// next to vertical arrows.
	// We don't need any such functions for horizontal arrows because we can reuse
	// the functionality that already exists for extensible arrows.

	defineFunction({
	  type: "cdlabel",
	  names: ["\\\\cdleft", "\\\\cdright"],
	  props: {
	    numArgs: 1
	  },

	  handler(_ref, args) {
	    var {
	      parser,
	      funcName
	    } = _ref;
	    return {
	      type: "cdlabel",
	      mode: parser.mode,
	      side: funcName.slice(4),
	      label: args[0]
	    };
	  },

	  htmlBuilder(group, options) {
	    var newOptions = options.havingStyle(options.style.sup());
	    var label = buildCommon.wrapFragment(buildGroup$1(group.label, newOptions, options), options);
	    label.classes.push("cd-label-" + group.side);
	    label.style.bottom = makeEm(0.8 - label.depth); // Zero out label height & depth, so vertical align of arrow is set
	    // by the arrow height, not by the label.

	    label.height = 0;
	    label.depth = 0;
	    return label;
	  },

	  mathmlBuilder(group, options) {
	    var label = new mathMLTree.MathNode("mrow", [buildGroup(group.label, options)]);
	    label = new mathMLTree.MathNode("mpadded", [label]);
	    label.setAttribute("width", "0");

	    if (group.side === "left") {
	      label.setAttribute("lspace", "-1width");
	    } // We have to guess at vertical alignment. We know the arrow is 1.8em tall,
	    // But we don't know the height or depth of the label.


	    label.setAttribute("voffset", "0.7em");
	    label = new mathMLTree.MathNode("mstyle", [label]);
	    label.setAttribute("displaystyle", "false");
	    label.setAttribute("scriptlevel", "1");
	    return label;
	  }

	});
	defineFunction({
	  type: "cdlabelparent",
	  names: ["\\\\cdparent"],
	  props: {
	    numArgs: 1
	  },

	  handler(_ref2, args) {
	    var {
	      parser
	    } = _ref2;
	    return {
	      type: "cdlabelparent",
	      mode: parser.mode,
	      fragment: args[0]
	    };
	  },

	  htmlBuilder(group, options) {
	    // Wrap the vertical arrow and its labels.
	    // The parent gets position: relative. The child gets position: absolute.
	    // So CSS can locate the label correctly.
	    var parent = buildCommon.wrapFragment(buildGroup$1(group.fragment, options), options);
	    parent.classes.push("cd-vert-arrow");
	    return parent;
	  },

	  mathmlBuilder(group, options) {
	    return new mathMLTree.MathNode("mrow", [buildGroup(group.fragment, options)]);
	  }

	});

	// {123} and converts into symbol with code 123.  It is used by the *macro*
	// \char defined in macros.js.

	defineFunction({
	  type: "textord",
	  names: ["\\@char"],
	  props: {
	    numArgs: 1,
	    allowedInText: true
	  },

	  handler(_ref, args) {
	    var {
	      parser
	    } = _ref;
	    var arg = assertNodeType(args[0], "ordgroup");
	    var group = arg.body;
	    var number = "";

	    for (var i = 0; i < group.length; i++) {
	      var node = assertNodeType(group[i], "textord");
	      number += node.text;
	    }

	    var code = parseInt(number);
	    var text;

	    if (isNaN(code)) {
	      throw new ParseError("\\@char has non-numeric argument " + number); // If we drop IE support, the following code could be replaced with
	      // text = String.fromCodePoint(code)
	    } else if (code < 0 || code >= 0x10ffff) {
	      throw new ParseError("\\@char with invalid code point " + number);
	    } else if (code <= 0xffff) {
	      text = String.fromCharCode(code);
	    } else {
	      // Astral code point; split into surrogate halves
	      code -= 0x10000;
	      text = String.fromCharCode((code >> 10) + 0xd800, (code & 0x3ff) + 0xdc00);
	    }

	    return {
	      type: "textord",
	      mode: parser.mode,
	      text: text
	    };
	  }

	});

	var htmlBuilder$9 = (group, options) => {
	  var elements = buildExpression$1(group.body, options.withColor(group.color), false); // \color isn't supposed to affect the type of the elements it contains.
	  // To accomplish this, we wrap the results in a fragment, so the inner
	  // elements will be able to directly interact with their neighbors. For
	  // example, `\color{red}{2 +} 3` has the same spacing as `2 + 3`

	  return buildCommon.makeFragment(elements);
	};

	var mathmlBuilder$8 = (group, options) => {
	  var inner = buildExpression(group.body, options.withColor(group.color));
	  var node = new mathMLTree.MathNode("mstyle", inner);
	  node.setAttribute("mathcolor", group.color);
	  return node;
	};

	defineFunction({
	  type: "color",
	  names: ["\\textcolor"],
	  props: {
	    numArgs: 2,
	    allowedInText: true,
	    argTypes: ["color", "original"]
	  },

	  handler(_ref, args) {
	    var {
	      parser
	    } = _ref;
	    var color = assertNodeType(args[0], "color-token").color;
	    var body = args[1];
	    return {
	      type: "color",
	      mode: parser.mode,
	      color,
	      body: ordargument(body)
	    };
	  },

	  htmlBuilder: htmlBuilder$9,
	  mathmlBuilder: mathmlBuilder$8
	});
	defineFunction({
	  type: "color",
	  names: ["\\color"],
	  props: {
	    numArgs: 1,
	    allowedInText: true,
	    argTypes: ["color"]
	  },

	  handler(_ref2, args) {
	    var {
	      parser,
	      breakOnTokenText
	    } = _ref2;
	    var color = assertNodeType(args[0], "color-token").color; // Set macro \current@color in current namespace to store the current
	    // color, mimicking the behavior of color.sty.
	    // This is currently used just to correctly color a \right
	    // that follows a \color command.

	    parser.gullet.macros.set("\\current@color", color); // Parse out the implicit body that should be colored.

	    var body = parser.parseExpression(true, breakOnTokenText);
	    return {
	      type: "color",
	      mode: parser.mode,
	      color,
	      body
	    };
	  },

	  htmlBuilder: htmlBuilder$9,
	  mathmlBuilder: mathmlBuilder$8
	});

	// Row breaks within tabular environments, and line breaks at top level

	defineFunction({
	  type: "cr",
	  names: ["\\\\"],
	  props: {
	    numArgs: 0,
	    numOptionalArgs: 1,
	    argTypes: ["size"],
	    allowedInText: true
	  },

	  handler(_ref, args, optArgs) {
	    var {
	      parser
	    } = _ref;
	    var size = optArgs[0];
	    var newLine = !parser.settings.displayMode || !parser.settings.useStrictBehavior("newLineInDisplayMode", "In LaTeX, \\\\ or \\newline " + "does nothing in display mode");
	    return {
	      type: "cr",
	      mode: parser.mode,
	      newLine,
	      size: size && assertNodeType(size, "size").value
	    };
	  },

	  // The following builders are called only at the top level,
	  // not within tabular/array environments.
	  htmlBuilder(group, options) {
	    var span = buildCommon.makeSpan(["mspace"], [], options);

	    if (group.newLine) {
	      span.classes.push("newline");

	      if (group.size) {
	        span.style.marginTop = makeEm(calculateSize(group.size, options));
	      }
	    }

	    return span;
	  },

	  mathmlBuilder(group, options) {
	    var node = new mathMLTree.MathNode("mspace");

	    if (group.newLine) {
	      node.setAttribute("linebreak", "newline");

	      if (group.size) {
	        node.setAttribute("height", makeEm(calculateSize(group.size, options)));
	      }
	    }

	    return node;
	  }

	});

	var globalMap = {
	  "\\global": "\\global",
	  "\\long": "\\\\globallong",
	  "\\\\globallong": "\\\\globallong",
	  "\\def": "\\gdef",
	  "\\gdef": "\\gdef",
	  "\\edef": "\\xdef",
	  "\\xdef": "\\xdef",
	  "\\let": "\\\\globallet",
	  "\\futurelet": "\\\\globalfuture"
	};

	var checkControlSequence = tok => {
	  var name = tok.text;

	  if (/^(?:[\\{}$&#^_]|EOF)$/.test(name)) {
	    throw new ParseError("Expected a control sequence", tok);
	  }

	  return name;
	};

	var getRHS = parser => {
	  var tok = parser.gullet.popToken();

	  if (tok.text === "=") {
	    // consume optional equals
	    tok = parser.gullet.popToken();

	    if (tok.text === " ") {
	      // consume one optional space
	      tok = parser.gullet.popToken();
	    }
	  }

	  return tok;
	};

	var letCommand = (parser, name, tok, global) => {
	  var macro = parser.gullet.macros.get(tok.text);

	  if (macro == null) {
	    // don't expand it later even if a macro with the same name is defined
	    // e.g., \let\foo=\frac \def\frac{\relax} \frac12
	    tok.noexpand = true;
	    macro = {
	      tokens: [tok],
	      numArgs: 0,
	      // reproduce the same behavior in expansion
	      unexpandable: !parser.gullet.isExpandable(tok.text)
	    };
	  }

	  parser.gullet.macros.set(name, macro, global);
	}; // <assignment> -> <non-macro assignment>|<macro assignment>
	// <non-macro assignment> -> <simple assignment>|\global<non-macro assignment>
	// <macro assignment> -> <definition>|<prefix><macro assignment>
	// <prefix> -> \global|\long|\outer


	defineFunction({
	  type: "internal",
	  names: ["\\global", "\\long", "\\\\globallong" // can’t be entered directly
	  ],
	  props: {
	    numArgs: 0,
	    allowedInText: true
	  },

	  handler(_ref) {
	    var {
	      parser,
	      funcName
	    } = _ref;
	    parser.consumeSpaces();
	    var token = parser.fetch();

	    if (globalMap[token.text]) {
	      // KaTeX doesn't have \par, so ignore \long
	      if (funcName === "\\global" || funcName === "\\\\globallong") {
	        token.text = globalMap[token.text];
	      }

	      return assertNodeType(parser.parseFunction(), "internal");
	    }

	    throw new ParseError("Invalid token after macro prefix", token);
	  }

	}); // Basic support for macro definitions: \def, \gdef, \edef, \xdef
	// <definition> -> <def><control sequence><definition text>
	// <def> -> \def|\gdef|\edef|\xdef
	// <definition text> -> <parameter text><left brace><balanced text><right brace>

	defineFunction({
	  type: "internal",
	  names: ["\\def", "\\gdef", "\\edef", "\\xdef"],
	  props: {
	    numArgs: 0,
	    allowedInText: true,
	    primitive: true
	  },

	  handler(_ref2) {
	    var {
	      parser,
	      funcName
	    } = _ref2;
	    var tok = parser.gullet.popToken();
	    var name = tok.text;

	    if (/^(?:[\\{}$&#^_]|EOF)$/.test(name)) {
	      throw new ParseError("Expected a control sequence", tok);
	    }

	    var numArgs = 0;
	    var insert;
	    var delimiters = [[]]; // <parameter text> contains no braces

	    while (parser.gullet.future().text !== "{") {
	      tok = parser.gullet.popToken();

	      if (tok.text === "#") {
	        // If the very last character of the <parameter text> is #, so that
	        // this # is immediately followed by {, TeX will behave as if the {
	        // had been inserted at the right end of both the parameter text
	        // and the replacement text.
	        if (parser.gullet.future().text === "{") {
	          insert = parser.gullet.future();
	          delimiters[numArgs].push("{");
	          break;
	        } // A parameter, the first appearance of # must be followed by 1,
	        // the next by 2, and so on; up to nine #’s are allowed


	        tok = parser.gullet.popToken();

	        if (!/^[1-9]$/.test(tok.text)) {
	          throw new ParseError("Invalid argument number \"" + tok.text + "\"");
	        }

	        if (parseInt(tok.text) !== numArgs + 1) {
	          throw new ParseError("Argument number \"" + tok.text + "\" out of order");
	        }

	        numArgs++;
	        delimiters.push([]);
	      } else if (tok.text === "EOF") {
	        throw new ParseError("Expected a macro definition");
	      } else {
	        delimiters[numArgs].push(tok.text);
	      }
	    } // replacement text, enclosed in '{' and '}' and properly nested


	    var {
	      tokens
	    } = parser.gullet.consumeArg();

	    if (insert) {
	      tokens.unshift(insert);
	    }

	    if (funcName === "\\edef" || funcName === "\\xdef") {
	      tokens = parser.gullet.expandTokens(tokens);
	      tokens.reverse(); // to fit in with stack order
	    } // Final arg is the expansion of the macro


	    parser.gullet.macros.set(name, {
	      tokens,
	      numArgs,
	      delimiters
	    }, funcName === globalMap[funcName]);
	    return {
	      type: "internal",
	      mode: parser.mode
	    };
	  }

	}); // <simple assignment> -> <let assignment>
	// <let assignment> -> \futurelet<control sequence><token><token>
	//     | \let<control sequence><equals><one optional space><token>
	// <equals> -> <optional spaces>|<optional spaces>=

	defineFunction({
	  type: "internal",
	  names: ["\\let", "\\\\globallet" // can’t be entered directly
	  ],
	  props: {
	    numArgs: 0,
	    allowedInText: true,
	    primitive: true
	  },

	  handler(_ref3) {
	    var {
	      parser,
	      funcName
	    } = _ref3;
	    var name = checkControlSequence(parser.gullet.popToken());
	    parser.gullet.consumeSpaces();
	    var tok = getRHS(parser);
	    letCommand(parser, name, tok, funcName === "\\\\globallet");
	    return {
	      type: "internal",
	      mode: parser.mode
	    };
	  }

	}); // ref: https://www.tug.org/TUGboat/tb09-3/tb22bechtolsheim.pdf

	defineFunction({
	  type: "internal",
	  names: ["\\futurelet", "\\\\globalfuture" // can’t be entered directly
	  ],
	  props: {
	    numArgs: 0,
	    allowedInText: true,
	    primitive: true
	  },

	  handler(_ref4) {
	    var {
	      parser,
	      funcName
	    } = _ref4;
	    var name = checkControlSequence(parser.gullet.popToken());
	    var middle = parser.gullet.popToken();
	    var tok = parser.gullet.popToken();
	    letCommand(parser, name, tok, funcName === "\\\\globalfuture");
	    parser.gullet.pushToken(tok);
	    parser.gullet.pushToken(middle);
	    return {
	      type: "internal",
	      mode: parser.mode
	    };
	  }

	});

	/**
	 * This file deals with creating delimiters of various sizes. The TeXbook
	 * discusses these routines on page 441-442, in the "Another subroutine sets box
	 * x to a specified variable delimiter" paragraph.
	 *
	 * There are three main routines here. `makeSmallDelim` makes a delimiter in the
	 * normal font, but in either text, script, or scriptscript style.
	 * `makeLargeDelim` makes a delimiter in textstyle, but in one of the Size1,
	 * Size2, Size3, or Size4 fonts. `makeStackedDelim` makes a delimiter out of
	 * smaller pieces that are stacked on top of one another.
	 *
	 * The functions take a parameter `center`, which determines if the delimiter
	 * should be centered around the axis.
	 *
	 * Then, there are three exposed functions. `sizedDelim` makes a delimiter in
	 * one of the given sizes. This is used for things like `\bigl`.
	 * `customSizedDelim` makes a delimiter with a given total height+depth. It is
	 * called in places like `\sqrt`. `leftRightDelim` makes an appropriate
	 * delimiter which surrounds an expression of a given height an depth. It is
	 * used in `\left` and `\right`.
	 */

	/**
	 * Get the metrics for a given symbol and font, after transformation (i.e.
	 * after following replacement from symbols.js)
	 */
	var getMetrics = function getMetrics(symbol, font, mode) {
	  var replace = symbols.math[symbol] && symbols.math[symbol].replace;
	  var metrics = getCharacterMetrics(replace || symbol, font, mode);

	  if (!metrics) {
	    throw new Error("Unsupported symbol " + symbol + " and font size " + font + ".");
	  }

	  return metrics;
	};
	/**
	 * Puts a delimiter span in a given style, and adds appropriate height, depth,
	 * and maxFontSizes.
	 */


	var styleWrap = function styleWrap(delim, toStyle, options, classes) {
	  var newOptions = options.havingBaseStyle(toStyle);
	  var span = buildCommon.makeSpan(classes.concat(newOptions.sizingClasses(options)), [delim], options);
	  var delimSizeMultiplier = newOptions.sizeMultiplier / options.sizeMultiplier;
	  span.height *= delimSizeMultiplier;
	  span.depth *= delimSizeMultiplier;
	  span.maxFontSize = newOptions.sizeMultiplier;
	  return span;
	};

	var centerSpan = function centerSpan(span, options, style) {
	  var newOptions = options.havingBaseStyle(style);
	  var shift = (1 - options.sizeMultiplier / newOptions.sizeMultiplier) * options.fontMetrics().axisHeight;
	  span.classes.push("delimcenter");
	  span.style.top = makeEm(shift);
	  span.height -= shift;
	  span.depth += shift;
	};
	/**
	 * Makes a small delimiter. This is a delimiter that comes in the Main-Regular
	 * font, but is restyled to either be in textstyle, scriptstyle, or
	 * scriptscriptstyle.
	 */


	var makeSmallDelim = function makeSmallDelim(delim, style, center, options, mode, classes) {
	  var text = buildCommon.makeSymbol(delim, "Main-Regular", mode, options);
	  var span = styleWrap(text, style, options, classes);

	  if (center) {
	    centerSpan(span, options, style);
	  }

	  return span;
	};
	/**
	 * Builds a symbol in the given font size (note size is an integer)
	 */


	var mathrmSize = function mathrmSize(value, size, mode, options) {
	  return buildCommon.makeSymbol(value, "Size" + size + "-Regular", mode, options);
	};
	/**
	 * Makes a large delimiter. This is a delimiter that comes in the Size1, Size2,
	 * Size3, or Size4 fonts. It is always rendered in textstyle.
	 */


	var makeLargeDelim = function makeLargeDelim(delim, size, center, options, mode, classes) {
	  var inner = mathrmSize(delim, size, mode, options);
	  var span = styleWrap(buildCommon.makeSpan(["delimsizing", "size" + size], [inner], options), Style$1.TEXT, options, classes);

	  if (center) {
	    centerSpan(span, options, Style$1.TEXT);
	  }

	  return span;
	};
	/**
	 * Make a span from a font glyph with the given offset and in the given font.
	 * This is used in makeStackedDelim to make the stacking pieces for the delimiter.
	 */


	var makeGlyphSpan = function makeGlyphSpan(symbol, font, mode) {
	  var sizeClass; // Apply the correct CSS class to choose the right font.

	  if (font === "Size1-Regular") {
	    sizeClass = "delim-size1";
	  } else
	    /* if (font === "Size4-Regular") */
	    {
	      sizeClass = "delim-size4";
	    }

	  var corner = buildCommon.makeSpan(["delimsizinginner", sizeClass], [buildCommon.makeSpan([], [buildCommon.makeSymbol(symbol, font, mode)])]); // Since this will be passed into `makeVList` in the end, wrap the element
	  // in the appropriate tag that VList uses.

	  return {
	    type: "elem",
	    elem: corner
	  };
	};

	var makeInner = function makeInner(ch, height, options) {
	  // Create a span with inline SVG for the inner part of a tall stacked delimiter.
	  var width = fontMetricsData['Size4-Regular'][ch.charCodeAt(0)] ? fontMetricsData['Size4-Regular'][ch.charCodeAt(0)][4] : fontMetricsData['Size1-Regular'][ch.charCodeAt(0)][4];
	  var path = new PathNode("inner", innerPath(ch, Math.round(1000 * height)));
	  var svgNode = new SvgNode([path], {
	    "width": makeEm(width),
	    "height": makeEm(height),
	    // Override CSS rule `.katex svg { width: 100% }`
	    "style": "width:" + makeEm(width),
	    "viewBox": "0 0 " + 1000 * width + " " + Math.round(1000 * height),
	    "preserveAspectRatio": "xMinYMin"
	  });
	  var span = buildCommon.makeSvgSpan([], [svgNode], options);
	  span.height = height;
	  span.style.height = makeEm(height);
	  span.style.width = makeEm(width);
	  return {
	    type: "elem",
	    elem: span
	  };
	}; // Helpers for makeStackedDelim


	var lapInEms = 0.008;
	var lap = {
	  type: "kern",
	  size: -1 * lapInEms
	};
	var verts = ["|", "\\lvert", "\\rvert", "\\vert"];
	var doubleVerts = ["\\|", "\\lVert", "\\rVert", "\\Vert"];
	/**
	 * Make a stacked delimiter out of a given delimiter, with the total height at
	 * least `heightTotal`. This routine is mentioned on page 442 of the TeXbook.
	 */

	var makeStackedDelim = function makeStackedDelim(delim, heightTotal, center, options, mode, classes) {
	  // There are four parts, the top, an optional middle, a repeated part, and a
	  // bottom.
	  var top;
	  var middle;
	  var repeat;
	  var bottom;
	  top = repeat = bottom = delim;
	  middle = null; // Also keep track of what font the delimiters are in

	  var font = "Size1-Regular"; // We set the parts and font based on the symbol. Note that we use
	  // '\u23d0' instead of '|' and '\u2016' instead of '\\|' for the
	  // repeats of the arrows

	  if (delim === "\\uparrow") {
	    repeat = bottom = "\u23d0";
	  } else if (delim === "\\Uparrow") {
	    repeat = bottom = "\u2016";
	  } else if (delim === "\\downarrow") {
	    top = repeat = "\u23d0";
	  } else if (delim === "\\Downarrow") {
	    top = repeat = "\u2016";
	  } else if (delim === "\\updownarrow") {
	    top = "\\uparrow";
	    repeat = "\u23d0";
	    bottom = "\\downarrow";
	  } else if (delim === "\\Updownarrow") {
	    top = "\\Uparrow";
	    repeat = "\u2016";
	    bottom = "\\Downarrow";
	  } else if (utils.contains(verts, delim)) {
	    repeat = "\u2223";
	  } else if (utils.contains(doubleVerts, delim)) {
	    repeat = "\u2225";
	  } else if (delim === "[" || delim === "\\lbrack") {
	    top = "\u23a1";
	    repeat = "\u23a2";
	    bottom = "\u23a3";
	    font = "Size4-Regular";
	  } else if (delim === "]" || delim === "\\rbrack") {
	    top = "\u23a4";
	    repeat = "\u23a5";
	    bottom = "\u23a6";
	    font = "Size4-Regular";
	  } else if (delim === "\\lfloor" || delim === "\u230a") {
	    repeat = top = "\u23a2";
	    bottom = "\u23a3";
	    font = "Size4-Regular";
	  } else if (delim === "\\lceil" || delim === "\u2308") {
	    top = "\u23a1";
	    repeat = bottom = "\u23a2";
	    font = "Size4-Regular";
	  } else if (delim === "\\rfloor" || delim === "\u230b") {
	    repeat = top = "\u23a5";
	    bottom = "\u23a6";
	    font = "Size4-Regular";
	  } else if (delim === "\\rceil" || delim === "\u2309") {
	    top = "\u23a4";
	    repeat = bottom = "\u23a5";
	    font = "Size4-Regular";
	  } else if (delim === "(" || delim === "\\lparen") {
	    top = "\u239b";
	    repeat = "\u239c";
	    bottom = "\u239d";
	    font = "Size4-Regular";
	  } else if (delim === ")" || delim === "\\rparen") {
	    top = "\u239e";
	    repeat = "\u239f";
	    bottom = "\u23a0";
	    font = "Size4-Regular";
	  } else if (delim === "\\{" || delim === "\\lbrace") {
	    top = "\u23a7";
	    middle = "\u23a8";
	    bottom = "\u23a9";
	    repeat = "\u23aa";
	    font = "Size4-Regular";
	  } else if (delim === "\\}" || delim === "\\rbrace") {
	    top = "\u23ab";
	    middle = "\u23ac";
	    bottom = "\u23ad";
	    repeat = "\u23aa";
	    font = "Size4-Regular";
	  } else if (delim === "\\lgroup" || delim === "\u27ee") {
	    top = "\u23a7";
	    bottom = "\u23a9";
	    repeat = "\u23aa";
	    font = "Size4-Regular";
	  } else if (delim === "\\rgroup" || delim === "\u27ef") {
	    top = "\u23ab";
	    bottom = "\u23ad";
	    repeat = "\u23aa";
	    font = "Size4-Regular";
	  } else if (delim === "\\lmoustache" || delim === "\u23b0") {
	    top = "\u23a7";
	    bottom = "\u23ad";
	    repeat = "\u23aa";
	    font = "Size4-Regular";
	  } else if (delim === "\\rmoustache" || delim === "\u23b1") {
	    top = "\u23ab";
	    bottom = "\u23a9";
	    repeat = "\u23aa";
	    font = "Size4-Regular";
	  } // Get the metrics of the four sections


	  var topMetrics = getMetrics(top, font, mode);
	  var topHeightTotal = topMetrics.height + topMetrics.depth;
	  var repeatMetrics = getMetrics(repeat, font, mode);
	  var repeatHeightTotal = repeatMetrics.height + repeatMetrics.depth;
	  var bottomMetrics = getMetrics(bottom, font, mode);
	  var bottomHeightTotal = bottomMetrics.height + bottomMetrics.depth;
	  var middleHeightTotal = 0;
	  var middleFactor = 1;

	  if (middle !== null) {
	    var middleMetrics = getMetrics(middle, font, mode);
	    middleHeightTotal = middleMetrics.height + middleMetrics.depth;
	    middleFactor = 2; // repeat symmetrically above and below middle
	  } // Calcuate the minimal height that the delimiter can have.
	  // It is at least the size of the top, bottom, and optional middle combined.


	  var minHeight = topHeightTotal + bottomHeightTotal + middleHeightTotal; // Compute the number of copies of the repeat symbol we will need

	  var repeatCount = Math.max(0, Math.ceil((heightTotal - minHeight) / (middleFactor * repeatHeightTotal))); // Compute the total height of the delimiter including all the symbols

	  var realHeightTotal = minHeight + repeatCount * middleFactor * repeatHeightTotal; // The center of the delimiter is placed at the center of the axis. Note
	  // that in this context, "center" means that the delimiter should be
	  // centered around the axis in the current style, while normally it is
	  // centered around the axis in textstyle.

	  var axisHeight = options.fontMetrics().axisHeight;

	  if (center) {
	    axisHeight *= options.sizeMultiplier;
	  } // Calculate the depth


	  var depth = realHeightTotal / 2 - axisHeight; // Now, we start building the pieces that will go into the vlist
	  // Keep a list of the pieces of the stacked delimiter

	  var stack = []; // Add the bottom symbol

	  stack.push(makeGlyphSpan(bottom, font, mode));
	  stack.push(lap); // overlap

	  if (middle === null) {
	    // The middle section will be an SVG. Make it an extra 0.016em tall.
	    // We'll overlap by 0.008em at top and bottom.
	    var innerHeight = realHeightTotal - topHeightTotal - bottomHeightTotal + 2 * lapInEms;
	    stack.push(makeInner(repeat, innerHeight, options));
	  } else {
	    // When there is a middle bit, we need the middle part and two repeated
	    // sections
	    var _innerHeight = (realHeightTotal - topHeightTotal - bottomHeightTotal - middleHeightTotal) / 2 + 2 * lapInEms;

	    stack.push(makeInner(repeat, _innerHeight, options)); // Now insert the middle of the brace.

	    stack.push(lap);
	    stack.push(makeGlyphSpan(middle, font, mode));
	    stack.push(lap);
	    stack.push(makeInner(repeat, _innerHeight, options));
	  } // Add the top symbol


	  stack.push(lap);
	  stack.push(makeGlyphSpan(top, font, mode)); // Finally, build the vlist

	  var newOptions = options.havingBaseStyle(Style$1.TEXT);
	  var inner = buildCommon.makeVList({
	    positionType: "bottom",
	    positionData: depth,
	    children: stack
	  }, newOptions);
	  return styleWrap(buildCommon.makeSpan(["delimsizing", "mult"], [inner], newOptions), Style$1.TEXT, options, classes);
	}; // All surds have 0.08em padding above the viniculum inside the SVG.
	// That keeps browser span height rounding error from pinching the line.


	var vbPad = 80; // padding above the surd, measured inside the viewBox.

	var emPad = 0.08; // padding, in ems, measured in the document.

	var sqrtSvg = function sqrtSvg(sqrtName, height, viewBoxHeight, extraViniculum, options) {
	  var path = sqrtPath(sqrtName, extraViniculum, viewBoxHeight);
	  var pathNode = new PathNode(sqrtName, path);
	  var svg = new SvgNode([pathNode], {
	    // Note: 1000:1 ratio of viewBox to document em width.
	    "width": "400em",
	    "height": makeEm(height),
	    "viewBox": "0 0 400000 " + viewBoxHeight,
	    "preserveAspectRatio": "xMinYMin slice"
	  });
	  return buildCommon.makeSvgSpan(["hide-tail"], [svg], options);
	};
	/**
	 * Make a sqrt image of the given height,
	 */


	var makeSqrtImage = function makeSqrtImage(height, options) {
	  // Define a newOptions that removes the effect of size changes such as \Huge.
	  // We don't pick different a height surd for \Huge. For it, we scale up.
	  var newOptions = options.havingBaseSizing(); // Pick the desired surd glyph from a sequence of surds.

	  var delim = traverseSequence("\\surd", height * newOptions.sizeMultiplier, stackLargeDelimiterSequence, newOptions);
	  var sizeMultiplier = newOptions.sizeMultiplier; // default
	  // The standard sqrt SVGs each have a 0.04em thick viniculum.
	  // If Settings.minRuleThickness is larger than that, we add extraViniculum.

	  var extraViniculum = Math.max(0, options.minRuleThickness - options.fontMetrics().sqrtRuleThickness); // Create a span containing an SVG image of a sqrt symbol.

	  var span;
	  var spanHeight = 0;
	  var texHeight = 0;
	  var viewBoxHeight = 0;
	  var advanceWidth; // We create viewBoxes with 80 units of "padding" above each surd.
	  // Then browser rounding error on the parent span height will not
	  // encroach on the ink of the viniculum. But that padding is not
	  // included in the TeX-like `height` used for calculation of
	  // vertical alignment. So texHeight = span.height < span.style.height.

	  if (delim.type === "small") {
	    // Get an SVG that is derived from glyph U+221A in font KaTeX-Main.
	    // 1000 unit normal glyph height.
	    viewBoxHeight = 1000 + 1000 * extraViniculum + vbPad;

	    if (height < 1.0) {
	      sizeMultiplier = 1.0; // mimic a \textfont radical
	    } else if (height < 1.4) {
	      sizeMultiplier = 0.7; // mimic a \scriptfont radical
	    }

	    spanHeight = (1.0 + extraViniculum + emPad) / sizeMultiplier;
	    texHeight = (1.00 + extraViniculum) / sizeMultiplier;
	    span = sqrtSvg("sqrtMain", spanHeight, viewBoxHeight, extraViniculum, options);
	    span.style.minWidth = "0.853em";
	    advanceWidth = 0.833 / sizeMultiplier; // from the font.
	  } else if (delim.type === "large") {
	    // These SVGs come from fonts: KaTeX_Size1, _Size2, etc.
	    viewBoxHeight = (1000 + vbPad) * sizeToMaxHeight[delim.size];
	    texHeight = (sizeToMaxHeight[delim.size] + extraViniculum) / sizeMultiplier;
	    spanHeight = (sizeToMaxHeight[delim.size] + extraViniculum + emPad) / sizeMultiplier;
	    span = sqrtSvg("sqrtSize" + delim.size, spanHeight, viewBoxHeight, extraViniculum, options);
	    span.style.minWidth = "1.02em";
	    advanceWidth = 1.0 / sizeMultiplier; // 1.0 from the font.
	  } else {
	    // Tall sqrt. In TeX, this would be stacked using multiple glyphs.
	    // We'll use a single SVG to accomplish the same thing.
	    spanHeight = height + extraViniculum + emPad;
	    texHeight = height + extraViniculum;
	    viewBoxHeight = Math.floor(1000 * height + extraViniculum) + vbPad;
	    span = sqrtSvg("sqrtTall", spanHeight, viewBoxHeight, extraViniculum, options);
	    span.style.minWidth = "0.742em";
	    advanceWidth = 1.056;
	  }

	  span.height = texHeight;
	  span.style.height = makeEm(spanHeight);
	  return {
	    span,
	    advanceWidth,
	    // Calculate the actual line width.
	    // This actually should depend on the chosen font -- e.g. \boldmath
	    // should use the thicker surd symbols from e.g. KaTeX_Main-Bold, and
	    // have thicker rules.
	    ruleWidth: (options.fontMetrics().sqrtRuleThickness + extraViniculum) * sizeMultiplier
	  };
	}; // There are three kinds of delimiters, delimiters that stack when they become
	// too large


	var stackLargeDelimiters = ["(", "\\lparen", ")", "\\rparen", "[", "\\lbrack", "]", "\\rbrack", "\\{", "\\lbrace", "\\}", "\\rbrace", "\\lfloor", "\\rfloor", "\u230a", "\u230b", "\\lceil", "\\rceil", "\u2308", "\u2309", "\\surd"]; // delimiters that always stack

	var stackAlwaysDelimiters = ["\\uparrow", "\\downarrow", "\\updownarrow", "\\Uparrow", "\\Downarrow", "\\Updownarrow", "|", "\\|", "\\vert", "\\Vert", "\\lvert", "\\rvert", "\\lVert", "\\rVert", "\\lgroup", "\\rgroup", "\u27ee", "\u27ef", "\\lmoustache", "\\rmoustache", "\u23b0", "\u23b1"]; // and delimiters that never stack

	var stackNeverDelimiters = ["<", ">", "\\langle", "\\rangle", "/", "\\backslash", "\\lt", "\\gt"]; // Metrics of the different sizes. Found by looking at TeX's output of
	// $\bigl| // \Bigl| \biggl| \Biggl| \showlists$
	// Used to create stacked delimiters of appropriate sizes in makeSizedDelim.

	var sizeToMaxHeight = [0, 1.2, 1.8, 2.4, 3.0];
	/**
	 * Used to create a delimiter of a specific size, where `size` is 1, 2, 3, or 4.
	 */

	var makeSizedDelim = function makeSizedDelim(delim, size, options, mode, classes) {
	  // < and > turn into \langle and \rangle in delimiters
	  if (delim === "<" || delim === "\\lt" || delim === "\u27e8") {
	    delim = "\\langle";
	  } else if (delim === ">" || delim === "\\gt" || delim === "\u27e9") {
	    delim = "\\rangle";
	  } // Sized delimiters are never centered.


	  if (utils.contains(stackLargeDelimiters, delim) || utils.contains(stackNeverDelimiters, delim)) {
	    return makeLargeDelim(delim, size, false, options, mode, classes);
	  } else if (utils.contains(stackAlwaysDelimiters, delim)) {
	    return makeStackedDelim(delim, sizeToMaxHeight[size], false, options, mode, classes);
	  } else {
	    throw new ParseError("Illegal delimiter: '" + delim + "'");
	  }
	};
	/**
	 * There are three different sequences of delimiter sizes that the delimiters
	 * follow depending on the kind of delimiter. This is used when creating custom
	 * sized delimiters to decide whether to create a small, large, or stacked
	 * delimiter.
	 *
	 * In real TeX, these sequences aren't explicitly defined, but are instead
	 * defined inside the font metrics. Since there are only three sequences that
	 * are possible for the delimiters that TeX defines, it is easier to just encode
	 * them explicitly here.
	 */


	// Delimiters that never stack try small delimiters and large delimiters only
	var stackNeverDelimiterSequence = [{
	  type: "small",
	  style: Style$1.SCRIPTSCRIPT
	}, {
	  type: "small",
	  style: Style$1.SCRIPT
	}, {
	  type: "small",
	  style: Style$1.TEXT
	}, {
	  type: "large",
	  size: 1
	}, {
	  type: "large",
	  size: 2
	}, {
	  type: "large",
	  size: 3
	}, {
	  type: "large",
	  size: 4
	}]; // Delimiters that always stack try the small delimiters first, then stack

	var stackAlwaysDelimiterSequence = [{
	  type: "small",
	  style: Style$1.SCRIPTSCRIPT
	}, {
	  type: "small",
	  style: Style$1.SCRIPT
	}, {
	  type: "small",
	  style: Style$1.TEXT
	}, {
	  type: "stack"
	}]; // Delimiters that stack when large try the small and then large delimiters, and
	// stack afterwards

	var stackLargeDelimiterSequence = [{
	  type: "small",
	  style: Style$1.SCRIPTSCRIPT
	}, {
	  type: "small",
	  style: Style$1.SCRIPT
	}, {
	  type: "small",
	  style: Style$1.TEXT
	}, {
	  type: "large",
	  size: 1
	}, {
	  type: "large",
	  size: 2
	}, {
	  type: "large",
	  size: 3
	}, {
	  type: "large",
	  size: 4
	}, {
	  type: "stack"
	}];
	/**
	 * Get the font used in a delimiter based on what kind of delimiter it is.
	 * TODO(#963) Use more specific font family return type once that is introduced.
	 */

	var delimTypeToFont = function delimTypeToFont(type) {
	  if (type.type === "small") {
	    return "Main-Regular";
	  } else if (type.type === "large") {
	    return "Size" + type.size + "-Regular";
	  } else if (type.type === "stack") {
	    return "Size4-Regular";
	  } else {
	    throw new Error("Add support for delim type '" + type.type + "' here.");
	  }
	};
	/**
	 * Traverse a sequence of types of delimiters to decide what kind of delimiter
	 * should be used to create a delimiter of the given height+depth.
	 */


	var traverseSequence = function traverseSequence(delim, height, sequence, options) {
	  // Here, we choose the index we should start at in the sequences. In smaller
	  // sizes (which correspond to larger numbers in style.size) we start earlier
	  // in the sequence. Thus, scriptscript starts at index 3-3=0, script starts
	  // at index 3-2=1, text starts at 3-1=2, and display starts at min(2,3-0)=2
	  var start = Math.min(2, 3 - options.style.size);

	  for (var i = start; i < sequence.length; i++) {
	    if (sequence[i].type === "stack") {
	      // This is always the last delimiter, so we just break the loop now.
	      break;
	    }

	    var metrics = getMetrics(delim, delimTypeToFont(sequence[i]), "math");
	    var heightDepth = metrics.height + metrics.depth; // Small delimiters are scaled down versions of the same font, so we
	    // account for the style change size.

	    if (sequence[i].type === "small") {
	      var newOptions = options.havingBaseStyle(sequence[i].style);
	      heightDepth *= newOptions.sizeMultiplier;
	    } // Check if the delimiter at this size works for the given height.


	    if (heightDepth > height) {
	      return sequence[i];
	    }
	  } // If we reached the end of the sequence, return the last sequence element.


	  return sequence[sequence.length - 1];
	};
	/**
	 * Make a delimiter of a given height+depth, with optional centering. Here, we
	 * traverse the sequences, and create a delimiter that the sequence tells us to.
	 */


	var makeCustomSizedDelim = function makeCustomSizedDelim(delim, height, center, options, mode, classes) {
	  if (delim === "<" || delim === "\\lt" || delim === "\u27e8") {
	    delim = "\\langle";
	  } else if (delim === ">" || delim === "\\gt" || delim === "\u27e9") {
	    delim = "\\rangle";
	  } // Decide what sequence to use


	  var sequence;

	  if (utils.contains(stackNeverDelimiters, delim)) {
	    sequence = stackNeverDelimiterSequence;
	  } else if (utils.contains(stackLargeDelimiters, delim)) {
	    sequence = stackLargeDelimiterSequence;
	  } else {
	    sequence = stackAlwaysDelimiterSequence;
	  } // Look through the sequence


	  var delimType = traverseSequence(delim, height, sequence, options); // Get the delimiter from font glyphs.
	  // Depending on the sequence element we decided on, call the
	  // appropriate function.

	  if (delimType.type === "small") {
	    return makeSmallDelim(delim, delimType.style, center, options, mode, classes);
	  } else if (delimType.type === "large") {
	    return makeLargeDelim(delim, delimType.size, center, options, mode, classes);
	  } else
	    /* if (delimType.type === "stack") */
	    {
	      return makeStackedDelim(delim, height, center, options, mode, classes);
	    }
	};
	/**
	 * Make a delimiter for use with `\left` and `\right`, given a height and depth
	 * of an expression that the delimiters surround.
	 */


	var makeLeftRightDelim = function makeLeftRightDelim(delim, height, depth, options, mode, classes) {
	  // We always center \left/\right delimiters, so the axis is always shifted
	  var axisHeight = options.fontMetrics().axisHeight * options.sizeMultiplier; // Taken from TeX source, tex.web, function make_left_right

	  var delimiterFactor = 901;
	  var delimiterExtend = 5.0 / options.fontMetrics().ptPerEm;
	  var maxDistFromAxis = Math.max(height - axisHeight, depth + axisHeight);
	  var totalHeight = Math.max( // In real TeX, calculations are done using integral values which are
	  // 65536 per pt, or 655360 per em. So, the division here truncates in
	  // TeX but doesn't here, producing different results. If we wanted to
	  // exactly match TeX's calculation, we could do
	  //   Math.floor(655360 * maxDistFromAxis / 500) *
	  //    delimiterFactor / 655360
	  // (To see the difference, compare
	  //    x^{x^{\left(\rule{0.1em}{0.68em}\right)}}
	  // in TeX and KaTeX)
	  maxDistFromAxis / 500 * delimiterFactor, 2 * maxDistFromAxis - delimiterExtend); // Finally, we defer to `makeCustomSizedDelim` with our calculated total
	  // height

	  return makeCustomSizedDelim(delim, totalHeight, true, options, mode, classes);
	};

	var delimiter = {
	  sqrtImage: makeSqrtImage,
	  sizedDelim: makeSizedDelim,
	  sizeToMaxHeight: sizeToMaxHeight,
	  customSizedDelim: makeCustomSizedDelim,
	  leftRightDelim: makeLeftRightDelim
	};

	// Extra data needed for the delimiter handler down below
	var delimiterSizes = {
	  "\\bigl": {
	    mclass: "mopen",
	    size: 1
	  },
	  "\\Bigl": {
	    mclass: "mopen",
	    size: 2
	  },
	  "\\biggl": {
	    mclass: "mopen",
	    size: 3
	  },
	  "\\Biggl": {
	    mclass: "mopen",
	    size: 4
	  },
	  "\\bigr": {
	    mclass: "mclose",
	    size: 1
	  },
	  "\\Bigr": {
	    mclass: "mclose",
	    size: 2
	  },
	  "\\biggr": {
	    mclass: "mclose",
	    size: 3
	  },
	  "\\Biggr": {
	    mclass: "mclose",
	    size: 4
	  },
	  "\\bigm": {
	    mclass: "mrel",
	    size: 1
	  },
	  "\\Bigm": {
	    mclass: "mrel",
	    size: 2
	  },
	  "\\biggm": {
	    mclass: "mrel",
	    size: 3
	  },
	  "\\Biggm": {
	    mclass: "mrel",
	    size: 4
	  },
	  "\\big": {
	    mclass: "mord",
	    size: 1
	  },
	  "\\Big": {
	    mclass: "mord",
	    size: 2
	  },
	  "\\bigg": {
	    mclass: "mord",
	    size: 3
	  },
	  "\\Bigg": {
	    mclass: "mord",
	    size: 4
	  }
	};
	var delimiters = ["(", "\\lparen", ")", "\\rparen", "[", "\\lbrack", "]", "\\rbrack", "\\{", "\\lbrace", "\\}", "\\rbrace", "\\lfloor", "\\rfloor", "\u230a", "\u230b", "\\lceil", "\\rceil", "\u2308", "\u2309", "<", ">", "\\langle", "\u27e8", "\\rangle", "\u27e9", "\\lt", "\\gt", "\\lvert", "\\rvert", "\\lVert", "\\rVert", "\\lgroup", "\\rgroup", "\u27ee", "\u27ef", "\\lmoustache", "\\rmoustache", "\u23b0", "\u23b1", "/", "\\backslash", "|", "\\vert", "\\|", "\\Vert", "\\uparrow", "\\Uparrow", "\\downarrow", "\\Downarrow", "\\updownarrow", "\\Updownarrow", "."];

	// Delimiter functions
	function checkDelimiter(delim, context) {
	  var symDelim = checkSymbolNodeType(delim);

	  if (symDelim && utils.contains(delimiters, symDelim.text)) {
	    return symDelim;
	  } else if (symDelim) {
	    throw new ParseError("Invalid delimiter '" + symDelim.text + "' after '" + context.funcName + "'", delim);
	  } else {
	    throw new ParseError("Invalid delimiter type '" + delim.type + "'", delim);
	  }
	}

	defineFunction({
	  type: "delimsizing",
	  names: ["\\bigl", "\\Bigl", "\\biggl", "\\Biggl", "\\bigr", "\\Bigr", "\\biggr", "\\Biggr", "\\bigm", "\\Bigm", "\\biggm", "\\Biggm", "\\big", "\\Big", "\\bigg", "\\Bigg"],
	  props: {
	    numArgs: 1,
	    argTypes: ["primitive"]
	  },
	  handler: (context, args) => {
	    var delim = checkDelimiter(args[0], context);
	    return {
	      type: "delimsizing",
	      mode: context.parser.mode,
	      size: delimiterSizes[context.funcName].size,
	      mclass: delimiterSizes[context.funcName].mclass,
	      delim: delim.text
	    };
	  },
	  htmlBuilder: (group, options) => {
	    if (group.delim === ".") {
	      // Empty delimiters still count as elements, even though they don't
	      // show anything.
	      return buildCommon.makeSpan([group.mclass]);
	    } // Use delimiter.sizedDelim to generate the delimiter.


	    return delimiter.sizedDelim(group.delim, group.size, options, group.mode, [group.mclass]);
	  },
	  mathmlBuilder: group => {
	    var children = [];

	    if (group.delim !== ".") {
	      children.push(makeText(group.delim, group.mode));
	    }

	    var node = new mathMLTree.MathNode("mo", children);

	    if (group.mclass === "mopen" || group.mclass === "mclose") {
	      // Only some of the delimsizing functions act as fences, and they
	      // return "mopen" or "mclose" mclass.
	      node.setAttribute("fence", "true");
	    } else {
	      // Explicitly disable fencing if it's not a fence, to override the
	      // defaults.
	      node.setAttribute("fence", "false");
	    }

	    node.setAttribute("stretchy", "true");
	    var size = makeEm(delimiter.sizeToMaxHeight[group.size]);
	    node.setAttribute("minsize", size);
	    node.setAttribute("maxsize", size);
	    return node;
	  }
	});

	function assertParsed(group) {
	  if (!group.body) {
	    throw new Error("Bug: The leftright ParseNode wasn't fully parsed.");
	  }
	}

	defineFunction({
	  type: "leftright-right",
	  names: ["\\right"],
	  props: {
	    numArgs: 1,
	    primitive: true
	  },
	  handler: (context, args) => {
	    // \left case below triggers parsing of \right in
	    //   `const right = parser.parseFunction();`
	    // uses this return value.
	    var color = context.parser.gullet.macros.get("\\current@color");

	    if (color && typeof color !== "string") {
	      throw new ParseError("\\current@color set to non-string in \\right");
	    }

	    return {
	      type: "leftright-right",
	      mode: context.parser.mode,
	      delim: checkDelimiter(args[0], context).text,
	      color // undefined if not set via \color

	    };
	  }
	});
	defineFunction({
	  type: "leftright",
	  names: ["\\left"],
	  props: {
	    numArgs: 1,
	    primitive: true
	  },
	  handler: (context, args) => {
	    var delim = checkDelimiter(args[0], context);
	    var parser = context.parser; // Parse out the implicit body

	    ++parser.leftrightDepth; // parseExpression stops before '\\right'

	    var body = parser.parseExpression(false);
	    --parser.leftrightDepth; // Check the next token

	    parser.expect("\\right", false);
	    var right = assertNodeType(parser.parseFunction(), "leftright-right");
	    return {
	      type: "leftright",
	      mode: parser.mode,
	      body,
	      left: delim.text,
	      right: right.delim,
	      rightColor: right.color
	    };
	  },
	  htmlBuilder: (group, options) => {
	    assertParsed(group); // Build the inner expression

	    var inner = buildExpression$1(group.body, options, true, ["mopen", "mclose"]);
	    var innerHeight = 0;
	    var innerDepth = 0;
	    var hadMiddle = false; // Calculate its height and depth

	    for (var i = 0; i < inner.length; i++) {
	      // Property `isMiddle` not defined on `span`. See comment in
	      // "middle"'s htmlBuilder.
	      // $FlowFixMe
	      if (inner[i].isMiddle) {
	        hadMiddle = true;
	      } else {
	        innerHeight = Math.max(inner[i].height, innerHeight);
	        innerDepth = Math.max(inner[i].depth, innerDepth);
	      }
	    } // The size of delimiters is the same, regardless of what style we are
	    // in. Thus, to correctly calculate the size of delimiter we need around
	    // a group, we scale down the inner size based on the size.


	    innerHeight *= options.sizeMultiplier;
	    innerDepth *= options.sizeMultiplier;
	    var leftDelim;

	    if (group.left === ".") {
	      // Empty delimiters in \left and \right make null delimiter spaces.
	      leftDelim = makeNullDelimiter(options, ["mopen"]);
	    } else {
	      // Otherwise, use leftRightDelim to generate the correct sized
	      // delimiter.
	      leftDelim = delimiter.leftRightDelim(group.left, innerHeight, innerDepth, options, group.mode, ["mopen"]);
	    } // Add it to the beginning of the expression


	    inner.unshift(leftDelim); // Handle middle delimiters

	    if (hadMiddle) {
	      for (var _i = 1; _i < inner.length; _i++) {
	        var middleDelim = inner[_i]; // Property `isMiddle` not defined on `span`. See comment in
	        // "middle"'s htmlBuilder.
	        // $FlowFixMe

	        var isMiddle = middleDelim.isMiddle;

	        if (isMiddle) {
	          // Apply the options that were active when \middle was called
	          inner[_i] = delimiter.leftRightDelim(isMiddle.delim, innerHeight, innerDepth, isMiddle.options, group.mode, []);
	        }
	      }
	    }

	    var rightDelim; // Same for the right delimiter, but using color specified by \color

	    if (group.right === ".") {
	      rightDelim = makeNullDelimiter(options, ["mclose"]);
	    } else {
	      var colorOptions = group.rightColor ? options.withColor(group.rightColor) : options;
	      rightDelim = delimiter.leftRightDelim(group.right, innerHeight, innerDepth, colorOptions, group.mode, ["mclose"]);
	    } // Add it to the end of the expression.


	    inner.push(rightDelim);
	    return buildCommon.makeSpan(["minner"], inner, options);
	  },
	  mathmlBuilder: (group, options) => {
	    assertParsed(group);
	    var inner = buildExpression(group.body, options);

	    if (group.left !== ".") {
	      var leftNode = new mathMLTree.MathNode("mo", [makeText(group.left, group.mode)]);
	      leftNode.setAttribute("fence", "true");
	      inner.unshift(leftNode);
	    }

	    if (group.right !== ".") {
	      var rightNode = new mathMLTree.MathNode("mo", [makeText(group.right, group.mode)]);
	      rightNode.setAttribute("fence", "true");

	      if (group.rightColor) {
	        rightNode.setAttribute("mathcolor", group.rightColor);
	      }

	      inner.push(rightNode);
	    }

	    return makeRow(inner);
	  }
	});
	defineFunction({
	  type: "middle",
	  names: ["\\middle"],
	  props: {
	    numArgs: 1,
	    primitive: true
	  },
	  handler: (context, args) => {
	    var delim = checkDelimiter(args[0], context);

	    if (!context.parser.leftrightDepth) {
	      throw new ParseError("\\middle without preceding \\left", delim);
	    }

	    return {
	      type: "middle",
	      mode: context.parser.mode,
	      delim: delim.text
	    };
	  },
	  htmlBuilder: (group, options) => {
	    var middleDelim;

	    if (group.delim === ".") {
	      middleDelim = makeNullDelimiter(options, []);
	    } else {
	      middleDelim = delimiter.sizedDelim(group.delim, 1, options, group.mode, []);
	      var isMiddle = {
	        delim: group.delim,
	        options
	      }; // Property `isMiddle` not defined on `span`. It is only used in
	      // this file above.
	      // TODO: Fix this violation of the `span` type and possibly rename
	      // things since `isMiddle` sounds like a boolean, but is a struct.
	      // $FlowFixMe

	      middleDelim.isMiddle = isMiddle;
	    }

	    return middleDelim;
	  },
	  mathmlBuilder: (group, options) => {
	    // A Firefox \middle will strech a character vertically only if it
	    // is in the fence part of the operator dictionary at:
	    // https://www.w3.org/TR/MathML3/appendixc.html.
	    // So we need to avoid U+2223 and use plain "|" instead.
	    var textNode = group.delim === "\\vert" || group.delim === "|" ? makeText("|", "text") : makeText(group.delim, group.mode);
	    var middleNode = new mathMLTree.MathNode("mo", [textNode]);
	    middleNode.setAttribute("fence", "true"); // MathML gives 5/18em spacing to each <mo> element.
	    // \middle should get delimiter spacing instead.

	    middleNode.setAttribute("lspace", "0.05em");
	    middleNode.setAttribute("rspace", "0.05em");
	    return middleNode;
	  }
	});

	var htmlBuilder$8 = (group, options) => {
	  // \cancel, \bcancel, \xcancel, \sout, \fbox, \colorbox, \fcolorbox, \phase
	  // Some groups can return document fragments.  Handle those by wrapping
	  // them in a span.
	  var inner = buildCommon.wrapFragment(buildGroup$1(group.body, options), options);
	  var label = group.label.substr(1);
	  var scale = options.sizeMultiplier;
	  var img;
	  var imgShift = 0; // In the LaTeX cancel package, line geometry is slightly different
	  // depending on whether the subject is wider than it is tall, or vice versa.
	  // We don't know the width of a group, so as a proxy, we test if
	  // the subject is a single character. This captures most of the
	  // subjects that should get the "tall" treatment.

	  var isSingleChar = utils.isCharacterBox(group.body);

	  if (label === "sout") {
	    img = buildCommon.makeSpan(["stretchy", "sout"]);
	    img.height = options.fontMetrics().defaultRuleThickness / scale;
	    imgShift = -0.5 * options.fontMetrics().xHeight;
	  } else if (label === "phase") {
	    // Set a couple of dimensions from the steinmetz package.
	    var lineWeight = calculateSize({
	      number: 0.6,
	      unit: "pt"
	    }, options);
	    var clearance = calculateSize({
	      number: 0.35,
	      unit: "ex"
	    }, options); // Prevent size changes like \Huge from affecting line thickness

	    var newOptions = options.havingBaseSizing();
	    scale = scale / newOptions.sizeMultiplier;
	    var angleHeight = inner.height + inner.depth + lineWeight + clearance; // Reserve a left pad for the angle.

	    inner.style.paddingLeft = makeEm(angleHeight / 2 + lineWeight); // Create an SVG

	    var viewBoxHeight = Math.floor(1000 * angleHeight * scale);
	    var path = phasePath(viewBoxHeight);
	    var svgNode = new SvgNode([new PathNode("phase", path)], {
	      "width": "400em",
	      "height": makeEm(viewBoxHeight / 1000),
	      "viewBox": "0 0 400000 " + viewBoxHeight,
	      "preserveAspectRatio": "xMinYMin slice"
	    }); // Wrap it in a span with overflow: hidden.

	    img = buildCommon.makeSvgSpan(["hide-tail"], [svgNode], options);
	    img.style.height = makeEm(angleHeight);
	    imgShift = inner.depth + lineWeight + clearance;
	  } else {
	    // Add horizontal padding
	    if (/cancel/.test(label)) {
	      if (!isSingleChar) {
	        inner.classes.push("cancel-pad");
	      }
	    } else if (label === "angl") {
	      inner.classes.push("anglpad");
	    } else {
	      inner.classes.push("boxpad");
	    } // Add vertical padding


	    var topPad = 0;
	    var bottomPad = 0;
	    var ruleThickness = 0; // ref: cancel package: \advance\totalheight2\p@ % "+2"

	    if (/box/.test(label)) {
	      ruleThickness = Math.max(options.fontMetrics().fboxrule, // default
	      options.minRuleThickness // User override.
	      );
	      topPad = options.fontMetrics().fboxsep + (label === "colorbox" ? 0 : ruleThickness);
	      bottomPad = topPad;
	    } else if (label === "angl") {
	      ruleThickness = Math.max(options.fontMetrics().defaultRuleThickness, options.minRuleThickness);
	      topPad = 4 * ruleThickness; // gap = 3 × line, plus the line itself.

	      bottomPad = Math.max(0, 0.25 - inner.depth);
	    } else {
	      topPad = isSingleChar ? 0.2 : 0;
	      bottomPad = topPad;
	    }

	    img = stretchy.encloseSpan(inner, label, topPad, bottomPad, options);

	    if (/fbox|boxed|fcolorbox/.test(label)) {
	      img.style.borderStyle = "solid";
	      img.style.borderWidth = makeEm(ruleThickness);
	    } else if (label === "angl" && ruleThickness !== 0.049) {
	      img.style.borderTopWidth = makeEm(ruleThickness);
	      img.style.borderRightWidth = makeEm(ruleThickness);
	    }

	    imgShift = inner.depth + bottomPad;

	    if (group.backgroundColor) {
	      img.style.backgroundColor = group.backgroundColor;

	      if (group.borderColor) {
	        img.style.borderColor = group.borderColor;
	      }
	    }
	  }

	  var vlist;

	  if (group.backgroundColor) {
	    vlist = buildCommon.makeVList({
	      positionType: "individualShift",
	      children: [// Put the color background behind inner;
	      {
	        type: "elem",
	        elem: img,
	        shift: imgShift
	      }, {
	        type: "elem",
	        elem: inner,
	        shift: 0
	      }]
	    }, options);
	  } else {
	    var classes = /cancel|phase/.test(label) ? ["svg-align"] : [];
	    vlist = buildCommon.makeVList({
	      positionType: "individualShift",
	      children: [// Write the \cancel stroke on top of inner.
	      {
	        type: "elem",
	        elem: inner,
	        shift: 0
	      }, {
	        type: "elem",
	        elem: img,
	        shift: imgShift,
	        wrapperClasses: classes
	      }]
	    }, options);
	  }

	  if (/cancel/.test(label)) {
	    // The cancel package documentation says that cancel lines add their height
	    // to the expression, but tests show that isn't how it actually works.
	    vlist.height = inner.height;
	    vlist.depth = inner.depth;
	  }

	  if (/cancel/.test(label) && !isSingleChar) {
	    // cancel does not create horiz space for its line extension.
	    return buildCommon.makeSpan(["mord", "cancel-lap"], [vlist], options);
	  } else {
	    return buildCommon.makeSpan(["mord"], [vlist], options);
	  }
	};

	var mathmlBuilder$7 = (group, options) => {
	  var fboxsep = 0;
	  var node = new mathMLTree.MathNode(group.label.indexOf("colorbox") > -1 ? "mpadded" : "menclose", [buildGroup(group.body, options)]);

	  switch (group.label) {
	    case "\\cancel":
	      node.setAttribute("notation", "updiagonalstrike");
	      break;

	    case "\\bcancel":
	      node.setAttribute("notation", "downdiagonalstrike");
	      break;

	    case "\\phase":
	      node.setAttribute("notation", "phasorangle");
	      break;

	    case "\\sout":
	      node.setAttribute("notation", "horizontalstrike");
	      break;

	    case "\\fbox":
	      node.setAttribute("notation", "box");
	      break;

	    case "\\angl":
	      node.setAttribute("notation", "actuarial");
	      break;

	    case "\\fcolorbox":
	    case "\\colorbox":
	      // <menclose> doesn't have a good notation option. So use <mpadded>
	      // instead. Set some attributes that come included with <menclose>.
	      fboxsep = options.fontMetrics().fboxsep * options.fontMetrics().ptPerEm;
	      node.setAttribute("width", "+" + 2 * fboxsep + "pt");
	      node.setAttribute("height", "+" + 2 * fboxsep + "pt");
	      node.setAttribute("lspace", fboxsep + "pt"); //

	      node.setAttribute("voffset", fboxsep + "pt");

	      if (group.label === "\\fcolorbox") {
	        var thk = Math.max(options.fontMetrics().fboxrule, // default
	        options.minRuleThickness // user override
	        );
	        node.setAttribute("style", "border: " + thk + "em solid " + String(group.borderColor));
	      }

	      break;

	    case "\\xcancel":
	      node.setAttribute("notation", "updiagonalstrike downdiagonalstrike");
	      break;
	  }

	  if (group.backgroundColor) {
	    node.setAttribute("mathbackground", group.backgroundColor);
	  }

	  return node;
	};

	defineFunction({
	  type: "enclose",
	  names: ["\\colorbox"],
	  props: {
	    numArgs: 2,
	    allowedInText: true,
	    argTypes: ["color", "text"]
	  },

	  handler(_ref, args, optArgs) {
	    var {
	      parser,
	      funcName
	    } = _ref;
	    var color = assertNodeType(args[0], "color-token").color;
	    var body = args[1];
	    return {
	      type: "enclose",
	      mode: parser.mode,
	      label: funcName,
	      backgroundColor: color,
	      body
	    };
	  },

	  htmlBuilder: htmlBuilder$8,
	  mathmlBuilder: mathmlBuilder$7
	});
	defineFunction({
	  type: "enclose",
	  names: ["\\fcolorbox"],
	  props: {
	    numArgs: 3,
	    allowedInText: true,
	    argTypes: ["color", "color", "text"]
	  },

	  handler(_ref2, args, optArgs) {
	    var {
	      parser,
	      funcName
	    } = _ref2;
	    var borderColor = assertNodeType(args[0], "color-token").color;
	    var backgroundColor = assertNodeType(args[1], "color-token").color;
	    var body = args[2];
	    return {
	      type: "enclose",
	      mode: parser.mode,
	      label: funcName,
	      backgroundColor,
	      borderColor,
	      body
	    };
	  },

	  htmlBuilder: htmlBuilder$8,
	  mathmlBuilder: mathmlBuilder$7
	});
	defineFunction({
	  type: "enclose",
	  names: ["\\fbox"],
	  props: {
	    numArgs: 1,
	    argTypes: ["hbox"],
	    allowedInText: true
	  },

	  handler(_ref3, args) {
	    var {
	      parser
	    } = _ref3;
	    return {
	      type: "enclose",
	      mode: parser.mode,
	      label: "\\fbox",
	      body: args[0]
	    };
	  }

	});
	defineFunction({
	  type: "enclose",
	  names: ["\\cancel", "\\bcancel", "\\xcancel", "\\sout", "\\phase"],
	  props: {
	    numArgs: 1
	  },

	  handler(_ref4, args) {
	    var {
	      parser,
	      funcName
	    } = _ref4;
	    var body = args[0];
	    return {
	      type: "enclose",
	      mode: parser.mode,
	      label: funcName,
	      body
	    };
	  },

	  htmlBuilder: htmlBuilder$8,
	  mathmlBuilder: mathmlBuilder$7
	});
	defineFunction({
	  type: "enclose",
	  names: ["\\angl"],
	  props: {
	    numArgs: 1,
	    argTypes: ["hbox"],
	    allowedInText: false
	  },

	  handler(_ref5, args) {
	    var {
	      parser
	    } = _ref5;
	    return {
	      type: "enclose",
	      mode: parser.mode,
	      label: "\\angl",
	      body: args[0]
	    };
	  }

	});

	/**
	 * All registered environments.
	 * `environments.js` exports this same dictionary again and makes it public.
	 * `Parser.js` requires this dictionary via `environments.js`.
	 */
	var _environments = {};
	function defineEnvironment(_ref) {
	  var {
	    type,
	    names,
	    props,
	    handler,
	    htmlBuilder,
	    mathmlBuilder
	  } = _ref;
	  // Set default values of environments.
	  var data = {
	    type,
	    numArgs: props.numArgs || 0,
	    allowedInText: false,
	    numOptionalArgs: 0,
	    handler
	  };

	  for (var i = 0; i < names.length; ++i) {
	    // TODO: The value type of _environments should be a type union of all
	    // possible `EnvSpec<>` possibilities instead of `EnvSpec<*>`, which is
	    // an existential type.
	    _environments[names[i]] = data;
	  }

	  if (htmlBuilder) {
	    _htmlGroupBuilders[type] = htmlBuilder;
	  }

	  if (mathmlBuilder) {
	    _mathmlGroupBuilders[type] = mathmlBuilder;
	  }
	}

	/**
	 * All registered global/built-in macros.
	 * `macros.js` exports this same dictionary again and makes it public.
	 * `Parser.js` requires this dictionary via `macros.js`.
	 */
	var _macros = {}; // This function might one day accept an additional argument and do more things.

	function defineMacro(name, body) {
	  _macros[name] = body;
	}

	// Helper functions
	function getHLines(parser) {
	  // Return an array. The array length = number of hlines.
	  // Each element in the array tells if the line is dashed.
	  var hlineInfo = [];
	  parser.consumeSpaces();
	  var nxt = parser.fetch().text;

	  while (nxt === "\\hline" || nxt === "\\hdashline") {
	    parser.consume();
	    hlineInfo.push(nxt === "\\hdashline");
	    parser.consumeSpaces();
	    nxt = parser.fetch().text;
	  }

	  return hlineInfo;
	}

	var validateAmsEnvironmentContext = context => {
	  var settings = context.parser.settings;

	  if (!settings.displayMode) {
	    throw new ParseError("{" + context.envName + "} can be used only in" + " display mode.");
	  }
	}; // autoTag (an argument to parseArray) can be one of three values:
	// * undefined: Regular (not-top-level) array; no tags on each row
	// * true: Automatic equation numbering, overridable by \tag
	// * false: Tags allowed on each row, but no automatic numbering
	// This function *doesn't* work with the "split" environment name.


	function getAutoTag(name) {
	  if (name.indexOf("ed") === -1) {
	    return name.indexOf("*") === -1;
	  } // return undefined;

	}
	/**
	 * Parse the body of the environment, with rows delimited by \\ and
	 * columns delimited by &, and create a nested list in row-major order
	 * with one group per cell.  If given an optional argument style
	 * ("text", "display", etc.), then each cell is cast into that style.
	 */


	function parseArray(parser, _ref, style) {
	  var {
	    hskipBeforeAndAfter,
	    addJot,
	    cols,
	    arraystretch,
	    colSeparationType,
	    autoTag,
	    singleRow,
	    emptySingleRow,
	    maxNumCols,
	    leqno
	  } = _ref;
	  parser.gullet.beginGroup();

	  if (!singleRow) {
	    // \cr is equivalent to \\ without the optional size argument (see below)
	    // TODO: provide helpful error when \cr is used outside array environment
	    parser.gullet.macros.set("\\cr", "\\\\\\relax");
	  } // Get current arraystretch if it's not set by the environment


	  if (!arraystretch) {
	    var stretch = parser.gullet.expandMacroAsText("\\arraystretch");

	    if (stretch == null) {
	      // Default \arraystretch from lttab.dtx
	      arraystretch = 1;
	    } else {
	      arraystretch = parseFloat(stretch);

	      if (!arraystretch || arraystretch < 0) {
	        throw new ParseError("Invalid \\arraystretch: " + stretch);
	      }
	    }
	  } // Start group for first cell


	  parser.gullet.beginGroup();
	  var row = [];
	  var body = [row];
	  var rowGaps = [];
	  var hLinesBeforeRow = [];
	  var tags = autoTag != null ? [] : undefined; // amsmath uses \global\@eqnswtrue and \global\@eqnswfalse to represent
	  // whether this row should have an equation number.  Simulate this with
	  // a \@eqnsw macro set to 1 or 0.

	  function beginRow() {
	    if (autoTag) {
	      parser.gullet.macros.set("\\@eqnsw", "1", true);
	    }
	  }

	  function endRow() {
	    if (tags) {
	      if (parser.gullet.macros.get("\\df@tag")) {
	        tags.push(parser.subparse([new Token("\\df@tag")]));
	        parser.gullet.macros.set("\\df@tag", undefined, true);
	      } else {
	        tags.push(Boolean(autoTag) && parser.gullet.macros.get("\\@eqnsw") === "1");
	      }
	    }
	  }

	  beginRow(); // Test for \hline at the top of the array.

	  hLinesBeforeRow.push(getHLines(parser));

	  while (true) {
	    // eslint-disable-line no-constant-condition
	    // Parse each cell in its own group (namespace)
	    var cell = parser.parseExpression(false, singleRow ? "\\end" : "\\\\");
	    parser.gullet.endGroup();
	    parser.gullet.beginGroup();
	    cell = {
	      type: "ordgroup",
	      mode: parser.mode,
	      body: cell
	    };

	    if (style) {
	      cell = {
	        type: "styling",
	        mode: parser.mode,
	        style,
	        body: [cell]
	      };
	    }

	    row.push(cell);
	    var next = parser.fetch().text;

	    if (next === "&") {
	      if (maxNumCols && row.length === maxNumCols) {
	        if (singleRow || colSeparationType) {
	          // {equation} or {split}
	          throw new ParseError("Too many tab characters: &", parser.nextToken);
	        } else {
	          // {array} environment
	          parser.settings.reportNonstrict("textEnv", "Too few columns " + "specified in the {array} column argument.");
	        }
	      }

	      parser.consume();
	    } else if (next === "\\end") {
	      endRow(); // Arrays terminate newlines with `\crcr` which consumes a `\cr` if
	      // the last line is empty.  However, AMS environments keep the
	      // empty row if it's the only one.
	      // NOTE: Currently, `cell` is the last item added into `row`.

	      if (row.length === 1 && cell.type === "styling" && cell.body[0].body.length === 0 && (body.length > 1 || !emptySingleRow)) {
	        body.pop();
	      }

	      if (hLinesBeforeRow.length < body.length + 1) {
	        hLinesBeforeRow.push([]);
	      }

	      break;
	    } else if (next === "\\\\") {
	      parser.consume();
	      var size = void 0; // \def\Let@{\let\\\math@cr}
	      // \def\math@cr{...\math@cr@}
	      // \def\math@cr@{\new@ifnextchar[\math@cr@@{\math@cr@@[\z@]}}
	      // \def\math@cr@@[#1]{...\math@cr@@@...}
	      // \def\math@cr@@@{\cr}

	      if (parser.gullet.future().text !== " ") {
	        size = parser.parseSizeGroup(true);
	      }

	      rowGaps.push(size ? size.value : null);
	      endRow(); // check for \hline(s) following the row separator

	      hLinesBeforeRow.push(getHLines(parser));
	      row = [];
	      body.push(row);
	      beginRow();
	    } else {
	      throw new ParseError("Expected & or \\\\ or \\cr or \\end", parser.nextToken);
	    }
	  } // End cell group


	  parser.gullet.endGroup(); // End array group defining \cr

	  parser.gullet.endGroup();
	  return {
	    type: "array",
	    mode: parser.mode,
	    addJot,
	    arraystretch,
	    body,
	    cols,
	    rowGaps,
	    hskipBeforeAndAfter,
	    hLinesBeforeRow,
	    colSeparationType,
	    tags,
	    leqno
	  };
	} // Decides on a style for cells in an array according to whether the given
	// environment name starts with the letter 'd'.


	function dCellStyle(envName) {
	  if (envName.substr(0, 1) === "d") {
	    return "display";
	  } else {
	    return "text";
	  }
	}

	var htmlBuilder$7 = function htmlBuilder(group, options) {
	  var r;
	  var c;
	  var nr = group.body.length;
	  var hLinesBeforeRow = group.hLinesBeforeRow;
	  var nc = 0;
	  var body = new Array(nr);
	  var hlines = [];
	  var ruleThickness = Math.max( // From LaTeX \showthe\arrayrulewidth. Equals 0.04 em.
	  options.fontMetrics().arrayRuleWidth, options.minRuleThickness // User override.
	  ); // Horizontal spacing

	  var pt = 1 / options.fontMetrics().ptPerEm;
	  var arraycolsep = 5 * pt; // default value, i.e. \arraycolsep in article.cls

	  if (group.colSeparationType && group.colSeparationType === "small") {
	    // We're in a {smallmatrix}. Default column space is \thickspace,
	    // i.e. 5/18em = 0.2778em, per amsmath.dtx for {smallmatrix}.
	    // But that needs adjustment because LaTeX applies \scriptstyle to the
	    // entire array, including the colspace, but this function applies
	    // \scriptstyle only inside each element.
	    var localMultiplier = options.havingStyle(Style$1.SCRIPT).sizeMultiplier;
	    arraycolsep = 0.2778 * (localMultiplier / options.sizeMultiplier);
	  } // Vertical spacing


	  var baselineskip = group.colSeparationType === "CD" ? calculateSize({
	    number: 3,
	    unit: "ex"
	  }, options) : 12 * pt; // see size10.clo
	  // Default \jot from ltmath.dtx
	  // TODO(edemaine): allow overriding \jot via \setlength (#687)

	  var jot = 3 * pt;
	  var arrayskip = group.arraystretch * baselineskip;
	  var arstrutHeight = 0.7 * arrayskip; // \strutbox in ltfsstrc.dtx and

	  var arstrutDepth = 0.3 * arrayskip; // \@arstrutbox in lttab.dtx

	  var totalHeight = 0; // Set a position for \hline(s) at the top of the array, if any.

	  function setHLinePos(hlinesInGap) {
	    for (var i = 0; i < hlinesInGap.length; ++i) {
	      if (i > 0) {
	        totalHeight += 0.25;
	      }

	      hlines.push({
	        pos: totalHeight,
	        isDashed: hlinesInGap[i]
	      });
	    }
	  }

	  setHLinePos(hLinesBeforeRow[0]);

	  for (r = 0; r < group.body.length; ++r) {
	    var inrow = group.body[r];
	    var height = arstrutHeight; // \@array adds an \@arstrut

	    var depth = arstrutDepth; // to each tow (via the template)

	    if (nc < inrow.length) {
	      nc = inrow.length;
	    }

	    var outrow = new Array(inrow.length);

	    for (c = 0; c < inrow.length; ++c) {
	      var elt = buildGroup$1(inrow[c], options);

	      if (depth < elt.depth) {
	        depth = elt.depth;
	      }

	      if (height < elt.height) {
	        height = elt.height;
	      }

	      outrow[c] = elt;
	    }

	    var rowGap = group.rowGaps[r];
	    var gap = 0;

	    if (rowGap) {
	      gap = calculateSize(rowGap, options);

	      if (gap > 0) {
	        // \@argarraycr
	        gap += arstrutDepth;

	        if (depth < gap) {
	          depth = gap; // \@xargarraycr
	        }

	        gap = 0;
	      }
	    } // In AMS multiline environments such as aligned and gathered, rows
	    // correspond to lines that have additional \jot added to the
	    // \baselineskip via \openup.


	    if (group.addJot) {
	      depth += jot;
	    }

	    outrow.height = height;
	    outrow.depth = depth;
	    totalHeight += height;
	    outrow.pos = totalHeight;
	    totalHeight += depth + gap; // \@yargarraycr

	    body[r] = outrow; // Set a position for \hline(s), if any.

	    setHLinePos(hLinesBeforeRow[r + 1]);
	  }

	  var offset = totalHeight / 2 + options.fontMetrics().axisHeight;
	  var colDescriptions = group.cols || [];
	  var cols = [];
	  var colSep;
	  var colDescrNum;
	  var tagSpans = [];

	  if (group.tags && group.tags.some(tag => tag)) {
	    // An environment with manual tags and/or automatic equation numbers.
	    // Create node(s), the latter of which trigger CSS counter increment.
	    for (r = 0; r < nr; ++r) {
	      var rw = body[r];
	      var shift = rw.pos - offset;
	      var tag = group.tags[r];
	      var tagSpan = void 0;

	      if (tag === true) {
	        // automatic numbering
	        tagSpan = buildCommon.makeSpan(["eqn-num"], [], options);
	      } else if (tag === false) {
	        // \nonumber/\notag or starred environment
	        tagSpan = buildCommon.makeSpan([], [], options);
	      } else {
	        // manual \tag
	        tagSpan = buildCommon.makeSpan([], buildExpression$1(tag, options, true), options);
	      }

	      tagSpan.depth = rw.depth;
	      tagSpan.height = rw.height;
	      tagSpans.push({
	        type: "elem",
	        elem: tagSpan,
	        shift
	      });
	    }
	  }

	  for (c = 0, colDescrNum = 0; // Continue while either there are more columns or more column
	  // descriptions, so trailing separators don't get lost.
	  c < nc || colDescrNum < colDescriptions.length; ++c, ++colDescrNum) {
	    var colDescr = colDescriptions[colDescrNum] || {};
	    var firstSeparator = true;

	    while (colDescr.type === "separator") {
	      // If there is more than one separator in a row, add a space
	      // between them.
	      if (!firstSeparator) {
	        colSep = buildCommon.makeSpan(["arraycolsep"], []);
	        colSep.style.width = makeEm(options.fontMetrics().doubleRuleSep);
	        cols.push(colSep);
	      }

	      if (colDescr.separator === "|" || colDescr.separator === ":") {
	        var lineType = colDescr.separator === "|" ? "solid" : "dashed";
	        var separator = buildCommon.makeSpan(["vertical-separator"], [], options);
	        separator.style.height = makeEm(totalHeight);
	        separator.style.borderRightWidth = makeEm(ruleThickness);
	        separator.style.borderRightStyle = lineType;
	        separator.style.margin = "0 " + makeEm(-ruleThickness / 2);

	        var _shift = totalHeight - offset;

	        if (_shift) {
	          separator.style.verticalAlign = makeEm(-_shift);
	        }

	        cols.push(separator);
	      } else {
	        throw new ParseError("Invalid separator type: " + colDescr.separator);
	      }

	      colDescrNum++;
	      colDescr = colDescriptions[colDescrNum] || {};
	      firstSeparator = false;
	    }

	    if (c >= nc) {
	      continue;
	    }

	    var sepwidth = void 0;

	    if (c > 0 || group.hskipBeforeAndAfter) {
	      sepwidth = utils.deflt(colDescr.pregap, arraycolsep);

	      if (sepwidth !== 0) {
	        colSep = buildCommon.makeSpan(["arraycolsep"], []);
	        colSep.style.width = makeEm(sepwidth);
	        cols.push(colSep);
	      }
	    }

	    var col = [];

	    for (r = 0; r < nr; ++r) {
	      var row = body[r];
	      var elem = row[c];

	      if (!elem) {
	        continue;
	      }

	      var _shift2 = row.pos - offset;

	      elem.depth = row.depth;
	      elem.height = row.height;
	      col.push({
	        type: "elem",
	        elem: elem,
	        shift: _shift2
	      });
	    }

	    col = buildCommon.makeVList({
	      positionType: "individualShift",
	      children: col
	    }, options);
	    col = buildCommon.makeSpan(["col-align-" + (colDescr.align || "c")], [col]);
	    cols.push(col);

	    if (c < nc - 1 || group.hskipBeforeAndAfter) {
	      sepwidth = utils.deflt(colDescr.postgap, arraycolsep);

	      if (sepwidth !== 0) {
	        colSep = buildCommon.makeSpan(["arraycolsep"], []);
	        colSep.style.width = makeEm(sepwidth);
	        cols.push(colSep);
	      }
	    }
	  }

	  body = buildCommon.makeSpan(["mtable"], cols); // Add \hline(s), if any.

	  if (hlines.length > 0) {
	    var line = buildCommon.makeLineSpan("hline", options, ruleThickness);
	    var dashes = buildCommon.makeLineSpan("hdashline", options, ruleThickness);
	    var vListElems = [{
	      type: "elem",
	      elem: body,
	      shift: 0
	    }];

	    while (hlines.length > 0) {
	      var hline = hlines.pop();
	      var lineShift = hline.pos - offset;

	      if (hline.isDashed) {
	        vListElems.push({
	          type: "elem",
	          elem: dashes,
	          shift: lineShift
	        });
	      } else {
	        vListElems.push({
	          type: "elem",
	          elem: line,
	          shift: lineShift
	        });
	      }
	    }

	    body = buildCommon.makeVList({
	      positionType: "individualShift",
	      children: vListElems
	    }, options);
	  }

	  if (tagSpans.length === 0) {
	    return buildCommon.makeSpan(["mord"], [body], options);
	  } else {
	    var eqnNumCol = buildCommon.makeVList({
	      positionType: "individualShift",
	      children: tagSpans
	    }, options);
	    eqnNumCol = buildCommon.makeSpan(["tag"], [eqnNumCol], options);
	    return buildCommon.makeFragment([body, eqnNumCol]);
	  }
	};

	var alignMap = {
	  c: "center ",
	  l: "left ",
	  r: "right "
	};

	var mathmlBuilder$6 = function mathmlBuilder(group, options) {
	  var tbl = [];
	  var glue = new mathMLTree.MathNode("mtd", [], ["mtr-glue"]);
	  var tag = new mathMLTree.MathNode("mtd", [], ["mml-eqn-num"]);

	  for (var i = 0; i < group.body.length; i++) {
	    var rw = group.body[i];
	    var row = [];

	    for (var j = 0; j < rw.length; j++) {
	      row.push(new mathMLTree.MathNode("mtd", [buildGroup(rw[j], options)]));
	    }

	    if (group.tags && group.tags[i]) {
	      row.unshift(glue);
	      row.push(glue);

	      if (group.leqno) {
	        row.unshift(tag);
	      } else {
	        row.push(tag);
	      }
	    }

	    tbl.push(new mathMLTree.MathNode("mtr", row));
	  }

	  var table = new mathMLTree.MathNode("mtable", tbl); // Set column alignment, row spacing, column spacing, and
	  // array lines by setting attributes on the table element.
	  // Set the row spacing. In MathML, we specify a gap distance.
	  // We do not use rowGap[] because MathML automatically increases
	  // cell height with the height/depth of the element content.
	  // LaTeX \arraystretch multiplies the row baseline-to-baseline distance.
	  // We simulate this by adding (arraystretch - 1)em to the gap. This
	  // does a reasonable job of adjusting arrays containing 1 em tall content.
	  // The 0.16 and 0.09 values are found emprically. They produce an array
	  // similar to LaTeX and in which content does not interfere with \hines.

	  var gap = group.arraystretch === 0.5 ? 0.1 // {smallmatrix}, {subarray}
	  : 0.16 + group.arraystretch - 1 + (group.addJot ? 0.09 : 0);
	  table.setAttribute("rowspacing", makeEm(gap)); // MathML table lines go only between cells.
	  // To place a line on an edge we'll use <menclose>, if necessary.

	  var menclose = "";
	  var align = "";

	  if (group.cols && group.cols.length > 0) {
	    // Find column alignment, column spacing, and  vertical lines.
	    var cols = group.cols;
	    var columnLines = "";
	    var prevTypeWasAlign = false;
	    var iStart = 0;
	    var iEnd = cols.length;

	    if (cols[0].type === "separator") {
	      menclose += "top ";
	      iStart = 1;
	    }

	    if (cols[cols.length - 1].type === "separator") {
	      menclose += "bottom ";
	      iEnd -= 1;
	    }

	    for (var _i = iStart; _i < iEnd; _i++) {
	      if (cols[_i].type === "align") {
	        align += alignMap[cols[_i].align];

	        if (prevTypeWasAlign) {
	          columnLines += "none ";
	        }

	        prevTypeWasAlign = true;
	      } else if (cols[_i].type === "separator") {
	        // MathML accepts only single lines between cells.
	        // So we read only the first of consecutive separators.
	        if (prevTypeWasAlign) {
	          columnLines += cols[_i].separator === "|" ? "solid " : "dashed ";
	          prevTypeWasAlign = false;
	        }
	      }
	    }

	    table.setAttribute("columnalign", align.trim());

	    if (/[sd]/.test(columnLines)) {
	      table.setAttribute("columnlines", columnLines.trim());
	    }
	  } // Set column spacing.


	  if (group.colSeparationType === "align") {
	    var _cols = group.cols || [];

	    var spacing = "";

	    for (var _i2 = 1; _i2 < _cols.length; _i2++) {
	      spacing += _i2 % 2 ? "0em " : "1em ";
	    }

	    table.setAttribute("columnspacing", spacing.trim());
	  } else if (group.colSeparationType === "alignat" || group.colSeparationType === "gather") {
	    table.setAttribute("columnspacing", "0em");
	  } else if (group.colSeparationType === "small") {
	    table.setAttribute("columnspacing", "0.2778em");
	  } else if (group.colSeparationType === "CD") {
	    table.setAttribute("columnspacing", "0.5em");
	  } else {
	    table.setAttribute("columnspacing", "1em");
	  } // Address \hline and \hdashline


	  var rowLines = "";
	  var hlines = group.hLinesBeforeRow;
	  menclose += hlines[0].length > 0 ? "left " : "";
	  menclose += hlines[hlines.length - 1].length > 0 ? "right " : "";

	  for (var _i3 = 1; _i3 < hlines.length - 1; _i3++) {
	    rowLines += hlines[_i3].length === 0 ? "none " // MathML accepts only a single line between rows. Read one element.
	    : hlines[_i3][0] ? "dashed " : "solid ";
	  }

	  if (/[sd]/.test(rowLines)) {
	    table.setAttribute("rowlines", rowLines.trim());
	  }

	  if (menclose !== "") {
	    table = new mathMLTree.MathNode("menclose", [table]);
	    table.setAttribute("notation", menclose.trim());
	  }

	  if (group.arraystretch && group.arraystretch < 1) {
	    // A small array. Wrap in scriptstyle so row gap is not too large.
	    table = new mathMLTree.MathNode("mstyle", [table]);
	    table.setAttribute("scriptlevel", "1");
	  }

	  return table;
	}; // Convenience function for align, align*, aligned, alignat, alignat*, alignedat.


	var alignedHandler = function alignedHandler(context, args) {
	  if (context.envName.indexOf("ed") === -1) {
	    validateAmsEnvironmentContext(context);
	  }

	  var cols = [];
	  var separationType = context.envName.indexOf("at") > -1 ? "alignat" : "align";
	  var isSplit = context.envName === "split";
	  var res = parseArray(context.parser, {
	    cols,
	    addJot: true,
	    autoTag: isSplit ? undefined : getAutoTag(context.envName),
	    emptySingleRow: true,
	    colSeparationType: separationType,
	    maxNumCols: isSplit ? 2 : undefined,
	    leqno: context.parser.settings.leqno
	  }, "display"); // Determining number of columns.
	  // 1. If the first argument is given, we use it as a number of columns,
	  //    and makes sure that each row doesn't exceed that number.
	  // 2. Otherwise, just count number of columns = maximum number
	  //    of cells in each row ("aligned" mode -- isAligned will be true).
	  //
	  // At the same time, prepend empty group {} at beginning of every second
	  // cell in each row (starting with second cell) so that operators become
	  // binary.  This behavior is implemented in amsmath's \start@aligned.

	  var numMaths;
	  var numCols = 0;
	  var emptyGroup = {
	    type: "ordgroup",
	    mode: context.mode,
	    body: []
	  };

	  if (args[0] && args[0].type === "ordgroup") {
	    var arg0 = "";

	    for (var i = 0; i < args[0].body.length; i++) {
	      var textord = assertNodeType(args[0].body[i], "textord");
	      arg0 += textord.text;
	    }

	    numMaths = Number(arg0);
	    numCols = numMaths * 2;
	  }

	  var isAligned = !numCols;
	  res.body.forEach(function (row) {
	    for (var _i4 = 1; _i4 < row.length; _i4 += 2) {
	      // Modify ordgroup node within styling node
	      var styling = assertNodeType(row[_i4], "styling");
	      var ordgroup = assertNodeType(styling.body[0], "ordgroup");
	      ordgroup.body.unshift(emptyGroup);
	    }

	    if (!isAligned) {
	      // Case 1
	      var curMaths = row.length / 2;

	      if (numMaths < curMaths) {
	        throw new ParseError("Too many math in a row: " + ("expected " + numMaths + ", but got " + curMaths), row[0]);
	      }
	    } else if (numCols < row.length) {
	      // Case 2
	      numCols = row.length;
	    }
	  }); // Adjusting alignment.
	  // In aligned mode, we add one \qquad between columns;
	  // otherwise we add nothing.

	  for (var _i5 = 0; _i5 < numCols; ++_i5) {
	    var align = "r";
	    var pregap = 0;

	    if (_i5 % 2 === 1) {
	      align = "l";
	    } else if (_i5 > 0 && isAligned) {
	      // "aligned" mode.
	      pregap = 1; // add one \quad
	    }

	    cols[_i5] = {
	      type: "align",
	      align: align,
	      pregap: pregap,
	      postgap: 0
	    };
	  }

	  res.colSeparationType = isAligned ? "align" : "alignat";
	  return res;
	}; // Arrays are part of LaTeX, defined in lttab.dtx so its documentation
	// is part of the source2e.pdf file of LaTeX2e source documentation.
	// {darray} is an {array} environment where cells are set in \displaystyle,
	// as defined in nccmath.sty.


	defineEnvironment({
	  type: "array",
	  names: ["array", "darray"],
	  props: {
	    numArgs: 1
	  },

	  handler(context, args) {
	    // Since no types are specified above, the two possibilities are
	    // - The argument is wrapped in {} or [], in which case Parser's
	    //   parseGroup() returns an "ordgroup" wrapping some symbol node.
	    // - The argument is a bare symbol node.
	    var symNode = checkSymbolNodeType(args[0]);
	    var colalign = symNode ? [args[0]] : assertNodeType(args[0], "ordgroup").body;
	    var cols = colalign.map(function (nde) {
	      var node = assertSymbolNodeType(nde);
	      var ca = node.text;

	      if ("lcr".indexOf(ca) !== -1) {
	        return {
	          type: "align",
	          align: ca
	        };
	      } else if (ca === "|") {
	        return {
	          type: "separator",
	          separator: "|"
	        };
	      } else if (ca === ":") {
	        return {
	          type: "separator",
	          separator: ":"
	        };
	      }

	      throw new ParseError("Unknown column alignment: " + ca, nde);
	    });
	    var res = {
	      cols,
	      hskipBeforeAndAfter: true,
	      // \@preamble in lttab.dtx
	      maxNumCols: cols.length
	    };
	    return parseArray(context.parser, res, dCellStyle(context.envName));
	  },

	  htmlBuilder: htmlBuilder$7,
	  mathmlBuilder: mathmlBuilder$6
	}); // The matrix environments of amsmath builds on the array environment
	// of LaTeX, which is discussed above.
	// The mathtools package adds starred versions of the same environments.
	// These have an optional argument to choose left|center|right justification.

	defineEnvironment({
	  type: "array",
	  names: ["matrix", "pmatrix", "bmatrix", "Bmatrix", "vmatrix", "Vmatrix", "matrix*", "pmatrix*", "bmatrix*", "Bmatrix*", "vmatrix*", "Vmatrix*"],
	  props: {
	    numArgs: 0
	  },

	  handler(context) {
	    var delimiters = {
	      "matrix": null,
	      "pmatrix": ["(", ")"],
	      "bmatrix": ["[", "]"],
	      "Bmatrix": ["\\{", "\\}"],
	      "vmatrix": ["|", "|"],
	      "Vmatrix": ["\\Vert", "\\Vert"]
	    }[context.envName.replace("*", "")]; // \hskip -\arraycolsep in amsmath

	    var colAlign = "c";
	    var payload = {
	      hskipBeforeAndAfter: false,
	      cols: [{
	        type: "align",
	        align: colAlign
	      }]
	    };

	    if (context.envName.charAt(context.envName.length - 1) === "*") {
	      // It's one of the mathtools starred functions.
	      // Parse the optional alignment argument.
	      var parser = context.parser;
	      parser.consumeSpaces();

	      if (parser.fetch().text === "[") {
	        parser.consume();
	        parser.consumeSpaces();
	        colAlign = parser.fetch().text;

	        if ("lcr".indexOf(colAlign) === -1) {
	          throw new ParseError("Expected l or c or r", parser.nextToken);
	        }

	        parser.consume();
	        parser.consumeSpaces();
	        parser.expect("]");
	        parser.consume();
	        payload.cols = [{
	          type: "align",
	          align: colAlign
	        }];
	      }
	    }

	    var res = parseArray(context.parser, payload, dCellStyle(context.envName)); // Populate cols with the correct number of column alignment specs.

	    var numCols = Math.max(0, ...res.body.map(row => row.length));
	    res.cols = new Array(numCols).fill({
	      type: "align",
	      align: colAlign
	    });
	    return delimiters ? {
	      type: "leftright",
	      mode: context.mode,
	      body: [res],
	      left: delimiters[0],
	      right: delimiters[1],
	      rightColor: undefined // \right uninfluenced by \color in array

	    } : res;
	  },

	  htmlBuilder: htmlBuilder$7,
	  mathmlBuilder: mathmlBuilder$6
	});
	defineEnvironment({
	  type: "array",
	  names: ["smallmatrix"],
	  props: {
	    numArgs: 0
	  },

	  handler(context) {
	    var payload = {
	      arraystretch: 0.5
	    };
	    var res = parseArray(context.parser, payload, "script");
	    res.colSeparationType = "small";
	    return res;
	  },

	  htmlBuilder: htmlBuilder$7,
	  mathmlBuilder: mathmlBuilder$6
	});
	defineEnvironment({
	  type: "array",
	  names: ["subarray"],
	  props: {
	    numArgs: 1
	  },

	  handler(context, args) {
	    // Parsing of {subarray} is similar to {array}
	    var symNode = checkSymbolNodeType(args[0]);
	    var colalign = symNode ? [args[0]] : assertNodeType(args[0], "ordgroup").body;
	    var cols = colalign.map(function (nde) {
	      var node = assertSymbolNodeType(nde);
	      var ca = node.text; // {subarray} only recognizes "l" & "c"

	      if ("lc".indexOf(ca) !== -1) {
	        return {
	          type: "align",
	          align: ca
	        };
	      }

	      throw new ParseError("Unknown column alignment: " + ca, nde);
	    });

	    if (cols.length > 1) {
	      throw new ParseError("{subarray} can contain only one column");
	    }

	    var res = {
	      cols,
	      hskipBeforeAndAfter: false,
	      arraystretch: 0.5
	    };
	    res = parseArray(context.parser, res, "script");

	    if (res.body.length > 0 && res.body[0].length > 1) {
	      throw new ParseError("{subarray} can contain only one column");
	    }

	    return res;
	  },

	  htmlBuilder: htmlBuilder$7,
	  mathmlBuilder: mathmlBuilder$6
	}); // A cases environment (in amsmath.sty) is almost equivalent to
	// \def\arraystretch{1.2}%
	// \left\{\begin{array}{@{}l@{\quad}l@{}} … \end{array}\right.
	// {dcases} is a {cases} environment where cells are set in \displaystyle,
	// as defined in mathtools.sty.
	// {rcases} is another mathtools environment. It's brace is on the right side.

	defineEnvironment({
	  type: "array",
	  names: ["cases", "dcases", "rcases", "drcases"],
	  props: {
	    numArgs: 0
	  },

	  handler(context) {
	    var payload = {
	      arraystretch: 1.2,
	      cols: [{
	        type: "align",
	        align: "l",
	        pregap: 0,
	        // TODO(kevinb) get the current style.
	        // For now we use the metrics for TEXT style which is what we were
	        // doing before.  Before attempting to get the current style we
	        // should look at TeX's behavior especially for \over and matrices.
	        postgap: 1.0
	        /* 1em quad */

	      }, {
	        type: "align",
	        align: "l",
	        pregap: 0,
	        postgap: 0
	      }]
	    };
	    var res = parseArray(context.parser, payload, dCellStyle(context.envName));
	    return {
	      type: "leftright",
	      mode: context.mode,
	      body: [res],
	      left: context.envName.indexOf("r") > -1 ? "." : "\\{",
	      right: context.envName.indexOf("r") > -1 ? "\\}" : ".",
	      rightColor: undefined
	    };
	  },

	  htmlBuilder: htmlBuilder$7,
	  mathmlBuilder: mathmlBuilder$6
	}); // In the align environment, one uses ampersands, &, to specify number of
	// columns in each row, and to locate spacing between each column.
	// align gets automatic numbering. align* and aligned do not.
	// The alignedat environment can be used in math mode.
	// Note that we assume \nomallineskiplimit to be zero,
	// so that \strut@ is the same as \strut.

	defineEnvironment({
	  type: "array",
	  names: ["align", "align*", "aligned", "split"],
	  props: {
	    numArgs: 0
	  },
	  handler: alignedHandler,
	  htmlBuilder: htmlBuilder$7,
	  mathmlBuilder: mathmlBuilder$6
	}); // A gathered environment is like an array environment with one centered
	// column, but where rows are considered lines so get \jot line spacing
	// and contents are set in \displaystyle.

	defineEnvironment({
	  type: "array",
	  names: ["gathered", "gather", "gather*"],
	  props: {
	    numArgs: 0
	  },

	  handler(context) {
	    if (utils.contains(["gather", "gather*"], context.envName)) {
	      validateAmsEnvironmentContext(context);
	    }

	    var res = {
	      cols: [{
	        type: "align",
	        align: "c"
	      }],
	      addJot: true,
	      colSeparationType: "gather",
	      autoTag: getAutoTag(context.envName),
	      emptySingleRow: true,
	      leqno: context.parser.settings.leqno
	    };
	    return parseArray(context.parser, res, "display");
	  },

	  htmlBuilder: htmlBuilder$7,
	  mathmlBuilder: mathmlBuilder$6
	}); // alignat environment is like an align environment, but one must explicitly
	// specify maximum number of columns in each row, and can adjust spacing between
	// each columns.

	defineEnvironment({
	  type: "array",
	  names: ["alignat", "alignat*", "alignedat"],
	  props: {
	    numArgs: 1
	  },
	  handler: alignedHandler,
	  htmlBuilder: htmlBuilder$7,
	  mathmlBuilder: mathmlBuilder$6
	});
	defineEnvironment({
	  type: "array",
	  names: ["equation", "equation*"],
	  props: {
	    numArgs: 0
	  },

	  handler(context) {
	    validateAmsEnvironmentContext(context);
	    var res = {
	      autoTag: getAutoTag(context.envName),
	      emptySingleRow: true,
	      singleRow: true,
	      maxNumCols: 1,
	      leqno: context.parser.settings.leqno
	    };
	    return parseArray(context.parser, res, "display");
	  },

	  htmlBuilder: htmlBuilder$7,
	  mathmlBuilder: mathmlBuilder$6
	});
	defineEnvironment({
	  type: "array",
	  names: ["CD"],
	  props: {
	    numArgs: 0
	  },

	  handler(context) {
	    validateAmsEnvironmentContext(context);
	    return parseCD(context.parser);
	  },

	  htmlBuilder: htmlBuilder$7,
	  mathmlBuilder: mathmlBuilder$6
	});
	defineMacro("\\nonumber", "\\gdef\\@eqnsw{0}");
	defineMacro("\\notag", "\\nonumber"); // Catch \hline outside array environment

	defineFunction({
	  type: "text",
	  // Doesn't matter what this is.
	  names: ["\\hline", "\\hdashline"],
	  props: {
	    numArgs: 0,
	    allowedInText: true,
	    allowedInMath: true
	  },

	  handler(context, args) {
	    throw new ParseError(context.funcName + " valid only within array environment");
	  }

	});

	var environments = _environments;

	// defineEnvironment definitions.

	defineFunction({
	  type: "environment",
	  names: ["\\begin", "\\end"],
	  props: {
	    numArgs: 1,
	    argTypes: ["text"]
	  },

	  handler(_ref, args) {
	    var {
	      parser,
	      funcName
	    } = _ref;
	    var nameGroup = args[0];

	    if (nameGroup.type !== "ordgroup") {
	      throw new ParseError("Invalid environment name", nameGroup);
	    }

	    var envName = "";

	    for (var i = 0; i < nameGroup.body.length; ++i) {
	      envName += assertNodeType(nameGroup.body[i], "textord").text;
	    }

	    if (funcName === "\\begin") {
	      // begin...end is similar to left...right
	      if (!environments.hasOwnProperty(envName)) {
	        throw new ParseError("No such environment: " + envName, nameGroup);
	      } // Build the environment object. Arguments and other information will
	      // be made available to the begin and end methods using properties.


	      var env = environments[envName];
	      var {
	        args: _args,
	        optArgs
	      } = parser.parseArguments("\\begin{" + envName + "}", env);
	      var context = {
	        mode: parser.mode,
	        envName,
	        parser
	      };
	      var result = env.handler(context, _args, optArgs);
	      parser.expect("\\end", false);
	      var endNameToken = parser.nextToken;
	      var end = assertNodeType(parser.parseFunction(), "environment");

	      if (end.name !== envName) {
	        throw new ParseError("Mismatch: \\begin{" + envName + "} matched by \\end{" + end.name + "}", endNameToken);
	      } // $FlowFixMe, "environment" handler returns an environment ParseNode


	      return result;
	    }

	    return {
	      type: "environment",
	      mode: parser.mode,
	      name: envName,
	      nameGroup
	    };
	  }

	});

	var makeSpan = buildCommon.makeSpan;

	function htmlBuilder$6(group, options) {
	  var elements = buildExpression$1(group.body, options, true);
	  return makeSpan([group.mclass], elements, options);
	}

	function mathmlBuilder$5(group, options) {
	  var node;
	  var inner = buildExpression(group.body, options);

	  if (group.mclass === "minner") {
	    node = new mathMLTree.MathNode("mpadded", inner);
	  } else if (group.mclass === "mord") {
	    if (group.isCharacterBox) {
	      node = inner[0];
	      node.type = "mi";
	    } else {
	      node = new mathMLTree.MathNode("mi", inner);
	    }
	  } else {
	    if (group.isCharacterBox) {
	      node = inner[0];
	      node.type = "mo";
	    } else {
	      node = new mathMLTree.MathNode("mo", inner);
	    } // Set spacing based on what is the most likely adjacent atom type.
	    // See TeXbook p170.


	    if (group.mclass === "mbin") {
	      node.attributes.lspace = "0.22em"; // medium space

	      node.attributes.rspace = "0.22em";
	    } else if (group.mclass === "mpunct") {
	      node.attributes.lspace = "0em";
	      node.attributes.rspace = "0.17em"; // thinspace
	    } else if (group.mclass === "mopen" || group.mclass === "mclose") {
	      node.attributes.lspace = "0em";
	      node.attributes.rspace = "0em";
	    } else if (group.mclass === "minner") {
	      node.attributes.lspace = "0.0556em"; // 1 mu is the most likely option

	      node.attributes.width = "+0.1111em";
	    } // MathML <mo> default space is 5/18 em, so <mrel> needs no action.
	    // Ref: https://developer.mozilla.org/en-US/docs/Web/MathML/Element/mo

	  }

	  return node;
	} // Math class commands except \mathop


	defineFunction({
	  type: "mclass",
	  names: ["\\mathord", "\\mathbin", "\\mathrel", "\\mathopen", "\\mathclose", "\\mathpunct", "\\mathinner"],
	  props: {
	    numArgs: 1,
	    primitive: true
	  },

	  handler(_ref, args) {
	    var {
	      parser,
	      funcName
	    } = _ref;
	    var body = args[0];
	    return {
	      type: "mclass",
	      mode: parser.mode,
	      mclass: "m" + funcName.substr(5),
	      // TODO(kevinb): don't prefix with 'm'
	      body: ordargument(body),
	      isCharacterBox: utils.isCharacterBox(body)
	    };
	  },

	  htmlBuilder: htmlBuilder$6,
	  mathmlBuilder: mathmlBuilder$5
	});
	var binrelClass = arg => {
	  // \binrel@ spacing varies with (bin|rel|ord) of the atom in the argument.
	  // (by rendering separately and with {}s before and after, and measuring
	  // the change in spacing).  We'll do roughly the same by detecting the
	  // atom type directly.
	  var atom = arg.type === "ordgroup" && arg.body.length ? arg.body[0] : arg;

	  if (atom.type === "atom" && (atom.family === "bin" || atom.family === "rel")) {
	    return "m" + atom.family;
	  } else {
	    return "mord";
	  }
	}; // \@binrel{x}{y} renders like y but as mbin/mrel/mord if x is mbin/mrel/mord.
	// This is equivalent to \binrel@{x}\binrel@@{y} in AMSTeX.

	defineFunction({
	  type: "mclass",
	  names: ["\\@binrel"],
	  props: {
	    numArgs: 2
	  },

	  handler(_ref2, args) {
	    var {
	      parser
	    } = _ref2;
	    return {
	      type: "mclass",
	      mode: parser.mode,
	      mclass: binrelClass(args[0]),
	      body: ordargument(args[1]),
	      isCharacterBox: utils.isCharacterBox(args[1])
	    };
	  }

	}); // Build a relation or stacked op by placing one symbol on top of another

	defineFunction({
	  type: "mclass",
	  names: ["\\stackrel", "\\overset", "\\underset"],
	  props: {
	    numArgs: 2
	  },

	  handler(_ref3, args) {
	    var {
	      parser,
	      funcName
	    } = _ref3;
	    var baseArg = args[1];
	    var shiftedArg = args[0];
	    var mclass;

	    if (funcName !== "\\stackrel") {
	      // LaTeX applies \binrel spacing to \overset and \underset.
	      mclass = binrelClass(baseArg);
	    } else {
	      mclass = "mrel"; // for \stackrel
	    }

	    var baseOp = {
	      type: "op",
	      mode: baseArg.mode,
	      limits: true,
	      alwaysHandleSupSub: true,
	      parentIsSupSub: false,
	      symbol: false,
	      suppressBaseShift: funcName !== "\\stackrel",
	      body: ordargument(baseArg)
	    };
	    var supsub = {
	      type: "supsub",
	      mode: shiftedArg.mode,
	      base: baseOp,
	      sup: funcName === "\\underset" ? null : shiftedArg,
	      sub: funcName === "\\underset" ? shiftedArg : null
	    };
	    return {
	      type: "mclass",
	      mode: parser.mode,
	      mclass,
	      body: [supsub],
	      isCharacterBox: utils.isCharacterBox(supsub)
	    };
	  },

	  htmlBuilder: htmlBuilder$6,
	  mathmlBuilder: mathmlBuilder$5
	});

	// TODO(kevinb): implement \\sl and \\sc

	var htmlBuilder$5 = (group, options) => {
	  var font = group.font;
	  var newOptions = options.withFont(font);
	  return buildGroup$1(group.body, newOptions);
	};

	var mathmlBuilder$4 = (group, options) => {
	  var font = group.font;
	  var newOptions = options.withFont(font);
	  return buildGroup(group.body, newOptions);
	};

	var fontAliases = {
	  "\\Bbb": "\\mathbb",
	  "\\bold": "\\mathbf",
	  "\\frak": "\\mathfrak",
	  "\\bm": "\\boldsymbol"
	};
	defineFunction({
	  type: "font",
	  names: [// styles, except \boldsymbol defined below
	  "\\mathrm", "\\mathit", "\\mathbf", "\\mathnormal", // families
	  "\\mathbb", "\\mathcal", "\\mathfrak", "\\mathscr", "\\mathsf", "\\mathtt", // aliases, except \bm defined below
	  "\\Bbb", "\\bold", "\\frak"],
	  props: {
	    numArgs: 1,
	    allowedInArgument: true
	  },
	  handler: (_ref, args) => {
	    var {
	      parser,
	      funcName
	    } = _ref;
	    var body = normalizeArgument(args[0]);
	    var func = funcName;

	    if (func in fontAliases) {
	      func = fontAliases[func];
	    }

	    return {
	      type: "font",
	      mode: parser.mode,
	      font: func.slice(1),
	      body
	    };
	  },
	  htmlBuilder: htmlBuilder$5,
	  mathmlBuilder: mathmlBuilder$4
	});
	defineFunction({
	  type: "mclass",
	  names: ["\\boldsymbol", "\\bm"],
	  props: {
	    numArgs: 1
	  },
	  handler: (_ref2, args) => {
	    var {
	      parser
	    } = _ref2;
	    var body = args[0];
	    var isCharacterBox = utils.isCharacterBox(body); // amsbsy.sty's \boldsymbol uses \binrel spacing to inherit the
	    // argument's bin|rel|ord status

	    return {
	      type: "mclass",
	      mode: parser.mode,
	      mclass: binrelClass(body),
	      body: [{
	        type: "font",
	        mode: parser.mode,
	        font: "boldsymbol",
	        body
	      }],
	      isCharacterBox: isCharacterBox
	    };
	  }
	}); // Old font changing functions

	defineFunction({
	  type: "font",
	  names: ["\\rm", "\\sf", "\\tt", "\\bf", "\\it", "\\cal"],
	  props: {
	    numArgs: 0,
	    allowedInText: true
	  },
	  handler: (_ref3, args) => {
	    var {
	      parser,
	      funcName,
	      breakOnTokenText
	    } = _ref3;
	    var {
	      mode
	    } = parser;
	    var body = parser.parseExpression(true, breakOnTokenText);
	    var style = "math" + funcName.slice(1);
	    return {
	      type: "font",
	      mode: mode,
	      font: style,
	      body: {
	        type: "ordgroup",
	        mode: parser.mode,
	        body
	      }
	    };
	  },
	  htmlBuilder: htmlBuilder$5,
	  mathmlBuilder: mathmlBuilder$4
	});

	var adjustStyle = (size, originalStyle) => {
	  // Figure out what style this fraction should be in based on the
	  // function used
	  var style = originalStyle;

	  if (size === "display") {
	    // Get display style as a default.
	    // If incoming style is sub/sup, use style.text() to get correct size.
	    style = style.id >= Style$1.SCRIPT.id ? style.text() : Style$1.DISPLAY;
	  } else if (size === "text" && style.size === Style$1.DISPLAY.size) {
	    // We're in a \tfrac but incoming style is displaystyle, so:
	    style = Style$1.TEXT;
	  } else if (size === "script") {
	    style = Style$1.SCRIPT;
	  } else if (size === "scriptscript") {
	    style = Style$1.SCRIPTSCRIPT;
	  }

	  return style;
	};

	var htmlBuilder$4 = (group, options) => {
	  // Fractions are handled in the TeXbook on pages 444-445, rules 15(a-e).
	  var style = adjustStyle(group.size, options.style);
	  var nstyle = style.fracNum();
	  var dstyle = style.fracDen();
	  var newOptions;
	  newOptions = options.havingStyle(nstyle);
	  var numerm = buildGroup$1(group.numer, newOptions, options);

	  if (group.continued) {
	    // \cfrac inserts a \strut into the numerator.
	    // Get \strut dimensions from TeXbook page 353.
	    var hStrut = 8.5 / options.fontMetrics().ptPerEm;
	    var dStrut = 3.5 / options.fontMetrics().ptPerEm;
	    numerm.height = numerm.height < hStrut ? hStrut : numerm.height;
	    numerm.depth = numerm.depth < dStrut ? dStrut : numerm.depth;
	  }

	  newOptions = options.havingStyle(dstyle);
	  var denomm = buildGroup$1(group.denom, newOptions, options);
	  var rule;
	  var ruleWidth;
	  var ruleSpacing;

	  if (group.hasBarLine) {
	    if (group.barSize) {
	      ruleWidth = calculateSize(group.barSize, options);
	      rule = buildCommon.makeLineSpan("frac-line", options, ruleWidth);
	    } else {
	      rule = buildCommon.makeLineSpan("frac-line", options);
	    }

	    ruleWidth = rule.height;
	    ruleSpacing = rule.height;
	  } else {
	    rule = null;
	    ruleWidth = 0;
	    ruleSpacing = options.fontMetrics().defaultRuleThickness;
	  } // Rule 15b


	  var numShift;
	  var clearance;
	  var denomShift;

	  if (style.size === Style$1.DISPLAY.size || group.size === "display") {
	    numShift = options.fontMetrics().num1;

	    if (ruleWidth > 0) {
	      clearance = 3 * ruleSpacing;
	    } else {
	      clearance = 7 * ruleSpacing;
	    }

	    denomShift = options.fontMetrics().denom1;
	  } else {
	    if (ruleWidth > 0) {
	      numShift = options.fontMetrics().num2;
	      clearance = ruleSpacing;
	    } else {
	      numShift = options.fontMetrics().num3;
	      clearance = 3 * ruleSpacing;
	    }

	    denomShift = options.fontMetrics().denom2;
	  }

	  var frac;

	  if (!rule) {
	    // Rule 15c
	    var candidateClearance = numShift - numerm.depth - (denomm.height - denomShift);

	    if (candidateClearance < clearance) {
	      numShift += 0.5 * (clearance - candidateClearance);
	      denomShift += 0.5 * (clearance - candidateClearance);
	    }

	    frac = buildCommon.makeVList({
	      positionType: "individualShift",
	      children: [{
	        type: "elem",
	        elem: denomm,
	        shift: denomShift
	      }, {
	        type: "elem",
	        elem: numerm,
	        shift: -numShift
	      }]
	    }, options);
	  } else {
	    // Rule 15d
	    var axisHeight = options.fontMetrics().axisHeight;

	    if (numShift - numerm.depth - (axisHeight + 0.5 * ruleWidth) < clearance) {
	      numShift += clearance - (numShift - numerm.depth - (axisHeight + 0.5 * ruleWidth));
	    }

	    if (axisHeight - 0.5 * ruleWidth - (denomm.height - denomShift) < clearance) {
	      denomShift += clearance - (axisHeight - 0.5 * ruleWidth - (denomm.height - denomShift));
	    }

	    var midShift = -(axisHeight - 0.5 * ruleWidth);
	    frac = buildCommon.makeVList({
	      positionType: "individualShift",
	      children: [{
	        type: "elem",
	        elem: denomm,
	        shift: denomShift
	      }, {
	        type: "elem",
	        elem: rule,
	        shift: midShift
	      }, {
	        type: "elem",
	        elem: numerm,
	        shift: -numShift
	      }]
	    }, options);
	  } // Since we manually change the style sometimes (with \dfrac or \tfrac),
	  // account for the possible size change here.


	  newOptions = options.havingStyle(style);
	  frac.height *= newOptions.sizeMultiplier / options.sizeMultiplier;
	  frac.depth *= newOptions.sizeMultiplier / options.sizeMultiplier; // Rule 15e

	  var delimSize;

	  if (style.size === Style$1.DISPLAY.size) {
	    delimSize = options.fontMetrics().delim1;
	  } else if (style.size === Style$1.SCRIPTSCRIPT.size) {
	    delimSize = options.havingStyle(Style$1.SCRIPT).fontMetrics().delim2;
	  } else {
	    delimSize = options.fontMetrics().delim2;
	  }

	  var leftDelim;
	  var rightDelim;

	  if (group.leftDelim == null) {
	    leftDelim = makeNullDelimiter(options, ["mopen"]);
	  } else {
	    leftDelim = delimiter.customSizedDelim(group.leftDelim, delimSize, true, options.havingStyle(style), group.mode, ["mopen"]);
	  }

	  if (group.continued) {
	    rightDelim = buildCommon.makeSpan([]); // zero width for \cfrac
	  } else if (group.rightDelim == null) {
	    rightDelim = makeNullDelimiter(options, ["mclose"]);
	  } else {
	    rightDelim = delimiter.customSizedDelim(group.rightDelim, delimSize, true, options.havingStyle(style), group.mode, ["mclose"]);
	  }

	  return buildCommon.makeSpan(["mord"].concat(newOptions.sizingClasses(options)), [leftDelim, buildCommon.makeSpan(["mfrac"], [frac]), rightDelim], options);
	};

	var mathmlBuilder$3 = (group, options) => {
	  var node = new mathMLTree.MathNode("mfrac", [buildGroup(group.numer, options), buildGroup(group.denom, options)]);

	  if (!group.hasBarLine) {
	    node.setAttribute("linethickness", "0px");
	  } else if (group.barSize) {
	    var ruleWidth = calculateSize(group.barSize, options);
	    node.setAttribute("linethickness", makeEm(ruleWidth));
	  }

	  var style = adjustStyle(group.size, options.style);

	  if (style.size !== options.style.size) {
	    node = new mathMLTree.MathNode("mstyle", [node]);
	    var isDisplay = style.size === Style$1.DISPLAY.size ? "true" : "false";
	    node.setAttribute("displaystyle", isDisplay);
	    node.setAttribute("scriptlevel", "0");
	  }

	  if (group.leftDelim != null || group.rightDelim != null) {
	    var withDelims = [];

	    if (group.leftDelim != null) {
	      var leftOp = new mathMLTree.MathNode("mo", [new mathMLTree.TextNode(group.leftDelim.replace("\\", ""))]);
	      leftOp.setAttribute("fence", "true");
	      withDelims.push(leftOp);
	    }

	    withDelims.push(node);

	    if (group.rightDelim != null) {
	      var rightOp = new mathMLTree.MathNode("mo", [new mathMLTree.TextNode(group.rightDelim.replace("\\", ""))]);
	      rightOp.setAttribute("fence", "true");
	      withDelims.push(rightOp);
	    }

	    return makeRow(withDelims);
	  }

	  return node;
	};

	defineFunction({
	  type: "genfrac",
	  names: ["\\dfrac", "\\frac", "\\tfrac", "\\dbinom", "\\binom", "\\tbinom", "\\\\atopfrac", // can’t be entered directly
	  "\\\\bracefrac", "\\\\brackfrac" // ditto
	  ],
	  props: {
	    numArgs: 2,
	    allowedInArgument: true
	  },
	  handler: (_ref, args) => {
	    var {
	      parser,
	      funcName
	    } = _ref;
	    var numer = args[0];
	    var denom = args[1];
	    var hasBarLine;
	    var leftDelim = null;
	    var rightDelim = null;
	    var size = "auto";

	    switch (funcName) {
	      case "\\dfrac":
	      case "\\frac":
	      case "\\tfrac":
	        hasBarLine = true;
	        break;

	      case "\\\\atopfrac":
	        hasBarLine = false;
	        break;

	      case "\\dbinom":
	      case "\\binom":
	      case "\\tbinom":
	        hasBarLine = false;
	        leftDelim = "(";
	        rightDelim = ")";
	        break;

	      case "\\\\bracefrac":
	        hasBarLine = false;
	        leftDelim = "\\{";
	        rightDelim = "\\}";
	        break;

	      case "\\\\brackfrac":
	        hasBarLine = false;
	        leftDelim = "[";
	        rightDelim = "]";
	        break;

	      default:
	        throw new Error("Unrecognized genfrac command");
	    }

	    switch (funcName) {
	      case "\\dfrac":
	      case "\\dbinom":
	        size = "display";
	        break;

	      case "\\tfrac":
	      case "\\tbinom":
	        size = "text";
	        break;
	    }

	    return {
	      type: "genfrac",
	      mode: parser.mode,
	      continued: false,
	      numer,
	      denom,
	      hasBarLine,
	      leftDelim,
	      rightDelim,
	      size,
	      barSize: null
	    };
	  },
	  htmlBuilder: htmlBuilder$4,
	  mathmlBuilder: mathmlBuilder$3
	});
	defineFunction({
	  type: "genfrac",
	  names: ["\\cfrac"],
	  props: {
	    numArgs: 2
	  },
	  handler: (_ref2, args) => {
	    var {
	      parser,
	      funcName
	    } = _ref2;
	    var numer = args[0];
	    var denom = args[1];
	    return {
	      type: "genfrac",
	      mode: parser.mode,
	      continued: true,
	      numer,
	      denom,
	      hasBarLine: true,
	      leftDelim: null,
	      rightDelim: null,
	      size: "display",
	      barSize: null
	    };
	  }
	}); // Infix generalized fractions -- these are not rendered directly, but replaced
	// immediately by one of the variants above.

	defineFunction({
	  type: "infix",
	  names: ["\\over", "\\choose", "\\atop", "\\brace", "\\brack"],
	  props: {
	    numArgs: 0,
	    infix: true
	  },

	  handler(_ref3) {
	    var {
	      parser,
	      funcName,
	      token
	    } = _ref3;
	    var replaceWith;

	    switch (funcName) {
	      case "\\over":
	        replaceWith = "\\frac";
	        break;

	      case "\\choose":
	        replaceWith = "\\binom";
	        break;

	      case "\\atop":
	        replaceWith = "\\\\atopfrac";
	        break;

	      case "\\brace":
	        replaceWith = "\\\\bracefrac";
	        break;

	      case "\\brack":
	        replaceWith = "\\\\brackfrac";
	        break;

	      default:
	        throw new Error("Unrecognized infix genfrac command");
	    }

	    return {
	      type: "infix",
	      mode: parser.mode,
	      replaceWith,
	      token
	    };
	  }

	});
	var stylArray = ["display", "text", "script", "scriptscript"];

	var delimFromValue = function delimFromValue(delimString) {
	  var delim = null;

	  if (delimString.length > 0) {
	    delim = delimString;
	    delim = delim === "." ? null : delim;
	  }

	  return delim;
	};

	defineFunction({
	  type: "genfrac",
	  names: ["\\genfrac"],
	  props: {
	    numArgs: 6,
	    allowedInArgument: true,
	    argTypes: ["math", "math", "size", "text", "math", "math"]
	  },

	  handler(_ref4, args) {
	    var {
	      parser
	    } = _ref4;
	    var numer = args[4];
	    var denom = args[5]; // Look into the parse nodes to get the desired delimiters.

	    var leftNode = normalizeArgument(args[0]);
	    var leftDelim = leftNode.type === "atom" && leftNode.family === "open" ? delimFromValue(leftNode.text) : null;
	    var rightNode = normalizeArgument(args[1]);
	    var rightDelim = rightNode.type === "atom" && rightNode.family === "close" ? delimFromValue(rightNode.text) : null;
	    var barNode = assertNodeType(args[2], "size");
	    var hasBarLine;
	    var barSize = null;

	    if (barNode.isBlank) {
	      // \genfrac acts differently than \above.
	      // \genfrac treats an empty size group as a signal to use a
	      // standard bar size. \above would see size = 0 and omit the bar.
	      hasBarLine = true;
	    } else {
	      barSize = barNode.value;
	      hasBarLine = barSize.number > 0;
	    } // Find out if we want displaystyle, textstyle, etc.


	    var size = "auto";
	    var styl = args[3];

	    if (styl.type === "ordgroup") {
	      if (styl.body.length > 0) {
	        var textOrd = assertNodeType(styl.body[0], "textord");
	        size = stylArray[Number(textOrd.text)];
	      }
	    } else {
	      styl = assertNodeType(styl, "textord");
	      size = stylArray[Number(styl.text)];
	    }

	    return {
	      type: "genfrac",
	      mode: parser.mode,
	      numer,
	      denom,
	      continued: false,
	      hasBarLine,
	      barSize,
	      leftDelim,
	      rightDelim,
	      size
	    };
	  },

	  htmlBuilder: htmlBuilder$4,
	  mathmlBuilder: mathmlBuilder$3
	}); // \above is an infix fraction that also defines a fraction bar size.

	defineFunction({
	  type: "infix",
	  names: ["\\above"],
	  props: {
	    numArgs: 1,
	    argTypes: ["size"],
	    infix: true
	  },

	  handler(_ref5, args) {
	    var {
	      parser,
	      funcName,
	      token
	    } = _ref5;
	    return {
	      type: "infix",
	      mode: parser.mode,
	      replaceWith: "\\\\abovefrac",
	      size: assertNodeType(args[0], "size").value,
	      token
	    };
	  }

	});
	defineFunction({
	  type: "genfrac",
	  names: ["\\\\abovefrac"],
	  props: {
	    numArgs: 3,
	    argTypes: ["math", "size", "math"]
	  },
	  handler: (_ref6, args) => {
	    var {
	      parser,
	      funcName
	    } = _ref6;
	    var numer = args[0];
	    var barSize = assert(assertNodeType(args[1], "infix").size);
	    var denom = args[2];
	    var hasBarLine = barSize.number > 0;
	    return {
	      type: "genfrac",
	      mode: parser.mode,
	      numer,
	      denom,
	      continued: false,
	      hasBarLine,
	      barSize,
	      leftDelim: null,
	      rightDelim: null,
	      size: "auto"
	    };
	  },
	  htmlBuilder: htmlBuilder$4,
	  mathmlBuilder: mathmlBuilder$3
	});

	// NOTE: Unlike most `htmlBuilder`s, this one handles not only "horizBrace", but
	// also "supsub" since an over/underbrace can affect super/subscripting.
	var htmlBuilder$3 = (grp, options) => {
	  var style = options.style; // Pull out the `ParseNode<"horizBrace">` if `grp` is a "supsub" node.

	  var supSubGroup;
	  var group;

	  if (grp.type === "supsub") {
	    // Ref: LaTeX source2e: }}}}\limits}
	    // i.e. LaTeX treats the brace similar to an op and passes it
	    // with \limits, so we need to assign supsub style.
	    supSubGroup = grp.sup ? buildGroup$1(grp.sup, options.havingStyle(style.sup()), options) : buildGroup$1(grp.sub, options.havingStyle(style.sub()), options);
	    group = assertNodeType(grp.base, "horizBrace");
	  } else {
	    group = assertNodeType(grp, "horizBrace");
	  } // Build the base group


	  var body = buildGroup$1(group.base, options.havingBaseStyle(Style$1.DISPLAY)); // Create the stretchy element

	  var braceBody = stretchy.svgSpan(group, options); // Generate the vlist, with the appropriate kerns        ┏━━━━━━━━┓
	  // This first vlist contains the content and the brace:   equation

	  var vlist;

	  if (group.isOver) {
	    vlist = buildCommon.makeVList({
	      positionType: "firstBaseline",
	      children: [{
	        type: "elem",
	        elem: body
	      }, {
	        type: "kern",
	        size: 0.1
	      }, {
	        type: "elem",
	        elem: braceBody
	      }]
	    }, options); // $FlowFixMe: Replace this with passing "svg-align" into makeVList.

	    vlist.children[0].children[0].children[1].classes.push("svg-align");
	  } else {
	    vlist = buildCommon.makeVList({
	      positionType: "bottom",
	      positionData: body.depth + 0.1 + braceBody.height,
	      children: [{
	        type: "elem",
	        elem: braceBody
	      }, {
	        type: "kern",
	        size: 0.1
	      }, {
	        type: "elem",
	        elem: body
	      }]
	    }, options); // $FlowFixMe: Replace this with passing "svg-align" into makeVList.

	    vlist.children[0].children[0].children[0].classes.push("svg-align");
	  }

	  if (supSubGroup) {
	    // To write the supsub, wrap the first vlist in another vlist:
	    // They can't all go in the same vlist, because the note might be
	    // wider than the equation. We want the equation to control the
	    // brace width.
	    //      note          long note           long note
	    //   ┏━━━━━━━━┓   or    ┏━━━┓     not    ┏━━━━━━━━━┓
	    //    equation           eqn                 eqn
	    var vSpan = buildCommon.makeSpan(["mord", group.isOver ? "mover" : "munder"], [vlist], options);

	    if (group.isOver) {
	      vlist = buildCommon.makeVList({
	        positionType: "firstBaseline",
	        children: [{
	          type: "elem",
	          elem: vSpan
	        }, {
	          type: "kern",
	          size: 0.2
	        }, {
	          type: "elem",
	          elem: supSubGroup
	        }]
	      }, options);
	    } else {
	      vlist = buildCommon.makeVList({
	        positionType: "bottom",
	        positionData: vSpan.depth + 0.2 + supSubGroup.height + supSubGroup.depth,
	        children: [{
	          type: "elem",
	          elem: supSubGroup
	        }, {
	          type: "kern",
	          size: 0.2
	        }, {
	          type: "elem",
	          elem: vSpan
	        }]
	      }, options);
	    }
	  }

	  return buildCommon.makeSpan(["mord", group.isOver ? "mover" : "munder"], [vlist], options);
	};

	var mathmlBuilder$2 = (group, options) => {
	  var accentNode = stretchy.mathMLnode(group.label);
	  return new mathMLTree.MathNode(group.isOver ? "mover" : "munder", [buildGroup(group.base, options), accentNode]);
	}; // Horizontal stretchy braces


	defineFunction({
	  type: "horizBrace",
	  names: ["\\overbrace", "\\underbrace"],
	  props: {
	    numArgs: 1
	  },

	  handler(_ref, args) {
	    var {
	      parser,
	      funcName
	    } = _ref;
	    return {
	      type: "horizBrace",
	      mode: parser.mode,
	      label: funcName,
	      isOver: /^\\over/.test(funcName),
	      base: args[0]
	    };
	  },

	  htmlBuilder: htmlBuilder$3,
	  mathmlBuilder: mathmlBuilder$2
	});

	defineFunction({
	  type: "href",
	  names: ["\\href"],
	  props: {
	    numArgs: 2,
	    argTypes: ["url", "original"],
	    allowedInText: true
	  },
	  handler: (_ref, args) => {
	    var {
	      parser
	    } = _ref;
	    var body = args[1];
	    var href = assertNodeType(args[0], "url").url;

	    if (!parser.settings.isTrusted({
	      command: "\\href",
	      url: href
	    })) {
	      return parser.formatUnsupportedCmd("\\href");
	    }

	    return {
	      type: "href",
	      mode: parser.mode,
	      href,
	      body: ordargument(body)
	    };
	  },
	  htmlBuilder: (group, options) => {
	    var elements = buildExpression$1(group.body, options, false);
	    return buildCommon.makeAnchor(group.href, [], elements, options);
	  },
	  mathmlBuilder: (group, options) => {
	    var math = buildExpressionRow(group.body, options);

	    if (!(math instanceof MathNode)) {
	      math = new MathNode("mrow", [math]);
	    }

	    math.setAttribute("href", group.href);
	    return math;
	  }
	});
	defineFunction({
	  type: "href",
	  names: ["\\url"],
	  props: {
	    numArgs: 1,
	    argTypes: ["url"],
	    allowedInText: true
	  },
	  handler: (_ref2, args) => {
	    var {
	      parser
	    } = _ref2;
	    var href = assertNodeType(args[0], "url").url;

	    if (!parser.settings.isTrusted({
	      command: "\\url",
	      url: href
	    })) {
	      return parser.formatUnsupportedCmd("\\url");
	    }

	    var chars = [];

	    for (var i = 0; i < href.length; i++) {
	      var c = href[i];

	      if (c === "~") {
	        c = "\\textasciitilde";
	      }

	      chars.push({
	        type: "textord",
	        mode: "text",
	        text: c
	      });
	    }

	    var body = {
	      type: "text",
	      mode: parser.mode,
	      font: "\\texttt",
	      body: chars
	    };
	    return {
	      type: "href",
	      mode: parser.mode,
	      href,
	      body: ordargument(body)
	    };
	  }
	});

	// In LaTeX, \vcenter can act only on a box, as in
	// \vcenter{\hbox{$\frac{a+b}{\dfrac{c}{d}}$}}
	// This function by itself doesn't do anything but prevent a soft line break.

	defineFunction({
	  type: "hbox",
	  names: ["\\hbox"],
	  props: {
	    numArgs: 1,
	    argTypes: ["text"],
	    allowedInText: true,
	    primitive: true
	  },

	  handler(_ref, args) {
	    var {
	      parser
	    } = _ref;
	    return {
	      type: "hbox",
	      mode: parser.mode,
	      body: ordargument(args[0])
	    };
	  },

	  htmlBuilder(group, options) {
	    var elements = buildExpression$1(group.body, options, false);
	    return buildCommon.makeFragment(elements);
	  },

	  mathmlBuilder(group, options) {
	    return new mathMLTree.MathNode("mrow", buildExpression(group.body, options));
	  }

	});

	defineFunction({
	  type: "html",
	  names: ["\\htmlClass", "\\htmlId", "\\htmlStyle", "\\htmlData"],
	  props: {
	    numArgs: 2,
	    argTypes: ["raw", "original"],
	    allowedInText: true
	  },
	  handler: (_ref, args) => {
	    var {
	      parser,
	      funcName,
	      token
	    } = _ref;
	    var value = assertNodeType(args[0], "raw").string;
	    var body = args[1];

	    if (parser.settings.strict) {
	      parser.settings.reportNonstrict("htmlExtension", "HTML extension is disabled on strict mode");
	    }

	    var trustContext;
	    var attributes = {};

	    switch (funcName) {
	      case "\\htmlClass":
	        attributes.class = value;
	        trustContext = {
	          command: "\\htmlClass",
	          class: value
	        };
	        break;

	      case "\\htmlId":
	        attributes.id = value;
	        trustContext = {
	          command: "\\htmlId",
	          id: value
	        };
	        break;

	      case "\\htmlStyle":
	        attributes.style = value;
	        trustContext = {
	          command: "\\htmlStyle",
	          style: value
	        };
	        break;

	      case "\\htmlData":
	        {
	          var data = value.split(",");

	          for (var i = 0; i < data.length; i++) {
	            var keyVal = data[i].split("=");

	            if (keyVal.length !== 2) {
	              throw new ParseError("Error parsing key-value for \\htmlData");
	            }

	            attributes["data-" + keyVal[0].trim()] = keyVal[1].trim();
	          }

	          trustContext = {
	            command: "\\htmlData",
	            attributes
	          };
	          break;
	        }

	      default:
	        throw new Error("Unrecognized html command");
	    }

	    if (!parser.settings.isTrusted(trustContext)) {
	      return parser.formatUnsupportedCmd(funcName);
	    }

	    return {
	      type: "html",
	      mode: parser.mode,
	      attributes,
	      body: ordargument(body)
	    };
	  },
	  htmlBuilder: (group, options) => {
	    var elements = buildExpression$1(group.body, options, false);
	    var classes = ["enclosing"];

	    if (group.attributes.class) {
	      classes.push(...group.attributes.class.trim().split(/\s+/));
	    }

	    var span = buildCommon.makeSpan(classes, elements, options);

	    for (var attr in group.attributes) {
	      if (attr !== "class" && group.attributes.hasOwnProperty(attr)) {
	        span.setAttribute(attr, group.attributes[attr]);
	      }
	    }

	    return span;
	  },
	  mathmlBuilder: (group, options) => {
	    return buildExpressionRow(group.body, options);
	  }
	});

	defineFunction({
	  type: "htmlmathml",
	  names: ["\\html@mathml"],
	  props: {
	    numArgs: 2,
	    allowedInText: true
	  },
	  handler: (_ref, args) => {
	    var {
	      parser
	    } = _ref;
	    return {
	      type: "htmlmathml",
	      mode: parser.mode,
	      html: ordargument(args[0]),
	      mathml: ordargument(args[1])
	    };
	  },
	  htmlBuilder: (group, options) => {
	    var elements = buildExpression$1(group.html, options, false);
	    return buildCommon.makeFragment(elements);
	  },
	  mathmlBuilder: (group, options) => {
	    return buildExpressionRow(group.mathml, options);
	  }
	});

	var sizeData = function sizeData(str) {
	  if (/^[-+]? *(\d+(\.\d*)?|\.\d+)$/.test(str)) {
	    // str is a number with no unit specified.
	    // default unit is bp, per graphix package.
	    return {
	      number: +str,
	      unit: "bp"
	    };
	  } else {
	    var match = /([-+]?) *(\d+(?:\.\d*)?|\.\d+) *([a-z]{2})/.exec(str);

	    if (!match) {
	      throw new ParseError("Invalid size: '" + str + "' in \\includegraphics");
	    }

	    var data = {
	      number: +(match[1] + match[2]),
	      // sign + magnitude, cast to number
	      unit: match[3]
	    };

	    if (!validUnit(data)) {
	      throw new ParseError("Invalid unit: '" + data.unit + "' in \\includegraphics.");
	    }

	    return data;
	  }
	};

	defineFunction({
	  type: "includegraphics",
	  names: ["\\includegraphics"],
	  props: {
	    numArgs: 1,
	    numOptionalArgs: 1,
	    argTypes: ["raw", "url"],
	    allowedInText: false
	  },
	  handler: (_ref, args, optArgs) => {
	    var {
	      parser
	    } = _ref;
	    var width = {
	      number: 0,
	      unit: "em"
	    };
	    var height = {
	      number: 0.9,
	      unit: "em"
	    }; // sorta character sized.

	    var totalheight = {
	      number: 0,
	      unit: "em"
	    };
	    var alt = "";

	    if (optArgs[0]) {
	      var attributeStr = assertNodeType(optArgs[0], "raw").string; // Parser.js does not parse key/value pairs. We get a string.

	      var attributes = attributeStr.split(",");

	      for (var i = 0; i < attributes.length; i++) {
	        var keyVal = attributes[i].split("=");

	        if (keyVal.length === 2) {
	          var str = keyVal[1].trim();

	          switch (keyVal[0].trim()) {
	            case "alt":
	              alt = str;
	              break;

	            case "width":
	              width = sizeData(str);
	              break;

	            case "height":
	              height = sizeData(str);
	              break;

	            case "totalheight":
	              totalheight = sizeData(str);
	              break;

	            default:
	              throw new ParseError("Invalid key: '" + keyVal[0] + "' in \\includegraphics.");
	          }
	        }
	      }
	    }

	    var src = assertNodeType(args[0], "url").url;

	    if (alt === "") {
	      // No alt given. Use the file name. Strip away the path.
	      alt = src;
	      alt = alt.replace(/^.*[\\/]/, '');
	      alt = alt.substring(0, alt.lastIndexOf('.'));
	    }

	    if (!parser.settings.isTrusted({
	      command: "\\includegraphics",
	      url: src
	    })) {
	      return parser.formatUnsupportedCmd("\\includegraphics");
	    }

	    return {
	      type: "includegraphics",
	      mode: parser.mode,
	      alt: alt,
	      width: width,
	      height: height,
	      totalheight: totalheight,
	      src: src
	    };
	  },
	  htmlBuilder: (group, options) => {
	    var height = calculateSize(group.height, options);
	    var depth = 0;

	    if (group.totalheight.number > 0) {
	      depth = calculateSize(group.totalheight, options) - height;
	    }

	    var width = 0;

	    if (group.width.number > 0) {
	      width = calculateSize(group.width, options);
	    }

	    var style = {
	      height: makeEm(height + depth)
	    };

	    if (width > 0) {
	      style.width = makeEm(width);
	    }

	    if (depth > 0) {
	      style.verticalAlign = makeEm(-depth);
	    }

	    var node = new Img(group.src, group.alt, style);
	    node.height = height;
	    node.depth = depth;
	    return node;
	  },
	  mathmlBuilder: (group, options) => {
	    var node = new mathMLTree.MathNode("mglyph", []);
	    node.setAttribute("alt", group.alt);
	    var height = calculateSize(group.height, options);
	    var depth = 0;

	    if (group.totalheight.number > 0) {
	      depth = calculateSize(group.totalheight, options) - height;
	      node.setAttribute("valign", makeEm(-depth));
	    }

	    node.setAttribute("height", makeEm(height + depth));

	    if (group.width.number > 0) {
	      var width = calculateSize(group.width, options);
	      node.setAttribute("width", makeEm(width));
	    }

	    node.setAttribute("src", group.src);
	    return node;
	  }
	});

	// Horizontal spacing commands

	defineFunction({
	  type: "kern",
	  names: ["\\kern", "\\mkern", "\\hskip", "\\mskip"],
	  props: {
	    numArgs: 1,
	    argTypes: ["size"],
	    primitive: true,
	    allowedInText: true
	  },

	  handler(_ref, args) {
	    var {
	      parser,
	      funcName
	    } = _ref;
	    var size = assertNodeType(args[0], "size");

	    if (parser.settings.strict) {
	      var mathFunction = funcName[1] === 'm'; // \mkern, \mskip

	      var muUnit = size.value.unit === 'mu';

	      if (mathFunction) {
	        if (!muUnit) {
	          parser.settings.reportNonstrict("mathVsTextUnits", "LaTeX's " + funcName + " supports only mu units, " + ("not " + size.value.unit + " units"));
	        }

	        if (parser.mode !== "math") {
	          parser.settings.reportNonstrict("mathVsTextUnits", "LaTeX's " + funcName + " works only in math mode");
	        }
	      } else {
	        // !mathFunction
	        if (muUnit) {
	          parser.settings.reportNonstrict("mathVsTextUnits", "LaTeX's " + funcName + " doesn't support mu units");
	        }
	      }
	    }

	    return {
	      type: "kern",
	      mode: parser.mode,
	      dimension: size.value
	    };
	  },

	  htmlBuilder(group, options) {
	    return buildCommon.makeGlue(group.dimension, options);
	  },

	  mathmlBuilder(group, options) {
	    var dimension = calculateSize(group.dimension, options);
	    return new mathMLTree.SpaceNode(dimension);
	  }

	});

	// Horizontal overlap functions
	defineFunction({
	  type: "lap",
	  names: ["\\mathllap", "\\mathrlap", "\\mathclap"],
	  props: {
	    numArgs: 1,
	    allowedInText: true
	  },
	  handler: (_ref, args) => {
	    var {
	      parser,
	      funcName
	    } = _ref;
	    var body = args[0];
	    return {
	      type: "lap",
	      mode: parser.mode,
	      alignment: funcName.slice(5),
	      body
	    };
	  },
	  htmlBuilder: (group, options) => {
	    // mathllap, mathrlap, mathclap
	    var inner;

	    if (group.alignment === "clap") {
	      // ref: https://www.math.lsu.edu/~aperlis/publications/mathclap/
	      inner = buildCommon.makeSpan([], [buildGroup$1(group.body, options)]); // wrap, since CSS will center a .clap > .inner > span

	      inner = buildCommon.makeSpan(["inner"], [inner], options);
	    } else {
	      inner = buildCommon.makeSpan(["inner"], [buildGroup$1(group.body, options)]);
	    }

	    var fix = buildCommon.makeSpan(["fix"], []);
	    var node = buildCommon.makeSpan([group.alignment], [inner, fix], options); // At this point, we have correctly set horizontal alignment of the
	    // two items involved in the lap.
	    // Next, use a strut to set the height of the HTML bounding box.
	    // Otherwise, a tall argument may be misplaced.
	    // This code resolved issue #1153

	    var strut = buildCommon.makeSpan(["strut"]);
	    strut.style.height = makeEm(node.height + node.depth);

	    if (node.depth) {
	      strut.style.verticalAlign = makeEm(-node.depth);
	    }

	    node.children.unshift(strut); // Next, prevent vertical misplacement when next to something tall.
	    // This code resolves issue #1234

	    node = buildCommon.makeSpan(["thinbox"], [node], options);
	    return buildCommon.makeSpan(["mord", "vbox"], [node], options);
	  },
	  mathmlBuilder: (group, options) => {
	    // mathllap, mathrlap, mathclap
	    var node = new mathMLTree.MathNode("mpadded", [buildGroup(group.body, options)]);

	    if (group.alignment !== "rlap") {
	      var offset = group.alignment === "llap" ? "-1" : "-0.5";
	      node.setAttribute("lspace", offset + "width");
	    }

	    node.setAttribute("width", "0px");
	    return node;
	  }
	});

	defineFunction({
	  type: "styling",
	  names: ["\\(", "$"],
	  props: {
	    numArgs: 0,
	    allowedInText: true,
	    allowedInMath: false
	  },

	  handler(_ref, args) {
	    var {
	      funcName,
	      parser
	    } = _ref;
	    var outerMode = parser.mode;
	    parser.switchMode("math");
	    var close = funcName === "\\(" ? "\\)" : "$";
	    var body = parser.parseExpression(false, close);
	    parser.expect(close);
	    parser.switchMode(outerMode);
	    return {
	      type: "styling",
	      mode: parser.mode,
	      style: "text",
	      body
	    };
	  }

	}); // Check for extra closing math delimiters

	defineFunction({
	  type: "text",
	  // Doesn't matter what this is.
	  names: ["\\)", "\\]"],
	  props: {
	    numArgs: 0,
	    allowedInText: true,
	    allowedInMath: false
	  },

	  handler(context, args) {
	    throw new ParseError("Mismatched " + context.funcName);
	  }

	});

	var chooseMathStyle = (group, options) => {
	  switch (options.style.size) {
	    case Style$1.DISPLAY.size:
	      return group.display;

	    case Style$1.TEXT.size:
	      return group.text;

	    case Style$1.SCRIPT.size:
	      return group.script;

	    case Style$1.SCRIPTSCRIPT.size:
	      return group.scriptscript;

	    default:
	      return group.text;
	  }
	};

	defineFunction({
	  type: "mathchoice",
	  names: ["\\mathchoice"],
	  props: {
	    numArgs: 4,
	    primitive: true
	  },
	  handler: (_ref, args) => {
	    var {
	      parser
	    } = _ref;
	    return {
	      type: "mathchoice",
	      mode: parser.mode,
	      display: ordargument(args[0]),
	      text: ordargument(args[1]),
	      script: ordargument(args[2]),
	      scriptscript: ordargument(args[3])
	    };
	  },
	  htmlBuilder: (group, options) => {
	    var body = chooseMathStyle(group, options);
	    var elements = buildExpression$1(body, options, false);
	    return buildCommon.makeFragment(elements);
	  },
	  mathmlBuilder: (group, options) => {
	    var body = chooseMathStyle(group, options);
	    return buildExpressionRow(body, options);
	  }
	});

	var assembleSupSub = (base, supGroup, subGroup, options, style, slant, baseShift) => {
	  base = buildCommon.makeSpan([], [base]);
	  var subIsSingleCharacter = subGroup && utils.isCharacterBox(subGroup);
	  var sub;
	  var sup; // We manually have to handle the superscripts and subscripts. This,
	  // aside from the kern calculations, is copied from supsub.

	  if (supGroup) {
	    var elem = buildGroup$1(supGroup, options.havingStyle(style.sup()), options);
	    sup = {
	      elem,
	      kern: Math.max(options.fontMetrics().bigOpSpacing1, options.fontMetrics().bigOpSpacing3 - elem.depth)
	    };
	  }

	  if (subGroup) {
	    var _elem = buildGroup$1(subGroup, options.havingStyle(style.sub()), options);

	    sub = {
	      elem: _elem,
	      kern: Math.max(options.fontMetrics().bigOpSpacing2, options.fontMetrics().bigOpSpacing4 - _elem.height)
	    };
	  } // Build the final group as a vlist of the possible subscript, base,
	  // and possible superscript.


	  var finalGroup;

	  if (sup && sub) {
	    var bottom = options.fontMetrics().bigOpSpacing5 + sub.elem.height + sub.elem.depth + sub.kern + base.depth + baseShift;
	    finalGroup = buildCommon.makeVList({
	      positionType: "bottom",
	      positionData: bottom,
	      children: [{
	        type: "kern",
	        size: options.fontMetrics().bigOpSpacing5
	      }, {
	        type: "elem",
	        elem: sub.elem,
	        marginLeft: makeEm(-slant)
	      }, {
	        type: "kern",
	        size: sub.kern
	      }, {
	        type: "elem",
	        elem: base
	      }, {
	        type: "kern",
	        size: sup.kern
	      }, {
	        type: "elem",
	        elem: sup.elem,
	        marginLeft: makeEm(slant)
	      }, {
	        type: "kern",
	        size: options.fontMetrics().bigOpSpacing5
	      }]
	    }, options);
	  } else if (sub) {
	    var top = base.height - baseShift; // Shift the limits by the slant of the symbol. Note
	    // that we are supposed to shift the limits by 1/2 of the slant,
	    // but since we are centering the limits adding a full slant of
	    // margin will shift by 1/2 that.

	    finalGroup = buildCommon.makeVList({
	      positionType: "top",
	      positionData: top,
	      children: [{
	        type: "kern",
	        size: options.fontMetrics().bigOpSpacing5
	      }, {
	        type: "elem",
	        elem: sub.elem,
	        marginLeft: makeEm(-slant)
	      }, {
	        type: "kern",
	        size: sub.kern
	      }, {
	        type: "elem",
	        elem: base
	      }]
	    }, options);
	  } else if (sup) {
	    var _bottom = base.depth + baseShift;

	    finalGroup = buildCommon.makeVList({
	      positionType: "bottom",
	      positionData: _bottom,
	      children: [{
	        type: "elem",
	        elem: base
	      }, {
	        type: "kern",
	        size: sup.kern
	      }, {
	        type: "elem",
	        elem: sup.elem,
	        marginLeft: makeEm(slant)
	      }, {
	        type: "kern",
	        size: options.fontMetrics().bigOpSpacing5
	      }]
	    }, options);
	  } else {
	    // This case probably shouldn't occur (this would mean the
	    // supsub was sending us a group with no superscript or
	    // subscript) but be safe.
	    return base;
	  }

	  var parts = [finalGroup];

	  if (sub && slant !== 0 && !subIsSingleCharacter) {
	    // A negative margin-left was applied to the lower limit.
	    // Avoid an overlap by placing a spacer on the left on the group.
	    var spacer = buildCommon.makeSpan(["mspace"], [], options);
	    spacer.style.marginRight = makeEm(slant);
	    parts.unshift(spacer);
	  }

	  return buildCommon.makeSpan(["mop", "op-limits"], parts, options);
	};

	// Limits, symbols
	// Most operators have a large successor symbol, but these don't.
	var noSuccessor = ["\\smallint"]; // NOTE: Unlike most `htmlBuilder`s, this one handles not only "op", but also
	// "supsub" since some of them (like \int) can affect super/subscripting.

	var htmlBuilder$2 = (grp, options) => {
	  // Operators are handled in the TeXbook pg. 443-444, rule 13(a).
	  var supGroup;
	  var subGroup;
	  var hasLimits = false;
	  var group;

	  if (grp.type === "supsub") {
	    // If we have limits, supsub will pass us its group to handle. Pull
	    // out the superscript and subscript and set the group to the op in
	    // its base.
	    supGroup = grp.sup;
	    subGroup = grp.sub;
	    group = assertNodeType(grp.base, "op");
	    hasLimits = true;
	  } else {
	    group = assertNodeType(grp, "op");
	  }

	  var style = options.style;
	  var large = false;

	  if (style.size === Style$1.DISPLAY.size && group.symbol && !utils.contains(noSuccessor, group.name)) {
	    // Most symbol operators get larger in displaystyle (rule 13)
	    large = true;
	  }

	  var base;

	  if (group.symbol) {
	    // If this is a symbol, create the symbol.
	    var fontName = large ? "Size2-Regular" : "Size1-Regular";
	    var stash = "";

	    if (group.name === "\\oiint" || group.name === "\\oiiint") {
	      // No font glyphs yet, so use a glyph w/o the oval.
	      // TODO: When font glyphs are available, delete this code.
	      stash = group.name.substr(1);
	      group.name = stash === "oiint" ? "\\iint" : "\\iiint";
	    }

	    base = buildCommon.makeSymbol(group.name, fontName, "math", options, ["mop", "op-symbol", large ? "large-op" : "small-op"]);

	    if (stash.length > 0) {
	      // We're in \oiint or \oiiint. Overlay the oval.
	      // TODO: When font glyphs are available, delete this code.
	      var italic = base.italic;
	      var oval = buildCommon.staticSvg(stash + "Size" + (large ? "2" : "1"), options);
	      base = buildCommon.makeVList({
	        positionType: "individualShift",
	        children: [{
	          type: "elem",
	          elem: base,
	          shift: 0
	        }, {
	          type: "elem",
	          elem: oval,
	          shift: large ? 0.08 : 0
	        }]
	      }, options);
	      group.name = "\\" + stash;
	      base.classes.unshift("mop"); // $FlowFixMe

	      base.italic = italic;
	    }
	  } else if (group.body) {
	    // If this is a list, compose that list.
	    var inner = buildExpression$1(group.body, options, true);

	    if (inner.length === 1 && inner[0] instanceof SymbolNode) {
	      base = inner[0];
	      base.classes[0] = "mop"; // replace old mclass
	    } else {
	      base = buildCommon.makeSpan(["mop"], inner, options);
	    }
	  } else {
	    // Otherwise, this is a text operator. Build the text from the
	    // operator's name.
	    var output = [];

	    for (var i = 1; i < group.name.length; i++) {
	      output.push(buildCommon.mathsym(group.name[i], group.mode, options));
	    }

	    base = buildCommon.makeSpan(["mop"], output, options);
	  } // If content of op is a single symbol, shift it vertically.


	  var baseShift = 0;
	  var slant = 0;

	  if ((base instanceof SymbolNode || group.name === "\\oiint" || group.name === "\\oiiint") && !group.suppressBaseShift) {
	    // We suppress the shift of the base of \overset and \underset. Otherwise,
	    // shift the symbol so its center lies on the axis (rule 13). It
	    // appears that our fonts have the centers of the symbols already
	    // almost on the axis, so these numbers are very small. Note we
	    // don't actually apply this here, but instead it is used either in
	    // the vlist creation or separately when there are no limits.
	    baseShift = (base.height - base.depth) / 2 - options.fontMetrics().axisHeight; // The slant of the symbol is just its italic correction.
	    // $FlowFixMe

	    slant = base.italic;
	  }

	  if (hasLimits) {
	    return assembleSupSub(base, supGroup, subGroup, options, style, slant, baseShift);
	  } else {
	    if (baseShift) {
	      base.style.position = "relative";
	      base.style.top = makeEm(baseShift);
	    }

	    return base;
	  }
	};

	var mathmlBuilder$1 = (group, options) => {
	  var node;

	  if (group.symbol) {
	    // This is a symbol. Just add the symbol.
	    node = new MathNode("mo", [makeText(group.name, group.mode)]);

	    if (utils.contains(noSuccessor, group.name)) {
	      node.setAttribute("largeop", "false");
	    }
	  } else if (group.body) {
	    // This is an operator with children. Add them.
	    node = new MathNode("mo", buildExpression(group.body, options));
	  } else {
	    // This is a text operator. Add all of the characters from the
	    // operator's name.
	    node = new MathNode("mi", [new TextNode(group.name.slice(1))]); // Append an <mo>&ApplyFunction;</mo>.
	    // ref: https://www.w3.org/TR/REC-MathML/chap3_2.html#sec3.2.4

	    var operator = new MathNode("mo", [makeText("\u2061", "text")]);

	    if (group.parentIsSupSub) {
	      node = new MathNode("mrow", [node, operator]);
	    } else {
	      node = newDocumentFragment([node, operator]);
	    }
	  }

	  return node;
	};

	var singleCharBigOps = {
	  "\u220F": "\\prod",
	  "\u2210": "\\coprod",
	  "\u2211": "\\sum",
	  "\u22c0": "\\bigwedge",
	  "\u22c1": "\\bigvee",
	  "\u22c2": "\\bigcap",
	  "\u22c3": "\\bigcup",
	  "\u2a00": "\\bigodot",
	  "\u2a01": "\\bigoplus",
	  "\u2a02": "\\bigotimes",
	  "\u2a04": "\\biguplus",
	  "\u2a06": "\\bigsqcup"
	};
	defineFunction({
	  type: "op",
	  names: ["\\coprod", "\\bigvee", "\\bigwedge", "\\biguplus", "\\bigcap", "\\bigcup", "\\intop", "\\prod", "\\sum", "\\bigotimes", "\\bigoplus", "\\bigodot", "\\bigsqcup", "\\smallint", "\u220F", "\u2210", "\u2211", "\u22c0", "\u22c1", "\u22c2", "\u22c3", "\u2a00", "\u2a01", "\u2a02", "\u2a04", "\u2a06"],
	  props: {
	    numArgs: 0
	  },
	  handler: (_ref, args) => {
	    var {
	      parser,
	      funcName
	    } = _ref;
	    var fName = funcName;

	    if (fName.length === 1) {
	      fName = singleCharBigOps[fName];
	    }

	    return {
	      type: "op",
	      mode: parser.mode,
	      limits: true,
	      parentIsSupSub: false,
	      symbol: true,
	      name: fName
	    };
	  },
	  htmlBuilder: htmlBuilder$2,
	  mathmlBuilder: mathmlBuilder$1
	}); // Note: calling defineFunction with a type that's already been defined only
	// works because the same htmlBuilder and mathmlBuilder are being used.

	defineFunction({
	  type: "op",
	  names: ["\\mathop"],
	  props: {
	    numArgs: 1,
	    primitive: true
	  },
	  handler: (_ref2, args) => {
	    var {
	      parser
	    } = _ref2;
	    var body = args[0];
	    return {
	      type: "op",
	      mode: parser.mode,
	      limits: false,
	      parentIsSupSub: false,
	      symbol: false,
	      body: ordargument(body)
	    };
	  },
	  htmlBuilder: htmlBuilder$2,
	  mathmlBuilder: mathmlBuilder$1
	}); // There are 2 flags for operators; whether they produce limits in
	// displaystyle, and whether they are symbols and should grow in
	// displaystyle. These four groups cover the four possible choices.

	var singleCharIntegrals = {
	  "\u222b": "\\int",
	  "\u222c": "\\iint",
	  "\u222d": "\\iiint",
	  "\u222e": "\\oint",
	  "\u222f": "\\oiint",
	  "\u2230": "\\oiiint"
	}; // No limits, not symbols

	defineFunction({
	  type: "op",
	  names: ["\\arcsin", "\\arccos", "\\arctan", "\\arctg", "\\arcctg", "\\arg", "\\ch", "\\cos", "\\cosec", "\\cosh", "\\cot", "\\cotg", "\\coth", "\\csc", "\\ctg", "\\cth", "\\deg", "\\dim", "\\exp", "\\hom", "\\ker", "\\lg", "\\ln", "\\log", "\\sec", "\\sin", "\\sinh", "\\sh", "\\tan", "\\tanh", "\\tg", "\\th"],
	  props: {
	    numArgs: 0
	  },

	  handler(_ref3) {
	    var {
	      parser,
	      funcName
	    } = _ref3;
	    return {
	      type: "op",
	      mode: parser.mode,
	      limits: false,
	      parentIsSupSub: false,
	      symbol: false,
	      name: funcName
	    };
	  },

	  htmlBuilder: htmlBuilder$2,
	  mathmlBuilder: mathmlBuilder$1
	}); // Limits, not symbols

	defineFunction({
	  type: "op",
	  names: ["\\det", "\\gcd", "\\inf", "\\lim", "\\max", "\\min", "\\Pr", "\\sup"],
	  props: {
	    numArgs: 0
	  },

	  handler(_ref4) {
	    var {
	      parser,
	      funcName
	    } = _ref4;
	    return {
	      type: "op",
	      mode: parser.mode,
	      limits: true,
	      parentIsSupSub: false,
	      symbol: false,
	      name: funcName
	    };
	  },

	  htmlBuilder: htmlBuilder$2,
	  mathmlBuilder: mathmlBuilder$1
	}); // No limits, symbols

	defineFunction({
	  type: "op",
	  names: ["\\int", "\\iint", "\\iiint", "\\oint", "\\oiint", "\\oiiint", "\u222b", "\u222c", "\u222d", "\u222e", "\u222f", "\u2230"],
	  props: {
	    numArgs: 0
	  },

	  handler(_ref5) {
	    var {
	      parser,
	      funcName
	    } = _ref5;
	    var fName = funcName;

	    if (fName.length === 1) {
	      fName = singleCharIntegrals[fName];
	    }

	    return {
	      type: "op",
	      mode: parser.mode,
	      limits: false,
	      parentIsSupSub: false,
	      symbol: true,
	      name: fName
	    };
	  },

	  htmlBuilder: htmlBuilder$2,
	  mathmlBuilder: mathmlBuilder$1
	});

	// NOTE: Unlike most `htmlBuilder`s, this one handles not only
	// "operatorname", but also  "supsub" since \operatorname* can
	// affect super/subscripting.
	var htmlBuilder$1 = (grp, options) => {
	  // Operators are handled in the TeXbook pg. 443-444, rule 13(a).
	  var supGroup;
	  var subGroup;
	  var hasLimits = false;
	  var group;

	  if (grp.type === "supsub") {
	    // If we have limits, supsub will pass us its group to handle. Pull
	    // out the superscript and subscript and set the group to the op in
	    // its base.
	    supGroup = grp.sup;
	    subGroup = grp.sub;
	    group = assertNodeType(grp.base, "operatorname");
	    hasLimits = true;
	  } else {
	    group = assertNodeType(grp, "operatorname");
	  }

	  var base;

	  if (group.body.length > 0) {
	    var body = group.body.map(child => {
	      // $FlowFixMe: Check if the node has a string `text` property.
	      var childText = child.text;

	      if (typeof childText === "string") {
	        return {
	          type: "textord",
	          mode: child.mode,
	          text: childText
	        };
	      } else {
	        return child;
	      }
	    }); // Consolidate function names into symbol characters.

	    var expression = buildExpression$1(body, options.withFont("mathrm"), true);

	    for (var i = 0; i < expression.length; i++) {
	      var child = expression[i];

	      if (child instanceof SymbolNode) {
	        // Per amsopn package,
	        // change minus to hyphen and \ast to asterisk
	        child.text = child.text.replace(/\u2212/, "-").replace(/\u2217/, "*");
	      }
	    }

	    base = buildCommon.makeSpan(["mop"], expression, options);
	  } else {
	    base = buildCommon.makeSpan(["mop"], [], options);
	  }

	  if (hasLimits) {
	    return assembleSupSub(base, supGroup, subGroup, options, options.style, 0, 0);
	  } else {
	    return base;
	  }
	};

	var mathmlBuilder = (group, options) => {
	  // The steps taken here are similar to the html version.
	  var expression = buildExpression(group.body, options.withFont("mathrm")); // Is expression a string or has it something like a fraction?

	  var isAllString = true; // default

	  for (var i = 0; i < expression.length; i++) {
	    var node = expression[i];

	    if (node instanceof mathMLTree.SpaceNode) ; else if (node instanceof mathMLTree.MathNode) {
	      switch (node.type) {
	        case "mi":
	        case "mn":
	        case "ms":
	        case "mspace":
	        case "mtext":
	          break;
	        // Do nothing yet.

	        case "mo":
	          {
	            var child = node.children[0];

	            if (node.children.length === 1 && child instanceof mathMLTree.TextNode) {
	              child.text = child.text.replace(/\u2212/, "-").replace(/\u2217/, "*");
	            } else {
	              isAllString = false;
	            }

	            break;
	          }

	        default:
	          isAllString = false;
	      }
	    } else {
	      isAllString = false;
	    }
	  }

	  if (isAllString) {
	    // Write a single TextNode instead of multiple nested tags.
	    var word = expression.map(node => node.toText()).join("");
	    expression = [new mathMLTree.TextNode(word)];
	  }

	  var identifier = new mathMLTree.MathNode("mi", expression);
	  identifier.setAttribute("mathvariant", "normal"); // \u2061 is the same as &ApplyFunction;
	  // ref: https://www.w3schools.com/charsets/ref_html_entities_a.asp

	  var operator = new mathMLTree.MathNode("mo", [makeText("\u2061", "text")]);

	  if (group.parentIsSupSub) {
	    return new mathMLTree.MathNode("mrow", [identifier, operator]);
	  } else {
	    return mathMLTree.newDocumentFragment([identifier, operator]);
	  }
	}; // \operatorname
	// amsopn.dtx: \mathop{#1\kern\z@\operator@font#3}\newmcodes@


	defineFunction({
	  type: "operatorname",
	  names: ["\\operatorname@", "\\operatornamewithlimits"],
	  props: {
	    numArgs: 1
	  },
	  handler: (_ref, args) => {
	    var {
	      parser,
	      funcName
	    } = _ref;
	    var body = args[0];
	    return {
	      type: "operatorname",
	      mode: parser.mode,
	      body: ordargument(body),
	      alwaysHandleSupSub: funcName === "\\operatornamewithlimits",
	      limits: false,
	      parentIsSupSub: false
	    };
	  },
	  htmlBuilder: htmlBuilder$1,
	  mathmlBuilder
	});
	defineMacro("\\operatorname", "\\@ifstar\\operatornamewithlimits\\operatorname@");

	defineFunctionBuilders({
	  type: "ordgroup",

	  htmlBuilder(group, options) {
	    if (group.semisimple) {
	      return buildCommon.makeFragment(buildExpression$1(group.body, options, false));
	    }

	    return buildCommon.makeSpan(["mord"], buildExpression$1(group.body, options, true), options);
	  },

	  mathmlBuilder(group, options) {
	    return buildExpressionRow(group.body, options, true);
	  }

	});

	defineFunction({
	  type: "overline",
	  names: ["\\overline"],
	  props: {
	    numArgs: 1
	  },

	  handler(_ref, args) {
	    var {
	      parser
	    } = _ref;
	    var body = args[0];
	    return {
	      type: "overline",
	      mode: parser.mode,
	      body
	    };
	  },

	  htmlBuilder(group, options) {
	    // Overlines are handled in the TeXbook pg 443, Rule 9.
	    // Build the inner group in the cramped style.
	    var innerGroup = buildGroup$1(group.body, options.havingCrampedStyle()); // Create the line above the body

	    var line = buildCommon.makeLineSpan("overline-line", options); // Generate the vlist, with the appropriate kerns

	    var defaultRuleThickness = options.fontMetrics().defaultRuleThickness;
	    var vlist = buildCommon.makeVList({
	      positionType: "firstBaseline",
	      children: [{
	        type: "elem",
	        elem: innerGroup
	      }, {
	        type: "kern",
	        size: 3 * defaultRuleThickness
	      }, {
	        type: "elem",
	        elem: line
	      }, {
	        type: "kern",
	        size: defaultRuleThickness
	      }]
	    }, options);
	    return buildCommon.makeSpan(["mord", "overline"], [vlist], options);
	  },

	  mathmlBuilder(group, options) {
	    var operator = new mathMLTree.MathNode("mo", [new mathMLTree.TextNode("\u203e")]);
	    operator.setAttribute("stretchy", "true");
	    var node = new mathMLTree.MathNode("mover", [buildGroup(group.body, options), operator]);
	    node.setAttribute("accent", "true");
	    return node;
	  }

	});

	defineFunction({
	  type: "phantom",
	  names: ["\\phantom"],
	  props: {
	    numArgs: 1,
	    allowedInText: true
	  },
	  handler: (_ref, args) => {
	    var {
	      parser
	    } = _ref;
	    var body = args[0];
	    return {
	      type: "phantom",
	      mode: parser.mode,
	      body: ordargument(body)
	    };
	  },
	  htmlBuilder: (group, options) => {
	    var elements = buildExpression$1(group.body, options.withPhantom(), false); // \phantom isn't supposed to affect the elements it contains.
	    // See "color" for more details.

	    return buildCommon.makeFragment(elements);
	  },
	  mathmlBuilder: (group, options) => {
	    var inner = buildExpression(group.body, options);
	    return new mathMLTree.MathNode("mphantom", inner);
	  }
	});
	defineFunction({
	  type: "hphantom",
	  names: ["\\hphantom"],
	  props: {
	    numArgs: 1,
	    allowedInText: true
	  },
	  handler: (_ref2, args) => {
	    var {
	      parser
	    } = _ref2;
	    var body = args[0];
	    return {
	      type: "hphantom",
	      mode: parser.mode,
	      body
	    };
	  },
	  htmlBuilder: (group, options) => {
	    var node = buildCommon.makeSpan([], [buildGroup$1(group.body, options.withPhantom())]);
	    node.height = 0;
	    node.depth = 0;

	    if (node.children) {
	      for (var i = 0; i < node.children.length; i++) {
	        node.children[i].height = 0;
	        node.children[i].depth = 0;
	      }
	    } // See smash for comment re: use of makeVList


	    node = buildCommon.makeVList({
	      positionType: "firstBaseline",
	      children: [{
	        type: "elem",
	        elem: node
	      }]
	    }, options); // For spacing, TeX treats \smash as a math group (same spacing as ord).

	    return buildCommon.makeSpan(["mord"], [node], options);
	  },
	  mathmlBuilder: (group, options) => {
	    var inner = buildExpression(ordargument(group.body), options);
	    var phantom = new mathMLTree.MathNode("mphantom", inner);
	    var node = new mathMLTree.MathNode("mpadded", [phantom]);
	    node.setAttribute("height", "0px");
	    node.setAttribute("depth", "0px");
	    return node;
	  }
	});
	defineFunction({
	  type: "vphantom",
	  names: ["\\vphantom"],
	  props: {
	    numArgs: 1,
	    allowedInText: true
	  },
	  handler: (_ref3, args) => {
	    var {
	      parser
	    } = _ref3;
	    var body = args[0];
	    return {
	      type: "vphantom",
	      mode: parser.mode,
	      body
	    };
	  },
	  htmlBuilder: (group, options) => {
	    var inner = buildCommon.makeSpan(["inner"], [buildGroup$1(group.body, options.withPhantom())]);
	    var fix = buildCommon.makeSpan(["fix"], []);
	    return buildCommon.makeSpan(["mord", "rlap"], [inner, fix], options);
	  },
	  mathmlBuilder: (group, options) => {
	    var inner = buildExpression(ordargument(group.body), options);
	    var phantom = new mathMLTree.MathNode("mphantom", inner);
	    var node = new mathMLTree.MathNode("mpadded", [phantom]);
	    node.setAttribute("width", "0px");
	    return node;
	  }
	});

	defineFunction({
	  type: "raisebox",
	  names: ["\\raisebox"],
	  props: {
	    numArgs: 2,
	    argTypes: ["size", "hbox"],
	    allowedInText: true
	  },

	  handler(_ref, args) {
	    var {
	      parser
	    } = _ref;
	    var amount = assertNodeType(args[0], "size").value;
	    var body = args[1];
	    return {
	      type: "raisebox",
	      mode: parser.mode,
	      dy: amount,
	      body
	    };
	  },

	  htmlBuilder(group, options) {
	    var body = buildGroup$1(group.body, options);
	    var dy = calculateSize(group.dy, options);
	    return buildCommon.makeVList({
	      positionType: "shift",
	      positionData: -dy,
	      children: [{
	        type: "elem",
	        elem: body
	      }]
	    }, options);
	  },

	  mathmlBuilder(group, options) {
	    var node = new mathMLTree.MathNode("mpadded", [buildGroup(group.body, options)]);
	    var dy = group.dy.number + group.dy.unit;
	    node.setAttribute("voffset", dy);
	    return node;
	  }

	});

	defineFunction({
	  type: "internal",
	  names: ["\\relax"],
	  props: {
	    numArgs: 0,
	    allowedInText: true
	  },

	  handler(_ref) {
	    var {
	      parser
	    } = _ref;
	    return {
	      type: "internal",
	      mode: parser.mode
	    };
	  }

	});

	defineFunction({
	  type: "rule",
	  names: ["\\rule"],
	  props: {
	    numArgs: 2,
	    numOptionalArgs: 1,
	    argTypes: ["size", "size", "size"]
	  },

	  handler(_ref, args, optArgs) {
	    var {
	      parser
	    } = _ref;
	    var shift = optArgs[0];
	    var width = assertNodeType(args[0], "size");
	    var height = assertNodeType(args[1], "size");
	    return {
	      type: "rule",
	      mode: parser.mode,
	      shift: shift && assertNodeType(shift, "size").value,
	      width: width.value,
	      height: height.value
	    };
	  },

	  htmlBuilder(group, options) {
	    // Make an empty span for the rule
	    var rule = buildCommon.makeSpan(["mord", "rule"], [], options); // Calculate the shift, width, and height of the rule, and account for units

	    var width = calculateSize(group.width, options);
	    var height = calculateSize(group.height, options);
	    var shift = group.shift ? calculateSize(group.shift, options) : 0; // Style the rule to the right size

	    rule.style.borderRightWidth = makeEm(width);
	    rule.style.borderTopWidth = makeEm(height);
	    rule.style.bottom = makeEm(shift); // Record the height and width

	    rule.width = width;
	    rule.height = height + shift;
	    rule.depth = -shift; // Font size is the number large enough that the browser will
	    // reserve at least `absHeight` space above the baseline.
	    // The 1.125 factor was empirically determined

	    rule.maxFontSize = height * 1.125 * options.sizeMultiplier;
	    return rule;
	  },

	  mathmlBuilder(group, options) {
	    var width = calculateSize(group.width, options);
	    var height = calculateSize(group.height, options);
	    var shift = group.shift ? calculateSize(group.shift, options) : 0;
	    var color = options.color && options.getColor() || "black";
	    var rule = new mathMLTree.MathNode("mspace");
	    rule.setAttribute("mathbackground", color);
	    rule.setAttribute("width", makeEm(width));
	    rule.setAttribute("height", makeEm(height));
	    var wrapper = new mathMLTree.MathNode("mpadded", [rule]);

	    if (shift >= 0) {
	      wrapper.setAttribute("height", makeEm(shift));
	    } else {
	      wrapper.setAttribute("height", makeEm(shift));
	      wrapper.setAttribute("depth", makeEm(-shift));
	    }

	    wrapper.setAttribute("voffset", makeEm(shift));
	    return wrapper;
	  }

	});

	function sizingGroup(value, options, baseOptions) {
	  var inner = buildExpression$1(value, options, false);
	  var multiplier = options.sizeMultiplier / baseOptions.sizeMultiplier; // Add size-resetting classes to the inner list and set maxFontSize
	  // manually. Handle nested size changes.

	  for (var i = 0; i < inner.length; i++) {
	    var pos = inner[i].classes.indexOf("sizing");

	    if (pos < 0) {
	      Array.prototype.push.apply(inner[i].classes, options.sizingClasses(baseOptions));
	    } else if (inner[i].classes[pos + 1] === "reset-size" + options.size) {
	      // This is a nested size change: e.g., inner[i] is the "b" in
	      // `\Huge a \small b`. Override the old size (the `reset-` class)
	      // but not the new size.
	      inner[i].classes[pos + 1] = "reset-size" + baseOptions.size;
	    }

	    inner[i].height *= multiplier;
	    inner[i].depth *= multiplier;
	  }

	  return buildCommon.makeFragment(inner);
	}
	var sizeFuncs = ["\\tiny", "\\sixptsize", "\\scriptsize", "\\footnotesize", "\\small", "\\normalsize", "\\large", "\\Large", "\\LARGE", "\\huge", "\\Huge"];
	var htmlBuilder = (group, options) => {
	  // Handle sizing operators like \Huge. Real TeX doesn't actually allow
	  // these functions inside of math expressions, so we do some special
	  // handling.
	  var newOptions = options.havingSize(group.size);
	  return sizingGroup(group.body, newOptions, options);
	};
	defineFunction({
	  type: "sizing",
	  names: sizeFuncs,
	  props: {
	    numArgs: 0,
	    allowedInText: true
	  },
	  handler: (_ref, args) => {
	    var {
	      breakOnTokenText,
	      funcName,
	      parser
	    } = _ref;
	    var body = parser.parseExpression(false, breakOnTokenText);
	    return {
	      type: "sizing",
	      mode: parser.mode,
	      // Figure out what size to use based on the list of functions above
	      size: sizeFuncs.indexOf(funcName) + 1,
	      body
	    };
	  },
	  htmlBuilder,
	  mathmlBuilder: (group, options) => {
	    var newOptions = options.havingSize(group.size);
	    var inner = buildExpression(group.body, newOptions);
	    var node = new mathMLTree.MathNode("mstyle", inner); // TODO(emily): This doesn't produce the correct size for nested size
	    // changes, because we don't keep state of what style we're currently
	    // in, so we can't reset the size to normal before changing it.  Now
	    // that we're passing an options parameter we should be able to fix
	    // this.

	    node.setAttribute("mathsize", makeEm(newOptions.sizeMultiplier));
	    return node;
	  }
	});

	// smash, with optional [tb], as in AMS
	defineFunction({
	  type: "smash",
	  names: ["\\smash"],
	  props: {
	    numArgs: 1,
	    numOptionalArgs: 1,
	    allowedInText: true
	  },
	  handler: (_ref, args, optArgs) => {
	    var {
	      parser
	    } = _ref;
	    var smashHeight = false;
	    var smashDepth = false;
	    var tbArg = optArgs[0] && assertNodeType(optArgs[0], "ordgroup");

	    if (tbArg) {
	      // Optional [tb] argument is engaged.
	      // ref: amsmath: \renewcommand{\smash}[1][tb]{%
	      //               def\mb@t{\ht}\def\mb@b{\dp}\def\mb@tb{\ht\z@\z@\dp}%
	      var letter = "";

	      for (var i = 0; i < tbArg.body.length; ++i) {
	        var node = tbArg.body[i]; // $FlowFixMe: Not every node type has a `text` property.

	        letter = node.text;

	        if (letter === "t") {
	          smashHeight = true;
	        } else if (letter === "b") {
	          smashDepth = true;
	        } else {
	          smashHeight = false;
	          smashDepth = false;
	          break;
	        }
	      }
	    } else {
	      smashHeight = true;
	      smashDepth = true;
	    }

	    var body = args[0];
	    return {
	      type: "smash",
	      mode: parser.mode,
	      body,
	      smashHeight,
	      smashDepth
	    };
	  },
	  htmlBuilder: (group, options) => {
	    var node = buildCommon.makeSpan([], [buildGroup$1(group.body, options)]);

	    if (!group.smashHeight && !group.smashDepth) {
	      return node;
	    }

	    if (group.smashHeight) {
	      node.height = 0; // In order to influence makeVList, we have to reset the children.

	      if (node.children) {
	        for (var i = 0; i < node.children.length; i++) {
	          node.children[i].height = 0;
	        }
	      }
	    }

	    if (group.smashDepth) {
	      node.depth = 0;

	      if (node.children) {
	        for (var _i = 0; _i < node.children.length; _i++) {
	          node.children[_i].depth = 0;
	        }
	      }
	    } // At this point, we've reset the TeX-like height and depth values.
	    // But the span still has an HTML line height.
	    // makeVList applies "display: table-cell", which prevents the browser
	    // from acting on that line height. So we'll call makeVList now.


	    var smashedNode = buildCommon.makeVList({
	      positionType: "firstBaseline",
	      children: [{
	        type: "elem",
	        elem: node
	      }]
	    }, options); // For spacing, TeX treats \hphantom as a math group (same spacing as ord).

	    return buildCommon.makeSpan(["mord"], [smashedNode], options);
	  },
	  mathmlBuilder: (group, options) => {
	    var node = new mathMLTree.MathNode("mpadded", [buildGroup(group.body, options)]);

	    if (group.smashHeight) {
	      node.setAttribute("height", "0px");
	    }

	    if (group.smashDepth) {
	      node.setAttribute("depth", "0px");
	    }

	    return node;
	  }
	});

	defineFunction({
	  type: "sqrt",
	  names: ["\\sqrt"],
	  props: {
	    numArgs: 1,
	    numOptionalArgs: 1
	  },

	  handler(_ref, args, optArgs) {
	    var {
	      parser
	    } = _ref;
	    var index = optArgs[0];
	    var body = args[0];
	    return {
	      type: "sqrt",
	      mode: parser.mode,
	      body,
	      index
	    };
	  },

	  htmlBuilder(group, options) {
	    // Square roots are handled in the TeXbook pg. 443, Rule 11.
	    // First, we do the same steps as in overline to build the inner group
	    // and line
	    var inner = buildGroup$1(group.body, options.havingCrampedStyle());

	    if (inner.height === 0) {
	      // Render a small surd.
	      inner.height = options.fontMetrics().xHeight;
	    } // Some groups can return document fragments.  Handle those by wrapping
	    // them in a span.


	    inner = buildCommon.wrapFragment(inner, options); // Calculate the minimum size for the \surd delimiter

	    var metrics = options.fontMetrics();
	    var theta = metrics.defaultRuleThickness;
	    var phi = theta;

	    if (options.style.id < Style$1.TEXT.id) {
	      phi = options.fontMetrics().xHeight;
	    } // Calculate the clearance between the body and line


	    var lineClearance = theta + phi / 4;
	    var minDelimiterHeight = inner.height + inner.depth + lineClearance + theta; // Create a sqrt SVG of the required minimum size

	    var {
	      span: img,
	      ruleWidth,
	      advanceWidth
	    } = delimiter.sqrtImage(minDelimiterHeight, options);
	    var delimDepth = img.height - ruleWidth; // Adjust the clearance based on the delimiter size

	    if (delimDepth > inner.height + inner.depth + lineClearance) {
	      lineClearance = (lineClearance + delimDepth - inner.height - inner.depth) / 2;
	    } // Shift the sqrt image


	    var imgShift = img.height - inner.height - lineClearance - ruleWidth;
	    inner.style.paddingLeft = makeEm(advanceWidth); // Overlay the image and the argument.

	    var body = buildCommon.makeVList({
	      positionType: "firstBaseline",
	      children: [{
	        type: "elem",
	        elem: inner,
	        wrapperClasses: ["svg-align"]
	      }, {
	        type: "kern",
	        size: -(inner.height + imgShift)
	      }, {
	        type: "elem",
	        elem: img
	      }, {
	        type: "kern",
	        size: ruleWidth
	      }]
	    }, options);

	    if (!group.index) {
	      return buildCommon.makeSpan(["mord", "sqrt"], [body], options);
	    } else {
	      // Handle the optional root index
	      // The index is always in scriptscript style
	      var newOptions = options.havingStyle(Style$1.SCRIPTSCRIPT);
	      var rootm = buildGroup$1(group.index, newOptions, options); // The amount the index is shifted by. This is taken from the TeX
	      // source, in the definition of `\r@@t`.

	      var toShift = 0.6 * (body.height - body.depth); // Build a VList with the superscript shifted up correctly

	      var rootVList = buildCommon.makeVList({
	        positionType: "shift",
	        positionData: -toShift,
	        children: [{
	          type: "elem",
	          elem: rootm
	        }]
	      }, options); // Add a class surrounding it so we can add on the appropriate
	      // kerning

	      var rootVListWrap = buildCommon.makeSpan(["root"], [rootVList]);
	      return buildCommon.makeSpan(["mord", "sqrt"], [rootVListWrap, body], options);
	    }
	  },

	  mathmlBuilder(group, options) {
	    var {
	      body,
	      index
	    } = group;
	    return index ? new mathMLTree.MathNode("mroot", [buildGroup(body, options), buildGroup(index, options)]) : new mathMLTree.MathNode("msqrt", [buildGroup(body, options)]);
	  }

	});

	var styleMap = {
	  "display": Style$1.DISPLAY,
	  "text": Style$1.TEXT,
	  "script": Style$1.SCRIPT,
	  "scriptscript": Style$1.SCRIPTSCRIPT
	};
	defineFunction({
	  type: "styling",
	  names: ["\\displaystyle", "\\textstyle", "\\scriptstyle", "\\scriptscriptstyle"],
	  props: {
	    numArgs: 0,
	    allowedInText: true,
	    primitive: true
	  },

	  handler(_ref, args) {
	    var {
	      breakOnTokenText,
	      funcName,
	      parser
	    } = _ref;
	    // parse out the implicit body
	    var body = parser.parseExpression(true, breakOnTokenText); // TODO: Refactor to avoid duplicating styleMap in multiple places (e.g.
	    // here and in buildHTML and de-dupe the enumeration of all the styles).
	    // $FlowFixMe: The names above exactly match the styles.

	    var style = funcName.slice(1, funcName.length - 5);
	    return {
	      type: "styling",
	      mode: parser.mode,
	      // Figure out what style to use by pulling out the style from
	      // the function name
	      style,
	      body
	    };
	  },

	  htmlBuilder(group, options) {
	    // Style changes are handled in the TeXbook on pg. 442, Rule 3.
	    var newStyle = styleMap[group.style];
	    var newOptions = options.havingStyle(newStyle).withFont('');
	    return sizingGroup(group.body, newOptions, options);
	  },

	  mathmlBuilder(group, options) {
	    // Figure out what style we're changing to.
	    var newStyle = styleMap[group.style];
	    var newOptions = options.havingStyle(newStyle);
	    var inner = buildExpression(group.body, newOptions);
	    var node = new mathMLTree.MathNode("mstyle", inner);
	    var styleAttributes = {
	      "display": ["0", "true"],
	      "text": ["0", "false"],
	      "script": ["1", "false"],
	      "scriptscript": ["2", "false"]
	    };
	    var attr = styleAttributes[group.style];
	    node.setAttribute("scriptlevel", attr[0]);
	    node.setAttribute("displaystyle", attr[1]);
	    return node;
	  }

	});

	/**
	 * Sometimes, groups perform special rules when they have superscripts or
	 * subscripts attached to them. This function lets the `supsub` group know that
	 * Sometimes, groups perform special rules when they have superscripts or
	 * its inner element should handle the superscripts and subscripts instead of
	 * handling them itself.
	 */
	var htmlBuilderDelegate = function htmlBuilderDelegate(group, options) {
	  var base = group.base;

	  if (!base) {
	    return null;
	  } else if (base.type === "op") {
	    // Operators handle supsubs differently when they have limits
	    // (e.g. `\displaystyle\sum_2^3`)
	    var delegate = base.limits && (options.style.size === Style$1.DISPLAY.size || base.alwaysHandleSupSub);
	    return delegate ? htmlBuilder$2 : null;
	  } else if (base.type === "operatorname") {
	    var _delegate = base.alwaysHandleSupSub && (options.style.size === Style$1.DISPLAY.size || base.limits);

	    return _delegate ? htmlBuilder$1 : null;
	  } else if (base.type === "accent") {
	    return utils.isCharacterBox(base.base) ? htmlBuilder$a : null;
	  } else if (base.type === "horizBrace") {
	    var isSup = !group.sub;
	    return isSup === base.isOver ? htmlBuilder$3 : null;
	  } else {
	    return null;
	  }
	}; // Super scripts and subscripts, whose precise placement can depend on other
	// functions that precede them.


	defineFunctionBuilders({
	  type: "supsub",

	  htmlBuilder(group, options) {
	    // Superscript and subscripts are handled in the TeXbook on page
	    // 445-446, rules 18(a-f).
	    // Here is where we defer to the inner group if it should handle
	    // superscripts and subscripts itself.
	    var builderDelegate = htmlBuilderDelegate(group, options);

	    if (builderDelegate) {
	      return builderDelegate(group, options);
	    }

	    var {
	      base: valueBase,
	      sup: valueSup,
	      sub: valueSub
	    } = group;
	    var base = buildGroup$1(valueBase, options);
	    var supm;
	    var subm;
	    var metrics = options.fontMetrics(); // Rule 18a

	    var supShift = 0;
	    var subShift = 0;
	    var isCharacterBox = valueBase && utils.isCharacterBox(valueBase);

	    if (valueSup) {
	      var newOptions = options.havingStyle(options.style.sup());
	      supm = buildGroup$1(valueSup, newOptions, options);

	      if (!isCharacterBox) {
	        supShift = base.height - newOptions.fontMetrics().supDrop * newOptions.sizeMultiplier / options.sizeMultiplier;
	      }
	    }

	    if (valueSub) {
	      var _newOptions = options.havingStyle(options.style.sub());

	      subm = buildGroup$1(valueSub, _newOptions, options);

	      if (!isCharacterBox) {
	        subShift = base.depth + _newOptions.fontMetrics().subDrop * _newOptions.sizeMultiplier / options.sizeMultiplier;
	      }
	    } // Rule 18c


	    var minSupShift;

	    if (options.style === Style$1.DISPLAY) {
	      minSupShift = metrics.sup1;
	    } else if (options.style.cramped) {
	      minSupShift = metrics.sup3;
	    } else {
	      minSupShift = metrics.sup2;
	    } // scriptspace is a font-size-independent size, so scale it
	    // appropriately for use as the marginRight.


	    var multiplier = options.sizeMultiplier;
	    var marginRight = makeEm(0.5 / metrics.ptPerEm / multiplier);
	    var marginLeft = null;

	    if (subm) {
	      // Subscripts shouldn't be shifted by the base's italic correction.
	      // Account for that by shifting the subscript back the appropriate
	      // amount. Note we only do this when the base is a single symbol.
	      var isOiint = group.base && group.base.type === "op" && group.base.name && (group.base.name === "\\oiint" || group.base.name === "\\oiiint");

	      if (base instanceof SymbolNode || isOiint) {
	        // $FlowFixMe
	        marginLeft = makeEm(-base.italic);
	      }
	    }

	    var supsub;

	    if (supm && subm) {
	      supShift = Math.max(supShift, minSupShift, supm.depth + 0.25 * metrics.xHeight);
	      subShift = Math.max(subShift, metrics.sub2);
	      var ruleWidth = metrics.defaultRuleThickness; // Rule 18e

	      var maxWidth = 4 * ruleWidth;

	      if (supShift - supm.depth - (subm.height - subShift) < maxWidth) {
	        subShift = maxWidth - (supShift - supm.depth) + subm.height;
	        var psi = 0.8 * metrics.xHeight - (supShift - supm.depth);

	        if (psi > 0) {
	          supShift += psi;
	          subShift -= psi;
	        }
	      }

	      var vlistElem = [{
	        type: "elem",
	        elem: subm,
	        shift: subShift,
	        marginRight,
	        marginLeft
	      }, {
	        type: "elem",
	        elem: supm,
	        shift: -supShift,
	        marginRight
	      }];
	      supsub = buildCommon.makeVList({
	        positionType: "individualShift",
	        children: vlistElem
	      }, options);
	    } else if (subm) {
	      // Rule 18b
	      subShift = Math.max(subShift, metrics.sub1, subm.height - 0.8 * metrics.xHeight);
	      var _vlistElem = [{
	        type: "elem",
	        elem: subm,
	        marginLeft,
	        marginRight
	      }];
	      supsub = buildCommon.makeVList({
	        positionType: "shift",
	        positionData: subShift,
	        children: _vlistElem
	      }, options);
	    } else if (supm) {
	      // Rule 18c, d
	      supShift = Math.max(supShift, minSupShift, supm.depth + 0.25 * metrics.xHeight);
	      supsub = buildCommon.makeVList({
	        positionType: "shift",
	        positionData: -supShift,
	        children: [{
	          type: "elem",
	          elem: supm,
	          marginRight
	        }]
	      }, options);
	    } else {
	      throw new Error("supsub must have either sup or sub.");
	    } // Wrap the supsub vlist in a span.msupsub to reset text-align.


	    var mclass = getTypeOfDomTree(base, "right") || "mord";
	    return buildCommon.makeSpan([mclass], [base, buildCommon.makeSpan(["msupsub"], [supsub])], options);
	  },

	  mathmlBuilder(group, options) {
	    // Is the inner group a relevant horizonal brace?
	    var isBrace = false;
	    var isOver;
	    var isSup;

	    if (group.base && group.base.type === "horizBrace") {
	      isSup = !!group.sup;

	      if (isSup === group.base.isOver) {
	        isBrace = true;
	        isOver = group.base.isOver;
	      }
	    }

	    if (group.base && (group.base.type === "op" || group.base.type === "operatorname")) {
	      group.base.parentIsSupSub = true;
	    }

	    var children = [buildGroup(group.base, options)];

	    if (group.sub) {
	      children.push(buildGroup(group.sub, options));
	    }

	    if (group.sup) {
	      children.push(buildGroup(group.sup, options));
	    }

	    var nodeType;

	    if (isBrace) {
	      nodeType = isOver ? "mover" : "munder";
	    } else if (!group.sub) {
	      var base = group.base;

	      if (base && base.type === "op" && base.limits && (options.style === Style$1.DISPLAY || base.alwaysHandleSupSub)) {
	        nodeType = "mover";
	      } else if (base && base.type === "operatorname" && base.alwaysHandleSupSub && (base.limits || options.style === Style$1.DISPLAY)) {
	        nodeType = "mover";
	      } else {
	        nodeType = "msup";
	      }
	    } else if (!group.sup) {
	      var _base = group.base;

	      if (_base && _base.type === "op" && _base.limits && (options.style === Style$1.DISPLAY || _base.alwaysHandleSupSub)) {
	        nodeType = "munder";
	      } else if (_base && _base.type === "operatorname" && _base.alwaysHandleSupSub && (_base.limits || options.style === Style$1.DISPLAY)) {
	        nodeType = "munder";
	      } else {
	        nodeType = "msub";
	      }
	    } else {
	      var _base2 = group.base;

	      if (_base2 && _base2.type === "op" && _base2.limits && options.style === Style$1.DISPLAY) {
	        nodeType = "munderover";
	      } else if (_base2 && _base2.type === "operatorname" && _base2.alwaysHandleSupSub && (options.style === Style$1.DISPLAY || _base2.limits)) {
	        nodeType = "munderover";
	      } else {
	        nodeType = "msubsup";
	      }
	    }

	    return new mathMLTree.MathNode(nodeType, children);
	  }

	});

	defineFunctionBuilders({
	  type: "atom",

	  htmlBuilder(group, options) {
	    return buildCommon.mathsym(group.text, group.mode, options, ["m" + group.family]);
	  },

	  mathmlBuilder(group, options) {
	    var node = new mathMLTree.MathNode("mo", [makeText(group.text, group.mode)]);

	    if (group.family === "bin") {
	      var variant = getVariant(group, options);

	      if (variant === "bold-italic") {
	        node.setAttribute("mathvariant", variant);
	      }
	    } else if (group.family === "punct") {
	      node.setAttribute("separator", "true");
	    } else if (group.family === "open" || group.family === "close") {
	      // Delims built here should not stretch vertically.
	      // See delimsizing.js for stretchy delims.
	      node.setAttribute("stretchy", "false");
	    }

	    return node;
	  }

	});

	// "mathord" and "textord" ParseNodes created in Parser.js from symbol Groups in
	// src/symbols.js.
	var defaultVariant = {
	  "mi": "italic",
	  "mn": "normal",
	  "mtext": "normal"
	};
	defineFunctionBuilders({
	  type: "mathord",

	  htmlBuilder(group, options) {
	    return buildCommon.makeOrd(group, options, "mathord");
	  },

	  mathmlBuilder(group, options) {
	    var node = new mathMLTree.MathNode("mi", [makeText(group.text, group.mode, options)]);
	    var variant = getVariant(group, options) || "italic";

	    if (variant !== defaultVariant[node.type]) {
	      node.setAttribute("mathvariant", variant);
	    }

	    return node;
	  }

	});
	defineFunctionBuilders({
	  type: "textord",

	  htmlBuilder(group, options) {
	    return buildCommon.makeOrd(group, options, "textord");
	  },

	  mathmlBuilder(group, options) {
	    var text = makeText(group.text, group.mode, options);
	    var variant = getVariant(group, options) || "normal";
	    var node;

	    if (group.mode === 'text') {
	      node = new mathMLTree.MathNode("mtext", [text]);
	    } else if (/[0-9]/.test(group.text)) {
	      node = new mathMLTree.MathNode("mn", [text]);
	    } else if (group.text === "\\prime") {
	      node = new mathMLTree.MathNode("mo", [text]);
	    } else {
	      node = new mathMLTree.MathNode("mi", [text]);
	    }

	    if (variant !== defaultVariant[node.type]) {
	      node.setAttribute("mathvariant", variant);
	    }

	    return node;
	  }

	});

	var cssSpace = {
	  "\\nobreak": "nobreak",
	  "\\allowbreak": "allowbreak"
	}; // A lookup table to determine whether a spacing function/symbol should be
	// treated like a regular space character.  If a symbol or command is a key
	// in this table, then it should be a regular space character.  Furthermore,
	// the associated value may have a `className` specifying an extra CSS class
	// to add to the created `span`.

	var regularSpace = {
	  " ": {},
	  "\\ ": {},
	  "~": {
	    className: "nobreak"
	  },
	  "\\space": {},
	  "\\nobreakspace": {
	    className: "nobreak"
	  }
	}; // ParseNode<"spacing"> created in Parser.js from the "spacing" symbol Groups in
	// src/symbols.js.

	defineFunctionBuilders({
	  type: "spacing",

	  htmlBuilder(group, options) {
	    if (regularSpace.hasOwnProperty(group.text)) {
	      var className = regularSpace[group.text].className || ""; // Spaces are generated by adding an actual space. Each of these
	      // things has an entry in the symbols table, so these will be turned
	      // into appropriate outputs.

	      if (group.mode === "text") {
	        var ord = buildCommon.makeOrd(group, options, "textord");
	        ord.classes.push(className);
	        return ord;
	      } else {
	        return buildCommon.makeSpan(["mspace", className], [buildCommon.mathsym(group.text, group.mode, options)], options);
	      }
	    } else if (cssSpace.hasOwnProperty(group.text)) {
	      // Spaces based on just a CSS class.
	      return buildCommon.makeSpan(["mspace", cssSpace[group.text]], [], options);
	    } else {
	      throw new ParseError("Unknown type of space \"" + group.text + "\"");
	    }
	  },

	  mathmlBuilder(group, options) {
	    var node;

	    if (regularSpace.hasOwnProperty(group.text)) {
	      node = new mathMLTree.MathNode("mtext", [new mathMLTree.TextNode("\u00a0")]);
	    } else if (cssSpace.hasOwnProperty(group.text)) {
	      // CSS-based MathML spaces (\nobreak, \allowbreak) are ignored
	      return new mathMLTree.MathNode("mspace");
	    } else {
	      throw new ParseError("Unknown type of space \"" + group.text + "\"");
	    }

	    return node;
	  }

	});

	var pad = () => {
	  var padNode = new mathMLTree.MathNode("mtd", []);
	  padNode.setAttribute("width", "50%");
	  return padNode;
	};

	defineFunctionBuilders({
	  type: "tag",

	  mathmlBuilder(group, options) {
	    var table = new mathMLTree.MathNode("mtable", [new mathMLTree.MathNode("mtr", [pad(), new mathMLTree.MathNode("mtd", [buildExpressionRow(group.body, options)]), pad(), new mathMLTree.MathNode("mtd", [buildExpressionRow(group.tag, options)])])]);
	    table.setAttribute("width", "100%");
	    return table; // TODO: Left-aligned tags.
	    // Currently, the group and options passed here do not contain
	    // enough info to set tag alignment. `leqno` is in Settings but it is
	    // not passed to Options. On the HTML side, leqno is
	    // set by a CSS class applied in buildTree.js. That would have worked
	    // in MathML if browsers supported <mlabeledtr>. Since they don't, we
	    // need to rewrite the way this function is called.
	  }

	});

	var textFontFamilies = {
	  "\\text": undefined,
	  "\\textrm": "textrm",
	  "\\textsf": "textsf",
	  "\\texttt": "texttt",
	  "\\textnormal": "textrm"
	};
	var textFontWeights = {
	  "\\textbf": "textbf",
	  "\\textmd": "textmd"
	};
	var textFontShapes = {
	  "\\textit": "textit",
	  "\\textup": "textup"
	};

	var optionsWithFont = (group, options) => {
	  var font = group.font; // Checks if the argument is a font family or a font style.

	  if (!font) {
	    return options;
	  } else if (textFontFamilies[font]) {
	    return options.withTextFontFamily(textFontFamilies[font]);
	  } else if (textFontWeights[font]) {
	    return options.withTextFontWeight(textFontWeights[font]);
	  } else {
	    return options.withTextFontShape(textFontShapes[font]);
	  }
	};

	defineFunction({
	  type: "text",
	  names: [// Font families
	  "\\text", "\\textrm", "\\textsf", "\\texttt", "\\textnormal", // Font weights
	  "\\textbf", "\\textmd", // Font Shapes
	  "\\textit", "\\textup"],
	  props: {
	    numArgs: 1,
	    argTypes: ["text"],
	    allowedInArgument: true,
	    allowedInText: true
	  },

	  handler(_ref, args) {
	    var {
	      parser,
	      funcName
	    } = _ref;
	    var body = args[0];
	    return {
	      type: "text",
	      mode: parser.mode,
	      body: ordargument(body),
	      font: funcName
	    };
	  },

	  htmlBuilder(group, options) {
	    var newOptions = optionsWithFont(group, options);
	    var inner = buildExpression$1(group.body, newOptions, true);
	    return buildCommon.makeSpan(["mord", "text"], inner, newOptions);
	  },

	  mathmlBuilder(group, options) {
	    var newOptions = optionsWithFont(group, options);
	    return buildExpressionRow(group.body, newOptions);
	  }

	});

	defineFunction({
	  type: "underline",
	  names: ["\\underline"],
	  props: {
	    numArgs: 1,
	    allowedInText: true
	  },

	  handler(_ref, args) {
	    var {
	      parser
	    } = _ref;
	    return {
	      type: "underline",
	      mode: parser.mode,
	      body: args[0]
	    };
	  },

	  htmlBuilder(group, options) {
	    // Underlines are handled in the TeXbook pg 443, Rule 10.
	    // Build the inner group.
	    var innerGroup = buildGroup$1(group.body, options); // Create the line to go below the body

	    var line = buildCommon.makeLineSpan("underline-line", options); // Generate the vlist, with the appropriate kerns

	    var defaultRuleThickness = options.fontMetrics().defaultRuleThickness;
	    var vlist = buildCommon.makeVList({
	      positionType: "top",
	      positionData: innerGroup.height,
	      children: [{
	        type: "kern",
	        size: defaultRuleThickness
	      }, {
	        type: "elem",
	        elem: line
	      }, {
	        type: "kern",
	        size: 3 * defaultRuleThickness
	      }, {
	        type: "elem",
	        elem: innerGroup
	      }]
	    }, options);
	    return buildCommon.makeSpan(["mord", "underline"], [vlist], options);
	  },

	  mathmlBuilder(group, options) {
	    var operator = new mathMLTree.MathNode("mo", [new mathMLTree.TextNode("\u203e")]);
	    operator.setAttribute("stretchy", "true");
	    var node = new mathMLTree.MathNode("munder", [buildGroup(group.body, options), operator]);
	    node.setAttribute("accentunder", "true");
	    return node;
	  }

	});

	defineFunction({
	  type: "vcenter",
	  names: ["\\vcenter"],
	  props: {
	    numArgs: 1,
	    argTypes: ["original"],
	    // In LaTeX, \vcenter can act only on a box.
	    allowedInText: false
	  },

	  handler(_ref, args) {
	    var {
	      parser
	    } = _ref;
	    return {
	      type: "vcenter",
	      mode: parser.mode,
	      body: args[0]
	    };
	  },

	  htmlBuilder(group, options) {
	    var body = buildGroup$1(group.body, options);
	    var axisHeight = options.fontMetrics().axisHeight;
	    var dy = 0.5 * (body.height - axisHeight - (body.depth + axisHeight));
	    return buildCommon.makeVList({
	      positionType: "shift",
	      positionData: dy,
	      children: [{
	        type: "elem",
	        elem: body
	      }]
	    }, options);
	  },

	  mathmlBuilder(group, options) {
	    // There is no way to do this in MathML.
	    // Write a class as a breadcrumb in case some post-processor wants
	    // to perform a vcenter adjustment.
	    return new mathMLTree.MathNode("mpadded", [buildGroup(group.body, options)], ["vcenter"]);
	  }

	});

	defineFunction({
	  type: "verb",
	  names: ["\\verb"],
	  props: {
	    numArgs: 0,
	    allowedInText: true
	  },

	  handler(context, args, optArgs) {
	    // \verb and \verb* are dealt with directly in Parser.js.
	    // If we end up here, it's because of a failure to match the two delimiters
	    // in the regex in Lexer.js.  LaTeX raises the following error when \verb is
	    // terminated by end of line (or file).
	    throw new ParseError("\\verb ended by end of line instead of matching delimiter");
	  },

	  htmlBuilder(group, options) {
	    var text = makeVerb(group);
	    var body = []; // \verb enters text mode and therefore is sized like \textstyle

	    var newOptions = options.havingStyle(options.style.text());

	    for (var i = 0; i < text.length; i++) {
	      var c = text[i];

	      if (c === '~') {
	        c = '\\textasciitilde';
	      }

	      body.push(buildCommon.makeSymbol(c, "Typewriter-Regular", group.mode, newOptions, ["mord", "texttt"]));
	    }

	    return buildCommon.makeSpan(["mord", "text"].concat(newOptions.sizingClasses(options)), buildCommon.tryCombineChars(body), newOptions);
	  },

	  mathmlBuilder(group, options) {
	    var text = new mathMLTree.TextNode(makeVerb(group));
	    var node = new mathMLTree.MathNode("mtext", [text]);
	    node.setAttribute("mathvariant", "monospace");
	    return node;
	  }

	});
	/**
	 * Converts verb group into body string.
	 *
	 * \verb* replaces each space with an open box \u2423
	 * \verb replaces each space with a no-break space \xA0
	 */

	var makeVerb = group => group.body.replace(/ /g, group.star ? '\u2423' : '\xA0');

	/** Include this to ensure that all functions are defined. */
	var functions = _functions;

	/**
	 * The Lexer class handles tokenizing the input in various ways. Since our
	 * parser expects us to be able to backtrack, the lexer allows lexing from any
	 * given starting point.
	 *
	 * Its main exposed function is the `lex` function, which takes a position to
	 * lex from and a type of token to lex. It defers to the appropriate `_innerLex`
	 * function.
	 *
	 * The various `_innerLex` functions perform the actual lexing of different
	 * kinds.
	 */

	/* The following tokenRegex
	 * - matches typical whitespace (but not NBSP etc.) using its first group
	 * - does not match any control character \x00-\x1f except whitespace
	 * - does not match a bare backslash
	 * - matches any ASCII character except those just mentioned
	 * - does not match the BMP private use area \uE000-\uF8FF
	 * - does not match bare surrogate code units
	 * - matches any BMP character except for those just described
	 * - matches any valid Unicode surrogate pair
	 * - matches a backslash followed by one or more whitespace characters
	 * - matches a backslash followed by one or more letters then whitespace
	 * - matches a backslash followed by any BMP character
	 * Capturing groups:
	 *   [1] regular whitespace
	 *   [2] backslash followed by whitespace
	 *   [3] anything else, which may include:
	 *     [4] left character of \verb*
	 *     [5] left character of \verb
	 *     [6] backslash followed by word, excluding any trailing whitespace
	 * Just because the Lexer matches something doesn't mean it's valid input:
	 * If there is no matching function or symbol definition, the Parser will
	 * still reject the input.
	 */
	var spaceRegexString = "[ \r\n\t]";
	var controlWordRegexString = "\\\\[a-zA-Z@]+";
	var controlSymbolRegexString = "\\\\[^\uD800-\uDFFF]";
	var controlWordWhitespaceRegexString = "(" + controlWordRegexString + ")" + spaceRegexString + "*";
	var controlSpaceRegexString = "\\\\(\n|[ \r\t]+\n?)[ \r\t]*";
	var combiningDiacriticalMarkString = "[\u0300-\u036f]";
	var combiningDiacriticalMarksEndRegex = new RegExp(combiningDiacriticalMarkString + "+$");
	var tokenRegexString = "(" + spaceRegexString + "+)|" + ( // whitespace
	controlSpaceRegexString + "|") + // \whitespace
	"([!-\\[\\]-\u2027\u202A-\uD7FF\uF900-\uFFFF]" + ( // single codepoint
	combiningDiacriticalMarkString + "*") + // ...plus accents
	"|[\uD800-\uDBFF][\uDC00-\uDFFF]" + ( // surrogate pair
	combiningDiacriticalMarkString + "*") + // ...plus accents
	"|\\\\verb\\*([^]).*?\\4" + // \verb*
	"|\\\\verb([^*a-zA-Z]).*?\\5" + ( // \verb unstarred
	"|" + controlWordWhitespaceRegexString) + ( // \macroName + spaces
	"|" + controlSymbolRegexString + ")"); // \\, \', etc.

	/** Main Lexer class */

	class Lexer {
	  // Category codes. The lexer only supports comment characters (14) for now.
	  // MacroExpander additionally distinguishes active (13).
	  constructor(input, settings) {
	    this.input = void 0;
	    this.settings = void 0;
	    this.tokenRegex = void 0;
	    this.catcodes = void 0;
	    // Separate accents from characters
	    this.input = input;
	    this.settings = settings;
	    this.tokenRegex = new RegExp(tokenRegexString, 'g');
	    this.catcodes = {
	      "%": 14,
	      // comment character
	      "~": 13 // active character

	    };
	  }

	  setCatcode(char, code) {
	    this.catcodes[char] = code;
	  }
	  /**
	   * This function lexes a single token.
	   */


	  lex() {
	    var input = this.input;
	    var pos = this.tokenRegex.lastIndex;

	    if (pos === input.length) {
	      return new Token("EOF", new SourceLocation(this, pos, pos));
	    }

	    var match = this.tokenRegex.exec(input);

	    if (match === null || match.index !== pos) {
	      throw new ParseError("Unexpected character: '" + input[pos] + "'", new Token(input[pos], new SourceLocation(this, pos, pos + 1)));
	    }

	    var text = match[6] || match[3] || (match[2] ? "\\ " : " ");

	    if (this.catcodes[text] === 14) {
	      // comment character
	      var nlIndex = input.indexOf('\n', this.tokenRegex.lastIndex);

	      if (nlIndex === -1) {
	        this.tokenRegex.lastIndex = input.length; // EOF

	        this.settings.reportNonstrict("commentAtEnd", "% comment has no terminating newline; LaTeX would " + "fail because of commenting the end of math mode (e.g. $)");
	      } else {
	        this.tokenRegex.lastIndex = nlIndex + 1;
	      }

	      return this.lex();
	    }

	    return new Token(text, new SourceLocation(this, pos, this.tokenRegex.lastIndex));
	  }

	}

	/**
	 * A `Namespace` refers to a space of nameable things like macros or lengths,
	 * which can be `set` either globally or local to a nested group, using an
	 * undo stack similar to how TeX implements this functionality.
	 * Performance-wise, `get` and local `set` take constant time, while global
	 * `set` takes time proportional to the depth of group nesting.
	 */
	class Namespace {
	  /**
	   * Both arguments are optional.  The first argument is an object of
	   * built-in mappings which never change.  The second argument is an object
	   * of initial (global-level) mappings, which will constantly change
	   * according to any global/top-level `set`s done.
	   */
	  constructor(builtins, globalMacros) {
	    if (builtins === void 0) {
	      builtins = {};
	    }

	    if (globalMacros === void 0) {
	      globalMacros = {};
	    }

	    this.current = void 0;
	    this.builtins = void 0;
	    this.undefStack = void 0;
	    this.current = globalMacros;
	    this.builtins = builtins;
	    this.undefStack = [];
	  }
	  /**
	   * Start a new nested group, affecting future local `set`s.
	   */


	  beginGroup() {
	    this.undefStack.push({});
	  }
	  /**
	   * End current nested group, restoring values before the group began.
	   */


	  endGroup() {
	    if (this.undefStack.length === 0) {
	      throw new ParseError("Unbalanced namespace destruction: attempt " + "to pop global namespace; please report this as a bug");
	    }

	    var undefs = this.undefStack.pop();

	    for (var undef in undefs) {
	      if (undefs.hasOwnProperty(undef)) {
	        if (undefs[undef] == null) {
	          delete this.current[undef];
	        } else {
	          this.current[undef] = undefs[undef];
	        }
	      }
	    }
	  }
	  /**
	   * Ends all currently nested groups (if any), restoring values before the
	   * groups began.  Useful in case of an error in the middle of parsing.
	   */


	  endGroups() {
	    while (this.undefStack.length > 0) {
	      this.endGroup();
	    }
	  }
	  /**
	   * Detect whether `name` has a definition.  Equivalent to
	   * `get(name) != null`.
	   */


	  has(name) {
	    return this.current.hasOwnProperty(name) || this.builtins.hasOwnProperty(name);
	  }
	  /**
	   * Get the current value of a name, or `undefined` if there is no value.
	   *
	   * Note: Do not use `if (namespace.get(...))` to detect whether a macro
	   * is defined, as the definition may be the empty string which evaluates
	   * to `false` in JavaScript.  Use `if (namespace.get(...) != null)` or
	   * `if (namespace.has(...))`.
	   */


	  get(name) {
	    if (this.current.hasOwnProperty(name)) {
	      return this.current[name];
	    } else {
	      return this.builtins[name];
	    }
	  }
	  /**
	   * Set the current value of a name, and optionally set it globally too.
	   * Local set() sets the current value and (when appropriate) adds an undo
	   * operation to the undo stack.  Global set() may change the undo
	   * operation at every level, so takes time linear in their number.
	   * A value of undefined means to delete existing definitions.
	   */


	  set(name, value, global) {
	    if (global === void 0) {
	      global = false;
	    }

	    if (global) {
	      // Global set is equivalent to setting in all groups.  Simulate this
	      // by destroying any undos currently scheduled for this name,
	      // and adding an undo with the *new* value (in case it later gets
	      // locally reset within this environment).
	      for (var i = 0; i < this.undefStack.length; i++) {
	        delete this.undefStack[i][name];
	      }

	      if (this.undefStack.length > 0) {
	        this.undefStack[this.undefStack.length - 1][name] = value;
	      }
	    } else {
	      // Undo this set at end of this group (possibly to `undefined`),
	      // unless an undo is already in place, in which case that older
	      // value is the correct one.
	      var top = this.undefStack[this.undefStack.length - 1];

	      if (top && !top.hasOwnProperty(name)) {
	        top[name] = this.current[name];
	      }
	    }

	    if (value == null) {
	      delete this.current[name];
	    } else {
	      this.current[name] = value;
	    }
	  }

	}

	/**
	 * Predefined macros for KaTeX.
	 * This can be used to define some commands in terms of others.
	 */
	var macros = _macros;
	// macro tools

	defineMacro("\\noexpand", function (context) {
	  // The expansion is the token itself; but that token is interpreted
	  // as if its meaning were ‘\relax’ if it is a control sequence that
	  // would ordinarily be expanded by TeX’s expansion rules.
	  var t = context.popToken();

	  if (context.isExpandable(t.text)) {
	    t.noexpand = true;
	    t.treatAsRelax = true;
	  }

	  return {
	    tokens: [t],
	    numArgs: 0
	  };
	});
	defineMacro("\\expandafter", function (context) {
	  // TeX first reads the token that comes immediately after \expandafter,
	  // without expanding it; let’s call this token t. Then TeX reads the
	  // token that comes after t (and possibly more tokens, if that token
	  // has an argument), replacing it by its expansion. Finally TeX puts
	  // t back in front of that expansion.
	  var t = context.popToken();
	  context.expandOnce(true); // expand only an expandable token

	  return {
	    tokens: [t],
	    numArgs: 0
	  };
	}); // LaTeX's \@firstoftwo{#1}{#2} expands to #1, skipping #2
	// TeX source: \long\def\@firstoftwo#1#2{#1}

	defineMacro("\\@firstoftwo", function (context) {
	  var args = context.consumeArgs(2);
	  return {
	    tokens: args[0],
	    numArgs: 0
	  };
	}); // LaTeX's \@secondoftwo{#1}{#2} expands to #2, skipping #1
	// TeX source: \long\def\@secondoftwo#1#2{#2}

	defineMacro("\\@secondoftwo", function (context) {
	  var args = context.consumeArgs(2);
	  return {
	    tokens: args[1],
	    numArgs: 0
	  };
	}); // LaTeX's \@ifnextchar{#1}{#2}{#3} looks ahead to the next (unexpanded)
	// symbol that isn't a space, consuming any spaces but not consuming the
	// first nonspace character.  If that nonspace character matches #1, then
	// the macro expands to #2; otherwise, it expands to #3.

	defineMacro("\\@ifnextchar", function (context) {
	  var args = context.consumeArgs(3); // symbol, if, else

	  context.consumeSpaces();
	  var nextToken = context.future();

	  if (args[0].length === 1 && args[0][0].text === nextToken.text) {
	    return {
	      tokens: args[1],
	      numArgs: 0
	    };
	  } else {
	    return {
	      tokens: args[2],
	      numArgs: 0
	    };
	  }
	}); // LaTeX's \@ifstar{#1}{#2} looks ahead to the next (unexpanded) symbol.
	// If it is `*`, then it consumes the symbol, and the macro expands to #1;
	// otherwise, the macro expands to #2 (without consuming the symbol).
	// TeX source: \def\@ifstar#1{\@ifnextchar *{\@firstoftwo{#1}}}

	defineMacro("\\@ifstar", "\\@ifnextchar *{\\@firstoftwo{#1}}"); // LaTeX's \TextOrMath{#1}{#2} expands to #1 in text mode, #2 in math mode

	defineMacro("\\TextOrMath", function (context) {
	  var args = context.consumeArgs(2);

	  if (context.mode === 'text') {
	    return {
	      tokens: args[0],
	      numArgs: 0
	    };
	  } else {
	    return {
	      tokens: args[1],
	      numArgs: 0
	    };
	  }
	}); // Lookup table for parsing numbers in base 8 through 16

	var digitToNumber = {
	  "0": 0,
	  "1": 1,
	  "2": 2,
	  "3": 3,
	  "4": 4,
	  "5": 5,
	  "6": 6,
	  "7": 7,
	  "8": 8,
	  "9": 9,
	  "a": 10,
	  "A": 10,
	  "b": 11,
	  "B": 11,
	  "c": 12,
	  "C": 12,
	  "d": 13,
	  "D": 13,
	  "e": 14,
	  "E": 14,
	  "f": 15,
	  "F": 15
	}; // TeX \char makes a literal character (catcode 12) using the following forms:
	// (see The TeXBook, p. 43)
	//   \char123  -- decimal
	//   \char'123 -- octal
	//   \char"123 -- hex
	//   \char`x   -- character that can be written (i.e. isn't active)
	//   \char`\x  -- character that cannot be written (e.g. %)
	// These all refer to characters from the font, so we turn them into special
	// calls to a function \@char dealt with in the Parser.

	defineMacro("\\char", function (context) {
	  var token = context.popToken();
	  var base;
	  var number = '';

	  if (token.text === "'") {
	    base = 8;
	    token = context.popToken();
	  } else if (token.text === '"') {
	    base = 16;
	    token = context.popToken();
	  } else if (token.text === "`") {
	    token = context.popToken();

	    if (token.text[0] === "\\") {
	      number = token.text.charCodeAt(1);
	    } else if (token.text === "EOF") {
	      throw new ParseError("\\char` missing argument");
	    } else {
	      number = token.text.charCodeAt(0);
	    }
	  } else {
	    base = 10;
	  }

	  if (base) {
	    // Parse a number in the given base, starting with first `token`.
	    number = digitToNumber[token.text];

	    if (number == null || number >= base) {
	      throw new ParseError("Invalid base-" + base + " digit " + token.text);
	    }

	    var digit;

	    while ((digit = digitToNumber[context.future().text]) != null && digit < base) {
	      number *= base;
	      number += digit;
	      context.popToken();
	    }
	  }

	  return "\\@char{" + number + "}";
	}); // \newcommand{\macro}[args]{definition}
	// \renewcommand{\macro}[args]{definition}
	// TODO: Optional arguments: \newcommand{\macro}[args][default]{definition}

	var newcommand = (context, existsOK, nonexistsOK) => {
	  var arg = context.consumeArg().tokens;

	  if (arg.length !== 1) {
	    throw new ParseError("\\newcommand's first argument must be a macro name");
	  }

	  var name = arg[0].text;
	  var exists = context.isDefined(name);

	  if (exists && !existsOK) {
	    throw new ParseError("\\newcommand{" + name + "} attempting to redefine " + (name + "; use \\renewcommand"));
	  }

	  if (!exists && !nonexistsOK) {
	    throw new ParseError("\\renewcommand{" + name + "} when command " + name + " " + "does not yet exist; use \\newcommand");
	  }

	  var numArgs = 0;
	  arg = context.consumeArg().tokens;

	  if (arg.length === 1 && arg[0].text === "[") {
	    var argText = '';
	    var token = context.expandNextToken();

	    while (token.text !== "]" && token.text !== "EOF") {
	      // TODO: Should properly expand arg, e.g., ignore {}s
	      argText += token.text;
	      token = context.expandNextToken();
	    }

	    if (!argText.match(/^\s*[0-9]+\s*$/)) {
	      throw new ParseError("Invalid number of arguments: " + argText);
	    }

	    numArgs = parseInt(argText);
	    arg = context.consumeArg().tokens;
	  } // Final arg is the expansion of the macro


	  context.macros.set(name, {
	    tokens: arg,
	    numArgs
	  });
	  return '';
	};

	defineMacro("\\newcommand", context => newcommand(context, false, true));
	defineMacro("\\renewcommand", context => newcommand(context, true, false));
	defineMacro("\\providecommand", context => newcommand(context, true, true)); // terminal (console) tools

	defineMacro("\\message", context => {
	  var arg = context.consumeArgs(1)[0]; // eslint-disable-next-line no-console

	  console.log(arg.reverse().map(token => token.text).join(""));
	  return '';
	});
	defineMacro("\\errmessage", context => {
	  var arg = context.consumeArgs(1)[0]; // eslint-disable-next-line no-console

	  console.error(arg.reverse().map(token => token.text).join(""));
	  return '';
	});
	defineMacro("\\show", context => {
	  var tok = context.popToken();
	  var name = tok.text; // eslint-disable-next-line no-console

	  console.log(tok, context.macros.get(name), functions[name], symbols.math[name], symbols.text[name]);
	  return '';
	}); //////////////////////////////////////////////////////////////////////
	// Grouping
	// \let\bgroup={ \let\egroup=}

	defineMacro("\\bgroup", "{");
	defineMacro("\\egroup", "}"); // Symbols from latex.ltx:
	// \def~{\nobreakspace{}}
	// \def\lq{`}
	// \def\rq{'}
	// \def \aa {\r a}
	// \def \AA {\r A}

	defineMacro("~", "\\nobreakspace");
	defineMacro("\\lq", "`");
	defineMacro("\\rq", "'");
	defineMacro("\\aa", "\\r a");
	defineMacro("\\AA", "\\r A"); // Copyright (C) and registered (R) symbols. Use raw symbol in MathML.
	// \DeclareTextCommandDefault{\textcopyright}{\textcircled{c}}
	// \DeclareTextCommandDefault{\textregistered}{\textcircled{%
	//      \check@mathfonts\fontsize\sf@size\z@\math@fontsfalse\selectfont R}}
	// \DeclareRobustCommand{\copyright}{%
	//    \ifmmode{\nfss@text{\textcopyright}}\else\textcopyright\fi}

	defineMacro("\\textcopyright", "\\html@mathml{\\textcircled{c}}{\\char`©}");
	defineMacro("\\copyright", "\\TextOrMath{\\textcopyright}{\\text{\\textcopyright}}");
	defineMacro("\\textregistered", "\\html@mathml{\\textcircled{\\scriptsize R}}{\\char`®}"); // Characters omitted from Unicode range 1D400–1D7FF

	defineMacro("\u212C", "\\mathscr{B}"); // script

	defineMacro("\u2130", "\\mathscr{E}");
	defineMacro("\u2131", "\\mathscr{F}");
	defineMacro("\u210B", "\\mathscr{H}");
	defineMacro("\u2110", "\\mathscr{I}");
	defineMacro("\u2112", "\\mathscr{L}");
	defineMacro("\u2133", "\\mathscr{M}");
	defineMacro("\u211B", "\\mathscr{R}");
	defineMacro("\u212D", "\\mathfrak{C}"); // Fraktur

	defineMacro("\u210C", "\\mathfrak{H}");
	defineMacro("\u2128", "\\mathfrak{Z}"); // Define \Bbbk with a macro that works in both HTML and MathML.

	defineMacro("\\Bbbk", "\\Bbb{k}"); // Unicode middle dot
	// The KaTeX fonts do not contain U+00B7. Instead, \cdotp displays
	// the dot at U+22C5 and gives it punct spacing.

	defineMacro("\u00b7", "\\cdotp"); // \llap and \rlap render their contents in text mode

	defineMacro("\\llap", "\\mathllap{\\textrm{#1}}");
	defineMacro("\\rlap", "\\mathrlap{\\textrm{#1}}");
	defineMacro("\\clap", "\\mathclap{\\textrm{#1}}"); // \mathstrut from the TeXbook, p 360

	defineMacro("\\mathstrut", "\\vphantom{(}"); // \underbar from TeXbook p 353

	defineMacro("\\underbar", "\\underline{\\text{#1}}"); // \not is defined by base/fontmath.ltx via
	// \DeclareMathSymbol{\not}{\mathrel}{symbols}{"36}
	// It's thus treated like a \mathrel, but defined by a symbol that has zero
	// width but extends to the right.  We use \rlap to get that spacing.
	// For MathML we write U+0338 here. buildMathML.js will then do the overlay.

	defineMacro("\\not", '\\html@mathml{\\mathrel{\\mathrlap\\@not}}{\\char"338}'); // Negated symbols from base/fontmath.ltx:
	// \def\neq{\not=} \let\ne=\neq
	// \DeclareRobustCommand
	//   \notin{\mathrel{\m@th\mathpalette\c@ncel\in}}
	// \def\c@ncel#1#2{\m@th\ooalign{$\hfil#1\mkern1mu/\hfil$\crcr$#1#2$}}

	defineMacro("\\neq", "\\html@mathml{\\mathrel{\\not=}}{\\mathrel{\\char`≠}}");
	defineMacro("\\ne", "\\neq");
	defineMacro("\u2260", "\\neq");
	defineMacro("\\notin", "\\html@mathml{\\mathrel{{\\in}\\mathllap{/\\mskip1mu}}}" + "{\\mathrel{\\char`∉}}");
	defineMacro("\u2209", "\\notin"); // Unicode stacked relations

	defineMacro("\u2258", "\\html@mathml{" + "\\mathrel{=\\kern{-1em}\\raisebox{0.4em}{$\\scriptsize\\frown$}}" + "}{\\mathrel{\\char`\u2258}}");
	defineMacro("\u2259", "\\html@mathml{\\stackrel{\\tiny\\wedge}{=}}{\\mathrel{\\char`\u2258}}");
	defineMacro("\u225A", "\\html@mathml{\\stackrel{\\tiny\\vee}{=}}{\\mathrel{\\char`\u225A}}");
	defineMacro("\u225B", "\\html@mathml{\\stackrel{\\scriptsize\\star}{=}}" + "{\\mathrel{\\char`\u225B}}");
	defineMacro("\u225D", "\\html@mathml{\\stackrel{\\tiny\\mathrm{def}}{=}}" + "{\\mathrel{\\char`\u225D}}");
	defineMacro("\u225E", "\\html@mathml{\\stackrel{\\tiny\\mathrm{m}}{=}}" + "{\\mathrel{\\char`\u225E}}");
	defineMacro("\u225F", "\\html@mathml{\\stackrel{\\tiny?}{=}}{\\mathrel{\\char`\u225F}}"); // Misc Unicode

	defineMacro("\u27C2", "\\perp");
	defineMacro("\u203C", "\\mathclose{!\\mkern-0.8mu!}");
	defineMacro("\u220C", "\\notni");
	defineMacro("\u231C", "\\ulcorner");
	defineMacro("\u231D", "\\urcorner");
	defineMacro("\u231E", "\\llcorner");
	defineMacro("\u231F", "\\lrcorner");
	defineMacro("\u00A9", "\\copyright");
	defineMacro("\u00AE", "\\textregistered");
	defineMacro("\uFE0F", "\\textregistered"); // The KaTeX fonts have corners at codepoints that don't match Unicode.
	// For MathML purposes, use the Unicode code point.

	defineMacro("\\ulcorner", "\\html@mathml{\\@ulcorner}{\\mathop{\\char\"231c}}");
	defineMacro("\\urcorner", "\\html@mathml{\\@urcorner}{\\mathop{\\char\"231d}}");
	defineMacro("\\llcorner", "\\html@mathml{\\@llcorner}{\\mathop{\\char\"231e}}");
	defineMacro("\\lrcorner", "\\html@mathml{\\@lrcorner}{\\mathop{\\char\"231f}}"); //////////////////////////////////////////////////////////////////////
	// LaTeX_2ε
	// \vdots{\vbox{\baselineskip4\p@  \lineskiplimit\z@
	// \kern6\p@\hbox{.}\hbox{.}\hbox{.}}}
	// We'll call \varvdots, which gets a glyph from symbols.js.
	// The zero-width rule gets us an equivalent to the vertical 6pt kern.

	defineMacro("\\vdots", "\\mathord{\\varvdots\\rule{0pt}{15pt}}");
	defineMacro("\u22ee", "\\vdots"); //////////////////////////////////////////////////////////////////////
	// amsmath.sty
	// http://mirrors.concertpass.com/tex-archive/macros/latex/required/amsmath/amsmath.pdf
	// Italic Greek capital letters.  AMS defines these with \DeclareMathSymbol,
	// but they are equivalent to \mathit{\Letter}.

	defineMacro("\\varGamma", "\\mathit{\\Gamma}");
	defineMacro("\\varDelta", "\\mathit{\\Delta}");
	defineMacro("\\varTheta", "\\mathit{\\Theta}");
	defineMacro("\\varLambda", "\\mathit{\\Lambda}");
	defineMacro("\\varXi", "\\mathit{\\Xi}");
	defineMacro("\\varPi", "\\mathit{\\Pi}");
	defineMacro("\\varSigma", "\\mathit{\\Sigma}");
	defineMacro("\\varUpsilon", "\\mathit{\\Upsilon}");
	defineMacro("\\varPhi", "\\mathit{\\Phi}");
	defineMacro("\\varPsi", "\\mathit{\\Psi}");
	defineMacro("\\varOmega", "\\mathit{\\Omega}"); //\newcommand{\substack}[1]{\subarray{c}#1\endsubarray}

	defineMacro("\\substack", "\\begin{subarray}{c}#1\\end{subarray}"); // \renewcommand{\colon}{\nobreak\mskip2mu\mathpunct{}\nonscript
	// \mkern-\thinmuskip{:}\mskip6muplus1mu\relax}

	defineMacro("\\colon", "\\nobreak\\mskip2mu\\mathpunct{}" + "\\mathchoice{\\mkern-3mu}{\\mkern-3mu}{}{}{:}\\mskip6mu\\relax"); // \newcommand{\boxed}[1]{\fbox{\m@th$\displaystyle#1$}}

	defineMacro("\\boxed", "\\fbox{$\\displaystyle{#1}$}"); // \def\iff{\DOTSB\;\Longleftrightarrow\;}
	// \def\implies{\DOTSB\;\Longrightarrow\;}
	// \def\impliedby{\DOTSB\;\Longleftarrow\;}

	defineMacro("\\iff", "\\DOTSB\\;\\Longleftrightarrow\\;");
	defineMacro("\\implies", "\\DOTSB\\;\\Longrightarrow\\;");
	defineMacro("\\impliedby", "\\DOTSB\\;\\Longleftarrow\\;"); // AMSMath's automatic \dots, based on \mdots@@ macro.

	var dotsByToken = {
	  ',': '\\dotsc',
	  '\\not': '\\dotsb',
	  // \keybin@ checks for the following:
	  '+': '\\dotsb',
	  '=': '\\dotsb',
	  '<': '\\dotsb',
	  '>': '\\dotsb',
	  '-': '\\dotsb',
	  '*': '\\dotsb',
	  ':': '\\dotsb',
	  // Symbols whose definition starts with \DOTSB:
	  '\\DOTSB': '\\dotsb',
	  '\\coprod': '\\dotsb',
	  '\\bigvee': '\\dotsb',
	  '\\bigwedge': '\\dotsb',
	  '\\biguplus': '\\dotsb',
	  '\\bigcap': '\\dotsb',
	  '\\bigcup': '\\dotsb',
	  '\\prod': '\\dotsb',
	  '\\sum': '\\dotsb',
	  '\\bigotimes': '\\dotsb',
	  '\\bigoplus': '\\dotsb',
	  '\\bigodot': '\\dotsb',
	  '\\bigsqcup': '\\dotsb',
	  '\\And': '\\dotsb',
	  '\\longrightarrow': '\\dotsb',
	  '\\Longrightarrow': '\\dotsb',
	  '\\longleftarrow': '\\dotsb',
	  '\\Longleftarrow': '\\dotsb',
	  '\\longleftrightarrow': '\\dotsb',
	  '\\Longleftrightarrow': '\\dotsb',
	  '\\mapsto': '\\dotsb',
	  '\\longmapsto': '\\dotsb',
	  '\\hookrightarrow': '\\dotsb',
	  '\\doteq': '\\dotsb',
	  // Symbols whose definition starts with \mathbin:
	  '\\mathbin': '\\dotsb',
	  // Symbols whose definition starts with \mathrel:
	  '\\mathrel': '\\dotsb',
	  '\\relbar': '\\dotsb',
	  '\\Relbar': '\\dotsb',
	  '\\xrightarrow': '\\dotsb',
	  '\\xleftarrow': '\\dotsb',
	  // Symbols whose definition starts with \DOTSI:
	  '\\DOTSI': '\\dotsi',
	  '\\int': '\\dotsi',
	  '\\oint': '\\dotsi',
	  '\\iint': '\\dotsi',
	  '\\iiint': '\\dotsi',
	  '\\iiiint': '\\dotsi',
	  '\\idotsint': '\\dotsi',
	  // Symbols whose definition starts with \DOTSX:
	  '\\DOTSX': '\\dotsx'
	};
	defineMacro("\\dots", function (context) {
	  // TODO: If used in text mode, should expand to \textellipsis.
	  // However, in KaTeX, \textellipsis and \ldots behave the same
	  // (in text mode), and it's unlikely we'd see any of the math commands
	  // that affect the behavior of \dots when in text mode.  So fine for now
	  // (until we support \ifmmode ... \else ... \fi).
	  var thedots = '\\dotso';
	  var next = context.expandAfterFuture().text;

	  if (next in dotsByToken) {
	    thedots = dotsByToken[next];
	  } else if (next.substr(0, 4) === '\\not') {
	    thedots = '\\dotsb';
	  } else if (next in symbols.math) {
	    if (utils.contains(['bin', 'rel'], symbols.math[next].group)) {
	      thedots = '\\dotsb';
	    }
	  }

	  return thedots;
	});
	var spaceAfterDots = {
	  // \rightdelim@ checks for the following:
	  ')': true,
	  ']': true,
	  '\\rbrack': true,
	  '\\}': true,
	  '\\rbrace': true,
	  '\\rangle': true,
	  '\\rceil': true,
	  '\\rfloor': true,
	  '\\rgroup': true,
	  '\\rmoustache': true,
	  '\\right': true,
	  '\\bigr': true,
	  '\\biggr': true,
	  '\\Bigr': true,
	  '\\Biggr': true,
	  // \extra@ also tests for the following:
	  '$': true,
	  // \extrap@ checks for the following:
	  ';': true,
	  '.': true,
	  ',': true
	};
	defineMacro("\\dotso", function (context) {
	  var next = context.future().text;

	  if (next in spaceAfterDots) {
	    return "\\ldots\\,";
	  } else {
	    return "\\ldots";
	  }
	});
	defineMacro("\\dotsc", function (context) {
	  var next = context.future().text; // \dotsc uses \extra@ but not \extrap@, instead specially checking for
	  // ';' and '.', but doesn't check for ','.

	  if (next in spaceAfterDots && next !== ',') {
	    return "\\ldots\\,";
	  } else {
	    return "\\ldots";
	  }
	});
	defineMacro("\\cdots", function (context) {
	  var next = context.future().text;

	  if (next in spaceAfterDots) {
	    return "\\@cdots\\,";
	  } else {
	    return "\\@cdots";
	  }
	});
	defineMacro("\\dotsb", "\\cdots");
	defineMacro("\\dotsm", "\\cdots");
	defineMacro("\\dotsi", "\\!\\cdots"); // amsmath doesn't actually define \dotsx, but \dots followed by a macro
	// starting with \DOTSX implies \dotso, and then \extra@ detects this case
	// and forces the added `\,`.

	defineMacro("\\dotsx", "\\ldots\\,"); // \let\DOTSI\relax
	// \let\DOTSB\relax
	// \let\DOTSX\relax

	defineMacro("\\DOTSI", "\\relax");
	defineMacro("\\DOTSB", "\\relax");
	defineMacro("\\DOTSX", "\\relax"); // Spacing, based on amsmath.sty's override of LaTeX defaults
	// \DeclareRobustCommand{\tmspace}[3]{%
	//   \ifmmode\mskip#1#2\else\kern#1#3\fi\relax}

	defineMacro("\\tmspace", "\\TextOrMath{\\kern#1#3}{\\mskip#1#2}\\relax"); // \renewcommand{\,}{\tmspace+\thinmuskip{.1667em}}
	// TODO: math mode should use \thinmuskip

	defineMacro("\\,", "\\tmspace+{3mu}{.1667em}"); // \let\thinspace\,

	defineMacro("\\thinspace", "\\,"); // \def\>{\mskip\medmuskip}
	// \renewcommand{\:}{\tmspace+\medmuskip{.2222em}}
	// TODO: \> and math mode of \: should use \medmuskip = 4mu plus 2mu minus 4mu

	defineMacro("\\>", "\\mskip{4mu}");
	defineMacro("\\:", "\\tmspace+{4mu}{.2222em}"); // \let\medspace\:

	defineMacro("\\medspace", "\\:"); // \renewcommand{\;}{\tmspace+\thickmuskip{.2777em}}
	// TODO: math mode should use \thickmuskip = 5mu plus 5mu

	defineMacro("\\;", "\\tmspace+{5mu}{.2777em}"); // \let\thickspace\;

	defineMacro("\\thickspace", "\\;"); // \renewcommand{\!}{\tmspace-\thinmuskip{.1667em}}
	// TODO: math mode should use \thinmuskip

	defineMacro("\\!", "\\tmspace-{3mu}{.1667em}"); // \let\negthinspace\!

	defineMacro("\\negthinspace", "\\!"); // \newcommand{\negmedspace}{\tmspace-\medmuskip{.2222em}}
	// TODO: math mode should use \medmuskip

	defineMacro("\\negmedspace", "\\tmspace-{4mu}{.2222em}"); // \newcommand{\negthickspace}{\tmspace-\thickmuskip{.2777em}}
	// TODO: math mode should use \thickmuskip

	defineMacro("\\negthickspace", "\\tmspace-{5mu}{.277em}"); // \def\enspace{\kern.5em }

	defineMacro("\\enspace", "\\kern.5em "); // \def\enskip{\hskip.5em\relax}

	defineMacro("\\enskip", "\\hskip.5em\\relax"); // \def\quad{\hskip1em\relax}

	defineMacro("\\quad", "\\hskip1em\\relax"); // \def\qquad{\hskip2em\relax}

	defineMacro("\\qquad", "\\hskip2em\\relax"); // \tag@in@display form of \tag

	defineMacro("\\tag", "\\@ifstar\\tag@literal\\tag@paren");
	defineMacro("\\tag@paren", "\\tag@literal{({#1})}");
	defineMacro("\\tag@literal", context => {
	  if (context.macros.get("\\df@tag")) {
	    throw new ParseError("Multiple \\tag");
	  }

	  return "\\gdef\\df@tag{\\text{#1}}";
	}); // \renewcommand{\bmod}{\nonscript\mskip-\medmuskip\mkern5mu\mathbin
	//   {\operator@font mod}\penalty900
	//   \mkern5mu\nonscript\mskip-\medmuskip}
	// \newcommand{\pod}[1]{\allowbreak
	//   \if@display\mkern18mu\else\mkern8mu\fi(#1)}
	// \renewcommand{\pmod}[1]{\pod{{\operator@font mod}\mkern6mu#1}}
	// \newcommand{\mod}[1]{\allowbreak\if@display\mkern18mu
	//   \else\mkern12mu\fi{\operator@font mod}\,\,#1}
	// TODO: math mode should use \medmuskip = 4mu plus 2mu minus 4mu

	defineMacro("\\bmod", "\\mathchoice{\\mskip1mu}{\\mskip1mu}{\\mskip5mu}{\\mskip5mu}" + "\\mathbin{\\rm mod}" + "\\mathchoice{\\mskip1mu}{\\mskip1mu}{\\mskip5mu}{\\mskip5mu}");
	defineMacro("\\pod", "\\allowbreak" + "\\mathchoice{\\mkern18mu}{\\mkern8mu}{\\mkern8mu}{\\mkern8mu}(#1)");
	defineMacro("\\pmod", "\\pod{{\\rm mod}\\mkern6mu#1}");
	defineMacro("\\mod", "\\allowbreak" + "\\mathchoice{\\mkern18mu}{\\mkern12mu}{\\mkern12mu}{\\mkern12mu}" + "{\\rm mod}\\,\\,#1"); // \pmb    --   A simulation of bold.
	// The version in ambsy.sty works by typesetting three copies of the argument
	// with small offsets. We use two copies. We omit the vertical offset because
	// of rendering problems that makeVList encounters in Safari.

	defineMacro("\\pmb", "\\html@mathml{" + "\\@binrel{#1}{\\mathrlap{#1}\\kern0.5px#1}}" + "{\\mathbf{#1}}"); //////////////////////////////////////////////////////////////////////
	// LaTeX source2e
	// \expandafter\let\expandafter\@normalcr
	//     \csname\expandafter\@gobble\string\\ \endcsname
	// \DeclareRobustCommand\newline{\@normalcr\relax}

	defineMacro("\\newline", "\\\\\\relax"); // \def\TeX{T\kern-.1667em\lower.5ex\hbox{E}\kern-.125emX\@}
	// TODO: Doesn't normally work in math mode because \@ fails.  KaTeX doesn't
	// support \@ yet, so that's omitted, and we add \text so that the result
	// doesn't look funny in math mode.

	defineMacro("\\TeX", "\\textrm{\\html@mathml{" + "T\\kern-.1667em\\raisebox{-.5ex}{E}\\kern-.125emX" + "}{TeX}}"); // \DeclareRobustCommand{\LaTeX}{L\kern-.36em%
	//         {\sbox\z@ T%
	//          \vbox to\ht\z@{\hbox{\check@mathfonts
	//                               \fontsize\sf@size\z@
	//                               \math@fontsfalse\selectfont
	//                               A}%
	//                         \vss}%
	//         }%
	//         \kern-.15em%
	//         \TeX}
	// This code aligns the top of the A with the T (from the perspective of TeX's
	// boxes, though visually the A appears to extend above slightly).
	// We compute the corresponding \raisebox when A is rendered in \normalsize
	// \scriptstyle, which has a scale factor of 0.7 (see Options.js).

	var latexRaiseA = makeEm(fontMetricsData['Main-Regular']["T".charCodeAt(0)][1] - 0.7 * fontMetricsData['Main-Regular']["A".charCodeAt(0)][1]);
	defineMacro("\\LaTeX", "\\textrm{\\html@mathml{" + ("L\\kern-.36em\\raisebox{" + latexRaiseA + "}{\\scriptstyle A}") + "\\kern-.15em\\TeX}{LaTeX}}"); // New KaTeX logo based on tweaking LaTeX logo

	defineMacro("\\KaTeX", "\\textrm{\\html@mathml{" + ("K\\kern-.17em\\raisebox{" + latexRaiseA + "}{\\scriptstyle A}") + "\\kern-.15em\\TeX}{KaTeX}}"); // \DeclareRobustCommand\hspace{\@ifstar\@hspacer\@hspace}
	// \def\@hspace#1{\hskip  #1\relax}
	// \def\@hspacer#1{\vrule \@width\z@\nobreak
	//                 \hskip #1\hskip \z@skip}

	defineMacro("\\hspace", "\\@ifstar\\@hspacer\\@hspace");
	defineMacro("\\@hspace", "\\hskip #1\\relax");
	defineMacro("\\@hspacer", "\\rule{0pt}{0pt}\\hskip #1\\relax"); //////////////////////////////////////////////////////////////////////
	// mathtools.sty
	//\providecommand\ordinarycolon{:}

	defineMacro("\\ordinarycolon", ":"); //\def\vcentcolon{\mathrel{\mathop\ordinarycolon}}
	//TODO(edemaine): Not yet centered. Fix via \raisebox or #726

	defineMacro("\\vcentcolon", "\\mathrel{\\mathop\\ordinarycolon}"); // \providecommand*\dblcolon{\vcentcolon\mathrel{\mkern-.9mu}\vcentcolon}

	defineMacro("\\dblcolon", "\\html@mathml{" + "\\mathrel{\\vcentcolon\\mathrel{\\mkern-.9mu}\\vcentcolon}}" + "{\\mathop{\\char\"2237}}"); // \providecommand*\coloneqq{\vcentcolon\mathrel{\mkern-1.2mu}=}

	defineMacro("\\coloneqq", "\\html@mathml{" + "\\mathrel{\\vcentcolon\\mathrel{\\mkern-1.2mu}=}}" + "{\\mathop{\\char\"2254}}"); // ≔
	// \providecommand*\Coloneqq{\dblcolon\mathrel{\mkern-1.2mu}=}

	defineMacro("\\Coloneqq", "\\html@mathml{" + "\\mathrel{\\dblcolon\\mathrel{\\mkern-1.2mu}=}}" + "{\\mathop{\\char\"2237\\char\"3d}}"); // \providecommand*\coloneq{\vcentcolon\mathrel{\mkern-1.2mu}\mathrel{-}}

	defineMacro("\\coloneq", "\\html@mathml{" + "\\mathrel{\\vcentcolon\\mathrel{\\mkern-1.2mu}\\mathrel{-}}}" + "{\\mathop{\\char\"3a\\char\"2212}}"); // \providecommand*\Coloneq{\dblcolon\mathrel{\mkern-1.2mu}\mathrel{-}}

	defineMacro("\\Coloneq", "\\html@mathml{" + "\\mathrel{\\dblcolon\\mathrel{\\mkern-1.2mu}\\mathrel{-}}}" + "{\\mathop{\\char\"2237\\char\"2212}}"); // \providecommand*\eqqcolon{=\mathrel{\mkern-1.2mu}\vcentcolon}

	defineMacro("\\eqqcolon", "\\html@mathml{" + "\\mathrel{=\\mathrel{\\mkern-1.2mu}\\vcentcolon}}" + "{\\mathop{\\char\"2255}}"); // ≕
	// \providecommand*\Eqqcolon{=\mathrel{\mkern-1.2mu}\dblcolon}

	defineMacro("\\Eqqcolon", "\\html@mathml{" + "\\mathrel{=\\mathrel{\\mkern-1.2mu}\\dblcolon}}" + "{\\mathop{\\char\"3d\\char\"2237}}"); // \providecommand*\eqcolon{\mathrel{-}\mathrel{\mkern-1.2mu}\vcentcolon}

	defineMacro("\\eqcolon", "\\html@mathml{" + "\\mathrel{\\mathrel{-}\\mathrel{\\mkern-1.2mu}\\vcentcolon}}" + "{\\mathop{\\char\"2239}}"); // \providecommand*\Eqcolon{\mathrel{-}\mathrel{\mkern-1.2mu}\dblcolon}

	defineMacro("\\Eqcolon", "\\html@mathml{" + "\\mathrel{\\mathrel{-}\\mathrel{\\mkern-1.2mu}\\dblcolon}}" + "{\\mathop{\\char\"2212\\char\"2237}}"); // \providecommand*\colonapprox{\vcentcolon\mathrel{\mkern-1.2mu}\approx}

	defineMacro("\\colonapprox", "\\html@mathml{" + "\\mathrel{\\vcentcolon\\mathrel{\\mkern-1.2mu}\\approx}}" + "{\\mathop{\\char\"3a\\char\"2248}}"); // \providecommand*\Colonapprox{\dblcolon\mathrel{\mkern-1.2mu}\approx}

	defineMacro("\\Colonapprox", "\\html@mathml{" + "\\mathrel{\\dblcolon\\mathrel{\\mkern-1.2mu}\\approx}}" + "{\\mathop{\\char\"2237\\char\"2248}}"); // \providecommand*\colonsim{\vcentcolon\mathrel{\mkern-1.2mu}\sim}

	defineMacro("\\colonsim", "\\html@mathml{" + "\\mathrel{\\vcentcolon\\mathrel{\\mkern-1.2mu}\\sim}}" + "{\\mathop{\\char\"3a\\char\"223c}}"); // \providecommand*\Colonsim{\dblcolon\mathrel{\mkern-1.2mu}\sim}

	defineMacro("\\Colonsim", "\\html@mathml{" + "\\mathrel{\\dblcolon\\mathrel{\\mkern-1.2mu}\\sim}}" + "{\\mathop{\\char\"2237\\char\"223c}}"); // Some Unicode characters are implemented with macros to mathtools functions.

	defineMacro("\u2237", "\\dblcolon"); // ::

	defineMacro("\u2239", "\\eqcolon"); // -:

	defineMacro("\u2254", "\\coloneqq"); // :=

	defineMacro("\u2255", "\\eqqcolon"); // =:

	defineMacro("\u2A74", "\\Coloneqq"); // ::=
	//////////////////////////////////////////////////////////////////////
	// colonequals.sty
	// Alternate names for mathtools's macros:

	defineMacro("\\ratio", "\\vcentcolon");
	defineMacro("\\coloncolon", "\\dblcolon");
	defineMacro("\\colonequals", "\\coloneqq");
	defineMacro("\\coloncolonequals", "\\Coloneqq");
	defineMacro("\\equalscolon", "\\eqqcolon");
	defineMacro("\\equalscoloncolon", "\\Eqqcolon");
	defineMacro("\\colonminus", "\\coloneq");
	defineMacro("\\coloncolonminus", "\\Coloneq");
	defineMacro("\\minuscolon", "\\eqcolon");
	defineMacro("\\minuscoloncolon", "\\Eqcolon"); // \colonapprox name is same in mathtools and colonequals.

	defineMacro("\\coloncolonapprox", "\\Colonapprox"); // \colonsim name is same in mathtools and colonequals.

	defineMacro("\\coloncolonsim", "\\Colonsim"); // Additional macros, implemented by analogy with mathtools definitions:

	defineMacro("\\simcolon", "\\mathrel{\\sim\\mathrel{\\mkern-1.2mu}\\vcentcolon}");
	defineMacro("\\simcoloncolon", "\\mathrel{\\sim\\mathrel{\\mkern-1.2mu}\\dblcolon}");
	defineMacro("\\approxcolon", "\\mathrel{\\approx\\mathrel{\\mkern-1.2mu}\\vcentcolon}");
	defineMacro("\\approxcoloncolon", "\\mathrel{\\approx\\mathrel{\\mkern-1.2mu}\\dblcolon}"); // Present in newtxmath, pxfonts and txfonts

	defineMacro("\\notni", "\\html@mathml{\\not\\ni}{\\mathrel{\\char`\u220C}}");
	defineMacro("\\limsup", "\\DOTSB\\operatorname*{lim\\,sup}");
	defineMacro("\\liminf", "\\DOTSB\\operatorname*{lim\\,inf}"); //////////////////////////////////////////////////////////////////////
	// From amsopn.sty

	defineMacro("\\injlim", "\\DOTSB\\operatorname*{inj\\,lim}");
	defineMacro("\\projlim", "\\DOTSB\\operatorname*{proj\\,lim}");
	defineMacro("\\varlimsup", "\\DOTSB\\operatorname*{\\overline{lim}}");
	defineMacro("\\varliminf", "\\DOTSB\\operatorname*{\\underline{lim}}");
	defineMacro("\\varinjlim", "\\DOTSB\\operatorname*{\\underrightarrow{lim}}");
	defineMacro("\\varprojlim", "\\DOTSB\\operatorname*{\\underleftarrow{lim}}"); //////////////////////////////////////////////////////////////////////
	// MathML alternates for KaTeX glyphs in the Unicode private area

	defineMacro("\\gvertneqq", "\\html@mathml{\\@gvertneqq}{\u2269}");
	defineMacro("\\lvertneqq", "\\html@mathml{\\@lvertneqq}{\u2268}");
	defineMacro("\\ngeqq", "\\html@mathml{\\@ngeqq}{\u2271}");
	defineMacro("\\ngeqslant", "\\html@mathml{\\@ngeqslant}{\u2271}");
	defineMacro("\\nleqq", "\\html@mathml{\\@nleqq}{\u2270}");
	defineMacro("\\nleqslant", "\\html@mathml{\\@nleqslant}{\u2270}");
	defineMacro("\\nshortmid", "\\html@mathml{\\@nshortmid}{∤}");
	defineMacro("\\nshortparallel", "\\html@mathml{\\@nshortparallel}{∦}");
	defineMacro("\\nsubseteqq", "\\html@mathml{\\@nsubseteqq}{\u2288}");
	defineMacro("\\nsupseteqq", "\\html@mathml{\\@nsupseteqq}{\u2289}");
	defineMacro("\\varsubsetneq", "\\html@mathml{\\@varsubsetneq}{⊊}");
	defineMacro("\\varsubsetneqq", "\\html@mathml{\\@varsubsetneqq}{⫋}");
	defineMacro("\\varsupsetneq", "\\html@mathml{\\@varsupsetneq}{⊋}");
	defineMacro("\\varsupsetneqq", "\\html@mathml{\\@varsupsetneqq}{⫌}");
	defineMacro("\\imath", "\\html@mathml{\\@imath}{\u0131}");
	defineMacro("\\jmath", "\\html@mathml{\\@jmath}{\u0237}"); //////////////////////////////////////////////////////////////////////
	// stmaryrd and semantic
	// The stmaryrd and semantic packages render the next four items by calling a
	// glyph. Those glyphs do not exist in the KaTeX fonts. Hence the macros.

	defineMacro("\\llbracket", "\\html@mathml{" + "\\mathopen{[\\mkern-3.2mu[}}" + "{\\mathopen{\\char`\u27e6}}");
	defineMacro("\\rrbracket", "\\html@mathml{" + "\\mathclose{]\\mkern-3.2mu]}}" + "{\\mathclose{\\char`\u27e7}}");
	defineMacro("\u27e6", "\\llbracket"); // blackboard bold [

	defineMacro("\u27e7", "\\rrbracket"); // blackboard bold ]

	defineMacro("\\lBrace", "\\html@mathml{" + "\\mathopen{\\{\\mkern-3.2mu[}}" + "{\\mathopen{\\char`\u2983}}");
	defineMacro("\\rBrace", "\\html@mathml{" + "\\mathclose{]\\mkern-3.2mu\\}}}" + "{\\mathclose{\\char`\u2984}}");
	defineMacro("\u2983", "\\lBrace"); // blackboard bold {

	defineMacro("\u2984", "\\rBrace"); // blackboard bold }
	// TODO: Create variable sized versions of the last two items. I believe that
	// will require new font glyphs.
	// The stmaryrd function `\minuso` provides a "Plimsoll" symbol that
	// superimposes the characters \circ and \mathminus. Used in chemistry.

	defineMacro("\\minuso", "\\mathbin{\\html@mathml{" + "{\\mathrlap{\\mathchoice{\\kern{0.145em}}{\\kern{0.145em}}" + "{\\kern{0.1015em}}{\\kern{0.0725em}}\\circ}{-}}}" + "{\\char`⦵}}");
	defineMacro("⦵", "\\minuso"); //////////////////////////////////////////////////////////////////////
	// texvc.sty
	// The texvc package contains macros available in mediawiki pages.
	// We omit the functions deprecated at
	// https://en.wikipedia.org/wiki/Help:Displaying_a_formula#Deprecated_syntax
	// We also omit texvc's \O, which conflicts with \text{\O}

	defineMacro("\\darr", "\\downarrow");
	defineMacro("\\dArr", "\\Downarrow");
	defineMacro("\\Darr", "\\Downarrow");
	defineMacro("\\lang", "\\langle");
	defineMacro("\\rang", "\\rangle");
	defineMacro("\\uarr", "\\uparrow");
	defineMacro("\\uArr", "\\Uparrow");
	defineMacro("\\Uarr", "\\Uparrow");
	defineMacro("\\N", "\\mathbb{N}");
	defineMacro("\\R", "\\mathbb{R}");
	defineMacro("\\Z", "\\mathbb{Z}");
	defineMacro("\\alef", "\\aleph");
	defineMacro("\\alefsym", "\\aleph");
	defineMacro("\\Alpha", "\\mathrm{A}");
	defineMacro("\\Beta", "\\mathrm{B}");
	defineMacro("\\bull", "\\bullet");
	defineMacro("\\Chi", "\\mathrm{X}");
	defineMacro("\\clubs", "\\clubsuit");
	defineMacro("\\cnums", "\\mathbb{C}");
	defineMacro("\\Complex", "\\mathbb{C}");
	defineMacro("\\Dagger", "\\ddagger");
	defineMacro("\\diamonds", "\\diamondsuit");
	defineMacro("\\empty", "\\emptyset");
	defineMacro("\\Epsilon", "\\mathrm{E}");
	defineMacro("\\Eta", "\\mathrm{H}");
	defineMacro("\\exist", "\\exists");
	defineMacro("\\harr", "\\leftrightarrow");
	defineMacro("\\hArr", "\\Leftrightarrow");
	defineMacro("\\Harr", "\\Leftrightarrow");
	defineMacro("\\hearts", "\\heartsuit");
	defineMacro("\\image", "\\Im");
	defineMacro("\\infin", "\\infty");
	defineMacro("\\Iota", "\\mathrm{I}");
	defineMacro("\\isin", "\\in");
	defineMacro("\\Kappa", "\\mathrm{K}");
	defineMacro("\\larr", "\\leftarrow");
	defineMacro("\\lArr", "\\Leftarrow");
	defineMacro("\\Larr", "\\Leftarrow");
	defineMacro("\\lrarr", "\\leftrightarrow");
	defineMacro("\\lrArr", "\\Leftrightarrow");
	defineMacro("\\Lrarr", "\\Leftrightarrow");
	defineMacro("\\Mu", "\\mathrm{M}");
	defineMacro("\\natnums", "\\mathbb{N}");
	defineMacro("\\Nu", "\\mathrm{N}");
	defineMacro("\\Omicron", "\\mathrm{O}");
	defineMacro("\\plusmn", "\\pm");
	defineMacro("\\rarr", "\\rightarrow");
	defineMacro("\\rArr", "\\Rightarrow");
	defineMacro("\\Rarr", "\\Rightarrow");
	defineMacro("\\real", "\\Re");
	defineMacro("\\reals", "\\mathbb{R}");
	defineMacro("\\Reals", "\\mathbb{R}");
	defineMacro("\\Rho", "\\mathrm{P}");
	defineMacro("\\sdot", "\\cdot");
	defineMacro("\\sect", "\\S");
	defineMacro("\\spades", "\\spadesuit");
	defineMacro("\\sub", "\\subset");
	defineMacro("\\sube", "\\subseteq");
	defineMacro("\\supe", "\\supseteq");
	defineMacro("\\Tau", "\\mathrm{T}");
	defineMacro("\\thetasym", "\\vartheta"); // TODO: defineMacro("\\varcoppa", "\\\mbox{\\coppa}");

	defineMacro("\\weierp", "\\wp");
	defineMacro("\\Zeta", "\\mathrm{Z}"); //////////////////////////////////////////////////////////////////////
	// statmath.sty
	// https://ctan.math.illinois.edu/macros/latex/contrib/statmath/statmath.pdf

	defineMacro("\\argmin", "\\DOTSB\\operatorname*{arg\\,min}");
	defineMacro("\\argmax", "\\DOTSB\\operatorname*{arg\\,max}");
	defineMacro("\\plim", "\\DOTSB\\mathop{\\operatorname{plim}}\\limits"); //////////////////////////////////////////////////////////////////////
	// braket.sty
	// http://ctan.math.washington.edu/tex-archive/macros/latex/contrib/braket/braket.pdf

	defineMacro("\\bra", "\\mathinner{\\langle{#1}|}");
	defineMacro("\\ket", "\\mathinner{|{#1}\\rangle}");
	defineMacro("\\braket", "\\mathinner{\\langle{#1}\\rangle}");
	defineMacro("\\Bra", "\\left\\langle#1\\right|");
	defineMacro("\\Ket", "\\left|#1\\right\\rangle");

	var braketHelper = one => context => {
	  var left = context.consumeArg().tokens;
	  var middle = context.consumeArg().tokens;
	  var middleDouble = context.consumeArg().tokens;
	  var right = context.consumeArg().tokens;
	  var oldMiddle = context.macros.get("|");
	  var oldMiddleDouble = context.macros.get("\\|");
	  context.macros.beginGroup();

	  var midMacro = double => context => {
	    if (one) {
	      // Only modify the first instance of | or \|
	      context.macros.set("|", oldMiddle);

	      if (middleDouble.length) {
	        context.macros.set("\\|", oldMiddleDouble);
	      }
	    }

	    var doubled = double;

	    if (!double && middleDouble.length) {
	      // Mimic \@ifnextchar
	      var nextToken = context.future();

	      if (nextToken.text === "|") {
	        context.popToken();
	        doubled = true;
	      }
	    }

	    return {
	      tokens: doubled ? middleDouble : middle,
	      numArgs: 0
	    };
	  };

	  context.macros.set("|", midMacro(false));

	  if (middleDouble.length) {
	    context.macros.set("\\|", midMacro(true));
	  }

	  var arg = context.consumeArg().tokens;
	  var expanded = context.expandTokens([...right, ...arg, ...left // reversed
	  ]);
	  context.macros.endGroup();
	  return {
	    tokens: expanded.reverse(),
	    numArgs: 0
	  };
	};

	defineMacro("\\bra@ket", braketHelper(false));
	defineMacro("\\bra@set", braketHelper(true));
	defineMacro("\\Braket", "\\bra@ket{\\left\\langle}" + "{\\,\\middle\\vert\\,}{\\,\\middle\\vert\\,}{\\right\\rangle}");
	defineMacro("\\Set", "\\bra@set{\\left\\{\\:}" + "{\\;\\middle\\vert\\;}{\\;\\middle\\Vert\\;}{\\:\\right\\}}");
	defineMacro("\\set", "\\bra@set{\\{\\,}{\\mid}{}{\\,\\}}"); // has no support for special || or \|
	//////////////////////////////////////////////////////////////////////
	// actuarialangle.dtx

	defineMacro("\\angln", "{\\angl n}"); // Custom Khan Academy colors, should be moved to an optional package

	defineMacro("\\blue", "\\textcolor{##6495ed}{#1}");
	defineMacro("\\orange", "\\textcolor{##ffa500}{#1}");
	defineMacro("\\pink", "\\textcolor{##ff00af}{#1}");
	defineMacro("\\red", "\\textcolor{##df0030}{#1}");
	defineMacro("\\green", "\\textcolor{##28ae7b}{#1}");
	defineMacro("\\gray", "\\textcolor{gray}{#1}");
	defineMacro("\\purple", "\\textcolor{##9d38bd}{#1}");
	defineMacro("\\blueA", "\\textcolor{##ccfaff}{#1}");
	defineMacro("\\blueB", "\\textcolor{##80f6ff}{#1}");
	defineMacro("\\blueC", "\\textcolor{##63d9ea}{#1}");
	defineMacro("\\blueD", "\\textcolor{##11accd}{#1}");
	defineMacro("\\blueE", "\\textcolor{##0c7f99}{#1}");
	defineMacro("\\tealA", "\\textcolor{##94fff5}{#1}");
	defineMacro("\\tealB", "\\textcolor{##26edd5}{#1}");
	defineMacro("\\tealC", "\\textcolor{##01d1c1}{#1}");
	defineMacro("\\tealD", "\\textcolor{##01a995}{#1}");
	defineMacro("\\tealE", "\\textcolor{##208170}{#1}");
	defineMacro("\\greenA", "\\textcolor{##b6ffb0}{#1}");
	defineMacro("\\greenB", "\\textcolor{##8af281}{#1}");
	defineMacro("\\greenC", "\\textcolor{##74cf70}{#1}");
	defineMacro("\\greenD", "\\textcolor{##1fab54}{#1}");
	defineMacro("\\greenE", "\\textcolor{##0d923f}{#1}");
	defineMacro("\\goldA", "\\textcolor{##ffd0a9}{#1}");
	defineMacro("\\goldB", "\\textcolor{##ffbb71}{#1}");
	defineMacro("\\goldC", "\\textcolor{##ff9c39}{#1}");
	defineMacro("\\goldD", "\\textcolor{##e07d10}{#1}");
	defineMacro("\\goldE", "\\textcolor{##a75a05}{#1}");
	defineMacro("\\redA", "\\textcolor{##fca9a9}{#1}");
	defineMacro("\\redB", "\\textcolor{##ff8482}{#1}");
	defineMacro("\\redC", "\\textcolor{##f9685d}{#1}");
	defineMacro("\\redD", "\\textcolor{##e84d39}{#1}");
	defineMacro("\\redE", "\\textcolor{##bc2612}{#1}");
	defineMacro("\\maroonA", "\\textcolor{##ffbde0}{#1}");
	defineMacro("\\maroonB", "\\textcolor{##ff92c6}{#1}");
	defineMacro("\\maroonC", "\\textcolor{##ed5fa6}{#1}");
	defineMacro("\\maroonD", "\\textcolor{##ca337c}{#1}");
	defineMacro("\\maroonE", "\\textcolor{##9e034e}{#1}");
	defineMacro("\\purpleA", "\\textcolor{##ddd7ff}{#1}");
	defineMacro("\\purpleB", "\\textcolor{##c6b9fc}{#1}");
	defineMacro("\\purpleC", "\\textcolor{##aa87ff}{#1}");
	defineMacro("\\purpleD", "\\textcolor{##7854ab}{#1}");
	defineMacro("\\purpleE", "\\textcolor{##543b78}{#1}");
	defineMacro("\\mintA", "\\textcolor{##f5f9e8}{#1}");
	defineMacro("\\mintB", "\\textcolor{##edf2df}{#1}");
	defineMacro("\\mintC", "\\textcolor{##e0e5cc}{#1}");
	defineMacro("\\grayA", "\\textcolor{##f6f7f7}{#1}");
	defineMacro("\\grayB", "\\textcolor{##f0f1f2}{#1}");
	defineMacro("\\grayC", "\\textcolor{##e3e5e6}{#1}");
	defineMacro("\\grayD", "\\textcolor{##d6d8da}{#1}");
	defineMacro("\\grayE", "\\textcolor{##babec2}{#1}");
	defineMacro("\\grayF", "\\textcolor{##888d93}{#1}");
	defineMacro("\\grayG", "\\textcolor{##626569}{#1}");
	defineMacro("\\grayH", "\\textcolor{##3b3e40}{#1}");
	defineMacro("\\grayI", "\\textcolor{##21242c}{#1}");
	defineMacro("\\kaBlue", "\\textcolor{##314453}{#1}");
	defineMacro("\\kaGreen", "\\textcolor{##71B307}{#1}");

	/**
	 * This file contains the “gullet” where macros are expanded
	 * until only non-macro tokens remain.
	 */
	// List of commands that act like macros but aren't defined as a macro,
	// function, or symbol.  Used in `isDefined`.
	var implicitCommands = {
	  "^": true,
	  // Parser.js
	  "_": true,
	  // Parser.js
	  "\\limits": true,
	  // Parser.js
	  "\\nolimits": true // Parser.js

	};
	class MacroExpander {
	  constructor(input, settings, mode) {
	    this.settings = void 0;
	    this.expansionCount = void 0;
	    this.lexer = void 0;
	    this.macros = void 0;
	    this.stack = void 0;
	    this.mode = void 0;
	    this.settings = settings;
	    this.expansionCount = 0;
	    this.feed(input); // Make new global namespace

	    this.macros = new Namespace(macros, settings.macros);
	    this.mode = mode;
	    this.stack = []; // contains tokens in REVERSE order
	  }
	  /**
	   * Feed a new input string to the same MacroExpander
	   * (with existing macros etc.).
	   */


	  feed(input) {
	    this.lexer = new Lexer(input, this.settings);
	  }
	  /**
	   * Switches between "text" and "math" modes.
	   */


	  switchMode(newMode) {
	    this.mode = newMode;
	  }
	  /**
	   * Start a new group nesting within all namespaces.
	   */


	  beginGroup() {
	    this.macros.beginGroup();
	  }
	  /**
	   * End current group nesting within all namespaces.
	   */


	  endGroup() {
	    this.macros.endGroup();
	  }
	  /**
	   * Ends all currently nested groups (if any), restoring values before the
	   * groups began.  Useful in case of an error in the middle of parsing.
	   */


	  endGroups() {
	    this.macros.endGroups();
	  }
	  /**
	   * Returns the topmost token on the stack, without expanding it.
	   * Similar in behavior to TeX's `\futurelet`.
	   */


	  future() {
	    if (this.stack.length === 0) {
	      this.pushToken(this.lexer.lex());
	    }

	    return this.stack[this.stack.length - 1];
	  }
	  /**
	   * Remove and return the next unexpanded token.
	   */


	  popToken() {
	    this.future(); // ensure non-empty stack

	    return this.stack.pop();
	  }
	  /**
	   * Add a given token to the token stack.  In particular, this get be used
	   * to put back a token returned from one of the other methods.
	   */


	  pushToken(token) {
	    this.stack.push(token);
	  }
	  /**
	   * Append an array of tokens to the token stack.
	   */


	  pushTokens(tokens) {
	    this.stack.push(...tokens);
	  }
	  /**
	   * Find an macro argument without expanding tokens and append the array of
	   * tokens to the token stack. Uses Token as a container for the result.
	   */


	  scanArgument(isOptional) {
	    var start;
	    var end;
	    var tokens;

	    if (isOptional) {
	      this.consumeSpaces(); // \@ifnextchar gobbles any space following it

	      if (this.future().text !== "[") {
	        return null;
	      }

	      start = this.popToken(); // don't include [ in tokens

	      ({
	        tokens,
	        end
	      } = this.consumeArg(["]"]));
	    } else {
	      ({
	        tokens,
	        start,
	        end
	      } = this.consumeArg());
	    } // indicate the end of an argument


	    this.pushToken(new Token("EOF", end.loc));
	    this.pushTokens(tokens);
	    return start.range(end, "");
	  }
	  /**
	   * Consume all following space tokens, without expansion.
	   */


	  consumeSpaces() {
	    for (;;) {
	      var token = this.future();

	      if (token.text === " ") {
	        this.stack.pop();
	      } else {
	        break;
	      }
	    }
	  }
	  /**
	   * Consume an argument from the token stream, and return the resulting array
	   * of tokens and start/end token.
	   */


	  consumeArg(delims) {
	    // The argument for a delimited parameter is the shortest (possibly
	    // empty) sequence of tokens with properly nested {...} groups that is
	    // followed ... by this particular list of non-parameter tokens.
	    // The argument for an undelimited parameter is the next nonblank
	    // token, unless that token is ‘{’, when the argument will be the
	    // entire {...} group that follows.
	    var tokens = [];
	    var isDelimited = delims && delims.length > 0;

	    if (!isDelimited) {
	      // Ignore spaces between arguments.  As the TeXbook says:
	      // "After you have said ‘\def\row#1#2{...}’, you are allowed to
	      //  put spaces between the arguments (e.g., ‘\row x n’), because
	      //  TeX doesn’t use single spaces as undelimited arguments."
	      this.consumeSpaces();
	    }

	    var start = this.future();
	    var tok;
	    var depth = 0;
	    var match = 0;

	    do {
	      tok = this.popToken();
	      tokens.push(tok);

	      if (tok.text === "{") {
	        ++depth;
	      } else if (tok.text === "}") {
	        --depth;

	        if (depth === -1) {
	          throw new ParseError("Extra }", tok);
	        }
	      } else if (tok.text === "EOF") {
	        throw new ParseError("Unexpected end of input in a macro argument" + ", expected '" + (delims && isDelimited ? delims[match] : "}") + "'", tok);
	      }

	      if (delims && isDelimited) {
	        if ((depth === 0 || depth === 1 && delims[match] === "{") && tok.text === delims[match]) {
	          ++match;

	          if (match === delims.length) {
	            // don't include delims in tokens
	            tokens.splice(-match, match);
	            break;
	          }
	        } else {
	          match = 0;
	        }
	      }
	    } while (depth !== 0 || isDelimited); // If the argument found ... has the form ‘{<nested tokens>}’,
	    // ... the outermost braces enclosing the argument are removed


	    if (start.text === "{" && tokens[tokens.length - 1].text === "}") {
	      tokens.pop();
	      tokens.shift();
	    }

	    tokens.reverse(); // to fit in with stack order

	    return {
	      tokens,
	      start,
	      end: tok
	    };
	  }
	  /**
	   * Consume the specified number of (delimited) arguments from the token
	   * stream and return the resulting array of arguments.
	   */


	  consumeArgs(numArgs, delimiters) {
	    if (delimiters) {
	      if (delimiters.length !== numArgs + 1) {
	        throw new ParseError("The length of delimiters doesn't match the number of args!");
	      }

	      var delims = delimiters[0];

	      for (var i = 0; i < delims.length; i++) {
	        var tok = this.popToken();

	        if (delims[i] !== tok.text) {
	          throw new ParseError("Use of the macro doesn't match its definition", tok);
	        }
	      }
	    }

	    var args = [];

	    for (var _i = 0; _i < numArgs; _i++) {
	      args.push(this.consumeArg(delimiters && delimiters[_i + 1]).tokens);
	    }

	    return args;
	  }
	  /**
	   * Expand the next token only once if possible.
	   *
	   * If the token is expanded, the resulting tokens will be pushed onto
	   * the stack in reverse order and will be returned as an array,
	   * also in reverse order.
	   *
	   * If not, the next token will be returned without removing it
	   * from the stack.  This case can be detected by a `Token` return value
	   * instead of an `Array` return value.
	   *
	   * In either case, the next token will be on the top of the stack,
	   * or the stack will be empty.
	   *
	   * Used to implement `expandAfterFuture` and `expandNextToken`.
	   *
	   * If expandableOnly, only expandable tokens are expanded and
	   * an undefined control sequence results in an error.
	   */


	  expandOnce(expandableOnly) {
	    var topToken = this.popToken();
	    var name = topToken.text;
	    var expansion = !topToken.noexpand ? this._getExpansion(name) : null;

	    if (expansion == null || expandableOnly && expansion.unexpandable) {
	      if (expandableOnly && expansion == null && name[0] === "\\" && !this.isDefined(name)) {
	        throw new ParseError("Undefined control sequence: " + name);
	      }

	      this.pushToken(topToken);
	      return topToken;
	    }

	    this.expansionCount++;

	    if (this.expansionCount > this.settings.maxExpand) {
	      throw new ParseError("Too many expansions: infinite loop or " + "need to increase maxExpand setting");
	    }

	    var tokens = expansion.tokens;
	    var args = this.consumeArgs(expansion.numArgs, expansion.delimiters);

	    if (expansion.numArgs) {
	      // paste arguments in place of the placeholders
	      tokens = tokens.slice(); // make a shallow copy

	      for (var i = tokens.length - 1; i >= 0; --i) {
	        var tok = tokens[i];

	        if (tok.text === "#") {
	          if (i === 0) {
	            throw new ParseError("Incomplete placeholder at end of macro body", tok);
	          }

	          tok = tokens[--i]; // next token on stack

	          if (tok.text === "#") {
	            // ## → #
	            tokens.splice(i + 1, 1); // drop first #
	          } else if (/^[1-9]$/.test(tok.text)) {
	            // replace the placeholder with the indicated argument
	            tokens.splice(i, 2, ...args[+tok.text - 1]);
	          } else {
	            throw new ParseError("Not a valid argument number", tok);
	          }
	        }
	      }
	    } // Concatenate expansion onto top of stack.


	    this.pushTokens(tokens);
	    return tokens;
	  }
	  /**
	   * Expand the next token only once (if possible), and return the resulting
	   * top token on the stack (without removing anything from the stack).
	   * Similar in behavior to TeX's `\expandafter\futurelet`.
	   * Equivalent to expandOnce() followed by future().
	   */


	  expandAfterFuture() {
	    this.expandOnce();
	    return this.future();
	  }
	  /**
	   * Recursively expand first token, then return first non-expandable token.
	   */


	  expandNextToken() {
	    for (;;) {
	      var expanded = this.expandOnce(); // expandOnce returns Token if and only if it's fully expanded.

	      if (expanded instanceof Token) {
	        // the token after \noexpand is interpreted as if its meaning
	        // were ‘\relax’
	        if (expanded.treatAsRelax) {
	          expanded.text = "\\relax";
	        }

	        return this.stack.pop(); // === expanded
	      }
	    } // Flow unable to figure out that this pathway is impossible.
	    // https://github.com/facebook/flow/issues/4808


	    throw new Error(); // eslint-disable-line no-unreachable
	  }
	  /**
	   * Fully expand the given macro name and return the resulting list of
	   * tokens, or return `undefined` if no such macro is defined.
	   */


	  expandMacro(name) {
	    return this.macros.has(name) ? this.expandTokens([new Token(name)]) : undefined;
	  }
	  /**
	   * Fully expand the given token stream and return the resulting list of
	   * tokens.  Note that the input tokens are in reverse order, but the
	   * output tokens are in forward order.
	   */


	  expandTokens(tokens) {
	    var output = [];
	    var oldStackLength = this.stack.length;
	    this.pushTokens(tokens);

	    while (this.stack.length > oldStackLength) {
	      var expanded = this.expandOnce(true); // expand only expandable tokens
	      // expandOnce returns Token if and only if it's fully expanded.

	      if (expanded instanceof Token) {
	        if (expanded.treatAsRelax) {
	          // the expansion of \noexpand is the token itself
	          expanded.noexpand = false;
	          expanded.treatAsRelax = false;
	        }

	        output.push(this.stack.pop());
	      }
	    }

	    return output;
	  }
	  /**
	   * Fully expand the given macro name and return the result as a string,
	   * or return `undefined` if no such macro is defined.
	   */


	  expandMacroAsText(name) {
	    var tokens = this.expandMacro(name);

	    if (tokens) {
	      return tokens.map(token => token.text).join("");
	    } else {
	      return tokens;
	    }
	  }
	  /**
	   * Returns the expanded macro as a reversed array of tokens and a macro
	   * argument count.  Or returns `null` if no such macro.
	   */


	  _getExpansion(name) {
	    var definition = this.macros.get(name);

	    if (definition == null) {
	      // mainly checking for undefined here
	      return definition;
	    } // If a single character has an associated catcode other than 13
	    // (active character), then don't expand it.


	    if (name.length === 1) {
	      var catcode = this.lexer.catcodes[name];

	      if (catcode != null && catcode !== 13) {
	        return;
	      }
	    }

	    var expansion = typeof definition === "function" ? definition(this) : definition;

	    if (typeof expansion === "string") {
	      var numArgs = 0;

	      if (expansion.indexOf("#") !== -1) {
	        var stripped = expansion.replace(/##/g, "");

	        while (stripped.indexOf("#" + (numArgs + 1)) !== -1) {
	          ++numArgs;
	        }
	      }

	      var bodyLexer = new Lexer(expansion, this.settings);
	      var tokens = [];
	      var tok = bodyLexer.lex();

	      while (tok.text !== "EOF") {
	        tokens.push(tok);
	        tok = bodyLexer.lex();
	      }

	      tokens.reverse(); // to fit in with stack using push and pop

	      var expanded = {
	        tokens,
	        numArgs
	      };
	      return expanded;
	    }

	    return expansion;
	  }
	  /**
	   * Determine whether a command is currently "defined" (has some
	   * functionality), meaning that it's a macro (in the current group),
	   * a function, a symbol, or one of the special commands listed in
	   * `implicitCommands`.
	   */


	  isDefined(name) {
	    return this.macros.has(name) || functions.hasOwnProperty(name) || symbols.math.hasOwnProperty(name) || symbols.text.hasOwnProperty(name) || implicitCommands.hasOwnProperty(name);
	  }
	  /**
	   * Determine whether a command is expandable.
	   */


	  isExpandable(name) {
	    var macro = this.macros.get(name);
	    return macro != null ? typeof macro === "string" || typeof macro === "function" || !macro.unexpandable : functions.hasOwnProperty(name) && !functions[name].primitive;
	  }

	}

	// Helpers for Parser.js handling of Unicode (sub|super)script characters.
	var unicodeSubRegEx = /^[₊₋₌₍₎₀₁₂₃₄₅₆₇₈₉ₐₑₕᵢⱼₖₗₘₙₒₚᵣₛₜᵤᵥₓᵦᵧᵨᵩᵪ]/;
	var uSubsAndSups = Object.freeze({
	  '₊': '+',
	  '₋': '-',
	  '₌': '=',
	  '₍': '(',
	  '₎': ')',
	  '₀': '0',
	  '₁': '1',
	  '₂': '2',
	  '₃': '3',
	  '₄': '4',
	  '₅': '5',
	  '₆': '6',
	  '₇': '7',
	  '₈': '8',
	  '₉': '9',
	  '\u2090': 'a',
	  '\u2091': 'e',
	  '\u2095': 'h',
	  '\u1D62': 'i',
	  '\u2C7C': 'j',
	  '\u2096': 'k',
	  '\u2097': 'l',
	  '\u2098': 'm',
	  '\u2099': 'n',
	  '\u2092': 'o',
	  '\u209A': 'p',
	  '\u1D63': 'r',
	  '\u209B': 's',
	  '\u209C': 't',
	  '\u1D64': 'u',
	  '\u1D65': 'v',
	  '\u2093': 'x',
	  '\u1D66': 'β',
	  '\u1D67': 'γ',
	  '\u1D68': 'ρ',
	  '\u1D69': '\u03d5',
	  '\u1D6A': 'χ',
	  '⁺': '+',
	  '⁻': '-',
	  '⁼': '=',
	  '⁽': '(',
	  '⁾': ')',
	  '⁰': '0',
	  '¹': '1',
	  '²': '2',
	  '³': '3',
	  '⁴': '4',
	  '⁵': '5',
	  '⁶': '6',
	  '⁷': '7',
	  '⁸': '8',
	  '⁹': '9',
	  '\u1D2C': 'A',
	  '\u1D2E': 'B',
	  '\u1D30': 'D',
	  '\u1D31': 'E',
	  '\u1D33': 'G',
	  '\u1D34': 'H',
	  '\u1D35': 'I',
	  '\u1D36': 'J',
	  '\u1D37': 'K',
	  '\u1D38': 'L',
	  '\u1D39': 'M',
	  '\u1D3A': 'N',
	  '\u1D3C': 'O',
	  '\u1D3E': 'P',
	  '\u1D3F': 'R',
	  '\u1D40': 'T',
	  '\u1D41': 'U',
	  '\u2C7D': 'V',
	  '\u1D42': 'W',
	  '\u1D43': 'a',
	  '\u1D47': 'b',
	  '\u1D9C': 'c',
	  '\u1D48': 'd',
	  '\u1D49': 'e',
	  '\u1DA0': 'f',
	  '\u1D4D': 'g',
	  '\u02B0': 'h',
	  '\u2071': 'i',
	  '\u02B2': 'j',
	  '\u1D4F': 'k',
	  '\u02E1': 'l',
	  '\u1D50': 'm',
	  '\u207F': 'n',
	  '\u1D52': 'o',
	  '\u1D56': 'p',
	  '\u02B3': 'r',
	  '\u02E2': 's',
	  '\u1D57': 't',
	  '\u1D58': 'u',
	  '\u1D5B': 'v',
	  '\u02B7': 'w',
	  '\u02E3': 'x',
	  '\u02B8': 'y',
	  '\u1DBB': 'z',
	  '\u1D5D': 'β',
	  '\u1D5E': 'γ',
	  '\u1D5F': 'δ',
	  '\u1D60': '\u03d5',
	  '\u1D61': 'χ',
	  '\u1DBF': 'θ'
	});

	/* eslint no-constant-condition:0 */

	var unicodeAccents = {
	  "́": {
	    "text": "\\'",
	    "math": "\\acute"
	  },
	  "̀": {
	    "text": "\\`",
	    "math": "\\grave"
	  },
	  "̈": {
	    "text": "\\\"",
	    "math": "\\ddot"
	  },
	  "̃": {
	    "text": "\\~",
	    "math": "\\tilde"
	  },
	  "̄": {
	    "text": "\\=",
	    "math": "\\bar"
	  },
	  "̆": {
	    "text": "\\u",
	    "math": "\\breve"
	  },
	  "̌": {
	    "text": "\\v",
	    "math": "\\check"
	  },
	  "̂": {
	    "text": "\\^",
	    "math": "\\hat"
	  },
	  "̇": {
	    "text": "\\.",
	    "math": "\\dot"
	  },
	  "̊": {
	    "text": "\\r",
	    "math": "\\mathring"
	  },
	  "̋": {
	    "text": "\\H"
	  },
	  "̧": {
	    "text": "\\c"
	  }
	};
	var unicodeSymbols = {
	  "á": "á",
	  "à": "à",
	  "ä": "ä",
	  "ǟ": "ǟ",
	  "ã": "ã",
	  "ā": "ā",
	  "ă": "ă",
	  "ắ": "ắ",
	  "ằ": "ằ",
	  "ẵ": "ẵ",
	  "ǎ": "ǎ",
	  "â": "â",
	  "ấ": "ấ",
	  "ầ": "ầ",
	  "ẫ": "ẫ",
	  "ȧ": "ȧ",
	  "ǡ": "ǡ",
	  "å": "å",
	  "ǻ": "ǻ",
	  "ḃ": "ḃ",
	  "ć": "ć",
	  "ḉ": "ḉ",
	  "č": "č",
	  "ĉ": "ĉ",
	  "ċ": "ċ",
	  "ç": "ç",
	  "ď": "ď",
	  "ḋ": "ḋ",
	  "ḑ": "ḑ",
	  "é": "é",
	  "è": "è",
	  "ë": "ë",
	  "ẽ": "ẽ",
	  "ē": "ē",
	  "ḗ": "ḗ",
	  "ḕ": "ḕ",
	  "ĕ": "ĕ",
	  "ḝ": "ḝ",
	  "ě": "ě",
	  "ê": "ê",
	  "ế": "ế",
	  "ề": "ề",
	  "ễ": "ễ",
	  "ė": "ė",
	  "ȩ": "ȩ",
	  "ḟ": "ḟ",
	  "ǵ": "ǵ",
	  "ḡ": "ḡ",
	  "ğ": "ğ",
	  "ǧ": "ǧ",
	  "ĝ": "ĝ",
	  "ġ": "ġ",
	  "ģ": "ģ",
	  "ḧ": "ḧ",
	  "ȟ": "ȟ",
	  "ĥ": "ĥ",
	  "ḣ": "ḣ",
	  "ḩ": "ḩ",
	  "í": "í",
	  "ì": "ì",
	  "ï": "ï",
	  "ḯ": "ḯ",
	  "ĩ": "ĩ",
	  "ī": "ī",
	  "ĭ": "ĭ",
	  "ǐ": "ǐ",
	  "î": "î",
	  "ǰ": "ǰ",
	  "ĵ": "ĵ",
	  "ḱ": "ḱ",
	  "ǩ": "ǩ",
	  "ķ": "ķ",
	  "ĺ": "ĺ",
	  "ľ": "ľ",
	  "ļ": "ļ",
	  "ḿ": "ḿ",
	  "ṁ": "ṁ",
	  "ń": "ń",
	  "ǹ": "ǹ",
	  "ñ": "ñ",
	  "ň": "ň",
	  "ṅ": "ṅ",
	  "ņ": "ņ",
	  "ó": "ó",
	  "ò": "ò",
	  "ö": "ö",
	  "ȫ": "ȫ",
	  "õ": "õ",
	  "ṍ": "ṍ",
	  "ṏ": "ṏ",
	  "ȭ": "ȭ",
	  "ō": "ō",
	  "ṓ": "ṓ",
	  "ṑ": "ṑ",
	  "ŏ": "ŏ",
	  "ǒ": "ǒ",
	  "ô": "ô",
	  "ố": "ố",
	  "ồ": "ồ",
	  "ỗ": "ỗ",
	  "ȯ": "ȯ",
	  "ȱ": "ȱ",
	  "ő": "ő",
	  "ṕ": "ṕ",
	  "ṗ": "ṗ",
	  "ŕ": "ŕ",
	  "ř": "ř",
	  "ṙ": "ṙ",
	  "ŗ": "ŗ",
	  "ś": "ś",
	  "ṥ": "ṥ",
	  "š": "š",
	  "ṧ": "ṧ",
	  "ŝ": "ŝ",
	  "ṡ": "ṡ",
	  "ş": "ş",
	  "ẗ": "ẗ",
	  "ť": "ť",
	  "ṫ": "ṫ",
	  "ţ": "ţ",
	  "ú": "ú",
	  "ù": "ù",
	  "ü": "ü",
	  "ǘ": "ǘ",
	  "ǜ": "ǜ",
	  "ǖ": "ǖ",
	  "ǚ": "ǚ",
	  "ũ": "ũ",
	  "ṹ": "ṹ",
	  "ū": "ū",
	  "ṻ": "ṻ",
	  "ŭ": "ŭ",
	  "ǔ": "ǔ",
	  "û": "û",
	  "ů": "ů",
	  "ű": "ű",
	  "ṽ": "ṽ",
	  "ẃ": "ẃ",
	  "ẁ": "ẁ",
	  "ẅ": "ẅ",
	  "ŵ": "ŵ",
	  "ẇ": "ẇ",
	  "ẘ": "ẘ",
	  "ẍ": "ẍ",
	  "ẋ": "ẋ",
	  "ý": "ý",
	  "ỳ": "ỳ",
	  "ÿ": "ÿ",
	  "ỹ": "ỹ",
	  "ȳ": "ȳ",
	  "ŷ": "ŷ",
	  "ẏ": "ẏ",
	  "ẙ": "ẙ",
	  "ź": "ź",
	  "ž": "ž",
	  "ẑ": "ẑ",
	  "ż": "ż",
	  "Á": "Á",
	  "À": "À",
	  "Ä": "Ä",
	  "Ǟ": "Ǟ",
	  "Ã": "Ã",
	  "Ā": "Ā",
	  "Ă": "Ă",
	  "Ắ": "Ắ",
	  "Ằ": "Ằ",
	  "Ẵ": "Ẵ",
	  "Ǎ": "Ǎ",
	  "Â": "Â",
	  "Ấ": "Ấ",
	  "Ầ": "Ầ",
	  "Ẫ": "Ẫ",
	  "Ȧ": "Ȧ",
	  "Ǡ": "Ǡ",
	  "Å": "Å",
	  "Ǻ": "Ǻ",
	  "Ḃ": "Ḃ",
	  "Ć": "Ć",
	  "Ḉ": "Ḉ",
	  "Č": "Č",
	  "Ĉ": "Ĉ",
	  "Ċ": "Ċ",
	  "Ç": "Ç",
	  "Ď": "Ď",
	  "Ḋ": "Ḋ",
	  "Ḑ": "Ḑ",
	  "É": "É",
	  "È": "È",
	  "Ë": "Ë",
	  "Ẽ": "Ẽ",
	  "Ē": "Ē",
	  "Ḗ": "Ḗ",
	  "Ḕ": "Ḕ",
	  "Ĕ": "Ĕ",
	  "Ḝ": "Ḝ",
	  "Ě": "Ě",
	  "Ê": "Ê",
	  "Ế": "Ế",
	  "Ề": "Ề",
	  "Ễ": "Ễ",
	  "Ė": "Ė",
	  "Ȩ": "Ȩ",
	  "Ḟ": "Ḟ",
	  "Ǵ": "Ǵ",
	  "Ḡ": "Ḡ",
	  "Ğ": "Ğ",
	  "Ǧ": "Ǧ",
	  "Ĝ": "Ĝ",
	  "Ġ": "Ġ",
	  "Ģ": "Ģ",
	  "Ḧ": "Ḧ",
	  "Ȟ": "Ȟ",
	  "Ĥ": "Ĥ",
	  "Ḣ": "Ḣ",
	  "Ḩ": "Ḩ",
	  "Í": "Í",
	  "Ì": "Ì",
	  "Ï": "Ï",
	  "Ḯ": "Ḯ",
	  "Ĩ": "Ĩ",
	  "Ī": "Ī",
	  "Ĭ": "Ĭ",
	  "Ǐ": "Ǐ",
	  "Î": "Î",
	  "İ": "İ",
	  "Ĵ": "Ĵ",
	  "Ḱ": "Ḱ",
	  "Ǩ": "Ǩ",
	  "Ķ": "Ķ",
	  "Ĺ": "Ĺ",
	  "Ľ": "Ľ",
	  "Ļ": "Ļ",
	  "Ḿ": "Ḿ",
	  "Ṁ": "Ṁ",
	  "Ń": "Ń",
	  "Ǹ": "Ǹ",
	  "Ñ": "Ñ",
	  "Ň": "Ň",
	  "Ṅ": "Ṅ",
	  "Ņ": "Ņ",
	  "Ó": "Ó",
	  "Ò": "Ò",
	  "Ö": "Ö",
	  "Ȫ": "Ȫ",
	  "Õ": "Õ",
	  "Ṍ": "Ṍ",
	  "Ṏ": "Ṏ",
	  "Ȭ": "Ȭ",
	  "Ō": "Ō",
	  "Ṓ": "Ṓ",
	  "Ṑ": "Ṑ",
	  "Ŏ": "Ŏ",
	  "Ǒ": "Ǒ",
	  "Ô": "Ô",
	  "Ố": "Ố",
	  "Ồ": "Ồ",
	  "Ỗ": "Ỗ",
	  "Ȯ": "Ȯ",
	  "Ȱ": "Ȱ",
	  "Ő": "Ő",
	  "Ṕ": "Ṕ",
	  "Ṗ": "Ṗ",
	  "Ŕ": "Ŕ",
	  "Ř": "Ř",
	  "Ṙ": "Ṙ",
	  "Ŗ": "Ŗ",
	  "Ś": "Ś",
	  "Ṥ": "Ṥ",
	  "Š": "Š",
	  "Ṧ": "Ṧ",
	  "Ŝ": "Ŝ",
	  "Ṡ": "Ṡ",
	  "Ş": "Ş",
	  "Ť": "Ť",
	  "Ṫ": "Ṫ",
	  "Ţ": "Ţ",
	  "Ú": "Ú",
	  "Ù": "Ù",
	  "Ü": "Ü",
	  "Ǘ": "Ǘ",
	  "Ǜ": "Ǜ",
	  "Ǖ": "Ǖ",
	  "Ǚ": "Ǚ",
	  "Ũ": "Ũ",
	  "Ṹ": "Ṹ",
	  "Ū": "Ū",
	  "Ṻ": "Ṻ",
	  "Ŭ": "Ŭ",
	  "Ǔ": "Ǔ",
	  "Û": "Û",
	  "Ů": "Ů",
	  "Ű": "Ű",
	  "Ṽ": "Ṽ",
	  "Ẃ": "Ẃ",
	  "Ẁ": "Ẁ",
	  "Ẅ": "Ẅ",
	  "Ŵ": "Ŵ",
	  "Ẇ": "Ẇ",
	  "Ẍ": "Ẍ",
	  "Ẋ": "Ẋ",
	  "Ý": "Ý",
	  "Ỳ": "Ỳ",
	  "Ÿ": "Ÿ",
	  "Ỹ": "Ỹ",
	  "Ȳ": "Ȳ",
	  "Ŷ": "Ŷ",
	  "Ẏ": "Ẏ",
	  "Ź": "Ź",
	  "Ž": "Ž",
	  "Ẑ": "Ẑ",
	  "Ż": "Ż",
	  "ά": "ά",
	  "ὰ": "ὰ",
	  "ᾱ": "ᾱ",
	  "ᾰ": "ᾰ",
	  "έ": "έ",
	  "ὲ": "ὲ",
	  "ή": "ή",
	  "ὴ": "ὴ",
	  "ί": "ί",
	  "ὶ": "ὶ",
	  "ϊ": "ϊ",
	  "ΐ": "ΐ",
	  "ῒ": "ῒ",
	  "ῑ": "ῑ",
	  "ῐ": "ῐ",
	  "ό": "ό",
	  "ὸ": "ὸ",
	  "ύ": "ύ",
	  "ὺ": "ὺ",
	  "ϋ": "ϋ",
	  "ΰ": "ΰ",
	  "ῢ": "ῢ",
	  "ῡ": "ῡ",
	  "ῠ": "ῠ",
	  "ώ": "ώ",
	  "ὼ": "ὼ",
	  "Ύ": "Ύ",
	  "Ὺ": "Ὺ",
	  "Ϋ": "Ϋ",
	  "Ῡ": "Ῡ",
	  "Ῠ": "Ῠ",
	  "Ώ": "Ώ",
	  "Ὼ": "Ὼ"
	};

	/**
	 * This file contains the parser used to parse out a TeX expression from the
	 * input. Since TeX isn't context-free, standard parsers don't work particularly
	 * well.
	 *
	 * The strategy of this parser is as such:
	 *
	 * The main functions (the `.parse...` ones) take a position in the current
	 * parse string to parse tokens from. The lexer (found in Lexer.js, stored at
	 * this.gullet.lexer) also supports pulling out tokens at arbitrary places. When
	 * individual tokens are needed at a position, the lexer is called to pull out a
	 * token, which is then used.
	 *
	 * The parser has a property called "mode" indicating the mode that
	 * the parser is currently in. Currently it has to be one of "math" or
	 * "text", which denotes whether the current environment is a math-y
	 * one or a text-y one (e.g. inside \text). Currently, this serves to
	 * limit the functions which can be used in text mode.
	 *
	 * The main functions then return an object which contains the useful data that
	 * was parsed at its given point, and a new position at the end of the parsed
	 * data. The main functions can call each other and continue the parsing by
	 * using the returned position as a new starting point.
	 *
	 * There are also extra `.handle...` functions, which pull out some reused
	 * functionality into self-contained functions.
	 *
	 * The functions return ParseNodes.
	 */
	class Parser {
	  constructor(input, settings) {
	    this.mode = void 0;
	    this.gullet = void 0;
	    this.settings = void 0;
	    this.leftrightDepth = void 0;
	    this.nextToken = void 0;
	    // Start in math mode
	    this.mode = "math"; // Create a new macro expander (gullet) and (indirectly via that) also a
	    // new lexer (mouth) for this parser (stomach, in the language of TeX)

	    this.gullet = new MacroExpander(input, settings, this.mode); // Store the settings for use in parsing

	    this.settings = settings; // Count leftright depth (for \middle errors)

	    this.leftrightDepth = 0;
	  }
	  /**
	   * Checks a result to make sure it has the right type, and throws an
	   * appropriate error otherwise.
	   */


	  expect(text, consume) {
	    if (consume === void 0) {
	      consume = true;
	    }

	    if (this.fetch().text !== text) {
	      throw new ParseError("Expected '" + text + "', got '" + this.fetch().text + "'", this.fetch());
	    }

	    if (consume) {
	      this.consume();
	    }
	  }
	  /**
	   * Discards the current lookahead token, considering it consumed.
	   */


	  consume() {
	    this.nextToken = null;
	  }
	  /**
	   * Return the current lookahead token, or if there isn't one (at the
	   * beginning, or if the previous lookahead token was consume()d),
	   * fetch the next token as the new lookahead token and return it.
	   */


	  fetch() {
	    if (this.nextToken == null) {
	      this.nextToken = this.gullet.expandNextToken();
	    }

	    return this.nextToken;
	  }
	  /**
	   * Switches between "text" and "math" modes.
	   */


	  switchMode(newMode) {
	    this.mode = newMode;
	    this.gullet.switchMode(newMode);
	  }
	  /**
	   * Main parsing function, which parses an entire input.
	   */


	  parse() {
	    if (!this.settings.globalGroup) {
	      // Create a group namespace for the math expression.
	      // (LaTeX creates a new group for every $...$, $$...$$, \[...\].)
	      this.gullet.beginGroup();
	    } // Use old \color behavior (same as LaTeX's \textcolor) if requested.
	    // We do this within the group for the math expression, so it doesn't
	    // pollute settings.macros.


	    if (this.settings.colorIsTextColor) {
	      this.gullet.macros.set("\\color", "\\textcolor");
	    }

	    try {
	      // Try to parse the input
	      var parse = this.parseExpression(false); // If we succeeded, make sure there's an EOF at the end

	      this.expect("EOF"); // End the group namespace for the expression

	      if (!this.settings.globalGroup) {
	        this.gullet.endGroup();
	      }

	      return parse; // Close any leftover groups in case of a parse error.
	    } finally {
	      this.gullet.endGroups();
	    }
	  }
	  /**
	   * Fully parse a separate sequence of tokens as a separate job.
	   * Tokens should be specified in reverse order, as in a MacroDefinition.
	   */


	  subparse(tokens) {
	    // Save the next token from the current job.
	    var oldToken = this.nextToken;
	    this.consume(); // Run the new job, terminating it with an excess '}'

	    this.gullet.pushToken(new Token("}"));
	    this.gullet.pushTokens(tokens);
	    var parse = this.parseExpression(false);
	    this.expect("}"); // Restore the next token from the current job.

	    this.nextToken = oldToken;
	    return parse;
	  }

	  /**
	   * Parses an "expression", which is a list of atoms.
	   *
	   * `breakOnInfix`: Should the parsing stop when we hit infix nodes? This
	   *                 happens when functions have higher precendence han infix
	   *                 nodes in implicit parses.
	   *
	   * `breakOnTokenText`: The text of the token that the expression should end
	   *                     with, or `null` if something else should end the
	   *                     expression.
	   */
	  parseExpression(breakOnInfix, breakOnTokenText) {
	    var body = []; // Keep adding atoms to the body until we can't parse any more atoms (either
	    // we reached the end, a }, or a \right)

	    while (true) {
	      // Ignore spaces in math mode
	      if (this.mode === "math") {
	        this.consumeSpaces();
	      }

	      var lex = this.fetch();

	      if (Parser.endOfExpression.indexOf(lex.text) !== -1) {
	        break;
	      }

	      if (breakOnTokenText && lex.text === breakOnTokenText) {
	        break;
	      }

	      if (breakOnInfix && functions[lex.text] && functions[lex.text].infix) {
	        break;
	      }

	      var atom = this.parseAtom(breakOnTokenText);

	      if (!atom) {
	        break;
	      } else if (atom.type === "internal") {
	        continue;
	      }

	      body.push(atom);
	    }

	    if (this.mode === "text") {
	      this.formLigatures(body);
	    }

	    return this.handleInfixNodes(body);
	  }
	  /**
	   * Rewrites infix operators such as \over with corresponding commands such
	   * as \frac.
	   *
	   * There can only be one infix operator per group.  If there's more than one
	   * then the expression is ambiguous.  This can be resolved by adding {}.
	   */


	  handleInfixNodes(body) {
	    var overIndex = -1;
	    var funcName;

	    for (var i = 0; i < body.length; i++) {
	      if (body[i].type === "infix") {
	        if (overIndex !== -1) {
	          throw new ParseError("only one infix operator per group", body[i].token);
	        }

	        overIndex = i;
	        funcName = body[i].replaceWith;
	      }
	    }

	    if (overIndex !== -1 && funcName) {
	      var numerNode;
	      var denomNode;
	      var numerBody = body.slice(0, overIndex);
	      var denomBody = body.slice(overIndex + 1);

	      if (numerBody.length === 1 && numerBody[0].type === "ordgroup") {
	        numerNode = numerBody[0];
	      } else {
	        numerNode = {
	          type: "ordgroup",
	          mode: this.mode,
	          body: numerBody
	        };
	      }

	      if (denomBody.length === 1 && denomBody[0].type === "ordgroup") {
	        denomNode = denomBody[0];
	      } else {
	        denomNode = {
	          type: "ordgroup",
	          mode: this.mode,
	          body: denomBody
	        };
	      }

	      var node;

	      if (funcName === "\\\\abovefrac") {
	        node = this.callFunction(funcName, [numerNode, body[overIndex], denomNode], []);
	      } else {
	        node = this.callFunction(funcName, [numerNode, denomNode], []);
	      }

	      return [node];
	    } else {
	      return body;
	    }
	  }
	  /**
	   * Handle a subscript or superscript with nice errors.
	   */


	  handleSupSubscript(name // For error reporting.
	  ) {
	    var symbolToken = this.fetch();
	    var symbol = symbolToken.text;
	    this.consume();
	    this.consumeSpaces(); // ignore spaces before sup/subscript argument

	    var group = this.parseGroup(name);

	    if (!group) {
	      throw new ParseError("Expected group after '" + symbol + "'", symbolToken);
	    }

	    return group;
	  }
	  /**
	   * Converts the textual input of an unsupported command into a text node
	   * contained within a color node whose color is determined by errorColor
	   */


	  formatUnsupportedCmd(text) {
	    var textordArray = [];

	    for (var i = 0; i < text.length; i++) {
	      textordArray.push({
	        type: "textord",
	        mode: "text",
	        text: text[i]
	      });
	    }

	    var textNode = {
	      type: "text",
	      mode: this.mode,
	      body: textordArray
	    };
	    var colorNode = {
	      type: "color",
	      mode: this.mode,
	      color: this.settings.errorColor,
	      body: [textNode]
	    };
	    return colorNode;
	  }
	  /**
	   * Parses a group with optional super/subscripts.
	   */


	  parseAtom(breakOnTokenText) {
	    // The body of an atom is an implicit group, so that things like
	    // \left(x\right)^2 work correctly.
	    var base = this.parseGroup("atom", breakOnTokenText); // In text mode, we don't have superscripts or subscripts

	    if (this.mode === "text") {
	      return base;
	    } // Note that base may be empty (i.e. null) at this point.


	    var superscript;
	    var subscript;

	    while (true) {
	      // Guaranteed in math mode, so eat any spaces first.
	      this.consumeSpaces(); // Lex the first token

	      var lex = this.fetch();

	      if (lex.text === "\\limits" || lex.text === "\\nolimits") {
	        // We got a limit control
	        if (base && base.type === "op") {
	          var limits = lex.text === "\\limits";
	          base.limits = limits;
	          base.alwaysHandleSupSub = true;
	        } else if (base && base.type === "operatorname") {
	          if (base.alwaysHandleSupSub) {
	            base.limits = lex.text === "\\limits";
	          }
	        } else {
	          throw new ParseError("Limit controls must follow a math operator", lex);
	        }

	        this.consume();
	      } else if (lex.text === "^") {
	        // We got a superscript start
	        if (superscript) {
	          throw new ParseError("Double superscript", lex);
	        }

	        superscript = this.handleSupSubscript("superscript");
	      } else if (lex.text === "_") {
	        // We got a subscript start
	        if (subscript) {
	          throw new ParseError("Double subscript", lex);
	        }

	        subscript = this.handleSupSubscript("subscript");
	      } else if (lex.text === "'") {
	        // We got a prime
	        if (superscript) {
	          throw new ParseError("Double superscript", lex);
	        }

	        var prime = {
	          type: "textord",
	          mode: this.mode,
	          text: "\\prime"
	        }; // Many primes can be grouped together, so we handle this here

	        var primes = [prime];
	        this.consume(); // Keep lexing tokens until we get something that's not a prime

	        while (this.fetch().text === "'") {
	          // For each one, add another prime to the list
	          primes.push(prime);
	          this.consume();
	        } // If there's a superscript following the primes, combine that
	        // superscript in with the primes.


	        if (this.fetch().text === "^") {
	          primes.push(this.handleSupSubscript("superscript"));
	        } // Put everything into an ordgroup as the superscript


	        superscript = {
	          type: "ordgroup",
	          mode: this.mode,
	          body: primes
	        };
	      } else if (uSubsAndSups[lex.text]) {
	        // A Unicode subscript or superscript character.
	        // We treat these similarly to the unicode-math package.
	        // So we render a string of Unicode (sub|super)scripts the
	        // same as a (sub|super)script of regular characters.
	        var str = uSubsAndSups[lex.text];
	        var isSub = unicodeSubRegEx.test(lex.text);
	        this.consume(); // Continue fetching tokens to fill out the string.

	        while (true) {
	          var token = this.fetch().text;

	          if (!uSubsAndSups[token]) {
	            break;
	          }

	          if (unicodeSubRegEx.test(token) !== isSub) {
	            break;
	          }

	          this.consume();
	          str += uSubsAndSups[token];
	        } // Now create a (sub|super)script.


	        var body = new Parser(str, this.settings).parse();

	        if (isSub) {
	          subscript = {
	            type: "ordgroup",
	            mode: "math",
	            body
	          };
	        } else {
	          superscript = {
	            type: "ordgroup",
	            mode: "math",
	            body
	          };
	        }
	      } else {
	        // If it wasn't ^, _, or ', stop parsing super/subscripts
	        break;
	      }
	    } // Base must be set if superscript or subscript are set per logic above,
	    // but need to check here for type check to pass.


	    if (superscript || subscript) {
	      // If we got either a superscript or subscript, create a supsub
	      return {
	        type: "supsub",
	        mode: this.mode,
	        base: base,
	        sup: superscript,
	        sub: subscript
	      };
	    } else {
	      // Otherwise return the original body
	      return base;
	    }
	  }
	  /**
	   * Parses an entire function, including its base and all of its arguments.
	   */


	  parseFunction(breakOnTokenText, name // For determining its context
	  ) {
	    var token = this.fetch();
	    var func = token.text;
	    var funcData = functions[func];

	    if (!funcData) {
	      return null;
	    }

	    this.consume(); // consume command token

	    if (name && name !== "atom" && !funcData.allowedInArgument) {
	      throw new ParseError("Got function '" + func + "' with no arguments" + (name ? " as " + name : ""), token);
	    } else if (this.mode === "text" && !funcData.allowedInText) {
	      throw new ParseError("Can't use function '" + func + "' in text mode", token);
	    } else if (this.mode === "math" && funcData.allowedInMath === false) {
	      throw new ParseError("Can't use function '" + func + "' in math mode", token);
	    }

	    var {
	      args,
	      optArgs
	    } = this.parseArguments(func, funcData);
	    return this.callFunction(func, args, optArgs, token, breakOnTokenText);
	  }
	  /**
	   * Call a function handler with a suitable context and arguments.
	   */


	  callFunction(name, args, optArgs, token, breakOnTokenText) {
	    var context = {
	      funcName: name,
	      parser: this,
	      token,
	      breakOnTokenText
	    };
	    var func = functions[name];

	    if (func && func.handler) {
	      return func.handler(context, args, optArgs);
	    } else {
	      throw new ParseError("No function handler for " + name);
	    }
	  }
	  /**
	   * Parses the arguments of a function or environment
	   */


	  parseArguments(func, // Should look like "\name" or "\begin{name}".
	  funcData) {
	    var totalArgs = funcData.numArgs + funcData.numOptionalArgs;

	    if (totalArgs === 0) {
	      return {
	        args: [],
	        optArgs: []
	      };
	    }

	    var args = [];
	    var optArgs = [];

	    for (var i = 0; i < totalArgs; i++) {
	      var argType = funcData.argTypes && funcData.argTypes[i];
	      var isOptional = i < funcData.numOptionalArgs;

	      if (funcData.primitive && argType == null || // \sqrt expands into primitive if optional argument doesn't exist
	      funcData.type === "sqrt" && i === 1 && optArgs[0] == null) {
	        argType = "primitive";
	      }

	      var arg = this.parseGroupOfType("argument to '" + func + "'", argType, isOptional);

	      if (isOptional) {
	        optArgs.push(arg);
	      } else if (arg != null) {
	        args.push(arg);
	      } else {
	        // should be unreachable
	        throw new ParseError("Null argument, please report this as a bug");
	      }
	    }

	    return {
	      args,
	      optArgs
	    };
	  }
	  /**
	   * Parses a group when the mode is changing.
	   */


	  parseGroupOfType(name, type, optional) {
	    switch (type) {
	      case "color":
	        return this.parseColorGroup(optional);

	      case "size":
	        return this.parseSizeGroup(optional);

	      case "url":
	        return this.parseUrlGroup(optional);

	      case "math":
	      case "text":
	        return this.parseArgumentGroup(optional, type);

	      case "hbox":
	        {
	          // hbox argument type wraps the argument in the equivalent of
	          // \hbox, which is like \text but switching to \textstyle size.
	          var group = this.parseArgumentGroup(optional, "text");
	          return group != null ? {
	            type: "styling",
	            mode: group.mode,
	            body: [group],
	            style: "text" // simulate \textstyle

	          } : null;
	        }

	      case "raw":
	        {
	          var token = this.parseStringGroup("raw", optional);
	          return token != null ? {
	            type: "raw",
	            mode: "text",
	            string: token.text
	          } : null;
	        }

	      case "primitive":
	        {
	          if (optional) {
	            throw new ParseError("A primitive argument cannot be optional");
	          }

	          var _group = this.parseGroup(name);

	          if (_group == null) {
	            throw new ParseError("Expected group as " + name, this.fetch());
	          }

	          return _group;
	        }

	      case "original":
	      case null:
	      case undefined:
	        return this.parseArgumentGroup(optional);

	      default:
	        throw new ParseError("Unknown group type as " + name, this.fetch());
	    }
	  }
	  /**
	   * Discard any space tokens, fetching the next non-space token.
	   */


	  consumeSpaces() {
	    while (this.fetch().text === " ") {
	      this.consume();
	    }
	  }
	  /**
	   * Parses a group, essentially returning the string formed by the
	   * brace-enclosed tokens plus some position information.
	   */


	  parseStringGroup(modeName, // Used to describe the mode in error messages.
	  optional) {
	    var argToken = this.gullet.scanArgument(optional);

	    if (argToken == null) {
	      return null;
	    }

	    var str = "";
	    var nextToken;

	    while ((nextToken = this.fetch()).text !== "EOF") {
	      str += nextToken.text;
	      this.consume();
	    }

	    this.consume(); // consume the end of the argument

	    argToken.text = str;
	    return argToken;
	  }
	  /**
	   * Parses a regex-delimited group: the largest sequence of tokens
	   * whose concatenated strings match `regex`. Returns the string
	   * formed by the tokens plus some position information.
	   */


	  parseRegexGroup(regex, modeName // Used to describe the mode in error messages.
	  ) {
	    var firstToken = this.fetch();
	    var lastToken = firstToken;
	    var str = "";
	    var nextToken;

	    while ((nextToken = this.fetch()).text !== "EOF" && regex.test(str + nextToken.text)) {
	      lastToken = nextToken;
	      str += lastToken.text;
	      this.consume();
	    }

	    if (str === "") {
	      throw new ParseError("Invalid " + modeName + ": '" + firstToken.text + "'", firstToken);
	    }

	    return firstToken.range(lastToken, str);
	  }
	  /**
	   * Parses a color description.
	   */


	  parseColorGroup(optional) {
	    var res = this.parseStringGroup("color", optional);

	    if (res == null) {
	      return null;
	    }

	    var match = /^(#[a-f0-9]{3}|#?[a-f0-9]{6}|[a-z]+)$/i.exec(res.text);

	    if (!match) {
	      throw new ParseError("Invalid color: '" + res.text + "'", res);
	    }

	    var color = match[0];

	    if (/^[0-9a-f]{6}$/i.test(color)) {
	      // We allow a 6-digit HTML color spec without a leading "#".
	      // This follows the xcolor package's HTML color model.
	      // Predefined color names are all missed by this RegEx pattern.
	      color = "#" + color;
	    }

	    return {
	      type: "color-token",
	      mode: this.mode,
	      color
	    };
	  }
	  /**
	   * Parses a size specification, consisting of magnitude and unit.
	   */


	  parseSizeGroup(optional) {
	    var res;
	    var isBlank = false; // don't expand before parseStringGroup

	    this.gullet.consumeSpaces();

	    if (!optional && this.gullet.future().text !== "{") {
	      res = this.parseRegexGroup(/^[-+]? *(?:$|\d+|\d+\.\d*|\.\d*) *[a-z]{0,2} *$/, "size");
	    } else {
	      res = this.parseStringGroup("size", optional);
	    }

	    if (!res) {
	      return null;
	    }

	    if (!optional && res.text.length === 0) {
	      // Because we've tested for what is !optional, this block won't
	      // affect \kern, \hspace, etc. It will capture the mandatory arguments
	      // to \genfrac and \above.
	      res.text = "0pt"; // Enable \above{}

	      isBlank = true; // This is here specifically for \genfrac
	    }

	    var match = /([-+]?) *(\d+(?:\.\d*)?|\.\d+) *([a-z]{2})/.exec(res.text);

	    if (!match) {
	      throw new ParseError("Invalid size: '" + res.text + "'", res);
	    }

	    var data = {
	      number: +(match[1] + match[2]),
	      // sign + magnitude, cast to number
	      unit: match[3]
	    };

	    if (!validUnit(data)) {
	      throw new ParseError("Invalid unit: '" + data.unit + "'", res);
	    }

	    return {
	      type: "size",
	      mode: this.mode,
	      value: data,
	      isBlank
	    };
	  }
	  /**
	   * Parses an URL, checking escaped letters and allowed protocols,
	   * and setting the catcode of % as an active character (as in \hyperref).
	   */


	  parseUrlGroup(optional) {
	    this.gullet.lexer.setCatcode("%", 13); // active character

	    this.gullet.lexer.setCatcode("~", 12); // other character

	    var res = this.parseStringGroup("url", optional);
	    this.gullet.lexer.setCatcode("%", 14); // comment character

	    this.gullet.lexer.setCatcode("~", 13); // active character

	    if (res == null) {
	      return null;
	    } // hyperref package allows backslashes alone in href, but doesn't
	    // generate valid links in such cases; we interpret this as
	    // "undefined" behaviour, and keep them as-is. Some browser will
	    // replace backslashes with forward slashes.


	    var url = res.text.replace(/\\([#$%&~_^{}])/g, '$1');
	    return {
	      type: "url",
	      mode: this.mode,
	      url
	    };
	  }
	  /**
	   * Parses an argument with the mode specified.
	   */


	  parseArgumentGroup(optional, mode) {
	    var argToken = this.gullet.scanArgument(optional);

	    if (argToken == null) {
	      return null;
	    }

	    var outerMode = this.mode;

	    if (mode) {
	      // Switch to specified mode
	      this.switchMode(mode);
	    }

	    this.gullet.beginGroup();
	    var expression = this.parseExpression(false, "EOF"); // TODO: find an alternative way to denote the end

	    this.expect("EOF"); // expect the end of the argument

	    this.gullet.endGroup();
	    var result = {
	      type: "ordgroup",
	      mode: this.mode,
	      loc: argToken.loc,
	      body: expression
	    };

	    if (mode) {
	      // Switch mode back
	      this.switchMode(outerMode);
	    }

	    return result;
	  }
	  /**
	   * Parses an ordinary group, which is either a single nucleus (like "x")
	   * or an expression in braces (like "{x+y}") or an implicit group, a group
	   * that starts at the current position, and ends right before a higher explicit
	   * group ends, or at EOF.
	   */


	  parseGroup(name, // For error reporting.
	  breakOnTokenText) {
	    var firstToken = this.fetch();
	    var text = firstToken.text;
	    var result; // Try to parse an open brace or \begingroup

	    if (text === "{" || text === "\\begingroup") {
	      this.consume();
	      var groupEnd = text === "{" ? "}" : "\\endgroup";
	      this.gullet.beginGroup(); // If we get a brace, parse an expression

	      var expression = this.parseExpression(false, groupEnd);
	      var lastToken = this.fetch();
	      this.expect(groupEnd); // Check that we got a matching closing brace

	      this.gullet.endGroup();
	      result = {
	        type: "ordgroup",
	        mode: this.mode,
	        loc: SourceLocation.range(firstToken, lastToken),
	        body: expression,
	        // A group formed by \begingroup...\endgroup is a semi-simple group
	        // which doesn't affect spacing in math mode, i.e., is transparent.
	        // https://tex.stackexchange.com/questions/1930/when-should-one-
	        // use-begingroup-instead-of-bgroup
	        semisimple: text === "\\begingroup" || undefined
	      };
	    } else {
	      // If there exists a function with this name, parse the function.
	      // Otherwise, just return a nucleus
	      result = this.parseFunction(breakOnTokenText, name) || this.parseSymbol();

	      if (result == null && text[0] === "\\" && !implicitCommands.hasOwnProperty(text)) {
	        if (this.settings.throwOnError) {
	          throw new ParseError("Undefined control sequence: " + text, firstToken);
	        }

	        result = this.formatUnsupportedCmd(text);
	        this.consume();
	      }
	    }

	    return result;
	  }
	  /**
	   * Form ligature-like combinations of characters for text mode.
	   * This includes inputs like "--", "---", "``" and "''".
	   * The result will simply replace multiple textord nodes with a single
	   * character in each value by a single textord node having multiple
	   * characters in its value.  The representation is still ASCII source.
	   * The group will be modified in place.
	   */


	  formLigatures(group) {
	    var n = group.length - 1;

	    for (var i = 0; i < n; ++i) {
	      var a = group[i]; // $FlowFixMe: Not every node type has a `text` property.

	      var v = a.text;

	      if (v === "-" && group[i + 1].text === "-") {
	        if (i + 1 < n && group[i + 2].text === "-") {
	          group.splice(i, 3, {
	            type: "textord",
	            mode: "text",
	            loc: SourceLocation.range(a, group[i + 2]),
	            text: "---"
	          });
	          n -= 2;
	        } else {
	          group.splice(i, 2, {
	            type: "textord",
	            mode: "text",
	            loc: SourceLocation.range(a, group[i + 1]),
	            text: "--"
	          });
	          n -= 1;
	        }
	      }

	      if ((v === "'" || v === "`") && group[i + 1].text === v) {
	        group.splice(i, 2, {
	          type: "textord",
	          mode: "text",
	          loc: SourceLocation.range(a, group[i + 1]),
	          text: v + v
	        });
	        n -= 1;
	      }
	    }
	  }
	  /**
	   * Parse a single symbol out of the string. Here, we handle single character
	   * symbols and special functions like \verb.
	   */


	  parseSymbol() {
	    var nucleus = this.fetch();
	    var text = nucleus.text;

	    if (/^\\verb[^a-zA-Z]/.test(text)) {
	      this.consume();
	      var arg = text.slice(5);
	      var star = arg.charAt(0) === "*";

	      if (star) {
	        arg = arg.slice(1);
	      } // Lexer's tokenRegex is constructed to always have matching
	      // first/last characters.


	      if (arg.length < 2 || arg.charAt(0) !== arg.slice(-1)) {
	        throw new ParseError("\\verb assertion failed --\n                    please report what input caused this bug");
	      }

	      arg = arg.slice(1, -1); // remove first and last char

	      return {
	        type: "verb",
	        mode: "text",
	        body: arg,
	        star
	      };
	    } // At this point, we should have a symbol, possibly with accents.
	    // First expand any accented base symbol according to unicodeSymbols.


	    if (unicodeSymbols.hasOwnProperty(text[0]) && !symbols[this.mode][text[0]]) {
	      // This behavior is not strict (XeTeX-compatible) in math mode.
	      if (this.settings.strict && this.mode === "math") {
	        this.settings.reportNonstrict("unicodeTextInMathMode", "Accented Unicode text character \"" + text[0] + "\" used in " + "math mode", nucleus);
	      }

	      text = unicodeSymbols[text[0]] + text.substr(1);
	    } // Strip off any combining characters


	    var match = combiningDiacriticalMarksEndRegex.exec(text);

	    if (match) {
	      text = text.substring(0, match.index);

	      if (text === 'i') {
	        text = '\u0131'; // dotless i, in math and text mode
	      } else if (text === 'j') {
	        text = '\u0237'; // dotless j, in math and text mode
	      }
	    } // Recognize base symbol


	    var symbol;

	    if (symbols[this.mode][text]) {
	      if (this.settings.strict && this.mode === 'math' && extraLatin.indexOf(text) >= 0) {
	        this.settings.reportNonstrict("unicodeTextInMathMode", "Latin-1/Unicode text character \"" + text[0] + "\" used in " + "math mode", nucleus);
	      }

	      var group = symbols[this.mode][text].group;
	      var loc = SourceLocation.range(nucleus);
	      var s;

	      if (ATOMS.hasOwnProperty(group)) {
	        // $FlowFixMe
	        var family = group;
	        s = {
	          type: "atom",
	          mode: this.mode,
	          family,
	          loc,
	          text
	        };
	      } else {
	        // $FlowFixMe
	        s = {
	          type: group,
	          mode: this.mode,
	          loc,
	          text
	        };
	      } // $FlowFixMe


	      symbol = s;
	    } else if (text.charCodeAt(0) >= 0x80) {
	      // no symbol for e.g. ^
	      if (this.settings.strict) {
	        if (!supportedCodepoint(text.charCodeAt(0))) {
	          this.settings.reportNonstrict("unknownSymbol", "Unrecognized Unicode character \"" + text[0] + "\"" + (" (" + text.charCodeAt(0) + ")"), nucleus);
	        } else if (this.mode === "math") {
	          this.settings.reportNonstrict("unicodeTextInMathMode", "Unicode text character \"" + text[0] + "\" used in math mode", nucleus);
	        }
	      } // All nonmathematical Unicode characters are rendered as if they
	      // are in text mode (wrapped in \text) because that's what it
	      // takes to render them in LaTeX.  Setting `mode: this.mode` is
	      // another natural choice (the user requested math mode), but
	      // this makes it more difficult for getCharacterMetrics() to
	      // distinguish Unicode characters without metrics and those for
	      // which we want to simulate the letter M.


	      symbol = {
	        type: "textord",
	        mode: "text",
	        loc: SourceLocation.range(nucleus),
	        text
	      };
	    } else {
	      return null; // EOF, ^, _, {, }, etc.
	    }

	    this.consume(); // Transform combining characters into accents

	    if (match) {
	      for (var i = 0; i < match[0].length; i++) {
	        var accent = match[0][i];

	        if (!unicodeAccents[accent]) {
	          throw new ParseError("Unknown accent ' " + accent + "'", nucleus);
	        }

	        var command = unicodeAccents[accent][this.mode] || unicodeAccents[accent].text;

	        if (!command) {
	          throw new ParseError("Accent " + accent + " unsupported in " + this.mode + " mode", nucleus);
	        }

	        symbol = {
	          type: "accent",
	          mode: this.mode,
	          loc: SourceLocation.range(nucleus),
	          label: command,
	          isStretchy: false,
	          isShifty: true,
	          // $FlowFixMe
	          base: symbol
	        };
	      }
	    } // $FlowFixMe


	    return symbol;
	  }

	}
	Parser.endOfExpression = ["}", "\\endgroup", "\\end", "\\right", "&"];

	/**
	 * Provides a single function for parsing an expression using a Parser
	 * TODO(emily): Remove this
	 */

	/**
	 * Parses an expression using a Parser, then returns the parsed result.
	 */
	var parseTree = function parseTree(toParse, settings) {
	  if (!(typeof toParse === 'string' || toParse instanceof String)) {
	    throw new TypeError('KaTeX can only parse string typed expression');
	  }

	  var parser = new Parser(toParse, settings); // Blank out any \df@tag to avoid spurious "Duplicate \tag" errors

	  delete parser.gullet.macros.current["\\df@tag"];
	  var tree = parser.parse(); // Prevent a color definition from persisting between calls to katex.render().

	  delete parser.gullet.macros.current["\\current@color"];
	  delete parser.gullet.macros.current["\\color"]; // If the input used \tag, it will set the \df@tag macro to the tag.
	  // In this case, we separately parse the tag and wrap the tree.

	  if (parser.gullet.macros.get("\\df@tag")) {
	    if (!settings.displayMode) {
	      throw new ParseError("\\tag works only in display equations");
	    }

	    tree = [{
	      type: "tag",
	      mode: "text",
	      body: tree,
	      tag: parser.subparse([new Token("\\df@tag")])
	    }];
	  }

	  return tree;
	};

	/* eslint no-console:0 */

	/**
	 * Parse and build an expression, and place that expression in the DOM node
	 * given.
	 */
	var render$1 = function render(expression, baseNode, options) {
	  baseNode.textContent = "";
	  var node = renderToDomTree(expression, options).toNode();
	  baseNode.appendChild(node);
	}; // KaTeX's styles don't work properly in quirks mode. Print out an error, and
	// disable rendering.


	if (typeof document !== "undefined") {
	  if (document.compatMode !== "CSS1Compat") {
	    typeof console !== "undefined" && console.warn("Warning: KaTeX doesn't work in quirks mode. Make sure your " + "website has a suitable doctype.");

	    render$1 = function render() {
	      throw new ParseError("KaTeX doesn't work in quirks mode.");
	    };
	  }
	}
	/**
	 * Parse and build an expression, and return the markup for that.
	 */


	var renderToString = function renderToString(expression, options) {
	  var markup = renderToDomTree(expression, options).toMarkup();
	  return markup;
	};
	/**
	 * Parse an expression and return the parse tree.
	 */


	var generateParseTree = function generateParseTree(expression, options) {
	  var settings = new Settings(options);
	  return parseTree(expression, settings);
	};
	/**
	 * If the given error is a KaTeX ParseError and options.throwOnError is false,
	 * renders the invalid LaTeX as a span with hover title giving the KaTeX
	 * error message.  Otherwise, simply throws the error.
	 */


	var renderError = function renderError(error, expression, options) {
	  if (options.throwOnError || !(error instanceof ParseError)) {
	    throw error;
	  }

	  var node = buildCommon.makeSpan(["katex-error"], [new SymbolNode(expression)]);
	  node.setAttribute("title", error.toString());
	  node.setAttribute("style", "color:" + options.errorColor);
	  return node;
	};
	/**
	 * Generates and returns the katex build tree. This is used for advanced
	 * use cases (like rendering to custom output).
	 */


	var renderToDomTree = function renderToDomTree(expression, options) {
	  var settings = new Settings(options);

	  try {
	    var tree = parseTree(expression, settings);
	    return buildTree(tree, expression, settings);
	  } catch (error) {
	    return renderError(error, expression, settings);
	  }
	};
	/**
	 * Generates and returns the katex build tree, with just HTML (no MathML).
	 * This is used for advanced use cases (like rendering to custom output).
	 */


	var renderToHTMLTree = function renderToHTMLTree(expression, options) {
	  var settings = new Settings(options);

	  try {
	    var tree = parseTree(expression, settings);
	    return buildHTMLTree(tree, expression, settings);
	  } catch (error) {
	    return renderError(error, expression, settings);
	  }
	};

	var katex = {
	  /**
	   * Current KaTeX version
	   */
	  version: "0.16.0",

	  /**
	   * Renders the given LaTeX into an HTML+MathML combination, and adds
	   * it as a child to the specified DOM node.
	   */
	  render: render$1,

	  /**
	   * Renders the given LaTeX into an HTML+MathML combination string,
	   * for sending to the client.
	   */
	  renderToString,

	  /**
	   * KaTeX error, usually during parsing.
	   */
	  ParseError,

	  /**
	   * The shema of Settings
	   */
	  SETTINGS_SCHEMA,

	  /**
	   * Parses the given LaTeX into KaTeX's internal parse tree structure,
	   * without rendering to HTML or MathML.
	   *
	   * NOTE: This method is not currently recommended for public use.
	   * The internal tree representation is unstable and is very likely
	   * to change. Use at your own risk.
	   */
	  __parse: generateParseTree,

	  /**
	   * Renders the given LaTeX into an HTML+MathML internal DOM tree
	   * representation, without flattening that representation to a string.
	   *
	   * NOTE: This method is not currently recommended for public use.
	   * The internal tree representation is unstable and is very likely
	   * to change. Use at your own risk.
	   */
	  __renderToDomTree: renderToDomTree,

	  /**
	   * Renders the given LaTeX into an HTML internal DOM tree representation,
	   * without MathML and without flattening that representation to a string.
	   *
	   * NOTE: This method is not currently recommended for public use.
	   * The internal tree representation is unstable and is very likely
	   * to change. Use at your own risk.
	   */
	  __renderToHTMLTree: renderToHTMLTree,

	  /**
	   * extends internal font metrics object with a new object
	   * each key in the new object represents a font name
	  */
	  __setFontMetrics: setFontMetrics,

	  /**
	   * adds a new symbol to builtin symbols table
	   */
	  __defineSymbol: defineSymbol,

	  /**
	   * adds a new macro to builtin macro list
	   */
	  __defineMacro: defineMacro,

	  /**
	   * Expose the dom tree node types, which can be useful for type checking nodes.
	   *
	   * NOTE: This method is not currently recommended for public use.
	   * The internal tree representation is unstable and is very likely
	   * to change. Use at your own risk.
	   */
	  __domTree: {
	    Span,
	    Anchor,
	    SymbolNode,
	    SvgNode,
	    PathNode,
	    LineNode
	  }
	};

	// import 'katex/dist/katex.min.css';
	function render(katex, options) {
	    return function (...args) {
	        const root = document.createElement('div');
	        katex.render(String.raw.apply(String, args), root, options);
	        return root.removeChild(root.firstChild);
	    };
	}
	function createTex(katex) {
	    return Object.assign(render(katex), {
	        block: render(katex, { displayMode: true }),
	    });
	}
	const tex = createTex(katex);

	exports.Presentation = Presentation;
	exports.create = create;
	exports.defaultFooter = defaultFooter;
	exports.html = stub$1;
	exports.md = md;
	exports.mdi = mdi;
	exports.navigation = navigation;
	exports.svg = stub;
	exports.tex = tex;

	Object.defineProperty(exports, '__esModule', { value: true });

}));
